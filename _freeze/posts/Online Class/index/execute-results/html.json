{
  "hash": "f87bcd871728b519e4e65ddb223819eb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Online Class\"\nauthor: \"Khushi\"\ncategories: [\"Online Class\"]\n---\n\n\n## Introduction\n\nWe are looking at Geospatial data and how to use it with intent.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tmap)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(osmdata)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nData (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(rnaturalearth)\n```\n:::\n\n\n### Specifying an Area of Interest\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://boundingbox.klokantech.com\n# CSV: 77.574028,12.917262,77.595073,12.939895\nbbox_1 <- matrix(\n  c(77.574028, 12.917262, 77.595073, 12.939895),\n  byrow = FALSE,\n  nrow = 2,\n  ncol = 2,\n  dimnames = list(c('x', 'y'), c('min', 'max'))\n)\nbbox_1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       min      max\nx 77.57403 77.59507\ny 12.91726 12.93989\n```\n\n\n:::\n:::\n\n\nThis specifies a bounding box for an area of interest. The bounding box is represented as a matrix named bbox_1, which stores the minimum and maximum x and y coordinates. The x-values (longitude) range from 77.57403 to 77.59507, and the y-values (latitude) range from 12.91726 to 12.93990. The matrix has two rows and two columns, and the coordinate labels ('x', 'y') are set as the row names, while 'min' and 'max' are set as the column names.\n\n### Using the getbb command from the osmdata package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbbox_2 <- osmdata::getbb(\"Jayanagar, Bangalore, India\")\nbbox_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       min      max\nx 77.58528 77.58929\ny 12.93650 12.94369\n```\n\n\n:::\n:::\n\n\nThis retrieves the bounding box for Jayanagar, Bangalore, India, using the osmdata::getbb function. The resulting bounding box matrix, bbox_2, specifies the minimum and maximum x and y coordinates. The x-values range from 77.58528 to 77.58929, while the y-values range from 12.93650 to 12.94369.\n\n### Output of the bbox_1 matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbbox_1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       min      max\nx 77.57403 77.59507\ny 12.91726 12.93989\n```\n\n\n:::\n:::\n\n\nThis gives the output of the bbox_1 matrix, which specifies a bounding box for an area of interest. The matrix consists of minimum and maximum x and y coordinates. The x-values range from 77.57403 to 77.59507, and the y-values range from 12.91726 to 12.93989.\n\n### Output of the bbox_2 matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbbox_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       min      max\nx 77.58528 77.58929\ny 12.93650 12.94369\n```\n\n\n:::\n:::\n\n\nThe image shows the output of the bbox_2 matrix, which defines a bounding box for a specific area. The matrix contains the minimum and maximum x and y coordinates. The x-values range from 77.58528 to 77.58929, and the y-values range from 12.93650 to 12.94369.\n\n### Available Features\n\n\n::: {.cell}\n\n```{.r .cell-code}\nosmdata::available_features() %>% as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 272 × 1\n   value                  \n   <chr>                  \n 1 4wd_only               \n 2 abandoned              \n 3 abutters               \n 4 access                 \n 5 addr                   \n 6 addr:city              \n 7 addr:conscriptionnumber\n 8 addr:country           \n 9 addr:county            \n10 addr:district          \n# ℹ 262 more rows\n```\n\n\n:::\n:::\n\n\nThe table shows a list of available features in the OpenStreetMap (OSM) dataset, converted into a tibble with 272 rows. The features displayed in the output include elements like \"4wd_only,\" \"abandoned,\" \"abutters,\" \"access,\" and various address-related tags. These represent different categories or attributes that can be used when extracting or analyzing geographical data from OSM, indicating the variety of metadata available for locations.\n\n### Available Tags - Highway\n\n\n::: {.cell}\n\n```{.r .cell-code}\navailable_tags(feature = \"highway\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 56 × 2\n   Key     Value              \n   <chr>   <chr>              \n 1 highway bridleway          \n 2 highway bus_guideway       \n 3 highway bus_stop           \n 4 highway busway             \n 5 highway construction       \n 6 highway corridor           \n 7 highway crossing           \n 8 highway cycleway           \n 9 highway cyclist_waiting_aid\n10 highway elevator           \n# ℹ 46 more rows\n```\n\n\n:::\n:::\n\n\nThe output represents a tibble of available tags for the \"highway\" feature, providing a list of 56 key-value pairs. Each key is labeled as \"highway,\" and the values describe specific highway-related features like \"bridleway,\" \"bus_stop,\" \"busway,\" \"cycleway,\" and \"crossing.\" These tags offer various classifications for highways and related infrastructure, helping to map different types of roads and pathways.\n\n### Available Tags - Amenity\n\n\n::: {.cell}\n\n```{.r .cell-code}\navailable_tags(\"amenity\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 137 × 2\n   Key     Value          \n   <chr>   <chr>          \n 1 amenity animal_boarding\n 2 amenity animal_breeding\n 3 amenity animal_shelter \n 4 amenity animal_training\n 5 amenity arts_centre    \n 6 amenity atm            \n 7 amenity baby_hatch     \n 8 amenity baking_oven    \n 9 amenity bank           \n10 amenity bar            \n# ℹ 127 more rows\n```\n\n\n:::\n:::\n\n\nThe table shows the available tags for the \"amenity\" feature, providing a list of 137 key-value pairs. Each key is labeled as \"amenity,\" and the values describe specific amenity-related features like \"animal_boarding,\" \"animal_shelter,\" \"arts_centre,\" \"atm,\" \"bank,\" and \"bar.\" These tags classify various public or private facilities and services in an area, aiding in mapping and analysis of amenities.\n\n### Available Tags - Natural\n\n\n::: {.cell}\n\n```{.r .cell-code}\navailable_tags(\"natural\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 49 × 2\n   Key     Value        \n   <chr>   <chr>        \n 1 natural arch         \n 2 natural arete        \n 3 natural bare_rock    \n 4 natural bay          \n 5 natural beach        \n 6 natural blockfield   \n 7 natural blowhole     \n 8 natural cape         \n 9 natural cave_entrance\n10 natural cliff        \n# ℹ 39 more rows\n```\n\n\n:::\n:::\n\n\nThe output shows the available tags for the \"natural\" feature, listing 49 key-value pairs. Each key is labeled \"natural,\" and the values represent various natural features such as \"arch,\" \"arete,\" \"bay,\" \"beach,\" \"cliff,\" \"blowhole,\" \"cape,\" and \"cave_entrance.\" These tags are used to categorize different natural elements in a geographic area, aiding in mapping and analyzing natural environments.\n\n### Features within bbox_2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get all restaurants, atms, colleges within my bbox\nlocations <- \n  osmdata::opq(bbox = bbox_2) %>% \n  osmdata::add_osm_feature(key = \"amenity\", \n                           value = c(\"restaurant\", \"atm\", \"college\")) %>% \n  osmdata_sf() %>%  # Convert to Simple Features format\n  purrr::pluck(\"osm_points\") # Pull out the data frame of interest\n\n# Get all buildings within my bbox\ndat_buildings <-\n  osmdata::opq(bbox = bbox_2) %>% \n  osmdata::add_osm_feature(key = \"building\") %>% \n  osmdata_sf() %>% \n  purrr::pluck(\"osm_polygons\") \n\n# Get all residential roads within my bbox\ndat_roads <- \n  osmdata::opq(bbox = bbox_2) %>% \n  osmdata::add_osm_feature(key = \"highway\", \n                           value = c(\"residential\")) %>% \n  osmdata_sf() %>% \n  purrr::pluck(\"osm_lines\") \n\n# Get all parks / natural /greenery areas and spots within my bbox\ndat_natural <-   \n  osmdata::opq(bbox = bbox_2) %>% \n  osmdata::add_osm_feature(key = \"natural\",\n                           value = c(\"tree\", \"water\", \"wood\")) %>% \n  osmdata_sf()\ndat_natural\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nObject of class 'osmdata' with:\n                 $bbox : 12.9364951,77.5852775,12.9436891,77.5892901\n        $overpass_call : The call submitted to the overpass API\n                 $meta : metadata including timestamp and version numbers\n           $osm_points : 'sf' Simple Features Collection with 0 points\n            $osm_lines : NULL\n         $osm_polygons : 'sf' Simple Features Collection with 0 polygons\n       $osm_multilines : NULL\n    $osm_multipolygons : NULL\n```\n\n\n:::\n\n```{.r .cell-code}\ndat_trees <- \n  dat_natural %>% \n  purrr::pluck(\"osm_points\") \n\ndat_greenery <- \n  dat_natural %>% pluck(\"osm_polygons\")\n```\n:::\n\n\nThis code extracts various features from OpenStreetMap (OSM) data within a specified bounding box (bbox_2). The first part of the code retrieves restaurants, ATMs, and colleges using the \"amenity\" tag, converting the result into simple features and extracting points of interest. The second section gathers building data by filtering for the \"building\" tag and extracting polygons. The third part retrieves residential roads using the \"highway\" tag, extracting line data. Lastly, the code fetches parks and natural areas such as trees, water, and wood using the \"natural\" tag, extracting both points (for trees) and polygons (for greenery). The second image provides metadata information from the OSM data, including the bounding box coordinates, the Overpass API call, and the presence of points and polygons with 0 features for the extracted dataset.\n\n### Writing spatial data to GeoPackage files\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_write(dat_roads, dsn = \"roads.gpkg\", \n         append = FALSE, quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting layer `roads' using driver `GPKG'\nWriting layer `roads' to data source `roads.gpkg' using driver `GPKG'\nWriting 39 features with 8 fields and geometry type Line String.\n```\n\n\n:::\n\n```{.r .cell-code}\nst_write(dat_buildings, \n         dsn = \"buildings.gpkg\", \n         append = FALSE, \n         quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting layer `buildings' using driver `GPKG'\nWriting layer `buildings' to data source `buildings.gpkg' using driver `GPKG'\nWriting 551 features with 9 fields and geometry type Polygon.\n```\n\n\n:::\n\n```{.r .cell-code}\nst_write(dat_greenery, dsn = \"greenery.gpkg\", \n         append = FALSE,quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting layer `greenery' using driver `GPKG'\nWriting layer `greenery' to data source `greenery.gpkg' using driver `GPKG'\nWriting 0 features with 1 fields and geometry type Polygon.\n```\n\n\n:::\n\n```{.r .cell-code}\nst_write(dat_trees, dsn = \"trees.gpkg\", \n         append = FALSE,quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting layer `trees' using driver `GPKG'\nWriting layer `trees' to data source `trees.gpkg' using driver `GPKG'\nWriting 0 features with 1 fields and geometry type Point.\n```\n\n\n:::\n:::\n\n\nThe dat_roads object, containing 39 features with 8 fields of Line String geometry, is written to roads.gpkg. The dat_buildings object, with 551 features and 9 fields of Polygon geometry, is written to buildings.gpkg. The dat_greenery and dat_trees objects are also written to GeoPackage files (greenery.gpkg and trees.gpkg), but both contain 0 features with 1 field for Polygon and Point geometries, respectively.\n\n### Reading the buildings.gpkg file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuildings <- st_read(\"./buildings.gpkg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `buildings' from data source \n  `C:\\Srishti\\Year 2\\Data as Material\\R\\posts\\Online Class\\buildings.gpkg' \n  using driver `GPKG'\nSimple feature collection with 551 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 77.58523 ymin: 12.9361 xmax: 77.58935 ymax: 12.94357\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nThe output shows the process of reading the buildings.gpkg file using the st_read function. It reads the layer named 'buildings' from the specified file path, which contains 551 features and 9 fields. The geometry type is POLYGON, and the data uses the XY dimension. The bounding box of the data spans from xmin: 77.58523, ymin: 12.9361 to xmax: 77.58935, ymax: 12.94357. The file uses the WGS 84 geodetic coordinate reference system (CRS).\n\n### Reading the greenery.gpkg file\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreenery <- st_read(\"./greenery.gpkg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `greenery' from data source \n  `C:\\Srishti\\Year 2\\Data as Material\\R\\posts\\Online Class\\greenery.gpkg' \n  using driver `GPKG'\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nThis reads the greenery.gpkg file using the st_read function. It reads the layer named 'greenery' from the specified file path, which contains 0 features and 1 field. The bounding box values (xmin, ymin, xmax, ymax) are all NA, indicating there are no spatial features in this layer.\n\n### Reading the trees.gpkg file\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrees <- st_read(\"./trees.gpkg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `trees' from data source \n  `C:\\Srishti\\Year 2\\Data as Material\\R\\posts\\Online Class\\trees.gpkg' \n  using driver `GPKG'\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nThis code reads the layer named 'trees' from the specified file path, which contains 0 features and 1 field. The bounding box values (xmin, ymin, xmax, ymax) are all NA, indicating no spatial data is present in this layer.\n\n### Reading the roads.gpkg file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroads <- st_read(\"./roads.gpkg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `roads' from data source \n  `C:\\Srishti\\Year 2\\Data as Material\\R\\posts\\Online Class\\roads.gpkg' \n  using driver `GPKG'\nSimple feature collection with 39 features and 8 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 77.58511 ymin: 12.936 xmax: 77.59122 ymax: 12.94625\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nThis demonstrates reading the roads.gpkg file using the st_read function. It accesses the 'roads' layer from the given file path, containing 39 features and 8 attributes. The geometry type for these features is LINESTRING, with data represented in the XY dimension. The bounding box coordinates range from xmin: 77.58511, ymin: 12.936 to xmax: 77.59122, ymax: 12.94625.\n\n### How many buildings?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(buildings)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 551\n```\n\n\n:::\n:::\n\n\nThe code returns the number of rows in the buildings dataset. The dataset contains 551 buildings.\n\n### Geometry Set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuildings$geom\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 551 features \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 77.58523 ymin: 12.9361 xmax: 77.58935 ymax: 12.94357\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOLYGON ((77.58572 12.93973, 77.58536 12.93973,...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOLYGON ((77.58528 12.93943, 77.58563 12.93943,...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOLYGON ((77.58545 12.93994, 77.58533 12.93994,...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOLYGON ((77.58531 12.94194, 77.5853 12.94186, ...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOLYGON ((77.58802 12.93672, 77.58809 12.93674,...\n```\n\n\n:::\n:::\n\n\nThe output displays a geometry set for 551 features, where the geometry type is a polygon with XY dimensions. The bounding box of the data covers a range of coordinates between xmin: 77.58523, ymin: 12.9361 and xmax: 77.58935, ymax: 12.94357, following the WGS 84 coordinate reference system (CRS). The first five geometries are shown as sets of latitude and longitude coordinates that define the polygons representing buildings or structures. These polygons outline the spatial extent of the buildings in the dataset.\n\n### Class of the buildings\\$geom object \n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(buildings$geom)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sfc_POLYGON\" \"sfc\"        \n```\n\n\n:::\n:::\n\n\nThe class of the buildings\\$geom object is sfc_POLYGON and sfc, which indicates that this object contains a collection of simple feature geometries, specifically polygons. These polygons represent the spatial boundaries or shapes of features (such as buildings) in a geographic dataset, with the sfc class standing for simple feature collection.\n\n### My first Map in R\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}