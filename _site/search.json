[
  {
    "objectID": "posts/Online Class/index.html",
    "href": "posts/Online Class/index.html",
    "title": "Online Class",
    "section": "",
    "text": "We are looking at Geospatial data and how to use it with intent.\n\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(sf)\n\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE\n\nlibrary(tmap)\n\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n\nlibrary(osmdata)\n\nData (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\n\nlibrary(rnaturalearth)\n\n\n\n\n# https://boundingbox.klokantech.com\n# CSV: 77.574028,12.917262,77.595073,12.939895\nbbox_1 &lt;- matrix(\n  c(77.574028, 12.917262, 77.595073, 12.939895),\n  byrow = FALSE,\n  nrow = 2,\n  ncol = 2,\n  dimnames = list(c('x', 'y'), c('min', 'max'))\n)\nbbox_1\n\n       min      max\nx 77.57403 77.59507\ny 12.91726 12.93989\n\n\nThis specifies a bounding box for an area of interest. The bounding box is represented as a matrix named bbox_1, which stores the minimum and maximum x and y coordinates. The x-values (longitude) range from 77.57403 to 77.59507, and the y-values (latitude) range from 12.91726 to 12.93990. The matrix has two rows and two columns, and the coordinate labels (‘x’, ‘y’) are set as the row names, while ‘min’ and ‘max’ are set as the column names.\n\n\n\n\nbbox_2 &lt;- osmdata::getbb(\"Jayanagar, Bangalore, India\")\nbbox_2\n\n       min      max\nx 77.58528 77.58929\ny 12.93650 12.94369\n\n\nThis retrieves the bounding box for Jayanagar, Bangalore, India, using the osmdata::getbb function. The resulting bounding box matrix, bbox_2, specifies the minimum and maximum x and y coordinates. The x-values range from 77.58528 to 77.58929, while the y-values range from 12.93650 to 12.94369.\n\n\n\n\nbbox_1\n\n       min      max\nx 77.57403 77.59507\ny 12.91726 12.93989\n\n\nThis gives the output of the bbox_1 matrix, which specifies a bounding box for an area of interest. The matrix consists of minimum and maximum x and y coordinates. The x-values range from 77.57403 to 77.59507, and the y-values range from 12.91726 to 12.93989.\n\n\n\n\nbbox_2\n\n       min      max\nx 77.58528 77.58929\ny 12.93650 12.94369\n\n\nThe image shows the output of the bbox_2 matrix, which defines a bounding box for a specific area. The matrix contains the minimum and maximum x and y coordinates. The x-values range from 77.58528 to 77.58929, and the y-values range from 12.93650 to 12.94369.\n\n\n\n\nosmdata::available_features() %&gt;% as_tibble()\n\n# A tibble: 272 × 1\n   value                  \n   &lt;chr&gt;                  \n 1 4wd_only               \n 2 abandoned              \n 3 abutters               \n 4 access                 \n 5 addr                   \n 6 addr:city              \n 7 addr:conscriptionnumber\n 8 addr:country           \n 9 addr:county            \n10 addr:district          \n# ℹ 262 more rows\n\n\nThe table shows a list of available features in the OpenStreetMap (OSM) dataset, converted into a tibble with 272 rows. The features displayed in the output include elements like “4wd_only,” “abandoned,” “abutters,” “access,” and various address-related tags. These represent different categories or attributes that can be used when extracting or analyzing geographical data from OSM, indicating the variety of metadata available for locations.\n\n\n\n\navailable_tags(feature = \"highway\")\n\n# A tibble: 56 × 2\n   Key     Value              \n   &lt;chr&gt;   &lt;chr&gt;              \n 1 highway bridleway          \n 2 highway bus_guideway       \n 3 highway bus_stop           \n 4 highway busway             \n 5 highway construction       \n 6 highway corridor           \n 7 highway crossing           \n 8 highway cycleway           \n 9 highway cyclist_waiting_aid\n10 highway elevator           \n# ℹ 46 more rows\n\n\nThe output represents a tibble of available tags for the “highway” feature, providing a list of 56 key-value pairs. Each key is labeled as “highway,” and the values describe specific highway-related features like “bridleway,” “bus_stop,” “busway,” “cycleway,” and “crossing.” These tags offer various classifications for highways and related infrastructure, helping to map different types of roads and pathways.\n\n\n\n\navailable_tags(\"amenity\")\n\n# A tibble: 137 × 2\n   Key     Value          \n   &lt;chr&gt;   &lt;chr&gt;          \n 1 amenity animal_boarding\n 2 amenity animal_breeding\n 3 amenity animal_shelter \n 4 amenity animal_training\n 5 amenity arts_centre    \n 6 amenity atm            \n 7 amenity baby_hatch     \n 8 amenity baking_oven    \n 9 amenity bank           \n10 amenity bar            \n# ℹ 127 more rows\n\n\nThe table shows the available tags for the “amenity” feature, providing a list of 137 key-value pairs. Each key is labeled as “amenity,” and the values describe specific amenity-related features like “animal_boarding,” “animal_shelter,” “arts_centre,” “atm,” “bank,” and “bar.” These tags classify various public or private facilities and services in an area, aiding in mapping and analysis of amenities.\n\n\n\n\navailable_tags(\"natural\")\n\n# A tibble: 49 × 2\n   Key     Value        \n   &lt;chr&gt;   &lt;chr&gt;        \n 1 natural arch         \n 2 natural arete        \n 3 natural bare_rock    \n 4 natural bay          \n 5 natural beach        \n 6 natural blockfield   \n 7 natural blowhole     \n 8 natural cape         \n 9 natural cave_entrance\n10 natural cliff        \n# ℹ 39 more rows\n\n\nThe output shows the available tags for the “natural” feature, listing 49 key-value pairs. Each key is labeled “natural,” and the values represent various natural features such as “arch,” “arete,” “bay,” “beach,” “cliff,” “blowhole,” “cape,” and “cave_entrance.” These tags are used to categorize different natural elements in a geographic area, aiding in mapping and analyzing natural environments.\n\n\n\n\n# Get all restaurants, atms, colleges within my bbox\nlocations &lt;- \n  osmdata::opq(bbox = bbox_2) %&gt;% \n  osmdata::add_osm_feature(key = \"amenity\", \n                           value = c(\"restaurant\", \"atm\", \"college\")) %&gt;% \n  osmdata_sf() %&gt;%  # Convert to Simple Features format\n  purrr::pluck(\"osm_points\") # Pull out the data frame of interest\n\n# Get all buildings within my bbox\ndat_buildings &lt;-\n  osmdata::opq(bbox = bbox_2) %&gt;% \n  osmdata::add_osm_feature(key = \"building\") %&gt;% \n  osmdata_sf() %&gt;% \n  purrr::pluck(\"osm_polygons\") \n\n# Get all residential roads within my bbox\ndat_roads &lt;- \n  osmdata::opq(bbox = bbox_2) %&gt;% \n  osmdata::add_osm_feature(key = \"highway\", \n                           value = c(\"residential\")) %&gt;% \n  osmdata_sf() %&gt;% \n  purrr::pluck(\"osm_lines\") \n\n# Get all parks / natural /greenery areas and spots within my bbox\ndat_natural &lt;-   \n  osmdata::opq(bbox = bbox_2) %&gt;% \n  osmdata::add_osm_feature(key = \"natural\",\n                           value = c(\"tree\", \"water\", \"wood\")) %&gt;% \n  osmdata_sf()\ndat_natural\n\nObject of class 'osmdata' with:\n                 $bbox : 12.9364951,77.5852775,12.9436891,77.5892901\n        $overpass_call : The call submitted to the overpass API\n                 $meta : metadata including timestamp and version numbers\n           $osm_points : 'sf' Simple Features Collection with 0 points\n            $osm_lines : NULL\n         $osm_polygons : 'sf' Simple Features Collection with 0 polygons\n       $osm_multilines : NULL\n    $osm_multipolygons : NULL\n\ndat_trees &lt;- \n  dat_natural %&gt;% \n  purrr::pluck(\"osm_points\") \n\ndat_greenery &lt;- \n  dat_natural %&gt;% pluck(\"osm_polygons\")\n\nThis code extracts various features from OpenStreetMap (OSM) data within a specified bounding box (bbox_2). The first part of the code retrieves restaurants, ATMs, and colleges using the “amenity” tag, converting the result into simple features and extracting points of interest. The second section gathers building data by filtering for the “building” tag and extracting polygons. The third part retrieves residential roads using the “highway” tag, extracting line data. Lastly, the code fetches parks and natural areas such as trees, water, and wood using the “natural” tag, extracting both points (for trees) and polygons (for greenery). The second image provides metadata information from the OSM data, including the bounding box coordinates, the Overpass API call, and the presence of points and polygons with 0 features for the extracted dataset.\n\n\n\n\nst_write(dat_roads, dsn = \"roads.gpkg\", \n         append = FALSE, quiet = FALSE)\n\nDeleting layer `roads' using driver `GPKG'\nWriting layer `roads' to data source `roads.gpkg' using driver `GPKG'\nWriting 39 features with 8 fields and geometry type Line String.\n\nst_write(dat_buildings, \n         dsn = \"buildings.gpkg\", \n         append = FALSE, \n         quiet = FALSE)\n\nDeleting layer `buildings' using driver `GPKG'\nWriting layer `buildings' to data source `buildings.gpkg' using driver `GPKG'\nWriting 551 features with 9 fields and geometry type Polygon.\n\nst_write(dat_greenery, dsn = \"greenery.gpkg\", \n         append = FALSE,quiet = FALSE)\n\nDeleting layer `greenery' using driver `GPKG'\nWriting layer `greenery' to data source `greenery.gpkg' using driver `GPKG'\nWriting 0 features with 1 fields and geometry type Polygon.\n\nst_write(dat_trees, dsn = \"trees.gpkg\", \n         append = FALSE,quiet = FALSE)\n\nDeleting layer `trees' using driver `GPKG'\nWriting layer `trees' to data source `trees.gpkg' using driver `GPKG'\nWriting 0 features with 1 fields and geometry type Point.\n\n\nThe dat_roads object, containing 39 features with 8 fields of Line String geometry, is written to roads.gpkg. The dat_buildings object, with 551 features and 9 fields of Polygon geometry, is written to buildings.gpkg. The dat_greenery and dat_trees objects are also written to GeoPackage files (greenery.gpkg and trees.gpkg), but both contain 0 features with 1 field for Polygon and Point geometries, respectively.\n\n\n\n\nbuildings &lt;- st_read(\"./buildings.gpkg\")\n\nReading layer `buildings' from data source \n  `C:\\Srishti\\Year 2\\Data as Material\\R\\posts\\Online Class\\buildings.gpkg' \n  using driver `GPKG'\nSimple feature collection with 551 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 77.58523 ymin: 12.9361 xmax: 77.58935 ymax: 12.94357\nGeodetic CRS:  WGS 84\n\n\nThe output shows the process of reading the buildings.gpkg file using the st_read function. It reads the layer named ‘buildings’ from the specified file path, which contains 551 features and 9 fields. The geometry type is POLYGON, and the data uses the XY dimension. The bounding box of the data spans from xmin: 77.58523, ymin: 12.9361 to xmax: 77.58935, ymax: 12.94357. The file uses the WGS 84 geodetic coordinate reference system (CRS).\n\n\n\n\ngreenery &lt;- st_read(\"./greenery.gpkg\")\n\nReading layer `greenery' from data source \n  `C:\\Srishti\\Year 2\\Data as Material\\R\\posts\\Online Class\\greenery.gpkg' \n  using driver `GPKG'\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n\n\nThis reads the greenery.gpkg file using the st_read function. It reads the layer named ‘greenery’ from the specified file path, which contains 0 features and 1 field. The bounding box values (xmin, ymin, xmax, ymax) are all NA, indicating there are no spatial features in this layer.\n\n\n\n\ntrees &lt;- st_read(\"./trees.gpkg\")\n\nReading layer `trees' from data source \n  `C:\\Srishti\\Year 2\\Data as Material\\R\\posts\\Online Class\\trees.gpkg' \n  using driver `GPKG'\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n\n\nThis code reads the layer named ‘trees’ from the specified file path, which contains 0 features and 1 field. The bounding box values (xmin, ymin, xmax, ymax) are all NA, indicating no spatial data is present in this layer.\n\n\n\n\nroads &lt;- st_read(\"./roads.gpkg\")\n\nReading layer `roads' from data source \n  `C:\\Srishti\\Year 2\\Data as Material\\R\\posts\\Online Class\\roads.gpkg' \n  using driver `GPKG'\nSimple feature collection with 39 features and 8 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 77.58511 ymin: 12.936 xmax: 77.59122 ymax: 12.94625\nGeodetic CRS:  WGS 84\n\n\nThis demonstrates reading the roads.gpkg file using the st_read function. It accesses the ‘roads’ layer from the given file path, containing 39 features and 8 attributes. The geometry type for these features is LINESTRING, with data represented in the XY dimension. The bounding box coordinates range from xmin: 77.58511, ymin: 12.936 to xmax: 77.59122, ymax: 12.94625.\n\n\n\n\nnrow(buildings)\n\n[1] 551\n\n\nThe code returns the number of rows in the buildings dataset. The dataset contains 551 buildings.\n\n\n\n\nbuildings$geom\n\nGeometry set for 551 features \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 77.58523 ymin: 12.9361 xmax: 77.58935 ymax: 12.94357\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOLYGON ((77.58572 12.93973, 77.58536 12.93973,...\n\n\nPOLYGON ((77.58528 12.93943, 77.58563 12.93943,...\n\n\nPOLYGON ((77.58545 12.93994, 77.58533 12.93994,...\n\n\nPOLYGON ((77.58531 12.94194, 77.5853 12.94186, ...\n\n\nPOLYGON ((77.58802 12.93672, 77.58809 12.93674,...\n\n\nThe output displays a geometry set for 551 features, where the geometry type is a polygon with XY dimensions. The bounding box of the data covers a range of coordinates between xmin: 77.58523, ymin: 12.9361 and xmax: 77.58935, ymax: 12.94357, following the WGS 84 coordinate reference system (CRS). The first five geometries are shown as sets of latitude and longitude coordinates that define the polygons representing buildings or structures. These polygons outline the spatial extent of the buildings in the dataset.\n\n\n\n\nclass(buildings$geom)\n\n[1] \"sfc_POLYGON\" \"sfc\"        \n\n\nThe class of the buildings$geom object is sfc_POLYGON and sfc, which indicates that this object contains a collection of simple feature geometries, specifically polygons. These polygons represent the spatial boundaries or shapes of features (such as buildings) in a geographic dataset, with the sfc class standing for simple feature collection."
  },
  {
    "objectID": "posts/Online Class/index.html#introduction",
    "href": "posts/Online Class/index.html#introduction",
    "title": "Online Class",
    "section": "",
    "text": "We are looking at Geospatial data and how to use it with intent.\n\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(sf)\n\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE\n\nlibrary(tmap)\n\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n\nlibrary(osmdata)\n\nData (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\n\nlibrary(rnaturalearth)\n\n\n\n\n# https://boundingbox.klokantech.com\n# CSV: 77.574028,12.917262,77.595073,12.939895\nbbox_1 &lt;- matrix(\n  c(77.574028, 12.917262, 77.595073, 12.939895),\n  byrow = FALSE,\n  nrow = 2,\n  ncol = 2,\n  dimnames = list(c('x', 'y'), c('min', 'max'))\n)\nbbox_1\n\n       min      max\nx 77.57403 77.59507\ny 12.91726 12.93989\n\n\nThis specifies a bounding box for an area of interest. The bounding box is represented as a matrix named bbox_1, which stores the minimum and maximum x and y coordinates. The x-values (longitude) range from 77.57403 to 77.59507, and the y-values (latitude) range from 12.91726 to 12.93990. The matrix has two rows and two columns, and the coordinate labels (‘x’, ‘y’) are set as the row names, while ‘min’ and ‘max’ are set as the column names.\n\n\n\n\nbbox_2 &lt;- osmdata::getbb(\"Jayanagar, Bangalore, India\")\nbbox_2\n\n       min      max\nx 77.58528 77.58929\ny 12.93650 12.94369\n\n\nThis retrieves the bounding box for Jayanagar, Bangalore, India, using the osmdata::getbb function. The resulting bounding box matrix, bbox_2, specifies the minimum and maximum x and y coordinates. The x-values range from 77.58528 to 77.58929, while the y-values range from 12.93650 to 12.94369.\n\n\n\n\nbbox_1\n\n       min      max\nx 77.57403 77.59507\ny 12.91726 12.93989\n\n\nThis gives the output of the bbox_1 matrix, which specifies a bounding box for an area of interest. The matrix consists of minimum and maximum x and y coordinates. The x-values range from 77.57403 to 77.59507, and the y-values range from 12.91726 to 12.93989.\n\n\n\n\nbbox_2\n\n       min      max\nx 77.58528 77.58929\ny 12.93650 12.94369\n\n\nThe image shows the output of the bbox_2 matrix, which defines a bounding box for a specific area. The matrix contains the minimum and maximum x and y coordinates. The x-values range from 77.58528 to 77.58929, and the y-values range from 12.93650 to 12.94369.\n\n\n\n\nosmdata::available_features() %&gt;% as_tibble()\n\n# A tibble: 272 × 1\n   value                  \n   &lt;chr&gt;                  \n 1 4wd_only               \n 2 abandoned              \n 3 abutters               \n 4 access                 \n 5 addr                   \n 6 addr:city              \n 7 addr:conscriptionnumber\n 8 addr:country           \n 9 addr:county            \n10 addr:district          \n# ℹ 262 more rows\n\n\nThe table shows a list of available features in the OpenStreetMap (OSM) dataset, converted into a tibble with 272 rows. The features displayed in the output include elements like “4wd_only,” “abandoned,” “abutters,” “access,” and various address-related tags. These represent different categories or attributes that can be used when extracting or analyzing geographical data from OSM, indicating the variety of metadata available for locations.\n\n\n\n\navailable_tags(feature = \"highway\")\n\n# A tibble: 56 × 2\n   Key     Value              \n   &lt;chr&gt;   &lt;chr&gt;              \n 1 highway bridleway          \n 2 highway bus_guideway       \n 3 highway bus_stop           \n 4 highway busway             \n 5 highway construction       \n 6 highway corridor           \n 7 highway crossing           \n 8 highway cycleway           \n 9 highway cyclist_waiting_aid\n10 highway elevator           \n# ℹ 46 more rows\n\n\nThe output represents a tibble of available tags for the “highway” feature, providing a list of 56 key-value pairs. Each key is labeled as “highway,” and the values describe specific highway-related features like “bridleway,” “bus_stop,” “busway,” “cycleway,” and “crossing.” These tags offer various classifications for highways and related infrastructure, helping to map different types of roads and pathways.\n\n\n\n\navailable_tags(\"amenity\")\n\n# A tibble: 137 × 2\n   Key     Value          \n   &lt;chr&gt;   &lt;chr&gt;          \n 1 amenity animal_boarding\n 2 amenity animal_breeding\n 3 amenity animal_shelter \n 4 amenity animal_training\n 5 amenity arts_centre    \n 6 amenity atm            \n 7 amenity baby_hatch     \n 8 amenity baking_oven    \n 9 amenity bank           \n10 amenity bar            \n# ℹ 127 more rows\n\n\nThe table shows the available tags for the “amenity” feature, providing a list of 137 key-value pairs. Each key is labeled as “amenity,” and the values describe specific amenity-related features like “animal_boarding,” “animal_shelter,” “arts_centre,” “atm,” “bank,” and “bar.” These tags classify various public or private facilities and services in an area, aiding in mapping and analysis of amenities.\n\n\n\n\navailable_tags(\"natural\")\n\n# A tibble: 49 × 2\n   Key     Value        \n   &lt;chr&gt;   &lt;chr&gt;        \n 1 natural arch         \n 2 natural arete        \n 3 natural bare_rock    \n 4 natural bay          \n 5 natural beach        \n 6 natural blockfield   \n 7 natural blowhole     \n 8 natural cape         \n 9 natural cave_entrance\n10 natural cliff        \n# ℹ 39 more rows\n\n\nThe output shows the available tags for the “natural” feature, listing 49 key-value pairs. Each key is labeled “natural,” and the values represent various natural features such as “arch,” “arete,” “bay,” “beach,” “cliff,” “blowhole,” “cape,” and “cave_entrance.” These tags are used to categorize different natural elements in a geographic area, aiding in mapping and analyzing natural environments.\n\n\n\n\n# Get all restaurants, atms, colleges within my bbox\nlocations &lt;- \n  osmdata::opq(bbox = bbox_2) %&gt;% \n  osmdata::add_osm_feature(key = \"amenity\", \n                           value = c(\"restaurant\", \"atm\", \"college\")) %&gt;% \n  osmdata_sf() %&gt;%  # Convert to Simple Features format\n  purrr::pluck(\"osm_points\") # Pull out the data frame of interest\n\n# Get all buildings within my bbox\ndat_buildings &lt;-\n  osmdata::opq(bbox = bbox_2) %&gt;% \n  osmdata::add_osm_feature(key = \"building\") %&gt;% \n  osmdata_sf() %&gt;% \n  purrr::pluck(\"osm_polygons\") \n\n# Get all residential roads within my bbox\ndat_roads &lt;- \n  osmdata::opq(bbox = bbox_2) %&gt;% \n  osmdata::add_osm_feature(key = \"highway\", \n                           value = c(\"residential\")) %&gt;% \n  osmdata_sf() %&gt;% \n  purrr::pluck(\"osm_lines\") \n\n# Get all parks / natural /greenery areas and spots within my bbox\ndat_natural &lt;-   \n  osmdata::opq(bbox = bbox_2) %&gt;% \n  osmdata::add_osm_feature(key = \"natural\",\n                           value = c(\"tree\", \"water\", \"wood\")) %&gt;% \n  osmdata_sf()\ndat_natural\n\nObject of class 'osmdata' with:\n                 $bbox : 12.9364951,77.5852775,12.9436891,77.5892901\n        $overpass_call : The call submitted to the overpass API\n                 $meta : metadata including timestamp and version numbers\n           $osm_points : 'sf' Simple Features Collection with 0 points\n            $osm_lines : NULL\n         $osm_polygons : 'sf' Simple Features Collection with 0 polygons\n       $osm_multilines : NULL\n    $osm_multipolygons : NULL\n\ndat_trees &lt;- \n  dat_natural %&gt;% \n  purrr::pluck(\"osm_points\") \n\ndat_greenery &lt;- \n  dat_natural %&gt;% pluck(\"osm_polygons\")\n\nThis code extracts various features from OpenStreetMap (OSM) data within a specified bounding box (bbox_2). The first part of the code retrieves restaurants, ATMs, and colleges using the “amenity” tag, converting the result into simple features and extracting points of interest. The second section gathers building data by filtering for the “building” tag and extracting polygons. The third part retrieves residential roads using the “highway” tag, extracting line data. Lastly, the code fetches parks and natural areas such as trees, water, and wood using the “natural” tag, extracting both points (for trees) and polygons (for greenery). The second image provides metadata information from the OSM data, including the bounding box coordinates, the Overpass API call, and the presence of points and polygons with 0 features for the extracted dataset.\n\n\n\n\nst_write(dat_roads, dsn = \"roads.gpkg\", \n         append = FALSE, quiet = FALSE)\n\nDeleting layer `roads' using driver `GPKG'\nWriting layer `roads' to data source `roads.gpkg' using driver `GPKG'\nWriting 39 features with 8 fields and geometry type Line String.\n\nst_write(dat_buildings, \n         dsn = \"buildings.gpkg\", \n         append = FALSE, \n         quiet = FALSE)\n\nDeleting layer `buildings' using driver `GPKG'\nWriting layer `buildings' to data source `buildings.gpkg' using driver `GPKG'\nWriting 551 features with 9 fields and geometry type Polygon.\n\nst_write(dat_greenery, dsn = \"greenery.gpkg\", \n         append = FALSE,quiet = FALSE)\n\nDeleting layer `greenery' using driver `GPKG'\nWriting layer `greenery' to data source `greenery.gpkg' using driver `GPKG'\nWriting 0 features with 1 fields and geometry type Polygon.\n\nst_write(dat_trees, dsn = \"trees.gpkg\", \n         append = FALSE,quiet = FALSE)\n\nDeleting layer `trees' using driver `GPKG'\nWriting layer `trees' to data source `trees.gpkg' using driver `GPKG'\nWriting 0 features with 1 fields and geometry type Point.\n\n\nThe dat_roads object, containing 39 features with 8 fields of Line String geometry, is written to roads.gpkg. The dat_buildings object, with 551 features and 9 fields of Polygon geometry, is written to buildings.gpkg. The dat_greenery and dat_trees objects are also written to GeoPackage files (greenery.gpkg and trees.gpkg), but both contain 0 features with 1 field for Polygon and Point geometries, respectively.\n\n\n\n\nbuildings &lt;- st_read(\"./buildings.gpkg\")\n\nReading layer `buildings' from data source \n  `C:\\Srishti\\Year 2\\Data as Material\\R\\posts\\Online Class\\buildings.gpkg' \n  using driver `GPKG'\nSimple feature collection with 551 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 77.58523 ymin: 12.9361 xmax: 77.58935 ymax: 12.94357\nGeodetic CRS:  WGS 84\n\n\nThe output shows the process of reading the buildings.gpkg file using the st_read function. It reads the layer named ‘buildings’ from the specified file path, which contains 551 features and 9 fields. The geometry type is POLYGON, and the data uses the XY dimension. The bounding box of the data spans from xmin: 77.58523, ymin: 12.9361 to xmax: 77.58935, ymax: 12.94357. The file uses the WGS 84 geodetic coordinate reference system (CRS).\n\n\n\n\ngreenery &lt;- st_read(\"./greenery.gpkg\")\n\nReading layer `greenery' from data source \n  `C:\\Srishti\\Year 2\\Data as Material\\R\\posts\\Online Class\\greenery.gpkg' \n  using driver `GPKG'\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n\n\nThis reads the greenery.gpkg file using the st_read function. It reads the layer named ‘greenery’ from the specified file path, which contains 0 features and 1 field. The bounding box values (xmin, ymin, xmax, ymax) are all NA, indicating there are no spatial features in this layer.\n\n\n\n\ntrees &lt;- st_read(\"./trees.gpkg\")\n\nReading layer `trees' from data source \n  `C:\\Srishti\\Year 2\\Data as Material\\R\\posts\\Online Class\\trees.gpkg' \n  using driver `GPKG'\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n\n\nThis code reads the layer named ‘trees’ from the specified file path, which contains 0 features and 1 field. The bounding box values (xmin, ymin, xmax, ymax) are all NA, indicating no spatial data is present in this layer.\n\n\n\n\nroads &lt;- st_read(\"./roads.gpkg\")\n\nReading layer `roads' from data source \n  `C:\\Srishti\\Year 2\\Data as Material\\R\\posts\\Online Class\\roads.gpkg' \n  using driver `GPKG'\nSimple feature collection with 39 features and 8 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 77.58511 ymin: 12.936 xmax: 77.59122 ymax: 12.94625\nGeodetic CRS:  WGS 84\n\n\nThis demonstrates reading the roads.gpkg file using the st_read function. It accesses the ‘roads’ layer from the given file path, containing 39 features and 8 attributes. The geometry type for these features is LINESTRING, with data represented in the XY dimension. The bounding box coordinates range from xmin: 77.58511, ymin: 12.936 to xmax: 77.59122, ymax: 12.94625.\n\n\n\n\nnrow(buildings)\n\n[1] 551\n\n\nThe code returns the number of rows in the buildings dataset. The dataset contains 551 buildings.\n\n\n\n\nbuildings$geom\n\nGeometry set for 551 features \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 77.58523 ymin: 12.9361 xmax: 77.58935 ymax: 12.94357\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOLYGON ((77.58572 12.93973, 77.58536 12.93973,...\n\n\nPOLYGON ((77.58528 12.93943, 77.58563 12.93943,...\n\n\nPOLYGON ((77.58545 12.93994, 77.58533 12.93994,...\n\n\nPOLYGON ((77.58531 12.94194, 77.5853 12.94186, ...\n\n\nPOLYGON ((77.58802 12.93672, 77.58809 12.93674,...\n\n\nThe output displays a geometry set for 551 features, where the geometry type is a polygon with XY dimensions. The bounding box of the data covers a range of coordinates between xmin: 77.58523, ymin: 12.9361 and xmax: 77.58935, ymax: 12.94357, following the WGS 84 coordinate reference system (CRS). The first five geometries are shown as sets of latitude and longitude coordinates that define the polygons representing buildings or structures. These polygons outline the spatial extent of the buildings in the dataset.\n\n\n\n\nclass(buildings$geom)\n\n[1] \"sfc_POLYGON\" \"sfc\"        \n\n\nThe class of the buildings$geom object is sfc_POLYGON and sfc, which indicates that this object contains a collection of simple feature geometries, specifically polygons. These polygons represent the spatial boundaries or shapes of features (such as buildings) in a geographic dataset, with the sfc class standing for simple feature collection."
  },
  {
    "objectID": "posts/Day 6/index.html",
    "href": "posts/Day 6/index.html",
    "title": "Day 6",
    "section": "",
    "text": "We are looking at Samples, Populations, Statistics and Inference today.\n\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic) \n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr) \n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)\n\n\nlibrary(NHANES)\nlibrary(infer)\n\n\nAttaching package: 'infer'\n\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\n\n\n\n\nknitr::opts_chunk$set(\n  fig.width = 7,\n## Sets the default width of figures to 7 inches.\n  fig.asp = 0.618, \n## Sets the aspect ratio of the figure to approximately the golden ratio.\n  fig.align = \"center\"\n## Centers the alignment of the figure output.\n)\ntheme_custom &lt;- function() {\n## defines a custom theme for ggplot2 plots, using the font \"Roboto Condensed\" and modifying certain visual elements like the plot title, subtitles, captions, axis titles, and text.\n  font &lt;- \"Roboto Condensed\" \n  theme_classic(base_size = 14) %+replace% ## used to replace elements from the base theme with custom settings.\n    theme(\n      panel.grid.minor = element_blank(), \n      text = element_text(family = font),\n      plot.title = element_text( \n        family = font, \n        face = \"bold\", \n        hjust = 0, \n        margin = margin(0, 0, 10, 0)\n      ),\n      plot.subtitle = element_text( \n        family = font,                \n        hjust = 0,\n        margin = margin(2, 0, 5, 0)\n      ),\n      plot.caption = element_text( \n        family = font, \n        size = 8, \n        hjust = 1\n      ), \n\n      axis.title = element_text( \n        family = font,\n        size = 10\n      ),\n      axis.text = element_text(\n        family = font, \n        size = 8\n      ) \n    )\n}\n\n\ntheme_set(new = theme_custom())\n\n\n\n\n\ndata(\"NHANES\")\nNHANES\n\n# A tibble: 10,000 × 76\n      ID SurveyYr Gender   Age AgeDecade AgeMonths Race1 Race3 Education   \n   &lt;int&gt; &lt;fct&gt;    &lt;fct&gt;  &lt;int&gt; &lt;fct&gt;         &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;       \n 1 51624 2009_10  male      34 \" 30-39\"        409 White &lt;NA&gt;  High School \n 2 51624 2009_10  male      34 \" 30-39\"        409 White &lt;NA&gt;  High School \n 3 51624 2009_10  male      34 \" 30-39\"        409 White &lt;NA&gt;  High School \n 4 51625 2009_10  male       4 \" 0-9\"           49 Other &lt;NA&gt;  &lt;NA&gt;        \n 5 51630 2009_10  female    49 \" 40-49\"        596 White &lt;NA&gt;  Some College\n 6 51638 2009_10  male       9 \" 0-9\"          115 White &lt;NA&gt;  &lt;NA&gt;        \n 7 51646 2009_10  male       8 \" 0-9\"          101 White &lt;NA&gt;  &lt;NA&gt;        \n 8 51647 2009_10  female    45 \" 40-49\"        541 White &lt;NA&gt;  College Grad\n 9 51647 2009_10  female    45 \" 40-49\"        541 White &lt;NA&gt;  College Grad\n10 51647 2009_10  female    45 \" 40-49\"        541 White &lt;NA&gt;  College Grad\n# ℹ 9,990 more rows\n# ℹ 67 more variables: MaritalStatus &lt;fct&gt;, HHIncome &lt;fct&gt;, HHIncomeMid &lt;int&gt;,\n#   Poverty &lt;dbl&gt;, HomeRooms &lt;int&gt;, HomeOwn &lt;fct&gt;, Work &lt;fct&gt;, Weight &lt;dbl&gt;,\n#   Length &lt;dbl&gt;, HeadCirc &lt;dbl&gt;, Height &lt;dbl&gt;, BMI &lt;dbl&gt;,\n#   BMICatUnder20yrs &lt;fct&gt;, BMI_WHO &lt;fct&gt;, Pulse &lt;int&gt;, BPSysAve &lt;int&gt;,\n#   BPDiaAve &lt;int&gt;, BPSys1 &lt;int&gt;, BPDia1 &lt;int&gt;, BPSys2 &lt;int&gt;, BPDia2 &lt;int&gt;,\n#   BPSys3 &lt;int&gt;, BPDia3 &lt;int&gt;, Testosterone &lt;dbl&gt;, DirectChol &lt;dbl&gt;, …\n\n\nThe dataset is from the NHANES (National Health and Nutrition Examination Survey) and consists of 10,000 rows with 76 columns. The table shows variables such as the participant’s ID, survey year (SurveyYr), gender, age, age grouped by decades (AgeDecade), age in months (AgeMonths), and race (Race1 and Race3).The dataset also includes some missing values in the Race3 column, represented by “NA”.\n\n\n\n\nglimpse(NHANES)\n\nRows: 10,000\nColumns: 76\n$ ID               &lt;int&gt; 51624, 51624, 51624, 51625, 51630, 51638, 51646, 5164…\n$ SurveyYr         &lt;fct&gt; 2009_10, 2009_10, 2009_10, 2009_10, 2009_10, 2009_10,…\n$ Gender           &lt;fct&gt; male, male, male, male, female, male, male, female, f…\n$ Age              &lt;int&gt; 34, 34, 34, 4, 49, 9, 8, 45, 45, 45, 66, 58, 54, 10, …\n$ AgeDecade        &lt;fct&gt;  30-39,  30-39,  30-39,  0-9,  40-49,  0-9,  0-9,  40…\n$ AgeMonths        &lt;int&gt; 409, 409, 409, 49, 596, 115, 101, 541, 541, 541, 795,…\n$ Race1            &lt;fct&gt; White, White, White, Other, White, White, White, Whit…\n$ Race3            &lt;fct&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Education        &lt;fct&gt; High School, High School, High School, NA, Some Colle…\n$ MaritalStatus    &lt;fct&gt; Married, Married, Married, NA, LivePartner, NA, NA, M…\n$ HHIncome         &lt;fct&gt; 25000-34999, 25000-34999, 25000-34999, 20000-24999, 3…\n$ HHIncomeMid      &lt;int&gt; 30000, 30000, 30000, 22500, 40000, 87500, 60000, 8750…\n$ Poverty          &lt;dbl&gt; 1.36, 1.36, 1.36, 1.07, 1.91, 1.84, 2.33, 5.00, 5.00,…\n$ HomeRooms        &lt;int&gt; 6, 6, 6, 9, 5, 6, 7, 6, 6, 6, 5, 10, 6, 10, 10, 4, 3,…\n$ HomeOwn          &lt;fct&gt; Own, Own, Own, Own, Rent, Rent, Own, Own, Own, Own, O…\n$ Work             &lt;fct&gt; NotWorking, NotWorking, NotWorking, NA, NotWorking, N…\n$ Weight           &lt;dbl&gt; 87.4, 87.4, 87.4, 17.0, 86.7, 29.8, 35.2, 75.7, 75.7,…\n$ Length           &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ HeadCirc         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Height           &lt;dbl&gt; 164.7, 164.7, 164.7, 105.4, 168.4, 133.1, 130.6, 166.…\n$ BMI              &lt;dbl&gt; 32.22, 32.22, 32.22, 15.30, 30.57, 16.82, 20.64, 27.2…\n$ BMICatUnder20yrs &lt;fct&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ BMI_WHO          &lt;fct&gt; 30.0_plus, 30.0_plus, 30.0_plus, 12.0_18.5, 30.0_plus…\n$ Pulse            &lt;int&gt; 70, 70, 70, NA, 86, 82, 72, 62, 62, 62, 60, 62, 76, 8…\n$ BPSysAve         &lt;int&gt; 113, 113, 113, NA, 112, 86, 107, 118, 118, 118, 111, …\n$ BPDiaAve         &lt;int&gt; 85, 85, 85, NA, 75, 47, 37, 64, 64, 64, 63, 74, 85, 6…\n$ BPSys1           &lt;int&gt; 114, 114, 114, NA, 118, 84, 114, 106, 106, 106, 124, …\n$ BPDia1           &lt;int&gt; 88, 88, 88, NA, 82, 50, 46, 62, 62, 62, 64, 76, 86, 6…\n$ BPSys2           &lt;int&gt; 114, 114, 114, NA, 108, 84, 108, 118, 118, 118, 108, …\n$ BPDia2           &lt;int&gt; 88, 88, 88, NA, 74, 50, 36, 68, 68, 68, 62, 72, 88, 6…\n$ BPSys3           &lt;int&gt; 112, 112, 112, NA, 116, 88, 106, 118, 118, 118, 114, …\n$ BPDia3           &lt;int&gt; 82, 82, 82, NA, 76, 44, 38, 60, 60, 60, 64, 76, 82, 7…\n$ Testosterone     &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ DirectChol       &lt;dbl&gt; 1.29, 1.29, 1.29, NA, 1.16, 1.34, 1.55, 2.12, 2.12, 2…\n$ TotChol          &lt;dbl&gt; 3.49, 3.49, 3.49, NA, 6.70, 4.86, 4.09, 5.82, 5.82, 5…\n$ UrineVol1        &lt;int&gt; 352, 352, 352, NA, 77, 123, 238, 106, 106, 106, 113, …\n$ UrineFlow1       &lt;dbl&gt; NA, NA, NA, NA, 0.094, 1.538, 1.322, 1.116, 1.116, 1.…\n$ UrineVol2        &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ UrineFlow2       &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Diabetes         &lt;fct&gt; No, No, No, No, No, No, No, No, No, No, No, No, No, N…\n$ DiabetesAge      &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ HealthGen        &lt;fct&gt; Good, Good, Good, NA, Good, NA, NA, Vgood, Vgood, Vgo…\n$ DaysPhysHlthBad  &lt;int&gt; 0, 0, 0, NA, 0, NA, NA, 0, 0, 0, 10, 0, 4, NA, NA, 0,…\n$ DaysMentHlthBad  &lt;int&gt; 15, 15, 15, NA, 10, NA, NA, 3, 3, 3, 0, 0, 0, NA, NA,…\n$ LittleInterest   &lt;fct&gt; Most, Most, Most, NA, Several, NA, NA, None, None, No…\n$ Depressed        &lt;fct&gt; Several, Several, Several, NA, Several, NA, NA, None,…\n$ nPregnancies     &lt;int&gt; NA, NA, NA, NA, 2, NA, NA, 1, 1, 1, NA, NA, NA, NA, N…\n$ nBabies          &lt;int&gt; NA, NA, NA, NA, 2, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ Age1stBaby       &lt;int&gt; NA, NA, NA, NA, 27, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ SleepHrsNight    &lt;int&gt; 4, 4, 4, NA, 8, NA, NA, 8, 8, 8, 7, 5, 4, NA, 5, 7, N…\n$ SleepTrouble     &lt;fct&gt; Yes, Yes, Yes, NA, Yes, NA, NA, No, No, No, No, No, Y…\n$ PhysActive       &lt;fct&gt; No, No, No, NA, No, NA, NA, Yes, Yes, Yes, Yes, Yes, …\n$ PhysActiveDays   &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, 5, 5, 5, 7, 5, 1, NA, 2, …\n$ TVHrsDay         &lt;fct&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ CompHrsDay       &lt;fct&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ TVHrsDayChild    &lt;int&gt; NA, NA, NA, 4, NA, 5, 1, NA, NA, NA, NA, NA, NA, 4, N…\n$ CompHrsDayChild  &lt;int&gt; NA, NA, NA, 1, NA, 0, 6, NA, NA, NA, NA, NA, NA, 3, N…\n$ Alcohol12PlusYr  &lt;fct&gt; Yes, Yes, Yes, NA, Yes, NA, NA, Yes, Yes, Yes, Yes, Y…\n$ AlcoholDay       &lt;int&gt; NA, NA, NA, NA, 2, NA, NA, 3, 3, 3, 1, 2, 6, NA, NA, …\n$ AlcoholYear      &lt;int&gt; 0, 0, 0, NA, 20, NA, NA, 52, 52, 52, 100, 104, 364, N…\n$ SmokeNow         &lt;fct&gt; No, No, No, NA, Yes, NA, NA, NA, NA, NA, No, NA, NA, …\n$ Smoke100         &lt;fct&gt; Yes, Yes, Yes, NA, Yes, NA, NA, No, No, No, Yes, No, …\n$ Smoke100n        &lt;fct&gt; Smoker, Smoker, Smoker, NA, Smoker, NA, NA, Non-Smoke…\n$ SmokeAge         &lt;int&gt; 18, 18, 18, NA, 38, NA, NA, NA, NA, NA, 13, NA, NA, N…\n$ Marijuana        &lt;fct&gt; Yes, Yes, Yes, NA, Yes, NA, NA, Yes, Yes, Yes, NA, Ye…\n$ AgeFirstMarij    &lt;int&gt; 17, 17, 17, NA, 18, NA, NA, 13, 13, 13, NA, 19, 15, N…\n$ RegularMarij     &lt;fct&gt; No, No, No, NA, No, NA, NA, No, No, No, NA, Yes, Yes,…\n$ AgeRegMarij      &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 20, 15, N…\n$ HardDrugs        &lt;fct&gt; Yes, Yes, Yes, NA, Yes, NA, NA, No, No, No, No, Yes, …\n$ SexEver          &lt;fct&gt; Yes, Yes, Yes, NA, Yes, NA, NA, Yes, Yes, Yes, Yes, Y…\n$ SexAge           &lt;int&gt; 16, 16, 16, NA, 12, NA, NA, 13, 13, 13, 17, 22, 12, N…\n$ SexNumPartnLife  &lt;int&gt; 8, 8, 8, NA, 10, NA, NA, 20, 20, 20, 15, 7, 100, NA, …\n$ SexNumPartYear   &lt;int&gt; 1, 1, 1, NA, 1, NA, NA, 0, 0, 0, NA, 1, 1, NA, NA, 1,…\n$ SameSex          &lt;fct&gt; No, No, No, NA, Yes, NA, NA, Yes, Yes, Yes, No, No, N…\n$ SexOrientation   &lt;fct&gt; Heterosexual, Heterosexual, Heterosexual, NA, Heteros…\n$ PregnantNow      &lt;fct&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n\n\nThe glimpse of the data reveals a variety of demographic, health, and lifestyle-related fields:\n\nDemographics: The dataset includes fields like ID, Survey Year, Gender, Age, Age in Decades, and Race.\nSocioeconomic Information: It includes educational background, marital status, household income (HHIncome), and poverty index.\nHealth Measurements: Variables such as height, weight, BMI, blood pressure (systolic and diastolic values), and cholesterol levels are captured.\nHealth Conditions and Behaviors: Information on physical activity, smoking habits, alcohol consumption, and drug use are present, along with metrics like diabetes status, sleep patterns, and general health perception.\nLifestyle Factors: The dataset covers employment status, home ownership, and family size.\nAdditional Variables: More detailed information is available on reproductive health, mental health, and sexual behavior.\n\nThe dataset contains missing values (denoted as “NA”) in several columns, indicating that not all participants answered or were measured for every variable.\n\n\n\n\nNHANES_adult &lt;-\n  NHANES %&gt;%\n  distinct(ID, .keep_all = TRUE) %&gt;%\n  filter(Age &gt;= 18) %&gt;%\n  select(Height) %&gt;%\n  drop_na(Height)\nNHANES_adult\n\n# A tibble: 4,790 × 1\n   Height\n    &lt;dbl&gt;\n 1   165.\n 2   168.\n 3   167.\n 4   170.\n 5   182.\n 6   169.\n 7   148.\n 8   178.\n 9   181.\n10   170.\n# ℹ 4,780 more rows\n\n\nHere, a subset of the NHANES dataset is created, that focuses on adults (individuals aged 18 or older) and includes only the “Height” variable. Duplicate entries are removed based on the “ID” column to ensure unique participants, filtering the dataset to include only those with age 18 and above, selecting only the “Height” variable, and finally removing any missing values (NA) from the “Height” column. The resulting dataset contains 4,790 rows of height data, with values ranging from around 148.1 to 181.9 cm in the displayed portion.\n\n\n\n\npop_mean &lt;- mosaic::mean(~Height, data = NHANES_adult)\n\npop_sd &lt;- mosaic::sd(~Height, data = NHANES_adult)\n\npop_mean\n\n[1] 168.3497\n\n\n\npop_sd\n\n[1] 10.15705\n\n\nNow we calculate the mean and standard deviation of the height for adults in the NHANES dataset. The average (mean) height of the adult population is approximately 168.35 cm, with a standard deviation of 10.16 cm, which shows the typical variation around the mean. This suggests that while most adults have a height close to 168.35 cm, the heights can vary by about 10 cm above or below the mean.\n\n\n\n\ntheme_set(new = theme_custom())\nsample_50 &lt;- mosaic::sample(NHANES_adult, size = 50) %&gt;%\n  select(Height)\nsample_50\n\n# A tibble: 50 × 1\n   Height\n    &lt;dbl&gt;\n 1   170.\n 2   174.\n 3   173.\n 4   171.\n 5   170.\n 6   187.\n 7   159.\n 8   182.\n 9   180.\n10   166.\n# ℹ 40 more rows\n\n## A random sample of 50 observations is taken from the NHANES_adult dataset for the \"Height\" variable using mosaic::sample. This subset of 50 heights is stored in sample_50.\nsample_mean_50 &lt;- mean(~Height, data = sample_50)\nsample_mean_50\n\n[1] 169.764\n\n## The mean of the heights from the sample (sample_50) is calculated and stored in sample_mean_50.\n\nsample_50 %&gt;%\n  gf_histogram(~Height, bins = 10) %&gt;%\n  gf_vline(\n    xintercept = ~sample_mean_50,\n    color = \"purple\"\n  ) %&gt;%\n## A vertical line (gf_vline) is added at the sample mean (sample_mean_50)\n  gf_vline(\n    xintercept = ~pop_mean,\n    colour = \"black\"\n  ) %&gt;%\n## Another vertical line is added at the population mean (pop_mean), colored black, to show where the overall average height of the population falls in comparison to the sample mean.\n  gf_label(7 ~ (pop_mean + 8),\n    label = \"Population Mean\",\n    color = \"black\"\n  ) %&gt;%\n  gf_label(7 ~ (sample_mean_50 - 8),\n    label = \"Sample Mean\", color = \"purple\"\n  ) %&gt;%\n## Two labels are added to the plot to clearly identify the \"Population Mean\" (in black) and the \"Sample Mean\" (in purple), positioned at appropriate points in the plot.\n  gf_labs(\n    title = \"Distribution and Mean of a Single Sample\",\n    subtitle = \"Sample Size = 50\"\n  )\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 50 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 50 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe plot visualizes the distribution of a random sample of 50 heights from the NHANES dataset, represented as a histogram. Two key reference lines are shown: the Sample Mean (marked with a purple vertical line and label) and the Population Mean (marked with a black vertical line and label). The sample mean is slightly to the left of the population mean, demonstrating the variation that can occur between a random sample and the overall population. The title and subtitle of the plot clarify that it is depicting the distribution and mean for a sample size of 50. This plot highlights how the sample’s average height compares to the broader population mean.\n\n\n\n\nsample_50_500 &lt;- do(500) * {\n## The do(500) function repeats the sampling process 500 times.\n## For each iteration, a random sample of 50 heights is taken from the NHANES_adult dataset.\n  sample(NHANES_adult, size = 50) %&gt;%\n    select(Height) %&gt;% \n    summarise(\n      sample_mean = mean(Height),\n      sample_sd = sd(Height),\n      sample_min = min(Height),\n      sample_max = max(Height)\n    )\n}\nsample_50_500\n\n# A tibble: 500 × 6\n   sample_mean sample_sd sample_min sample_max  .row .index\n         &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt;\n 1        169.      9.65       152.       191.     1      1\n 2        171.     10.3        149        191.     1      2\n 3        170.     11.0        144.       185.     1      3\n 4        170.      9.66       149.       192.     1      4\n 5        168.      8.89       152        189.     1      5\n 6        167.      9.63       146.       187.     1      6\n 7        167.      9.02       146        184.     1      7\n 8        170.     12.4        143.       192.     1      8\n 9        169.     10.3        148.       192.     1      9\n10        167.      7.52       156.       186.     1     10\n# ℹ 490 more rows\n\ndim(sample_50_500)\n\n[1] 500   6\n\n## The dim(sample_50_500) command prints the dimensions of the resulting dataset, showing how many rows and columns are in sample_50_500.\n\nThe table shows the results of 500 repeated samples (each of size 50) taken from the NHANES adult height dataset. For each sample, four key statistics are calculated: the sample mean, sample standard deviation (sd), minimum height, and maximum height. The sample means range from approximately 166.7 to 171.9 cm, with variability in standard deviation (ranging from around 8.3 to 10.8 cm). The minimum and maximum heights in the samples show some variation, with minimum heights ranging from around 142.6 to 154.9 cm and maximum heights ranging from around 184.9 to 195.9 cm. This simulation highlights the natural variation in summary statistics when taking random samples from the population.\n\n\n\n\ntheme_set(new = theme_custom())\nsample_50_500 %&gt;%\n  gf_point(.index ~ sample_mean,\n    color = \"purple\",\n    title = \"Sample Means are close to the Population Mean\",\n    subtitle = \"Sample Means are Random!\",\n    caption = \"Grey lines represent our 500 samples\"\n  ) %&gt;%\n  gf_segment(\n    .index + .index ~ sample_min + sample_max,\n    color = \"grey\",\n    linewidth = 0.3,\n    alpha = 0.3,\n    ylab = \"Sample Index (1-500)\",\n    xlab = \"Sample Means\"\n  ) %&gt;%\n  gf_vline(\n    xintercept = ~pop_mean,\n    color = \"black\"\n  ) %&gt;%\n  gf_label(-25 ~ pop_mean,\n    label = \"Population Mean\",\n    color = \"black\"\n  )\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 500 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nsample_50_500 %&gt;%\n  gf_point(.index ~ sample_sd,\n    color = \"purple\",\n    title = \"Sample SDs are close to the Population Sd\",\n    subtitle = \"Sample SDs are Random!\",\n  ) %&gt;%\n  gf_vline(\n    xintercept = ~pop_sd,\n    color = \"black\"\n  ) %&gt;%\n  gf_label(-25 ~ pop_sd,\n    label = \"Population SD\",\n    color = \"black\"\n  ) %&gt;%\n  gf_refine(lims(x = c(4, 16)))\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 500 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe plots illustrate the variability in the means and standard deviations of 500 random samples, each of size 50, taken from the NHANES adult height data.\nIn the first plot, the sample means are shown as purple points, with grey lines representing the range from the minimum to maximum height in each sample. A vertical black line marks the population mean. The plot highlights that while individual sample means vary, most are clustered around the population mean, demonstrating that sample means tend to be close to the population mean despite random variation.\nIn the second plot, the sample standard deviations (SDs) are plotted, again using purple points, with a vertical line indicating the population standard deviation. The plot shows that sample SDs also vary, but most are concentrated around the population SD. Both plots demonstrate the concept of sampling variability: individual sample statistics fluctuate, but they generally reflect the overall population parameters.\nThe titles emphasize that both the sample means and sample standard deviations are random but tend to be close to the corresponding population values.\n\n\n\n\ntheme_set(new = theme_custom())\nsample_50_500 %&gt;%\n  gf_dhistogram(~sample_mean, bins = 30, xlab = \"Height\") %&gt;%\n  gf_vline(\n    xintercept = pop_mean,\n    color = \"blue\"\n  ) %&gt;%\n  gf_label(0.01 ~ pop_mean,\n    label = \"Population Mean\",\n    color = \"blue\"\n  ) %&gt;%\n  gf_labs(\n    title = \"Sampling Mean Distribution\",\n    subtitle = \"500 means\"\n  )\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 500 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nsample_50_500 %&gt;%\n  gf_dhistogram(~sample_mean, bins = 30, xlab = \"Height\") %&gt;%\n  gf_vline(\n    xintercept = pop_mean,\n    color = \"blue\"\n  ) %&gt;%\n  gf_label(0.01 ~ pop_mean,\n    label = \"Population Mean\",\n    color = \"blue\"\n  ) %&gt;%\n  gf_histogram(~Height,\n    data = NHANES_adult,\n    alpha = 0.2, fill = \"blue\",\n    bins = 30\n  ) %&gt;%\n  gf_label(0.025 ~ (pop_mean + 20),\n    label = \"Population Distribution\", color = \"blue\"\n  ) %&gt;%\n  gf_labs(title = \"Sampling Mean Distribution\", subtitle = \"Original Population overlay\")\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 500 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 500 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe plots visualize the distribution of sample means from 500 random samples, each consisting of 50 heights from the NHANES dataset.\nIn the first plot, the histogram shows the distribution of sample means across the 500 samples. The population mean is marked with a blue vertical line. The title emphasizes that the sample means tend to cluster around the population mean, despite some variation due to random sampling.\nThe second plot overlays the distribution of the sample means on top of the original population distribution. The blue-shaded area represents the population height distribution, while the grey histogram represents the sample mean distribution. The comparison shows that the sample means are generally more tightly clustered around the population mean than individual heights, demonstrating the concept of the Central Limit Theorem: as sample size increases, the distribution of the sample means becomes narrower and centered around the population mean.\nBoth plots highlight the relationship between the sample mean distribution and the original population distribution, illustrating how random samples from a population can reflect the underlying characteristics of the entire population.\n\n\n\n\nsamples_08_1000 &lt;- do(1000) * mean(resample(NHANES_adult$Height, size = 08))\n\nsamples_16_1000 &lt;- do(1000) * mean(resample(NHANES_adult$Height, size = 16))\n\nsamples_32_1000 &lt;- do(1000) * mean(resample(NHANES_adult$Height, size = 32))\n\nsamples_64_1000 &lt;- do(1000) * mean(resample(NHANES_adult$Height, size = 64))\n## Four different sets of samples are drawn, each with a different sample size (8, 16, 32, and 64)\n## For each sample size, the resample() function draws a random sample of heights, and the mean() function calculates the mean height of the resample.\n## This process is repeated 1000 times for each sample size using the do(1000) function.\n\nhead(samples_08_1000)\n\n      mean\n1 163.6250\n2 171.0750\n3 167.2000\n4 167.6875\n5 170.8375\n6 167.2750\n\n\nThe table shows the first six mean heights from 1000 random samples of size 8 drawn from the NHANES adult dataset. Each value represents the average height calculated from one of the samples. The mean heights range from 165.6 cm to 171.8 cm across these six samples, showing how the mean fluctuates between different samples. This variability demonstrates the random nature of sampling, with each sample producing slightly different mean values even though they are drawn from the same population. This helps to understand how sample size and repetition can impact the stability and accuracy of sample means.\n\n\n\n\ntheme_set(new = theme_custom())\np5 &lt;- gf_dhistogram(~mean,\n  data = samples_08_1000,\n  color = \"grey\",\n  fill = \"dodgerblue\", title = \"N = 8\"\n) %&gt;%\n  gf_fitdistr(linewidth = 1) %&gt;%\n  gf_vline(\n    xintercept = pop_mean, inherit = FALSE,\n    color = \"blue\"\n  ) %&gt;%\n  gf_label(-0.025 ~ pop_mean,\n    label = \"Population Mean\",\n    color = \"blue\"\n  ) %&gt;%\n  gf_theme(scale_y_continuous(expand = expansion(mult = c(0.08, 0.02))))\np6 &lt;- gf_dhistogram(~mean,\n  data = samples_16_1000,\n  color = \"grey\",\n  fill = \"sienna\", title = \"N = 16\"\n) %&gt;%\n  gf_fitdistr(linewidth = 1) %&gt;%\n  gf_vline(\n    xintercept = pop_mean,\n    color = \"blue\"\n  ) %&gt;%\n  gf_label(-.025 ~ pop_mean,\n    label = \"Population Mean\",\n    color = \"blue\"\n  ) %&gt;%\n  gf_theme(scale_y_continuous(expand = expansion(mult = c(0.08, 0.02))))\np7 &lt;- gf_dhistogram(~mean,\n  data = samples_32_1000,\n  na.rm = TRUE,\n  color = \"grey\",\n  fill = \"palegreen\", title = \"N = 32\"\n) %&gt;%\n  gf_fitdistr(linewidth = 1) %&gt;%\n  gf_vline(\n    xintercept = pop_mean,\n    color = \"blue\"\n  ) %&gt;%\n  gf_label(-.025 ~ pop_mean,\n    label = \"Population Mean\", color = \"blue\"\n  ) %&gt;%\n  gf_theme(scale_y_continuous(expand = expansion(mult = c(0.08, 0.02))))\n\np8 &lt;- gf_dhistogram(~mean,\n  data = samples_64_1000,\n  na.rm = TRUE,\n  color = \"grey\",\n  fill = \"violetred\", title = \"N = 64\"\n) %&gt;%\n  gf_fitdistr(linewidth = 1) %&gt;%\n  gf_vline(\n    xintercept = pop_mean,\n    color = \"blue\"\n  ) %&gt;%\n  gf_label(-.025 ~ pop_mean,\n    label = \"Population Mean\", color = \"blue\"\n  ) %&gt;%\n  gf_theme(scale_y_continuous(expand = expansion(mult = c(0.08, 0.02))))\np5\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 1000 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\np6\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 1000 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\np7\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 1000 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\np8\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 1000 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n## Each histogram is created using the gf_dhistogram() function, with a different fill color and title to denote the sample size:\n## For N = 8: fill is dodgerblue.\n## For N = 16: fill is sienna.\n## For N = 32: fill is palegreen.\n## For N = 64: fill is violetred.\n## Each histogram has a density curve fitted using gf_fitdistr(), with the line width set to 1%\n## gf_fitdistr(~mean, ...): This overlays a fitted normal distribution curve over the histogram, allowing comparison between the empirical distribution and the theoretical normal distribution.\n\nThe four histograms show the distribution of sample means from 1000 random samples of sizes 8, 16, 32, and 64 taken from the NHANES adult height dataset. Each histogram is fitted with a density curve and includes a blue vertical line marking the population mean for comparison.\nAs the sample size increases, the distribution of sample means becomes more concentrated around the population mean (approximately 168 cm).\nFor smaller sample sizes (N = 8), the distribution of sample means is wider, indicating more variability in the sample means.\nAs the sample size increases (N = 16, N = 32, N = 64), the distribution narrows, demonstrating how larger sample sizes produce more precise estimates of the population mean.\nThe density curve in each plot shows the shape of the sample mean distribution, and as expected from the Central Limit Theorem, the distribution becomes more normal as the sample size increases.\nThis visualization highlights how increasing the sample size leads to more stable and accurate estimates of the population mean, with less variability.\n\n\n\n\ngf_dhistogram(~mean, data = samples_08_1000, fill = \"dodgerblue\", color = \"grey\") %&gt;%\n  gf_vline(xintercept = pop_mean, color = \"blue\") %&gt;%\n  gf_fitdistr(linewidth = 1, data = samples_08_1000, color = \"dodgerblue\") %&gt;%\n  \n  gf_dhistogram(~mean, data = samples_16_1000, fill = \"sienna\", color = \"grey\") %&gt;%\n  gf_vline(xintercept = pop_mean, color = \"blue\") %&gt;%\n  gf_fitdistr(linewidth = 1, data = samples_16_1000, color = \"sienna\") %&gt;%\n  \n  gf_dhistogram(~mean, data = samples_32_1000, fill = \"palegreen\", color = \"grey\") %&gt;%\n  gf_vline(xintercept = pop_mean, color = \"blue\") %&gt;%\n  gf_fitdistr(linewidth = 1, data = samples_32_1000, color = \"palegreen\") %&gt;%\n  \n  gf_dhistogram(~mean, data = samples_64_1000, fill = \"violetred\", color = \"grey\") %&gt;%\n  gf_vline(xintercept = pop_mean, color = \"blue\") %&gt;%\n  gf_fitdistr(linewidth = 1, data = samples_64_1000, color = \"violetred\") %&gt;% \ngf_label(-.025 ~ pop_mean,\n    label = \"Population Mean\", color = \"blue\"\n  ) \n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 1000 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe graph visualizes the overlay of histograms and density curves for sample means of different sizes (N = 8, 16, 32, 64) from the NHANES adult height dataset. Each sample size is represented with a different color, where histograms show the distribution of sample means and the corresponding density curves are fitted on top of the histograms. The vertical blue line marks the population mean, which serves as a reference point for comparison across all sample sizes.\nAs expected, the density curves for smaller sample sizes (N = 8, 16) are wider, indicating higher variability in the sample means. Conversely, larger sample sizes (N = 32, 64) have more narrow and peaked density curves, demonstrating that the sample means cluster more closely around the population mean as sample size increases. This graph effectively illustrates how increasing the sample size leads to more precise estimates of the population mean, as predicted by the Central Limit Theorem.\n\n\n\n\nmean(~mean, data = samples_08_1000) \n\n[1] 168.2615\n\nmean(~mean, data = samples_16_1000)\n\n[1] 168.4219\n\nmean(~mean, data = samples_32_1000)\n\n[1] 168.267\n\nmean(~mean, data = samples_64_1000)\n\n[1] 168.3463\n\npop_mean\n\n[1] 168.3497\n\n\nThe output shows the means of the sample distributions for different sample sizes (N = 8, 16, 32, and 64) compared to the population mean. The sample means are as follows:\nFor N = 8: 168.73\nFor N = 16: 168.37\nFor N = 32: 168.34\nFor N = 64: 168.39\nThe population mean is 168.35.\nThe sample means across all sample sizes are close to the population mean, with slight variability. As the sample size increases, the sample mean converges more closely to the population mean, illustrating how larger sample sizes provide more accurate estimates of the population parameter.\n\n\n\n\npop_sd\n\n[1] 10.15705\n\nsd(~mean, data = samples_08_1000)\n\n[1] 3.511615\n\nsd(~mean, data = samples_16_1000)\n\n[1] 2.638382\n\nsd(~mean, data = samples_32_1000)\n\n[1] 1.857065\n\nsd(~mean, data = samples_64_1000)\n\n[1] 1.224013\n\n\nThe output shows the standard deviations of the sample distributions for different sample sizes (N = 8, 16, 32, 64) compared to the population standard deviation:\nPopulation standard deviation: 10.16\nFor N = 8: 3.63\nFor N = 16: 2.60\nFor N = 32: 1.86\nFor N = 64: 1.30\nAs the sample size increases, the standard deviation of the sample means decreases. This demonstrates that larger sample sizes lead to more consistent estimates with less variability. The population standard deviation is much larger, as it reflects the variability of individual data points, while the sample means become more tightly clustered as the sample size increases.\n\n\n\n\npop_sd\n\n[1] 10.15705\n\npop_sd / sqrt(8)\n\n[1] 3.591058\n\npop_sd / sqrt(16)\n\n[1] 2.539262\n\npop_sd / sqrt(32)\n\n[1] 1.795529\n\npop_sd / sqrt(64)\n\n[1] 1.269631\n\n## sqrt(N) is the square root of the sample size\n\nThe output displays the calculated standard errors of the mean for different sample sizes (N = 8, 16, 32, 64). The population standard deviation (pop_sd) is 10.16, and the standard errors are as follows:\n\nFor N = 8: 3.59\nFor N = 16: 2.54\nFor N = 32: 1.80\nFor N = 64: 1.27\n\nAs the sample size increases, the standard error decreases. This illustrates that larger sample sizes lead to more precise estimates of the population mean, with less variability between sample means. The decrease in standard error follows the expected relationship, where the standard error is inversely proportional to the square root of the sample size.\n\n\n\n\nsample_08 &lt;- mosaic::sample(NHANES_adult, size = 8) %&gt;%\n  select(Height)\nsample_16 &lt;- mosaic::sample(NHANES_adult, size = 16) %&gt;%\n  select(Height)\nsample_32 &lt;- mosaic::sample(NHANES_adult, size = 32) %&gt;%\n  select(Height)\nsample_64 &lt;- mosaic::sample(NHANES_adult, size = 64) %&gt;%\n  select(Height)\n\nsd(~Height, data = sample_08)\n\n[1] 10.90518\n\n## Sampling from NHANES_adult: It uses the mosaic::sample function to create random samples of different sizes from the NHANES_adult dataset.\n\n\nsd(~Height, data = sample_16)\n\n[1] 10.19418\n\n\n\nsd(~Height, data = sample_32)\n\n[1] 8.31743\n\n\n\nsd(~Height, data = sample_64)\n\n[1] 10.18385\n\n\nThe results show the standard deviations for four different random samples of heights, with varying sample sizes (N = 8, 16, 32, 64) from the NHANES dataset:\nFor N = 8: 11.11\nFor N = 16: 6.54\nFor N = 32: 10.39\nFor N = 64: 9.39\nThe standard deviations show some variability across the samples, which is expected due to random sampling. Smaller sample sizes, such as N = 8 and N = 16, tend to have more variation in their standard deviations compared to larger sample sizes, where the values are closer to the population standard deviation (approximately 10.16). This reflects how larger samples are more representative of the population and produce more consistent measures of dispersion.\n\n\n\n\npop_sd &lt;- sd(~Height, data = NHANES_adult)\npop_sd\n\n[1] 10.15705\n\nsd(~Height, data = sample_08) / sqrt(8)\n\n[1] 3.855562\n\nsd(~Height, data = sample_16) / sqrt(16)\n\n[1] 2.548545\n\nsd(~Height, data = sample_32) / sqrt(32)\n\n[1] 1.470328\n\nsd(~Height, data = sample_64) / sqrt(64)\n\n[1] 1.272981\n\n\nThe results of the calculation of the standard errors for different sample sizes (N = 8, 16, 32, 64) using the standard deviations of the samples are displayed here. The population standard deviation is calculated as approximately 10.16, and the standard errors for the samples are as follows:\nFor N = 8: 3.93\nFor N = 16: 1.63\nFor N = 32: 1.84\nFor N = 64: 1.17\nThe population standard deviation is higher than the standard errors, as expected. As the sample size increases, the standard error decreases. This pattern highlights that larger sample sizes produce more precise estimates of the population mean, with less variability.\n\n\n\n\ntheme_set(new = theme_custom())\n\ntbl_1 &lt;- get_ci(samples_08_1000, level = 0.95)\ntbl_2 &lt;- get_ci(samples_16_1000, level = 0.95)\ntbl_3 &lt;- get_ci(samples_32_1000, level = 0.95)\ntbl_4 &lt;- get_ci(samples_64_1000, level = 0.95)\nrbind(tbl_1, tbl_2, tbl_3, tbl_4) %&gt;%\n  rownames_to_column(\"index\") %&gt;%\n  cbind(\"sample_size\" = c(8, 16, 32, 64)) %&gt;%\n  gf_segment(index + index ~ lower_ci + upper_ci) %&gt;%\n  gf_vline(xintercept = pop_mean) %&gt;%\n  gf_labs(\n    title = \"95% Confidence Intervals for the Mean\",\n    subtitle = \"Varying samples sizes 8-16-32-64\",\n    y = \"Sample Size\", x = \"Mean Ranges\"\n  ) %&gt;%\n  gf_refine(scale_y_discrete(labels = c(8, 16, 32, 64))) %&gt;%\n  gf_refine(annotate(geom = \"label\", x = pop_mean + 1.75, y = 1.5, label = \"Population Mean\"))\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n## The function get_ci() calculates 95% confidence intervals for the mean of the samples (samples_08_1000, samples_16_1000, samples_32_1000, and samples_64_1000), which represent 1000 resampled means of different sizes (8, 16, 32, 64).\n## Four variables (tbl_1, tbl_2, tbl_3, tbl_4) are created, each containing the confidence intervals (lower and upper bounds) for a specific sample size.\n## The rbind() function combines these four datasets (tbl_1, tbl_2, tbl_3, and tbl_4) row-wise into one table.\n## The cbind() function adds a sample_size column with the values 8, 16, 32, and 64 to correspond with each confidence interval.\n\nThis plot shows the 95% confidence intervals for the mean of different sample sizes (8, 16, 32, and 64). Each horizontal line represents the confidence interval for a given sample size, with the vertical line marking the population mean. The plot visually demonstrates how the confidence intervals become narrower as the sample size increases, indicating more precise estimates of the population mean. The intervals for smaller samples are wider, reflecting greater variability, while larger sample sizes yield tighter intervals that are more closely aligned with the population mean. This helps illustrate the concept that larger sample sizes provide more accurate estimates of the population parameter.\n\n\n\n\ntheme_set(new = theme_custom())\n\nsample_mean &lt;- mean(~Height, data = sample_16)\nse &lt;- sd(~Height, data = sample_16) / sqrt(16)\n\nxqnorm(\n  p = c(0.025, 0.975),\n  mean = sample_mean,\n  sd = sd(~Height, data = sample_16),\n  return = c(\"plot\"), verbose = F\n) %&gt;%\n  gf_vline(xintercept = ~pop_mean, colour = \"black\") %&gt;%\n  gf_vline(xintercept = mean(~Height, data = sample_16), colour = \"purple\") %&gt;%\n  gf_labs(title = \"Confidence Intervals and the Bell Curve. N=16\") %&gt;%\n  gf_refine(\n    annotate(geom = \"label\", x = pop_mean + 15, y = 0.05, label = \"Population Mean\"),\n    annotate(geom = \"label\", x = sample_mean - 15, y = 0.05, label = \"Sample Mean\", colour = \"purple\")\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n## The mean of Height from sample_16 is computed and assigned to sample_mean.\n## The standard error (se) is calculated as the standard deviation of Height from sample_16, divided by the square root of the sample size (16).\n##The xqnorm function calculates the quantiles for a normal distribution with a probability of 95% (p = c(0.025, 0.975)), using the calculated sample_mean and standard error (se). The result is a confidence interval for the mean of the sample data.\n\nThe graph illustrates the relationship between the sample mean and the population mean within a normal distribution for a sample size of 16. It shows a bell curve divided into three probability sections: the outermost areas represent the lower and upper 2.5% of the data, and the middle section highlights the 95% confidence interval, which covers the majority of the data. Two vertical lines are present—one representing the sample mean (in purple) and the other the population mean (in black).\n\n\n\n\npop_mean\n\n[1] 168.3497\n\nse &lt;- sd(~Height, data = sample_16) / sqrt(16)\nmean(~Height, data = sample_16) - 2.0 * se\n\n[1] 159.6467\n\nmean(~Height, data = sample_16) + 2.0 * se\n\n[1] 169.8408\n\n\nThe code calculates the 95% confidence interval for the mean of a sample of 16 observations. It computes the standard error (SE) of the sample mean and then uses it to find the lower and upper bounds of the confidence interval. The output shows the population mean (168.3497) and the lower and upper bounds of the confidence interval, which are 162.7563 and 169.2937, respectively. This interval gives an estimate of where the true population mean is likely to lie based on the sample."
  },
  {
    "objectID": "posts/Day 6/index.html#introduction",
    "href": "posts/Day 6/index.html#introduction",
    "title": "Day 6",
    "section": "",
    "text": "We are looking at Samples, Populations, Statistics and Inference today.\n\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic) \n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr) \n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)\n\n\nlibrary(NHANES)\nlibrary(infer)\n\n\nAttaching package: 'infer'\n\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\n\n\n\n\nknitr::opts_chunk$set(\n  fig.width = 7,\n## Sets the default width of figures to 7 inches.\n  fig.asp = 0.618, \n## Sets the aspect ratio of the figure to approximately the golden ratio.\n  fig.align = \"center\"\n## Centers the alignment of the figure output.\n)\ntheme_custom &lt;- function() {\n## defines a custom theme for ggplot2 plots, using the font \"Roboto Condensed\" and modifying certain visual elements like the plot title, subtitles, captions, axis titles, and text.\n  font &lt;- \"Roboto Condensed\" \n  theme_classic(base_size = 14) %+replace% ## used to replace elements from the base theme with custom settings.\n    theme(\n      panel.grid.minor = element_blank(), \n      text = element_text(family = font),\n      plot.title = element_text( \n        family = font, \n        face = \"bold\", \n        hjust = 0, \n        margin = margin(0, 0, 10, 0)\n      ),\n      plot.subtitle = element_text( \n        family = font,                \n        hjust = 0,\n        margin = margin(2, 0, 5, 0)\n      ),\n      plot.caption = element_text( \n        family = font, \n        size = 8, \n        hjust = 1\n      ), \n\n      axis.title = element_text( \n        family = font,\n        size = 10\n      ),\n      axis.text = element_text(\n        family = font, \n        size = 8\n      ) \n    )\n}\n\n\ntheme_set(new = theme_custom())\n\n\n\n\n\ndata(\"NHANES\")\nNHANES\n\n# A tibble: 10,000 × 76\n      ID SurveyYr Gender   Age AgeDecade AgeMonths Race1 Race3 Education   \n   &lt;int&gt; &lt;fct&gt;    &lt;fct&gt;  &lt;int&gt; &lt;fct&gt;         &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt;       \n 1 51624 2009_10  male      34 \" 30-39\"        409 White &lt;NA&gt;  High School \n 2 51624 2009_10  male      34 \" 30-39\"        409 White &lt;NA&gt;  High School \n 3 51624 2009_10  male      34 \" 30-39\"        409 White &lt;NA&gt;  High School \n 4 51625 2009_10  male       4 \" 0-9\"           49 Other &lt;NA&gt;  &lt;NA&gt;        \n 5 51630 2009_10  female    49 \" 40-49\"        596 White &lt;NA&gt;  Some College\n 6 51638 2009_10  male       9 \" 0-9\"          115 White &lt;NA&gt;  &lt;NA&gt;        \n 7 51646 2009_10  male       8 \" 0-9\"          101 White &lt;NA&gt;  &lt;NA&gt;        \n 8 51647 2009_10  female    45 \" 40-49\"        541 White &lt;NA&gt;  College Grad\n 9 51647 2009_10  female    45 \" 40-49\"        541 White &lt;NA&gt;  College Grad\n10 51647 2009_10  female    45 \" 40-49\"        541 White &lt;NA&gt;  College Grad\n# ℹ 9,990 more rows\n# ℹ 67 more variables: MaritalStatus &lt;fct&gt;, HHIncome &lt;fct&gt;, HHIncomeMid &lt;int&gt;,\n#   Poverty &lt;dbl&gt;, HomeRooms &lt;int&gt;, HomeOwn &lt;fct&gt;, Work &lt;fct&gt;, Weight &lt;dbl&gt;,\n#   Length &lt;dbl&gt;, HeadCirc &lt;dbl&gt;, Height &lt;dbl&gt;, BMI &lt;dbl&gt;,\n#   BMICatUnder20yrs &lt;fct&gt;, BMI_WHO &lt;fct&gt;, Pulse &lt;int&gt;, BPSysAve &lt;int&gt;,\n#   BPDiaAve &lt;int&gt;, BPSys1 &lt;int&gt;, BPDia1 &lt;int&gt;, BPSys2 &lt;int&gt;, BPDia2 &lt;int&gt;,\n#   BPSys3 &lt;int&gt;, BPDia3 &lt;int&gt;, Testosterone &lt;dbl&gt;, DirectChol &lt;dbl&gt;, …\n\n\nThe dataset is from the NHANES (National Health and Nutrition Examination Survey) and consists of 10,000 rows with 76 columns. The table shows variables such as the participant’s ID, survey year (SurveyYr), gender, age, age grouped by decades (AgeDecade), age in months (AgeMonths), and race (Race1 and Race3).The dataset also includes some missing values in the Race3 column, represented by “NA”.\n\n\n\n\nglimpse(NHANES)\n\nRows: 10,000\nColumns: 76\n$ ID               &lt;int&gt; 51624, 51624, 51624, 51625, 51630, 51638, 51646, 5164…\n$ SurveyYr         &lt;fct&gt; 2009_10, 2009_10, 2009_10, 2009_10, 2009_10, 2009_10,…\n$ Gender           &lt;fct&gt; male, male, male, male, female, male, male, female, f…\n$ Age              &lt;int&gt; 34, 34, 34, 4, 49, 9, 8, 45, 45, 45, 66, 58, 54, 10, …\n$ AgeDecade        &lt;fct&gt;  30-39,  30-39,  30-39,  0-9,  40-49,  0-9,  0-9,  40…\n$ AgeMonths        &lt;int&gt; 409, 409, 409, 49, 596, 115, 101, 541, 541, 541, 795,…\n$ Race1            &lt;fct&gt; White, White, White, Other, White, White, White, Whit…\n$ Race3            &lt;fct&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Education        &lt;fct&gt; High School, High School, High School, NA, Some Colle…\n$ MaritalStatus    &lt;fct&gt; Married, Married, Married, NA, LivePartner, NA, NA, M…\n$ HHIncome         &lt;fct&gt; 25000-34999, 25000-34999, 25000-34999, 20000-24999, 3…\n$ HHIncomeMid      &lt;int&gt; 30000, 30000, 30000, 22500, 40000, 87500, 60000, 8750…\n$ Poverty          &lt;dbl&gt; 1.36, 1.36, 1.36, 1.07, 1.91, 1.84, 2.33, 5.00, 5.00,…\n$ HomeRooms        &lt;int&gt; 6, 6, 6, 9, 5, 6, 7, 6, 6, 6, 5, 10, 6, 10, 10, 4, 3,…\n$ HomeOwn          &lt;fct&gt; Own, Own, Own, Own, Rent, Rent, Own, Own, Own, Own, O…\n$ Work             &lt;fct&gt; NotWorking, NotWorking, NotWorking, NA, NotWorking, N…\n$ Weight           &lt;dbl&gt; 87.4, 87.4, 87.4, 17.0, 86.7, 29.8, 35.2, 75.7, 75.7,…\n$ Length           &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ HeadCirc         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Height           &lt;dbl&gt; 164.7, 164.7, 164.7, 105.4, 168.4, 133.1, 130.6, 166.…\n$ BMI              &lt;dbl&gt; 32.22, 32.22, 32.22, 15.30, 30.57, 16.82, 20.64, 27.2…\n$ BMICatUnder20yrs &lt;fct&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ BMI_WHO          &lt;fct&gt; 30.0_plus, 30.0_plus, 30.0_plus, 12.0_18.5, 30.0_plus…\n$ Pulse            &lt;int&gt; 70, 70, 70, NA, 86, 82, 72, 62, 62, 62, 60, 62, 76, 8…\n$ BPSysAve         &lt;int&gt; 113, 113, 113, NA, 112, 86, 107, 118, 118, 118, 111, …\n$ BPDiaAve         &lt;int&gt; 85, 85, 85, NA, 75, 47, 37, 64, 64, 64, 63, 74, 85, 6…\n$ BPSys1           &lt;int&gt; 114, 114, 114, NA, 118, 84, 114, 106, 106, 106, 124, …\n$ BPDia1           &lt;int&gt; 88, 88, 88, NA, 82, 50, 46, 62, 62, 62, 64, 76, 86, 6…\n$ BPSys2           &lt;int&gt; 114, 114, 114, NA, 108, 84, 108, 118, 118, 118, 108, …\n$ BPDia2           &lt;int&gt; 88, 88, 88, NA, 74, 50, 36, 68, 68, 68, 62, 72, 88, 6…\n$ BPSys3           &lt;int&gt; 112, 112, 112, NA, 116, 88, 106, 118, 118, 118, 114, …\n$ BPDia3           &lt;int&gt; 82, 82, 82, NA, 76, 44, 38, 60, 60, 60, 64, 76, 82, 7…\n$ Testosterone     &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ DirectChol       &lt;dbl&gt; 1.29, 1.29, 1.29, NA, 1.16, 1.34, 1.55, 2.12, 2.12, 2…\n$ TotChol          &lt;dbl&gt; 3.49, 3.49, 3.49, NA, 6.70, 4.86, 4.09, 5.82, 5.82, 5…\n$ UrineVol1        &lt;int&gt; 352, 352, 352, NA, 77, 123, 238, 106, 106, 106, 113, …\n$ UrineFlow1       &lt;dbl&gt; NA, NA, NA, NA, 0.094, 1.538, 1.322, 1.116, 1.116, 1.…\n$ UrineVol2        &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ UrineFlow2       &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Diabetes         &lt;fct&gt; No, No, No, No, No, No, No, No, No, No, No, No, No, N…\n$ DiabetesAge      &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ HealthGen        &lt;fct&gt; Good, Good, Good, NA, Good, NA, NA, Vgood, Vgood, Vgo…\n$ DaysPhysHlthBad  &lt;int&gt; 0, 0, 0, NA, 0, NA, NA, 0, 0, 0, 10, 0, 4, NA, NA, 0,…\n$ DaysMentHlthBad  &lt;int&gt; 15, 15, 15, NA, 10, NA, NA, 3, 3, 3, 0, 0, 0, NA, NA,…\n$ LittleInterest   &lt;fct&gt; Most, Most, Most, NA, Several, NA, NA, None, None, No…\n$ Depressed        &lt;fct&gt; Several, Several, Several, NA, Several, NA, NA, None,…\n$ nPregnancies     &lt;int&gt; NA, NA, NA, NA, 2, NA, NA, 1, 1, 1, NA, NA, NA, NA, N…\n$ nBabies          &lt;int&gt; NA, NA, NA, NA, 2, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ Age1stBaby       &lt;int&gt; NA, NA, NA, NA, 27, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ SleepHrsNight    &lt;int&gt; 4, 4, 4, NA, 8, NA, NA, 8, 8, 8, 7, 5, 4, NA, 5, 7, N…\n$ SleepTrouble     &lt;fct&gt; Yes, Yes, Yes, NA, Yes, NA, NA, No, No, No, No, No, Y…\n$ PhysActive       &lt;fct&gt; No, No, No, NA, No, NA, NA, Yes, Yes, Yes, Yes, Yes, …\n$ PhysActiveDays   &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, 5, 5, 5, 7, 5, 1, NA, 2, …\n$ TVHrsDay         &lt;fct&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ CompHrsDay       &lt;fct&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ TVHrsDayChild    &lt;int&gt; NA, NA, NA, 4, NA, 5, 1, NA, NA, NA, NA, NA, NA, 4, N…\n$ CompHrsDayChild  &lt;int&gt; NA, NA, NA, 1, NA, 0, 6, NA, NA, NA, NA, NA, NA, 3, N…\n$ Alcohol12PlusYr  &lt;fct&gt; Yes, Yes, Yes, NA, Yes, NA, NA, Yes, Yes, Yes, Yes, Y…\n$ AlcoholDay       &lt;int&gt; NA, NA, NA, NA, 2, NA, NA, 3, 3, 3, 1, 2, 6, NA, NA, …\n$ AlcoholYear      &lt;int&gt; 0, 0, 0, NA, 20, NA, NA, 52, 52, 52, 100, 104, 364, N…\n$ SmokeNow         &lt;fct&gt; No, No, No, NA, Yes, NA, NA, NA, NA, NA, No, NA, NA, …\n$ Smoke100         &lt;fct&gt; Yes, Yes, Yes, NA, Yes, NA, NA, No, No, No, Yes, No, …\n$ Smoke100n        &lt;fct&gt; Smoker, Smoker, Smoker, NA, Smoker, NA, NA, Non-Smoke…\n$ SmokeAge         &lt;int&gt; 18, 18, 18, NA, 38, NA, NA, NA, NA, NA, 13, NA, NA, N…\n$ Marijuana        &lt;fct&gt; Yes, Yes, Yes, NA, Yes, NA, NA, Yes, Yes, Yes, NA, Ye…\n$ AgeFirstMarij    &lt;int&gt; 17, 17, 17, NA, 18, NA, NA, 13, 13, 13, NA, 19, 15, N…\n$ RegularMarij     &lt;fct&gt; No, No, No, NA, No, NA, NA, No, No, No, NA, Yes, Yes,…\n$ AgeRegMarij      &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 20, 15, N…\n$ HardDrugs        &lt;fct&gt; Yes, Yes, Yes, NA, Yes, NA, NA, No, No, No, No, Yes, …\n$ SexEver          &lt;fct&gt; Yes, Yes, Yes, NA, Yes, NA, NA, Yes, Yes, Yes, Yes, Y…\n$ SexAge           &lt;int&gt; 16, 16, 16, NA, 12, NA, NA, 13, 13, 13, 17, 22, 12, N…\n$ SexNumPartnLife  &lt;int&gt; 8, 8, 8, NA, 10, NA, NA, 20, 20, 20, 15, 7, 100, NA, …\n$ SexNumPartYear   &lt;int&gt; 1, 1, 1, NA, 1, NA, NA, 0, 0, 0, NA, 1, 1, NA, NA, 1,…\n$ SameSex          &lt;fct&gt; No, No, No, NA, Yes, NA, NA, Yes, Yes, Yes, No, No, N…\n$ SexOrientation   &lt;fct&gt; Heterosexual, Heterosexual, Heterosexual, NA, Heteros…\n$ PregnantNow      &lt;fct&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n\n\nThe glimpse of the data reveals a variety of demographic, health, and lifestyle-related fields:\n\nDemographics: The dataset includes fields like ID, Survey Year, Gender, Age, Age in Decades, and Race.\nSocioeconomic Information: It includes educational background, marital status, household income (HHIncome), and poverty index.\nHealth Measurements: Variables such as height, weight, BMI, blood pressure (systolic and diastolic values), and cholesterol levels are captured.\nHealth Conditions and Behaviors: Information on physical activity, smoking habits, alcohol consumption, and drug use are present, along with metrics like diabetes status, sleep patterns, and general health perception.\nLifestyle Factors: The dataset covers employment status, home ownership, and family size.\nAdditional Variables: More detailed information is available on reproductive health, mental health, and sexual behavior.\n\nThe dataset contains missing values (denoted as “NA”) in several columns, indicating that not all participants answered or were measured for every variable.\n\n\n\n\nNHANES_adult &lt;-\n  NHANES %&gt;%\n  distinct(ID, .keep_all = TRUE) %&gt;%\n  filter(Age &gt;= 18) %&gt;%\n  select(Height) %&gt;%\n  drop_na(Height)\nNHANES_adult\n\n# A tibble: 4,790 × 1\n   Height\n    &lt;dbl&gt;\n 1   165.\n 2   168.\n 3   167.\n 4   170.\n 5   182.\n 6   169.\n 7   148.\n 8   178.\n 9   181.\n10   170.\n# ℹ 4,780 more rows\n\n\nHere, a subset of the NHANES dataset is created, that focuses on adults (individuals aged 18 or older) and includes only the “Height” variable. Duplicate entries are removed based on the “ID” column to ensure unique participants, filtering the dataset to include only those with age 18 and above, selecting only the “Height” variable, and finally removing any missing values (NA) from the “Height” column. The resulting dataset contains 4,790 rows of height data, with values ranging from around 148.1 to 181.9 cm in the displayed portion.\n\n\n\n\npop_mean &lt;- mosaic::mean(~Height, data = NHANES_adult)\n\npop_sd &lt;- mosaic::sd(~Height, data = NHANES_adult)\n\npop_mean\n\n[1] 168.3497\n\n\n\npop_sd\n\n[1] 10.15705\n\n\nNow we calculate the mean and standard deviation of the height for adults in the NHANES dataset. The average (mean) height of the adult population is approximately 168.35 cm, with a standard deviation of 10.16 cm, which shows the typical variation around the mean. This suggests that while most adults have a height close to 168.35 cm, the heights can vary by about 10 cm above or below the mean.\n\n\n\n\ntheme_set(new = theme_custom())\nsample_50 &lt;- mosaic::sample(NHANES_adult, size = 50) %&gt;%\n  select(Height)\nsample_50\n\n# A tibble: 50 × 1\n   Height\n    &lt;dbl&gt;\n 1   170.\n 2   174.\n 3   173.\n 4   171.\n 5   170.\n 6   187.\n 7   159.\n 8   182.\n 9   180.\n10   166.\n# ℹ 40 more rows\n\n## A random sample of 50 observations is taken from the NHANES_adult dataset for the \"Height\" variable using mosaic::sample. This subset of 50 heights is stored in sample_50.\nsample_mean_50 &lt;- mean(~Height, data = sample_50)\nsample_mean_50\n\n[1] 169.764\n\n## The mean of the heights from the sample (sample_50) is calculated and stored in sample_mean_50.\n\nsample_50 %&gt;%\n  gf_histogram(~Height, bins = 10) %&gt;%\n  gf_vline(\n    xintercept = ~sample_mean_50,\n    color = \"purple\"\n  ) %&gt;%\n## A vertical line (gf_vline) is added at the sample mean (sample_mean_50)\n  gf_vline(\n    xintercept = ~pop_mean,\n    colour = \"black\"\n  ) %&gt;%\n## Another vertical line is added at the population mean (pop_mean), colored black, to show where the overall average height of the population falls in comparison to the sample mean.\n  gf_label(7 ~ (pop_mean + 8),\n    label = \"Population Mean\",\n    color = \"black\"\n  ) %&gt;%\n  gf_label(7 ~ (sample_mean_50 - 8),\n    label = \"Sample Mean\", color = \"purple\"\n  ) %&gt;%\n## Two labels are added to the plot to clearly identify the \"Population Mean\" (in black) and the \"Sample Mean\" (in purple), positioned at appropriate points in the plot.\n  gf_labs(\n    title = \"Distribution and Mean of a Single Sample\",\n    subtitle = \"Sample Size = 50\"\n  )\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 50 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 50 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe plot visualizes the distribution of a random sample of 50 heights from the NHANES dataset, represented as a histogram. Two key reference lines are shown: the Sample Mean (marked with a purple vertical line and label) and the Population Mean (marked with a black vertical line and label). The sample mean is slightly to the left of the population mean, demonstrating the variation that can occur between a random sample and the overall population. The title and subtitle of the plot clarify that it is depicting the distribution and mean for a sample size of 50. This plot highlights how the sample’s average height compares to the broader population mean.\n\n\n\n\nsample_50_500 &lt;- do(500) * {\n## The do(500) function repeats the sampling process 500 times.\n## For each iteration, a random sample of 50 heights is taken from the NHANES_adult dataset.\n  sample(NHANES_adult, size = 50) %&gt;%\n    select(Height) %&gt;% \n    summarise(\n      sample_mean = mean(Height),\n      sample_sd = sd(Height),\n      sample_min = min(Height),\n      sample_max = max(Height)\n    )\n}\nsample_50_500\n\n# A tibble: 500 × 6\n   sample_mean sample_sd sample_min sample_max  .row .index\n         &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt;\n 1        169.      9.65       152.       191.     1      1\n 2        171.     10.3        149        191.     1      2\n 3        170.     11.0        144.       185.     1      3\n 4        170.      9.66       149.       192.     1      4\n 5        168.      8.89       152        189.     1      5\n 6        167.      9.63       146.       187.     1      6\n 7        167.      9.02       146        184.     1      7\n 8        170.     12.4        143.       192.     1      8\n 9        169.     10.3        148.       192.     1      9\n10        167.      7.52       156.       186.     1     10\n# ℹ 490 more rows\n\ndim(sample_50_500)\n\n[1] 500   6\n\n## The dim(sample_50_500) command prints the dimensions of the resulting dataset, showing how many rows and columns are in sample_50_500.\n\nThe table shows the results of 500 repeated samples (each of size 50) taken from the NHANES adult height dataset. For each sample, four key statistics are calculated: the sample mean, sample standard deviation (sd), minimum height, and maximum height. The sample means range from approximately 166.7 to 171.9 cm, with variability in standard deviation (ranging from around 8.3 to 10.8 cm). The minimum and maximum heights in the samples show some variation, with minimum heights ranging from around 142.6 to 154.9 cm and maximum heights ranging from around 184.9 to 195.9 cm. This simulation highlights the natural variation in summary statistics when taking random samples from the population.\n\n\n\n\ntheme_set(new = theme_custom())\nsample_50_500 %&gt;%\n  gf_point(.index ~ sample_mean,\n    color = \"purple\",\n    title = \"Sample Means are close to the Population Mean\",\n    subtitle = \"Sample Means are Random!\",\n    caption = \"Grey lines represent our 500 samples\"\n  ) %&gt;%\n  gf_segment(\n    .index + .index ~ sample_min + sample_max,\n    color = \"grey\",\n    linewidth = 0.3,\n    alpha = 0.3,\n    ylab = \"Sample Index (1-500)\",\n    xlab = \"Sample Means\"\n  ) %&gt;%\n  gf_vline(\n    xintercept = ~pop_mean,\n    color = \"black\"\n  ) %&gt;%\n  gf_label(-25 ~ pop_mean,\n    label = \"Population Mean\",\n    color = \"black\"\n  )\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 500 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nsample_50_500 %&gt;%\n  gf_point(.index ~ sample_sd,\n    color = \"purple\",\n    title = \"Sample SDs are close to the Population Sd\",\n    subtitle = \"Sample SDs are Random!\",\n  ) %&gt;%\n  gf_vline(\n    xintercept = ~pop_sd,\n    color = \"black\"\n  ) %&gt;%\n  gf_label(-25 ~ pop_sd,\n    label = \"Population SD\",\n    color = \"black\"\n  ) %&gt;%\n  gf_refine(lims(x = c(4, 16)))\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 500 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe plots illustrate the variability in the means and standard deviations of 500 random samples, each of size 50, taken from the NHANES adult height data.\nIn the first plot, the sample means are shown as purple points, with grey lines representing the range from the minimum to maximum height in each sample. A vertical black line marks the population mean. The plot highlights that while individual sample means vary, most are clustered around the population mean, demonstrating that sample means tend to be close to the population mean despite random variation.\nIn the second plot, the sample standard deviations (SDs) are plotted, again using purple points, with a vertical line indicating the population standard deviation. The plot shows that sample SDs also vary, but most are concentrated around the population SD. Both plots demonstrate the concept of sampling variability: individual sample statistics fluctuate, but they generally reflect the overall population parameters.\nThe titles emphasize that both the sample means and sample standard deviations are random but tend to be close to the corresponding population values.\n\n\n\n\ntheme_set(new = theme_custom())\nsample_50_500 %&gt;%\n  gf_dhistogram(~sample_mean, bins = 30, xlab = \"Height\") %&gt;%\n  gf_vline(\n    xintercept = pop_mean,\n    color = \"blue\"\n  ) %&gt;%\n  gf_label(0.01 ~ pop_mean,\n    label = \"Population Mean\",\n    color = \"blue\"\n  ) %&gt;%\n  gf_labs(\n    title = \"Sampling Mean Distribution\",\n    subtitle = \"500 means\"\n  )\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 500 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nsample_50_500 %&gt;%\n  gf_dhistogram(~sample_mean, bins = 30, xlab = \"Height\") %&gt;%\n  gf_vline(\n    xintercept = pop_mean,\n    color = \"blue\"\n  ) %&gt;%\n  gf_label(0.01 ~ pop_mean,\n    label = \"Population Mean\",\n    color = \"blue\"\n  ) %&gt;%\n  gf_histogram(~Height,\n    data = NHANES_adult,\n    alpha = 0.2, fill = \"blue\",\n    bins = 30\n  ) %&gt;%\n  gf_label(0.025 ~ (pop_mean + 20),\n    label = \"Population Distribution\", color = \"blue\"\n  ) %&gt;%\n  gf_labs(title = \"Sampling Mean Distribution\", subtitle = \"Original Population overlay\")\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 500 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 500 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe plots visualize the distribution of sample means from 500 random samples, each consisting of 50 heights from the NHANES dataset.\nIn the first plot, the histogram shows the distribution of sample means across the 500 samples. The population mean is marked with a blue vertical line. The title emphasizes that the sample means tend to cluster around the population mean, despite some variation due to random sampling.\nThe second plot overlays the distribution of the sample means on top of the original population distribution. The blue-shaded area represents the population height distribution, while the grey histogram represents the sample mean distribution. The comparison shows that the sample means are generally more tightly clustered around the population mean than individual heights, demonstrating the concept of the Central Limit Theorem: as sample size increases, the distribution of the sample means becomes narrower and centered around the population mean.\nBoth plots highlight the relationship between the sample mean distribution and the original population distribution, illustrating how random samples from a population can reflect the underlying characteristics of the entire population.\n\n\n\n\nsamples_08_1000 &lt;- do(1000) * mean(resample(NHANES_adult$Height, size = 08))\n\nsamples_16_1000 &lt;- do(1000) * mean(resample(NHANES_adult$Height, size = 16))\n\nsamples_32_1000 &lt;- do(1000) * mean(resample(NHANES_adult$Height, size = 32))\n\nsamples_64_1000 &lt;- do(1000) * mean(resample(NHANES_adult$Height, size = 64))\n## Four different sets of samples are drawn, each with a different sample size (8, 16, 32, and 64)\n## For each sample size, the resample() function draws a random sample of heights, and the mean() function calculates the mean height of the resample.\n## This process is repeated 1000 times for each sample size using the do(1000) function.\n\nhead(samples_08_1000)\n\n      mean\n1 163.6250\n2 171.0750\n3 167.2000\n4 167.6875\n5 170.8375\n6 167.2750\n\n\nThe table shows the first six mean heights from 1000 random samples of size 8 drawn from the NHANES adult dataset. Each value represents the average height calculated from one of the samples. The mean heights range from 165.6 cm to 171.8 cm across these six samples, showing how the mean fluctuates between different samples. This variability demonstrates the random nature of sampling, with each sample producing slightly different mean values even though they are drawn from the same population. This helps to understand how sample size and repetition can impact the stability and accuracy of sample means.\n\n\n\n\ntheme_set(new = theme_custom())\np5 &lt;- gf_dhistogram(~mean,\n  data = samples_08_1000,\n  color = \"grey\",\n  fill = \"dodgerblue\", title = \"N = 8\"\n) %&gt;%\n  gf_fitdistr(linewidth = 1) %&gt;%\n  gf_vline(\n    xintercept = pop_mean, inherit = FALSE,\n    color = \"blue\"\n  ) %&gt;%\n  gf_label(-0.025 ~ pop_mean,\n    label = \"Population Mean\",\n    color = \"blue\"\n  ) %&gt;%\n  gf_theme(scale_y_continuous(expand = expansion(mult = c(0.08, 0.02))))\np6 &lt;- gf_dhistogram(~mean,\n  data = samples_16_1000,\n  color = \"grey\",\n  fill = \"sienna\", title = \"N = 16\"\n) %&gt;%\n  gf_fitdistr(linewidth = 1) %&gt;%\n  gf_vline(\n    xintercept = pop_mean,\n    color = \"blue\"\n  ) %&gt;%\n  gf_label(-.025 ~ pop_mean,\n    label = \"Population Mean\",\n    color = \"blue\"\n  ) %&gt;%\n  gf_theme(scale_y_continuous(expand = expansion(mult = c(0.08, 0.02))))\np7 &lt;- gf_dhistogram(~mean,\n  data = samples_32_1000,\n  na.rm = TRUE,\n  color = \"grey\",\n  fill = \"palegreen\", title = \"N = 32\"\n) %&gt;%\n  gf_fitdistr(linewidth = 1) %&gt;%\n  gf_vline(\n    xintercept = pop_mean,\n    color = \"blue\"\n  ) %&gt;%\n  gf_label(-.025 ~ pop_mean,\n    label = \"Population Mean\", color = \"blue\"\n  ) %&gt;%\n  gf_theme(scale_y_continuous(expand = expansion(mult = c(0.08, 0.02))))\n\np8 &lt;- gf_dhistogram(~mean,\n  data = samples_64_1000,\n  na.rm = TRUE,\n  color = \"grey\",\n  fill = \"violetred\", title = \"N = 64\"\n) %&gt;%\n  gf_fitdistr(linewidth = 1) %&gt;%\n  gf_vline(\n    xintercept = pop_mean,\n    color = \"blue\"\n  ) %&gt;%\n  gf_label(-.025 ~ pop_mean,\n    label = \"Population Mean\", color = \"blue\"\n  ) %&gt;%\n  gf_theme(scale_y_continuous(expand = expansion(mult = c(0.08, 0.02))))\np5\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 1000 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\np6\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 1000 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\np7\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 1000 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\np8\n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 1000 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n## Each histogram is created using the gf_dhistogram() function, with a different fill color and title to denote the sample size:\n## For N = 8: fill is dodgerblue.\n## For N = 16: fill is sienna.\n## For N = 32: fill is palegreen.\n## For N = 64: fill is violetred.\n## Each histogram has a density curve fitted using gf_fitdistr(), with the line width set to 1%\n## gf_fitdistr(~mean, ...): This overlays a fitted normal distribution curve over the histogram, allowing comparison between the empirical distribution and the theoretical normal distribution.\n\nThe four histograms show the distribution of sample means from 1000 random samples of sizes 8, 16, 32, and 64 taken from the NHANES adult height dataset. Each histogram is fitted with a density curve and includes a blue vertical line marking the population mean for comparison.\nAs the sample size increases, the distribution of sample means becomes more concentrated around the population mean (approximately 168 cm).\nFor smaller sample sizes (N = 8), the distribution of sample means is wider, indicating more variability in the sample means.\nAs the sample size increases (N = 16, N = 32, N = 64), the distribution narrows, demonstrating how larger sample sizes produce more precise estimates of the population mean.\nThe density curve in each plot shows the shape of the sample mean distribution, and as expected from the Central Limit Theorem, the distribution becomes more normal as the sample size increases.\nThis visualization highlights how increasing the sample size leads to more stable and accurate estimates of the population mean, with less variability.\n\n\n\n\ngf_dhistogram(~mean, data = samples_08_1000, fill = \"dodgerblue\", color = \"grey\") %&gt;%\n  gf_vline(xintercept = pop_mean, color = \"blue\") %&gt;%\n  gf_fitdistr(linewidth = 1, data = samples_08_1000, color = \"dodgerblue\") %&gt;%\n  \n  gf_dhistogram(~mean, data = samples_16_1000, fill = \"sienna\", color = \"grey\") %&gt;%\n  gf_vline(xintercept = pop_mean, color = \"blue\") %&gt;%\n  gf_fitdistr(linewidth = 1, data = samples_16_1000, color = \"sienna\") %&gt;%\n  \n  gf_dhistogram(~mean, data = samples_32_1000, fill = \"palegreen\", color = \"grey\") %&gt;%\n  gf_vline(xintercept = pop_mean, color = \"blue\") %&gt;%\n  gf_fitdistr(linewidth = 1, data = samples_32_1000, color = \"palegreen\") %&gt;%\n  \n  gf_dhistogram(~mean, data = samples_64_1000, fill = \"violetred\", color = \"grey\") %&gt;%\n  gf_vline(xintercept = pop_mean, color = \"blue\") %&gt;%\n  gf_fitdistr(linewidth = 1, data = samples_64_1000, color = \"violetred\") %&gt;% \ngf_label(-.025 ~ pop_mean,\n    label = \"Population Mean\", color = \"blue\"\n  ) \n\nWarning in (function (mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", : All aesthetics have length 1, but the data has 1000 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe graph visualizes the overlay of histograms and density curves for sample means of different sizes (N = 8, 16, 32, 64) from the NHANES adult height dataset. Each sample size is represented with a different color, where histograms show the distribution of sample means and the corresponding density curves are fitted on top of the histograms. The vertical blue line marks the population mean, which serves as a reference point for comparison across all sample sizes.\nAs expected, the density curves for smaller sample sizes (N = 8, 16) are wider, indicating higher variability in the sample means. Conversely, larger sample sizes (N = 32, 64) have more narrow and peaked density curves, demonstrating that the sample means cluster more closely around the population mean as sample size increases. This graph effectively illustrates how increasing the sample size leads to more precise estimates of the population mean, as predicted by the Central Limit Theorem.\n\n\n\n\nmean(~mean, data = samples_08_1000) \n\n[1] 168.2615\n\nmean(~mean, data = samples_16_1000)\n\n[1] 168.4219\n\nmean(~mean, data = samples_32_1000)\n\n[1] 168.267\n\nmean(~mean, data = samples_64_1000)\n\n[1] 168.3463\n\npop_mean\n\n[1] 168.3497\n\n\nThe output shows the means of the sample distributions for different sample sizes (N = 8, 16, 32, and 64) compared to the population mean. The sample means are as follows:\nFor N = 8: 168.73\nFor N = 16: 168.37\nFor N = 32: 168.34\nFor N = 64: 168.39\nThe population mean is 168.35.\nThe sample means across all sample sizes are close to the population mean, with slight variability. As the sample size increases, the sample mean converges more closely to the population mean, illustrating how larger sample sizes provide more accurate estimates of the population parameter.\n\n\n\n\npop_sd\n\n[1] 10.15705\n\nsd(~mean, data = samples_08_1000)\n\n[1] 3.511615\n\nsd(~mean, data = samples_16_1000)\n\n[1] 2.638382\n\nsd(~mean, data = samples_32_1000)\n\n[1] 1.857065\n\nsd(~mean, data = samples_64_1000)\n\n[1] 1.224013\n\n\nThe output shows the standard deviations of the sample distributions for different sample sizes (N = 8, 16, 32, 64) compared to the population standard deviation:\nPopulation standard deviation: 10.16\nFor N = 8: 3.63\nFor N = 16: 2.60\nFor N = 32: 1.86\nFor N = 64: 1.30\nAs the sample size increases, the standard deviation of the sample means decreases. This demonstrates that larger sample sizes lead to more consistent estimates with less variability. The population standard deviation is much larger, as it reflects the variability of individual data points, while the sample means become more tightly clustered as the sample size increases.\n\n\n\n\npop_sd\n\n[1] 10.15705\n\npop_sd / sqrt(8)\n\n[1] 3.591058\n\npop_sd / sqrt(16)\n\n[1] 2.539262\n\npop_sd / sqrt(32)\n\n[1] 1.795529\n\npop_sd / sqrt(64)\n\n[1] 1.269631\n\n## sqrt(N) is the square root of the sample size\n\nThe output displays the calculated standard errors of the mean for different sample sizes (N = 8, 16, 32, 64). The population standard deviation (pop_sd) is 10.16, and the standard errors are as follows:\n\nFor N = 8: 3.59\nFor N = 16: 2.54\nFor N = 32: 1.80\nFor N = 64: 1.27\n\nAs the sample size increases, the standard error decreases. This illustrates that larger sample sizes lead to more precise estimates of the population mean, with less variability between sample means. The decrease in standard error follows the expected relationship, where the standard error is inversely proportional to the square root of the sample size.\n\n\n\n\nsample_08 &lt;- mosaic::sample(NHANES_adult, size = 8) %&gt;%\n  select(Height)\nsample_16 &lt;- mosaic::sample(NHANES_adult, size = 16) %&gt;%\n  select(Height)\nsample_32 &lt;- mosaic::sample(NHANES_adult, size = 32) %&gt;%\n  select(Height)\nsample_64 &lt;- mosaic::sample(NHANES_adult, size = 64) %&gt;%\n  select(Height)\n\nsd(~Height, data = sample_08)\n\n[1] 10.90518\n\n## Sampling from NHANES_adult: It uses the mosaic::sample function to create random samples of different sizes from the NHANES_adult dataset.\n\n\nsd(~Height, data = sample_16)\n\n[1] 10.19418\n\n\n\nsd(~Height, data = sample_32)\n\n[1] 8.31743\n\n\n\nsd(~Height, data = sample_64)\n\n[1] 10.18385\n\n\nThe results show the standard deviations for four different random samples of heights, with varying sample sizes (N = 8, 16, 32, 64) from the NHANES dataset:\nFor N = 8: 11.11\nFor N = 16: 6.54\nFor N = 32: 10.39\nFor N = 64: 9.39\nThe standard deviations show some variability across the samples, which is expected due to random sampling. Smaller sample sizes, such as N = 8 and N = 16, tend to have more variation in their standard deviations compared to larger sample sizes, where the values are closer to the population standard deviation (approximately 10.16). This reflects how larger samples are more representative of the population and produce more consistent measures of dispersion.\n\n\n\n\npop_sd &lt;- sd(~Height, data = NHANES_adult)\npop_sd\n\n[1] 10.15705\n\nsd(~Height, data = sample_08) / sqrt(8)\n\n[1] 3.855562\n\nsd(~Height, data = sample_16) / sqrt(16)\n\n[1] 2.548545\n\nsd(~Height, data = sample_32) / sqrt(32)\n\n[1] 1.470328\n\nsd(~Height, data = sample_64) / sqrt(64)\n\n[1] 1.272981\n\n\nThe results of the calculation of the standard errors for different sample sizes (N = 8, 16, 32, 64) using the standard deviations of the samples are displayed here. The population standard deviation is calculated as approximately 10.16, and the standard errors for the samples are as follows:\nFor N = 8: 3.93\nFor N = 16: 1.63\nFor N = 32: 1.84\nFor N = 64: 1.17\nThe population standard deviation is higher than the standard errors, as expected. As the sample size increases, the standard error decreases. This pattern highlights that larger sample sizes produce more precise estimates of the population mean, with less variability.\n\n\n\n\ntheme_set(new = theme_custom())\n\ntbl_1 &lt;- get_ci(samples_08_1000, level = 0.95)\ntbl_2 &lt;- get_ci(samples_16_1000, level = 0.95)\ntbl_3 &lt;- get_ci(samples_32_1000, level = 0.95)\ntbl_4 &lt;- get_ci(samples_64_1000, level = 0.95)\nrbind(tbl_1, tbl_2, tbl_3, tbl_4) %&gt;%\n  rownames_to_column(\"index\") %&gt;%\n  cbind(\"sample_size\" = c(8, 16, 32, 64)) %&gt;%\n  gf_segment(index + index ~ lower_ci + upper_ci) %&gt;%\n  gf_vline(xintercept = pop_mean) %&gt;%\n  gf_labs(\n    title = \"95% Confidence Intervals for the Mean\",\n    subtitle = \"Varying samples sizes 8-16-32-64\",\n    y = \"Sample Size\", x = \"Mean Ranges\"\n  ) %&gt;%\n  gf_refine(scale_y_discrete(labels = c(8, 16, 32, 64))) %&gt;%\n  gf_refine(annotate(geom = \"label\", x = pop_mean + 1.75, y = 1.5, label = \"Population Mean\"))\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n## The function get_ci() calculates 95% confidence intervals for the mean of the samples (samples_08_1000, samples_16_1000, samples_32_1000, and samples_64_1000), which represent 1000 resampled means of different sizes (8, 16, 32, 64).\n## Four variables (tbl_1, tbl_2, tbl_3, tbl_4) are created, each containing the confidence intervals (lower and upper bounds) for a specific sample size.\n## The rbind() function combines these four datasets (tbl_1, tbl_2, tbl_3, and tbl_4) row-wise into one table.\n## The cbind() function adds a sample_size column with the values 8, 16, 32, and 64 to correspond with each confidence interval.\n\nThis plot shows the 95% confidence intervals for the mean of different sample sizes (8, 16, 32, and 64). Each horizontal line represents the confidence interval for a given sample size, with the vertical line marking the population mean. The plot visually demonstrates how the confidence intervals become narrower as the sample size increases, indicating more precise estimates of the population mean. The intervals for smaller samples are wider, reflecting greater variability, while larger sample sizes yield tighter intervals that are more closely aligned with the population mean. This helps illustrate the concept that larger sample sizes provide more accurate estimates of the population parameter.\n\n\n\n\ntheme_set(new = theme_custom())\n\nsample_mean &lt;- mean(~Height, data = sample_16)\nse &lt;- sd(~Height, data = sample_16) / sqrt(16)\n\nxqnorm(\n  p = c(0.025, 0.975),\n  mean = sample_mean,\n  sd = sd(~Height, data = sample_16),\n  return = c(\"plot\"), verbose = F\n) %&gt;%\n  gf_vline(xintercept = ~pop_mean, colour = \"black\") %&gt;%\n  gf_vline(xintercept = mean(~Height, data = sample_16), colour = \"purple\") %&gt;%\n  gf_labs(title = \"Confidence Intervals and the Bell Curve. N=16\") %&gt;%\n  gf_refine(\n    annotate(geom = \"label\", x = pop_mean + 15, y = 0.05, label = \"Population Mean\"),\n    annotate(geom = \"label\", x = sample_mean - 15, y = 0.05, label = \"Sample Mean\", colour = \"purple\")\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n## The mean of Height from sample_16 is computed and assigned to sample_mean.\n## The standard error (se) is calculated as the standard deviation of Height from sample_16, divided by the square root of the sample size (16).\n##The xqnorm function calculates the quantiles for a normal distribution with a probability of 95% (p = c(0.025, 0.975)), using the calculated sample_mean and standard error (se). The result is a confidence interval for the mean of the sample data.\n\nThe graph illustrates the relationship between the sample mean and the population mean within a normal distribution for a sample size of 16. It shows a bell curve divided into three probability sections: the outermost areas represent the lower and upper 2.5% of the data, and the middle section highlights the 95% confidence interval, which covers the majority of the data. Two vertical lines are present—one representing the sample mean (in purple) and the other the population mean (in black).\n\n\n\n\npop_mean\n\n[1] 168.3497\n\nse &lt;- sd(~Height, data = sample_16) / sqrt(16)\nmean(~Height, data = sample_16) - 2.0 * se\n\n[1] 159.6467\n\nmean(~Height, data = sample_16) + 2.0 * se\n\n[1] 169.8408\n\n\nThe code calculates the 95% confidence interval for the mean of a sample of 16 observations. It computes the standard error (SE) of the sample mean and then uses it to find the lower and upper bounds of the confidence interval. The output shows the population mean (168.3497) and the lower and upper bounds of the confidence interval, which are 162.7563 and 169.2937, respectively. This interval gives an estimate of where the true population mean is likely to lie based on the sample."
  },
  {
    "objectID": "posts/Day 4/index.html",
    "href": "posts/Day 4/index.html",
    "title": "Day 4",
    "section": "",
    "text": "Today, we are looking at quantities.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(crosstable) \n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\n\n\n\n\ndiamonds\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n\n\n\n\n\ndiamonds\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n head(10)\n\n[1] 10\n\n\n\n\n\n\nglimpse(diamonds)\n\nRows: 53,940\nColumns: 10\n$ carat   &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n\n\n\n\n\n\ninspect(diamonds)\n\n\ncategorical variables:  \n     name   class levels     n missing\n1     cut ordered      5 53940       0\n2   color ordered      7 53940       0\n3 clarity ordered      8 53940       0\n                                   distribution\n1 Ideal (40%), Premium (25.6%) ...             \n2 G (20.9%), E (18.2%), F (17.7%) ...          \n3 SI1 (24.2%), VS2 (22.7%), SI2 (17%) ...      \n\nquantitative variables:  \n   name   class   min     Q1  median      Q3      max         mean           sd\n1 carat numeric   0.2   0.40    0.70    1.04     5.01    0.7979397    0.4740112\n2 depth numeric  43.0  61.00   61.80   62.50    79.00   61.7494049    1.4326213\n3 table numeric  43.0  56.00   57.00   59.00    95.00   57.4571839    2.2344906\n4 price integer 326.0 950.00 2401.00 5324.25 18823.00 3932.7997219 3989.4397381\n5     x numeric   0.0   4.71    5.70    6.54    10.74    5.7311572    1.1217607\n6     y numeric   0.0   4.72    5.71    6.54    58.90    5.7345260    1.1421347\n7     z numeric   0.0   2.91    3.53    4.04    31.80    3.5387338    0.7056988\n      n missing\n1 53940       0\n2 53940       0\n3 53940       0\n4 53940       0\n5 53940       0\n6 53940       0\n7 53940       0\n\n\n\n\n\n\nskim(diamonds)\n\n\nData summary\n\n\nName\ndiamonds\n\n\nNumber of rows\n53940\n\n\nNumber of columns\n10\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n7\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\ncut\n0\n1\nTRUE\n5\nIde: 21551, Pre: 13791, Ver: 12082, Goo: 4906\n\n\ncolor\n0\n1\nTRUE\n7\nG: 11292, E: 9797, F: 9542, H: 8304\n\n\nclarity\n0\n1\nTRUE\n8\nSI1: 13065, VS2: 12258, SI2: 9194, VS1: 8171\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ncarat\n0\n1\n0.80\n0.47\n0.2\n0.40\n0.70\n1.04\n5.01\n▇▂▁▁▁\n\n\ndepth\n0\n1\n61.75\n1.43\n43.0\n61.00\n61.80\n62.50\n79.00\n▁▁▇▁▁\n\n\ntable\n0\n1\n57.46\n2.23\n43.0\n56.00\n57.00\n59.00\n95.00\n▁▇▁▁▁\n\n\nprice\n0\n1\n3932.80\n3989.44\n326.0\n950.00\n2401.00\n5324.25\n18823.00\n▇▂▁▁▁\n\n\nx\n0\n1\n5.73\n1.12\n0.0\n4.71\n5.70\n6.54\n10.74\n▁▁▇▃▁\n\n\ny\n0\n1\n5.73\n1.14\n0.0\n4.72\n5.71\n6.54\n58.90\n▇▁▁▁▁\n\n\nz\n0\n1\n3.54\n0.71\n0.0\n2.91\n3.53\n4.04\n31.80\n▇▁▁▁▁\n\n\n\n\n\n\n\n\n\ngf_histogram(~price, data = diamonds) %&gt;%\n  gf_labs(\n    title = \"Plot 1A: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\ngf_histogram(~price,\n  data = diamonds,\n  bins = 100\n) %&gt;%\n  gf_labs(\n    title = \"Plot 1B: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n# bins- number of classes on the x-axis\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~carat) %&gt;%\n  gf_labs(\n    title = \"Plot 2A: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~carat,\n    bins = 100\n  ) %&gt;%\n  gf_labs(\n    title = \"Plot 2B: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\ngf_histogram(~price, fill = ~cut, data = diamonds) %&gt;%\n  gf_labs(title = \"Plot 3A: Diamond Prices\", caption = \"ggformula\")\n\n\n\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.1) %&gt;%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n#color- colour of outline, alpha- opacity of filled colour\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.5) %&gt;%\n  gf_facet_wrap(~cut) %&gt;%\n  gf_labs(\n    title = \"Plot 3C: Prices by Filled and Facetted by Cut\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x = element_text(\n      angle = 45,\n      hjust = 1\n    )\n  ))\n\n\n\n\n\n\n\n# gf_facet_wrap- divides the one graph into various graphs depending on the numbers of levels, gf_theme- style of text for characters titling the x-axis\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.7) %&gt;%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 2) %&gt;%\n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45,\n        hjust = 1\n      )\n  ))\n\n\n\n\n\n\n\n# free y-scale- each different graph will now follow a different scale along the y-axis according to requirements\n\n\n\n\n\nrace_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv\")\n\nRows: 1207 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): event, race, city, country, participation\ndbl  (6): race_year_id, distance, elevation_gain, elevation_loss, aid_statio...\ndate (1): date\ntime (1): start_time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nrank_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv\")\n\nRows: 137803 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): runner, time, gender, nationality\ndbl (4): race_year_id, rank, age, time_in_seconds\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nrace_df\n\n# A tibble: 1,207 × 13\n   race_year_id event    race  city  country date       start_time participation\n          &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n 1        68140 Peak Di… Mill… Cast… United… 2021-09-03 19:00      solo         \n 2        72496 UTMB®    UTMB® Cham… France  2021-08-27 17:00      Solo         \n 3        69855 Grand R… Ultr… viel… France  2021-08-20 05:00      solo         \n 4        67856 Persenk… PERS… Asen… Bulgar… 2021-08-20 18:00      solo         \n 5        70469 Runfire… 100 … uluk… Turkey  2021-08-20 18:00      solo         \n 6        66887 Swiss A… 160KM Müns… Switze… 2021-08-15 17:00      solo         \n 7        67851 Salomon… Salo… Foll… Norway  2021-08-14 07:00      solo         \n 8        68241 Ultra T… 160KM Spa   Belgium 2021-08-14 07:00      solo         \n 9        70241 Québec … QMT-… Beau… Canada  2021-08-13 22:00      solo         \n10        69945 Bunketo… BBUT… LIND… Sweden  2021-08-07 10:00      solo         \n# ℹ 1,197 more rows\n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\n\n\n\n\n\nrank_df\n\n# A tibble: 137,803 × 8\n   race_year_id  rank runner      time    age gender nationality time_in_seconds\n          &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                 &lt;dbl&gt;\n 1        68140     1 VERHEUL Ja… 26H …    30 M      GBR                   95725\n 2        68140     2 MOULDING J… 27H …    43 M      GBR                   97229\n 3        68140     3 RICHARDSON… 28H …    38 M      GBR                  103747\n 4        68140     4 DYSON Fiona 30H …    55 W      GBR                  111217\n 5        68140     5 FRONTERAS … 32H …    48 W      GBR                  117981\n 6        68140     6 THOMAS Lei… 32H …    31 M      GBR                  118000\n 7        68140     7 SHORT Debo… 33H …    55 W      GBR                  120601\n 8        68140     8 CROSSLEY C… 33H …    40 W      GBR                  120803\n 9        68140     9 BUTCHER Ke… 34H …    47 M      GBR                  125656\n10        68140    10 Hendry Bill 34H …    29 M      GBR                  125979\n# ℹ 137,793 more rows\n\n\n\n\n\n\nglimpse(race_df)\n\nRows: 1,207\nColumns: 13\n$ race_year_id   &lt;dbl&gt; 68140, 72496, 69855, 67856, 70469, 66887, 67851, 68241,…\n$ event          &lt;chr&gt; \"Peak District Ultras\", \"UTMB®\", \"Grand Raid des Pyréné…\n$ race           &lt;chr&gt; \"Millstone 100\", \"UTMB®\", \"Ultra Tour 160\", \"PERSENK UL…\n$ city           &lt;chr&gt; \"Castleton\", \"Chamonix\", \"vielle-Aure\", \"Asenovgrad\", \"…\n$ country        &lt;chr&gt; \"United Kingdom\", \"France\", \"France\", \"Bulgaria\", \"Turk…\n$ date           &lt;date&gt; 2021-09-03, 2021-08-27, 2021-08-20, 2021-08-20, 2021-0…\n$ start_time     &lt;time&gt; 19:00:00, 17:00:00, 05:00:00, 18:00:00, 18:00:00, 17:0…\n$ participation  &lt;chr&gt; \"solo\", \"Solo\", \"solo\", \"solo\", \"solo\", \"solo\", \"solo\",…\n$ distance       &lt;dbl&gt; 166.9, 170.7, 167.0, 164.0, 159.9, 159.9, 163.8, 163.9,…\n$ elevation_gain &lt;dbl&gt; 4520, 9930, 9980, 7490, 100, 9850, 5460, 4630, 6410, 31…\n$ elevation_loss &lt;dbl&gt; -4520, -9930, -9980, -7500, -100, -9850, -5460, -4660, …\n$ aid_stations   &lt;dbl&gt; 10, 11, 13, 13, 12, 15, 5, 8, 13, 23, 13, 5, 12, 15, 0,…\n$ participants   &lt;dbl&gt; 150, 2300, 600, 150, 0, 300, 0, 200, 120, 100, 300, 50,…\n\n\n\n\n\n\nglimpse(rank_df)\n\nRows: 137,803\nColumns: 8\n$ race_year_id    &lt;dbl&gt; 68140, 68140, 68140, 68140, 68140, 68140, 68140, 68140…\n$ rank            &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, NA, NA, NA,…\n$ runner          &lt;chr&gt; \"VERHEUL Jasper\", \"MOULDING JON\", \"RICHARDSON Phill\", …\n$ time            &lt;chr&gt; \"26H 35M 25S\", \"27H 0M 29S\", \"28H 49M 7S\", \"30H 53M 37…\n$ age             &lt;dbl&gt; 30, 43, 38, 55, 48, 31, 55, 40, 47, 29, 48, 47, 52, 49…\n$ gender          &lt;chr&gt; \"M\", \"M\", \"M\", \"W\", \"W\", \"M\", \"W\", \"W\", \"M\", \"M\", \"M\",…\n$ nationality     &lt;chr&gt; \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\"…\n$ time_in_seconds &lt;dbl&gt; 95725, 97229, 103747, 111217, 117981, 118000, 120601, …\n\n\n\n\n\n\nrace_df %&gt;%\n  favstats(~distance, data = .)\n\n min    Q1 median     Q3   max     mean       sd    n missing\n   0 160.1  161.5 165.15 179.1 152.6187 39.87864 1207       0\n\n# favstats- summary statistics (such as the minimum, maximum, mean, median, standard deviation, and more) \n\n\n\n\n\nrank_df %&gt;%\n  drop_na() %&gt;%\n  favstats(time_in_seconds ~ gender, data = .)\n\n  gender  min      Q1 median       Q3    max     mean       sd      n missing\n1      M 3600 96536.5 115845 149761.5 288000 123271.1 37615.42 101643       0\n2      W 9191 96695.0 107062 131464.0 296806 117296.5 34604.26  18341       0\n\n# drop_na()- removes rows that contain missing values\n\n\n\n\n\ncrosstable(time_in_seconds + age ~ gender, data = rank_df) %&gt;%\n  crosstable::as_flextable()\n\nlabelvariablegenderMWNAtime_in_secondsMin / Max3600.0 / 2.9e+059191.0 / 3.0e+058131.0 / 2.2e+05Med [IQR]1.2e+05 [9.7e+04;1.5e+05]1.1e+05 [9.7e+04;1.3e+05]1.2e+05 [9.9e+04;1.5e+05]Mean (std)1.2e+05 (3.8e+04)1.2e+05 (3.5e+04)1.2e+05 (4.4e+04)N (NA)101643 (15073)18341 (2716)28 (2)ageMin / Max0 / 133.00 / 81.029.0 / 59.0Med [IQR]47.0 [40.0;53.0]45.0 [39.0;52.0]40.5 [36.0;50.5]Mean (std)46.4 (10.2)45.3 (9.7)41.7 (9.0)N (NA)116716 (0)21057 (0)30 (0)\n\n# crosstable- useful for exploring the relationship between two or more categorical variables, and it often includes descriptive statistics for numeric variables.\n\n\n\n\n\nrace_df %&gt;%\n  count(country) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 61 × 2\n   country            n\n   &lt;chr&gt;          &lt;int&gt;\n 1 United States    438\n 2 United Kingdom   110\n 3 France            56\n 4 Australia         46\n 5 Sweden            46\n 6 China             45\n 7 Canada            32\n 8 Spain             27\n 9 Japan             24\n10 Poland            23\n# ℹ 51 more rows\n\n# count(country): This function counts the occurrences of each unique value in the country column.\n# arrange(desc(n)): This function sorts the resulting data frame in descending order (desc) based on the count (n).\n\n\n\n\n\nrank_df %&gt;%\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 133 × 2\n   nationality     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 USA         47259\n 2 FRA         28905\n 3 GBR         11076\n 4 JPN          6729\n 5 ESP          5478\n 6 CHN          4744\n 7 CAN          2822\n 8 ITA          2794\n 9 SWE          2293\n10 AUS          1683\n# ℹ 123 more rows\n\n\n\n\n\n\nrank_df %&gt;%\n  filter(rank %in% c(1, 2, 3)) %&gt;%\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 69 × 2\n   nationality     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 USA          1240\n 2 GBR           347\n 3 FRA           210\n 4 AUS           140\n 5 CAN           132\n 6 CHN           128\n 7 SWE           124\n 8 ESP           113\n 9 JPN            94\n10 ITA            79\n# ℹ 59 more rows\n\n# filter(rank %in% c(1, 2, 3))- This function filters the rows of rank_df where the rank column contains the values 1, 2, or 3.\n\n\n\n\n\nlongest_races &lt;- race_df %&gt;%\n  slice_max(n = 5, order_by = distance) # Longest distance races\nlongest_races\n\n# A tibble: 6 × 13\n  race_year_id event     race  city  country date       start_time participation\n         &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n1        68776 Ultra To… Ut4M… Gren… France  2021-07-16 18:00      Solo         \n2        55551 Ultra Tr… Inth… Chom… Thaila… 2020-02-14 10:00      solo         \n3         7484 Le TREG®… LE T… Fada  Chad    2015-02-06 00:00      solo         \n4         7594 THE GREA… 100 … Pato… Austra… 2014-09-13 00:00      Solo         \n5        71066 ULTRA 01  Ultr… Oyon… France  2021-07-09 18:00      solo         \n6        23565 EstrelAç… Estr… Penh… Portug… 2017-10-06 18:00      Solo         \n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\nlongest_races %&gt;%\n  left_join(., rank_df, by = \"race_year_id\") %&gt;% # total participants in longest 4 races\n  filter(rank %in% c(1:10)) %&gt;% # Top 10 ranks\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 9 × 2\n  nationality     n\n  &lt;chr&gt;       &lt;int&gt;\n1 FRA            26\n2 AUS             9\n3 POR             8\n4 THA             8\n5 BEL             1\n6 BRA             1\n7 ESP             1\n8 MAS             1\n9 RUS             1\n\n# slice_max(n = 5, order_by = distance)- This function selects the top 5 rows (races) from race_df, ordering them by the distance column in descending order, meaning it returns the races with the longest distances.\n# left_join(., rank_df, by = \"race_year_id\")- This joins the longest_races data frame with the rank_df data frame on the race_year_id column. The . represents the data passed from the previous pipe.\n# filter(rank %in% c(1:10))- After joining, this filters the data to include only participants who ranked between 1 and 10. It keeps the top 10 participants for each of the longest races.\n\n\n\n\n\nrank_df %&gt;%\n  gf_histogram(~time_in_seconds, bins = 75) %&gt;%\n  gf_labs(title = \"Histogram of Race Times\")\n\nWarning: Removed 17791 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nrace_df %&gt;%\n  gf_histogram(~distance, bins = 50) %&gt;%\n  gf_labs(title = \"Histogram of Race Distances\")\n\n\n\n\n\n\n\n\n\n\n\n\nrace_df %&gt;%\n  filter(distance == 0)\n\n# A tibble: 74 × 13\n   race_year_id event    race  city  country date       start_time participation\n          &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n 1        64771 The Old… 100m… Hanm… New Ze… 2021-05-14 10:00      solo         \n 2        71220 Run Lov… 100M  &lt;NA&gt;  United… 2021-02-26 00:00      solo         \n 3        67160 IDAHO M… 100 … &lt;NA&gt;  United… 2020-09-12 00:00      solo         \n 4        67713 Pine cr… 100M… Well… PA, Un… 2020-09-12 00:00      solo         \n 5        51777 Chiemga… 100 … Berg… Germany 2020-07-31 13:00      Solo         \n 6        66413 Palisad… Moos… Irwin United… 2020-07-17 05:00      solo         \n 7        62593 Run Lov… 100M  &lt;NA&gt;  United… 2020-02-28 00:00      solo         \n 8        50097 The Gre… The … Hanm… New Ze… 2020-01-17 07:00      solo         \n 9        65861 Loup Ga… 100M  Vill… LA, Un… 2019-12-14 00:00      solo         \n10        59415 RIO DEL… 100 … &lt;NA&gt;  United… 2019-11-07 00:00      solo         \n# ℹ 64 more rows\n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\n# Could be cancelled events\n\n\n\n\n\nrace_times &lt;- race_df %&gt;%\n  count(start_time) %&gt;%\n  arrange(desc(n))\nrace_times\n\n# A tibble: 39 × 2\n   start_time     n\n   &lt;time&gt;     &lt;int&gt;\n 1 00:00        513\n 2 06:00        114\n 3 08:00         63\n 4 10:00         60\n 5 07:00         58\n 6 18:00         50\n 7 05:00         48\n 8 12:00         38\n 9 04:00         30\n10 09:00         27\n# ℹ 29 more rows\n\n\n\n\n\n\nrace_start_factor &lt;- race_df %&gt;%\n  filter(distance == 0) %&gt;% # Races that actually took place\n  mutate(\n    start_day_time =\n      case_when(\n        start_time &gt; hms(\"02:00:00\") &\n          start_time &lt;= hms(\"06:00:00\") ~ \"early_morning\",\n        start_time &gt; hms(\"06:00:01\") &\n          start_time &lt;= hms(\"10:00:00\") ~ \"late_morning\",\n        start_time &gt; hms(\"10:00:01\") &\n          start_time &lt;= hms(\"14:00:00\") ~ \"mid_day\",\n        start_time &gt; hms(\"14:00:01\") &\n          start_time &lt;= hms(\"18:00:00\") ~ \"afternoon\",\n        start_time &gt; hms(\"18:00:01\") &\n          start_time &lt;= hms(\"22:00:00\") ~ \"evening\",\n        start_time &gt; hms(\"22:00:01\") &\n          start_time &lt;= hms(\"23:59:59\") ~ \"night\",\n        start_time &gt;= hms(\"00:00:00\") &\n          start_time &lt;= hms(\"02:00:00\") ~ \"postmidnight\",\n        .default = \"other\"\n      )\n  ) %&gt;%\n  mutate(\n    start_day_time =\n      as_factor(start_day_time) %&gt;%\n        fct_collapse(\n          .f = .,\n          night = c(\"night\", \"postmidnight\")\n        )\n  )\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `start_day_time = `%&gt;%`(...)`.\nCaused by warning:\n! Unknown levels in `f`: night\n\n##\n# Join with rank_df\nrace_start_factor %&gt;%\n  left_join(rank_df, by = \"race_year_id\") %&gt;%\n  drop_na(time_in_seconds) %&gt;%\n  gf_histogram(\n    ~time_in_seconds,\n    bins = 75,\n    fill = ~start_day_time,\n    color = ~start_day_time,\n    alpha = 0.5\n  ) %&gt;%\n  gf_facet_wrap(vars(start_day_time), ncol = 2, scales = \"free_y\") %&gt;%\n  gf_labs(title = \"Race Times by Start-Time\")\n\n\n\n\n\n\n\n# filter(distance == 0): This filters the dataset to keep only the races that actually took place\n# mutate(start_day_time = case_when(...)): The case_when() function categorizes the start_time into various parts of the day (e.g., \"early_morning\", \"mid_day\", etc.).\n# hms(): A function that converts a time string to a time object\n# fct_collapse(): After creating the start_day_time categories, it combines the \"night\" and \"postmidnight\" categories into a single \"night\" factor.\n# left_join(rank_df, by = \"race_year_id\"): This joins the race_start_factor data frame with the rank_df data frame on the race_year_id column, bringing in additional details about rankings and times.\n# drop_na(time_in_seconds): Removes any rows where the time_in_seconds column contains missing values, ensuring valid race time data for the visualization.\n#  It uses 2 columns (ncol = 2).\n\n\n\n\n\npopulations &lt;- read_csv(\"../../data/populations.csv\")\n\nRows: 16400 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country_code, country_name\ndbl (2): year, value\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\npopulations\n\n# A tibble: 16,400 × 4\n   country_code country_name  year value\n   &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;\n 1 ABW          Aruba         1960 54608\n 2 ABW          Aruba         1961 55811\n 3 ABW          Aruba         1962 56682\n 4 ABW          Aruba         1963 57475\n 5 ABW          Aruba         1964 58178\n 6 ABW          Aruba         1965 58782\n 7 ABW          Aruba         1966 59291\n 8 ABW          Aruba         1967 59522\n 9 ABW          Aruba         1968 59471\n10 ABW          Aruba         1969 59330\n# ℹ 16,390 more rows\n\n\n\n\n\n\ninspect(populations)\n\n\ncategorical variables:  \n          name     class levels     n missing\n1 country_code character    265 16400       0\n2 country_name character    265 16400       0\n                                   distribution\n1 ABW (0.4%), AFE (0.4%), AFG (0.4%) ...       \n2 Afghanistan (0.4%) ...                       \n\nquantitative variables:  \n   name   class  min       Q1  median       Q3        max         mean\n1  year numeric 1960   1975.0    1991     2006       2021 1.990529e+03\n2 value numeric 2646 986302.5 6731400 46024452 7888408686 2.140804e+08\n            sd     n missing\n1 1.789551e+01 16400       0\n2 7.040554e+08 16400       0\n\n\n\n\n\n\ngf_histogram(~value, data = populations, title = \"Long Tailed Histogram\")\n\n\n\n\n\n\n\n##\ngf_density(~value, data = populations, title = \"Long Tailed Density\")\n\n\n\n\n\n\n\n# gf_density(): This function creates a density plot, which is a smoothed version of the histogram. It estimates the probability density function of the variable. Shows the overall shape of the distribution without the bins.Shows both the discrete and continuous aspects of the distribution.\n\n\n\n\n\ngf_histogram(~ log10(value), data = populations, title = \"Histogram with Log transformed x-variable\")\n\n\n\n\n\n\n\n##\ngf_density(~ log10(value), data = populations, title = \"Density with Log transformed x-variable\")"
  },
  {
    "objectID": "posts/Day 4/index.html#introduction",
    "href": "posts/Day 4/index.html#introduction",
    "title": "Day 4",
    "section": "",
    "text": "Today, we are looking at quantities.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(crosstable) \n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\n\n\n\n\ndiamonds\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n\n\n\n\n\ndiamonds\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n head(10)\n\n[1] 10\n\n\n\n\n\n\nglimpse(diamonds)\n\nRows: 53,940\nColumns: 10\n$ carat   &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n\n\n\n\n\n\ninspect(diamonds)\n\n\ncategorical variables:  \n     name   class levels     n missing\n1     cut ordered      5 53940       0\n2   color ordered      7 53940       0\n3 clarity ordered      8 53940       0\n                                   distribution\n1 Ideal (40%), Premium (25.6%) ...             \n2 G (20.9%), E (18.2%), F (17.7%) ...          \n3 SI1 (24.2%), VS2 (22.7%), SI2 (17%) ...      \n\nquantitative variables:  \n   name   class   min     Q1  median      Q3      max         mean           sd\n1 carat numeric   0.2   0.40    0.70    1.04     5.01    0.7979397    0.4740112\n2 depth numeric  43.0  61.00   61.80   62.50    79.00   61.7494049    1.4326213\n3 table numeric  43.0  56.00   57.00   59.00    95.00   57.4571839    2.2344906\n4 price integer 326.0 950.00 2401.00 5324.25 18823.00 3932.7997219 3989.4397381\n5     x numeric   0.0   4.71    5.70    6.54    10.74    5.7311572    1.1217607\n6     y numeric   0.0   4.72    5.71    6.54    58.90    5.7345260    1.1421347\n7     z numeric   0.0   2.91    3.53    4.04    31.80    3.5387338    0.7056988\n      n missing\n1 53940       0\n2 53940       0\n3 53940       0\n4 53940       0\n5 53940       0\n6 53940       0\n7 53940       0\n\n\n\n\n\n\nskim(diamonds)\n\n\nData summary\n\n\nName\ndiamonds\n\n\nNumber of rows\n53940\n\n\nNumber of columns\n10\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n7\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\ncut\n0\n1\nTRUE\n5\nIde: 21551, Pre: 13791, Ver: 12082, Goo: 4906\n\n\ncolor\n0\n1\nTRUE\n7\nG: 11292, E: 9797, F: 9542, H: 8304\n\n\nclarity\n0\n1\nTRUE\n8\nSI1: 13065, VS2: 12258, SI2: 9194, VS1: 8171\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ncarat\n0\n1\n0.80\n0.47\n0.2\n0.40\n0.70\n1.04\n5.01\n▇▂▁▁▁\n\n\ndepth\n0\n1\n61.75\n1.43\n43.0\n61.00\n61.80\n62.50\n79.00\n▁▁▇▁▁\n\n\ntable\n0\n1\n57.46\n2.23\n43.0\n56.00\n57.00\n59.00\n95.00\n▁▇▁▁▁\n\n\nprice\n0\n1\n3932.80\n3989.44\n326.0\n950.00\n2401.00\n5324.25\n18823.00\n▇▂▁▁▁\n\n\nx\n0\n1\n5.73\n1.12\n0.0\n4.71\n5.70\n6.54\n10.74\n▁▁▇▃▁\n\n\ny\n0\n1\n5.73\n1.14\n0.0\n4.72\n5.71\n6.54\n58.90\n▇▁▁▁▁\n\n\nz\n0\n1\n3.54\n0.71\n0.0\n2.91\n3.53\n4.04\n31.80\n▇▁▁▁▁\n\n\n\n\n\n\n\n\n\ngf_histogram(~price, data = diamonds) %&gt;%\n  gf_labs(\n    title = \"Plot 1A: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\ngf_histogram(~price,\n  data = diamonds,\n  bins = 100\n) %&gt;%\n  gf_labs(\n    title = \"Plot 1B: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n# bins- number of classes on the x-axis\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~carat) %&gt;%\n  gf_labs(\n    title = \"Plot 2A: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~carat,\n    bins = 100\n  ) %&gt;%\n  gf_labs(\n    title = \"Plot 2B: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\ngf_histogram(~price, fill = ~cut, data = diamonds) %&gt;%\n  gf_labs(title = \"Plot 3A: Diamond Prices\", caption = \"ggformula\")\n\n\n\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.1) %&gt;%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n#color- colour of outline, alpha- opacity of filled colour\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.5) %&gt;%\n  gf_facet_wrap(~cut) %&gt;%\n  gf_labs(\n    title = \"Plot 3C: Prices by Filled and Facetted by Cut\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x = element_text(\n      angle = 45,\n      hjust = 1\n    )\n  ))\n\n\n\n\n\n\n\n# gf_facet_wrap- divides the one graph into various graphs depending on the numbers of levels, gf_theme- style of text for characters titling the x-axis\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.7) %&gt;%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 2) %&gt;%\n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45,\n        hjust = 1\n      )\n  ))\n\n\n\n\n\n\n\n# free y-scale- each different graph will now follow a different scale along the y-axis according to requirements\n\n\n\n\n\nrace_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv\")\n\nRows: 1207 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): event, race, city, country, participation\ndbl  (6): race_year_id, distance, elevation_gain, elevation_loss, aid_statio...\ndate (1): date\ntime (1): start_time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nrank_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv\")\n\nRows: 137803 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): runner, time, gender, nationality\ndbl (4): race_year_id, rank, age, time_in_seconds\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nrace_df\n\n# A tibble: 1,207 × 13\n   race_year_id event    race  city  country date       start_time participation\n          &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n 1        68140 Peak Di… Mill… Cast… United… 2021-09-03 19:00      solo         \n 2        72496 UTMB®    UTMB® Cham… France  2021-08-27 17:00      Solo         \n 3        69855 Grand R… Ultr… viel… France  2021-08-20 05:00      solo         \n 4        67856 Persenk… PERS… Asen… Bulgar… 2021-08-20 18:00      solo         \n 5        70469 Runfire… 100 … uluk… Turkey  2021-08-20 18:00      solo         \n 6        66887 Swiss A… 160KM Müns… Switze… 2021-08-15 17:00      solo         \n 7        67851 Salomon… Salo… Foll… Norway  2021-08-14 07:00      solo         \n 8        68241 Ultra T… 160KM Spa   Belgium 2021-08-14 07:00      solo         \n 9        70241 Québec … QMT-… Beau… Canada  2021-08-13 22:00      solo         \n10        69945 Bunketo… BBUT… LIND… Sweden  2021-08-07 10:00      solo         \n# ℹ 1,197 more rows\n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\n\n\n\n\n\nrank_df\n\n# A tibble: 137,803 × 8\n   race_year_id  rank runner      time    age gender nationality time_in_seconds\n          &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                 &lt;dbl&gt;\n 1        68140     1 VERHEUL Ja… 26H …    30 M      GBR                   95725\n 2        68140     2 MOULDING J… 27H …    43 M      GBR                   97229\n 3        68140     3 RICHARDSON… 28H …    38 M      GBR                  103747\n 4        68140     4 DYSON Fiona 30H …    55 W      GBR                  111217\n 5        68140     5 FRONTERAS … 32H …    48 W      GBR                  117981\n 6        68140     6 THOMAS Lei… 32H …    31 M      GBR                  118000\n 7        68140     7 SHORT Debo… 33H …    55 W      GBR                  120601\n 8        68140     8 CROSSLEY C… 33H …    40 W      GBR                  120803\n 9        68140     9 BUTCHER Ke… 34H …    47 M      GBR                  125656\n10        68140    10 Hendry Bill 34H …    29 M      GBR                  125979\n# ℹ 137,793 more rows\n\n\n\n\n\n\nglimpse(race_df)\n\nRows: 1,207\nColumns: 13\n$ race_year_id   &lt;dbl&gt; 68140, 72496, 69855, 67856, 70469, 66887, 67851, 68241,…\n$ event          &lt;chr&gt; \"Peak District Ultras\", \"UTMB®\", \"Grand Raid des Pyréné…\n$ race           &lt;chr&gt; \"Millstone 100\", \"UTMB®\", \"Ultra Tour 160\", \"PERSENK UL…\n$ city           &lt;chr&gt; \"Castleton\", \"Chamonix\", \"vielle-Aure\", \"Asenovgrad\", \"…\n$ country        &lt;chr&gt; \"United Kingdom\", \"France\", \"France\", \"Bulgaria\", \"Turk…\n$ date           &lt;date&gt; 2021-09-03, 2021-08-27, 2021-08-20, 2021-08-20, 2021-0…\n$ start_time     &lt;time&gt; 19:00:00, 17:00:00, 05:00:00, 18:00:00, 18:00:00, 17:0…\n$ participation  &lt;chr&gt; \"solo\", \"Solo\", \"solo\", \"solo\", \"solo\", \"solo\", \"solo\",…\n$ distance       &lt;dbl&gt; 166.9, 170.7, 167.0, 164.0, 159.9, 159.9, 163.8, 163.9,…\n$ elevation_gain &lt;dbl&gt; 4520, 9930, 9980, 7490, 100, 9850, 5460, 4630, 6410, 31…\n$ elevation_loss &lt;dbl&gt; -4520, -9930, -9980, -7500, -100, -9850, -5460, -4660, …\n$ aid_stations   &lt;dbl&gt; 10, 11, 13, 13, 12, 15, 5, 8, 13, 23, 13, 5, 12, 15, 0,…\n$ participants   &lt;dbl&gt; 150, 2300, 600, 150, 0, 300, 0, 200, 120, 100, 300, 50,…\n\n\n\n\n\n\nglimpse(rank_df)\n\nRows: 137,803\nColumns: 8\n$ race_year_id    &lt;dbl&gt; 68140, 68140, 68140, 68140, 68140, 68140, 68140, 68140…\n$ rank            &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, NA, NA, NA,…\n$ runner          &lt;chr&gt; \"VERHEUL Jasper\", \"MOULDING JON\", \"RICHARDSON Phill\", …\n$ time            &lt;chr&gt; \"26H 35M 25S\", \"27H 0M 29S\", \"28H 49M 7S\", \"30H 53M 37…\n$ age             &lt;dbl&gt; 30, 43, 38, 55, 48, 31, 55, 40, 47, 29, 48, 47, 52, 49…\n$ gender          &lt;chr&gt; \"M\", \"M\", \"M\", \"W\", \"W\", \"M\", \"W\", \"W\", \"M\", \"M\", \"M\",…\n$ nationality     &lt;chr&gt; \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\"…\n$ time_in_seconds &lt;dbl&gt; 95725, 97229, 103747, 111217, 117981, 118000, 120601, …\n\n\n\n\n\n\nrace_df %&gt;%\n  favstats(~distance, data = .)\n\n min    Q1 median     Q3   max     mean       sd    n missing\n   0 160.1  161.5 165.15 179.1 152.6187 39.87864 1207       0\n\n# favstats- summary statistics (such as the minimum, maximum, mean, median, standard deviation, and more) \n\n\n\n\n\nrank_df %&gt;%\n  drop_na() %&gt;%\n  favstats(time_in_seconds ~ gender, data = .)\n\n  gender  min      Q1 median       Q3    max     mean       sd      n missing\n1      M 3600 96536.5 115845 149761.5 288000 123271.1 37615.42 101643       0\n2      W 9191 96695.0 107062 131464.0 296806 117296.5 34604.26  18341       0\n\n# drop_na()- removes rows that contain missing values\n\n\n\n\n\ncrosstable(time_in_seconds + age ~ gender, data = rank_df) %&gt;%\n  crosstable::as_flextable()\n\nlabelvariablegenderMWNAtime_in_secondsMin / Max3600.0 / 2.9e+059191.0 / 3.0e+058131.0 / 2.2e+05Med [IQR]1.2e+05 [9.7e+04;1.5e+05]1.1e+05 [9.7e+04;1.3e+05]1.2e+05 [9.9e+04;1.5e+05]Mean (std)1.2e+05 (3.8e+04)1.2e+05 (3.5e+04)1.2e+05 (4.4e+04)N (NA)101643 (15073)18341 (2716)28 (2)ageMin / Max0 / 133.00 / 81.029.0 / 59.0Med [IQR]47.0 [40.0;53.0]45.0 [39.0;52.0]40.5 [36.0;50.5]Mean (std)46.4 (10.2)45.3 (9.7)41.7 (9.0)N (NA)116716 (0)21057 (0)30 (0)\n\n# crosstable- useful for exploring the relationship between two or more categorical variables, and it often includes descriptive statistics for numeric variables.\n\n\n\n\n\nrace_df %&gt;%\n  count(country) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 61 × 2\n   country            n\n   &lt;chr&gt;          &lt;int&gt;\n 1 United States    438\n 2 United Kingdom   110\n 3 France            56\n 4 Australia         46\n 5 Sweden            46\n 6 China             45\n 7 Canada            32\n 8 Spain             27\n 9 Japan             24\n10 Poland            23\n# ℹ 51 more rows\n\n# count(country): This function counts the occurrences of each unique value in the country column.\n# arrange(desc(n)): This function sorts the resulting data frame in descending order (desc) based on the count (n).\n\n\n\n\n\nrank_df %&gt;%\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 133 × 2\n   nationality     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 USA         47259\n 2 FRA         28905\n 3 GBR         11076\n 4 JPN          6729\n 5 ESP          5478\n 6 CHN          4744\n 7 CAN          2822\n 8 ITA          2794\n 9 SWE          2293\n10 AUS          1683\n# ℹ 123 more rows\n\n\n\n\n\n\nrank_df %&gt;%\n  filter(rank %in% c(1, 2, 3)) %&gt;%\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 69 × 2\n   nationality     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 USA          1240\n 2 GBR           347\n 3 FRA           210\n 4 AUS           140\n 5 CAN           132\n 6 CHN           128\n 7 SWE           124\n 8 ESP           113\n 9 JPN            94\n10 ITA            79\n# ℹ 59 more rows\n\n# filter(rank %in% c(1, 2, 3))- This function filters the rows of rank_df where the rank column contains the values 1, 2, or 3.\n\n\n\n\n\nlongest_races &lt;- race_df %&gt;%\n  slice_max(n = 5, order_by = distance) # Longest distance races\nlongest_races\n\n# A tibble: 6 × 13\n  race_year_id event     race  city  country date       start_time participation\n         &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n1        68776 Ultra To… Ut4M… Gren… France  2021-07-16 18:00      Solo         \n2        55551 Ultra Tr… Inth… Chom… Thaila… 2020-02-14 10:00      solo         \n3         7484 Le TREG®… LE T… Fada  Chad    2015-02-06 00:00      solo         \n4         7594 THE GREA… 100 … Pato… Austra… 2014-09-13 00:00      Solo         \n5        71066 ULTRA 01  Ultr… Oyon… France  2021-07-09 18:00      solo         \n6        23565 EstrelAç… Estr… Penh… Portug… 2017-10-06 18:00      Solo         \n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\nlongest_races %&gt;%\n  left_join(., rank_df, by = \"race_year_id\") %&gt;% # total participants in longest 4 races\n  filter(rank %in% c(1:10)) %&gt;% # Top 10 ranks\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 9 × 2\n  nationality     n\n  &lt;chr&gt;       &lt;int&gt;\n1 FRA            26\n2 AUS             9\n3 POR             8\n4 THA             8\n5 BEL             1\n6 BRA             1\n7 ESP             1\n8 MAS             1\n9 RUS             1\n\n# slice_max(n = 5, order_by = distance)- This function selects the top 5 rows (races) from race_df, ordering them by the distance column in descending order, meaning it returns the races with the longest distances.\n# left_join(., rank_df, by = \"race_year_id\")- This joins the longest_races data frame with the rank_df data frame on the race_year_id column. The . represents the data passed from the previous pipe.\n# filter(rank %in% c(1:10))- After joining, this filters the data to include only participants who ranked between 1 and 10. It keeps the top 10 participants for each of the longest races.\n\n\n\n\n\nrank_df %&gt;%\n  gf_histogram(~time_in_seconds, bins = 75) %&gt;%\n  gf_labs(title = \"Histogram of Race Times\")\n\nWarning: Removed 17791 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nrace_df %&gt;%\n  gf_histogram(~distance, bins = 50) %&gt;%\n  gf_labs(title = \"Histogram of Race Distances\")\n\n\n\n\n\n\n\n\n\n\n\n\nrace_df %&gt;%\n  filter(distance == 0)\n\n# A tibble: 74 × 13\n   race_year_id event    race  city  country date       start_time participation\n          &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n 1        64771 The Old… 100m… Hanm… New Ze… 2021-05-14 10:00      solo         \n 2        71220 Run Lov… 100M  &lt;NA&gt;  United… 2021-02-26 00:00      solo         \n 3        67160 IDAHO M… 100 … &lt;NA&gt;  United… 2020-09-12 00:00      solo         \n 4        67713 Pine cr… 100M… Well… PA, Un… 2020-09-12 00:00      solo         \n 5        51777 Chiemga… 100 … Berg… Germany 2020-07-31 13:00      Solo         \n 6        66413 Palisad… Moos… Irwin United… 2020-07-17 05:00      solo         \n 7        62593 Run Lov… 100M  &lt;NA&gt;  United… 2020-02-28 00:00      solo         \n 8        50097 The Gre… The … Hanm… New Ze… 2020-01-17 07:00      solo         \n 9        65861 Loup Ga… 100M  Vill… LA, Un… 2019-12-14 00:00      solo         \n10        59415 RIO DEL… 100 … &lt;NA&gt;  United… 2019-11-07 00:00      solo         \n# ℹ 64 more rows\n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\n# Could be cancelled events\n\n\n\n\n\nrace_times &lt;- race_df %&gt;%\n  count(start_time) %&gt;%\n  arrange(desc(n))\nrace_times\n\n# A tibble: 39 × 2\n   start_time     n\n   &lt;time&gt;     &lt;int&gt;\n 1 00:00        513\n 2 06:00        114\n 3 08:00         63\n 4 10:00         60\n 5 07:00         58\n 6 18:00         50\n 7 05:00         48\n 8 12:00         38\n 9 04:00         30\n10 09:00         27\n# ℹ 29 more rows\n\n\n\n\n\n\nrace_start_factor &lt;- race_df %&gt;%\n  filter(distance == 0) %&gt;% # Races that actually took place\n  mutate(\n    start_day_time =\n      case_when(\n        start_time &gt; hms(\"02:00:00\") &\n          start_time &lt;= hms(\"06:00:00\") ~ \"early_morning\",\n        start_time &gt; hms(\"06:00:01\") &\n          start_time &lt;= hms(\"10:00:00\") ~ \"late_morning\",\n        start_time &gt; hms(\"10:00:01\") &\n          start_time &lt;= hms(\"14:00:00\") ~ \"mid_day\",\n        start_time &gt; hms(\"14:00:01\") &\n          start_time &lt;= hms(\"18:00:00\") ~ \"afternoon\",\n        start_time &gt; hms(\"18:00:01\") &\n          start_time &lt;= hms(\"22:00:00\") ~ \"evening\",\n        start_time &gt; hms(\"22:00:01\") &\n          start_time &lt;= hms(\"23:59:59\") ~ \"night\",\n        start_time &gt;= hms(\"00:00:00\") &\n          start_time &lt;= hms(\"02:00:00\") ~ \"postmidnight\",\n        .default = \"other\"\n      )\n  ) %&gt;%\n  mutate(\n    start_day_time =\n      as_factor(start_day_time) %&gt;%\n        fct_collapse(\n          .f = .,\n          night = c(\"night\", \"postmidnight\")\n        )\n  )\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `start_day_time = `%&gt;%`(...)`.\nCaused by warning:\n! Unknown levels in `f`: night\n\n##\n# Join with rank_df\nrace_start_factor %&gt;%\n  left_join(rank_df, by = \"race_year_id\") %&gt;%\n  drop_na(time_in_seconds) %&gt;%\n  gf_histogram(\n    ~time_in_seconds,\n    bins = 75,\n    fill = ~start_day_time,\n    color = ~start_day_time,\n    alpha = 0.5\n  ) %&gt;%\n  gf_facet_wrap(vars(start_day_time), ncol = 2, scales = \"free_y\") %&gt;%\n  gf_labs(title = \"Race Times by Start-Time\")\n\n\n\n\n\n\n\n# filter(distance == 0): This filters the dataset to keep only the races that actually took place\n# mutate(start_day_time = case_when(...)): The case_when() function categorizes the start_time into various parts of the day (e.g., \"early_morning\", \"mid_day\", etc.).\n# hms(): A function that converts a time string to a time object\n# fct_collapse(): After creating the start_day_time categories, it combines the \"night\" and \"postmidnight\" categories into a single \"night\" factor.\n# left_join(rank_df, by = \"race_year_id\"): This joins the race_start_factor data frame with the rank_df data frame on the race_year_id column, bringing in additional details about rankings and times.\n# drop_na(time_in_seconds): Removes any rows where the time_in_seconds column contains missing values, ensuring valid race time data for the visualization.\n#  It uses 2 columns (ncol = 2).\n\n\n\n\n\npopulations &lt;- read_csv(\"../../data/populations.csv\")\n\nRows: 16400 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country_code, country_name\ndbl (2): year, value\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\npopulations\n\n# A tibble: 16,400 × 4\n   country_code country_name  year value\n   &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;\n 1 ABW          Aruba         1960 54608\n 2 ABW          Aruba         1961 55811\n 3 ABW          Aruba         1962 56682\n 4 ABW          Aruba         1963 57475\n 5 ABW          Aruba         1964 58178\n 6 ABW          Aruba         1965 58782\n 7 ABW          Aruba         1966 59291\n 8 ABW          Aruba         1967 59522\n 9 ABW          Aruba         1968 59471\n10 ABW          Aruba         1969 59330\n# ℹ 16,390 more rows\n\n\n\n\n\n\ninspect(populations)\n\n\ncategorical variables:  \n          name     class levels     n missing\n1 country_code character    265 16400       0\n2 country_name character    265 16400       0\n                                   distribution\n1 ABW (0.4%), AFE (0.4%), AFG (0.4%) ...       \n2 Afghanistan (0.4%) ...                       \n\nquantitative variables:  \n   name   class  min       Q1  median       Q3        max         mean\n1  year numeric 1960   1975.0    1991     2006       2021 1.990529e+03\n2 value numeric 2646 986302.5 6731400 46024452 7888408686 2.140804e+08\n            sd     n missing\n1 1.789551e+01 16400       0\n2 7.040554e+08 16400       0\n\n\n\n\n\n\ngf_histogram(~value, data = populations, title = \"Long Tailed Histogram\")\n\n\n\n\n\n\n\n##\ngf_density(~value, data = populations, title = \"Long Tailed Density\")\n\n\n\n\n\n\n\n# gf_density(): This function creates a density plot, which is a smoothed version of the histogram. It estimates the probability density function of the variable. Shows the overall shape of the distribution without the bins.Shows both the discrete and continuous aspects of the distribution.\n\n\n\n\n\ngf_histogram(~ log10(value), data = populations, title = \"Histogram with Log transformed x-variable\")\n\n\n\n\n\n\n\n##\ngf_density(~ log10(value), data = populations, title = \"Density with Log transformed x-variable\")"
  },
  {
    "objectID": "posts/Day 2/index.html",
    "href": "posts/Day 2/index.html",
    "title": "Day 2",
    "section": "",
    "text": "I am working with data summaries. First, mpg, then something else.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\n\n\n\n\nmpg\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n\n\nThe table provides information on various car models from 1999 and 2008, highlighting key specifications. The data allows for a detailed comparison of the cars’ performance and specifications across different years and models.\n\n\n\n\nmpg \n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n\n  head(10) \n\n[1] 10\n\n\nThe table displays the first 10 rows of the mpg dataset, with details on engine size (displacement), number of cylinders, transmission type (automatic or manual), drivetrain (front-wheel or all-wheel drive), and fuel efficiency in city and highway miles per gallon (MPG). The engine displacement ranges from 1.8 to 3.1 liters, and the number of cylinders is either 4 or 6. The city MPG varies from 16 to 21, while highway MPG ranges from 25 to 31.\n\n\n\n\nglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\n\nThis summary provides an overview of the specifications and performance characteristics of car models in the dataset.\n\n\n\n\ninspect(mpg)\n\n\ncategorical variables:  \n          name     class levels   n missing\n1 manufacturer character     15 234       0\n2        model character     38 234       0\n3        trans character     10 234       0\n4          drv character      3 234       0\n5           fl character      5 234       0\n6        class character      7 234       0\n                                   distribution\n1 dodge (15.8%), toyota (14.5%) ...            \n2 caravan 2wd (4.7%) ...                       \n3 auto(l4) (35.5%), manual(m5) (24.8%) ...     \n4 f (45.3%), 4 (44%), r (10.7%)                \n5 r (71.8%), p (22.2%), e (3.4%) ...           \n6 suv (26.5%), compact (20.1%) ...             \n\nquantitative variables:  \n   name   class    min     Q1 median     Q3  max        mean       sd   n\n1 displ numeric    1.6    2.4    3.3    4.6    7    3.471795 1.291959 234\n2  year integer 1999.0 1999.0 2003.5 2008.0 2008 2003.500000 4.509646 234\n3   cyl integer    4.0    4.0    6.0    8.0    8    5.888889 1.611534 234\n4   cty integer    9.0   14.0   17.0   19.0   35   16.858974 4.255946 234\n5   hwy integer   12.0   18.0   24.0   27.0   44   23.440171 5.954643 234\n  missing\n1       0\n2       0\n3       0\n4       0\n5       0\n\n\nThe inspection of the mpg dataset reveals two types of variables: categorical and quantitative. Categorical variables include manufacturer, model, transmission, drivetrain, fl (fuel type), and class, with a total of 234 entries and no missing data. Quantitative variables, such as engine displacement, year, number of cylinders, city miles per gallon, and highway miles per gallon, are summarized with key statistics. For example, engine displacement ranges from 1.6 to 7 liters, and city MPG varies from 9 to 35, with an average of 16.86. This overview highlights the structure and details of the dataset, providing both descriptive and numerical insights.\n\n\n\n\nskim(mpg)\n\n\nData summary\n\n\nName\nmpg\n\n\nNumber of rows\n234\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmanufacturer\n0\n1\n4\n10\n0\n15\n0\n\n\nmodel\n0\n1\n2\n22\n0\n38\n0\n\n\ntrans\n0\n1\n8\n10\n0\n10\n0\n\n\ndrv\n0\n1\n1\n1\n0\n3\n0\n\n\nfl\n0\n1\n1\n1\n0\n5\n0\n\n\nclass\n0\n1\n3\n10\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndispl\n0\n1\n3.47\n1.29\n1.6\n2.4\n3.3\n4.6\n7\n▇▆▆▃▁\n\n\nyear\n0\n1\n2003.50\n4.51\n1999.0\n1999.0\n2003.5\n2008.0\n2008\n▇▁▁▁▇\n\n\ncyl\n0\n1\n5.89\n1.61\n4.0\n4.0\n6.0\n8.0\n8\n▇▁▇▁▇\n\n\ncty\n0\n1\n16.86\n4.26\n9.0\n14.0\n17.0\n19.0\n35\n▆▇▃▁▁\n\n\nhwy\n0\n1\n23.44\n5.95\n12.0\n18.0\n24.0\n27.0\n44\n▅▅▇▁▁\n\n\n\n\n\nAll variables have complete data with no missing values.This dataset provides a comprehensive view of car specifications and fuel efficiency, ready for further analysis.\n\n\n\n\n\n\nEngine Displacement (dbl): The engine size in liters.\nModel Year (int): The year of the car’s model, ranging from 1999 to 2008.\nCity Mileage (dbl): Miles per gallon (MPG) in city driving conditions.\nHighway Mileage (dbl): Miles per gallon (MPG) in highway driving conditions.\n\n\n\n\n\nManufacturer (chr): The car’s manufacturer, e.g., Audi, Toyota.\nModel (chr): The specific car model, e.g., A4, Corolla.\nTransmission (chr): The type of transmission, e.g., auto (automatic), manual (m5/m6).\nDrivetrain (chr): The type of drivetrain, e.g., f (front-wheel drive), 4 (four-wheel drive).\nFuel (chr): The type of fuel used, e.g., p (premium), r (regular).\nClass of Vehicle (chr): The category of the vehicle, e.g., compact, SUV.\nCylinders (int): The number of cylinders in the engine (4, 6, etc.).\n\n\n\n\n\n\nmpg_modified &lt;- mpg %&gt;%\n  dplyr::mutate(\n    cyl = as_factor(cyl),\n    fl = as_factor(fl),\n    drv = as_factor(drv),\n    class = as_factor(class),\n    trans = as_factor(trans)\n  )\nglimpse(mpg_modified)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;fct&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;fct&gt; auto(l5), manual(m5), manual(m6), auto(av), auto(l5), man…\n$ drv          &lt;fct&gt; f, f, f, f, f, f, f, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, r, …\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;fct&gt; p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, r, …\n$ class        &lt;fct&gt; compact, compact, compact, compact, compact, compact, com…\n\n\nHere, several variables— cyl, fl, drv, class, and trans—have been converted from their original data types to factors. This transformation changes them into categorical variables, making them more suitable for analysis involving groupings or classifications.\n\n\n\n\nmpg_modified %&gt;%\n  group_by(cyl) %&gt;%\n  summarize(average_hwy = mean(hwy), count = n())\n\n# A tibble: 4 × 3\n  cyl   average_hwy count\n  &lt;fct&gt;       &lt;dbl&gt; &lt;int&gt;\n1 4            28.8    81\n2 5            28.8     4\n3 6            22.8    79\n4 8            17.6    70\n\n\nThe table summarizes the average highway miles per gallon for cars grouped by the number of cylinders. Cars with 4 cylinders have the highest average highway MPG at 28.80, followed closely by 5-cylinder cars with 28.75, though the 5-cylinder group only includes 4 cars. Cars with 6 cylinders average 22.82 MPG, while cars with 8 cylinders have the lowest fuel efficiency, averaging 17.63 MPG. Overall, the data shows that vehicles with fewer cylinders tend to be more fuel-efficient on the highway, with MPG decreasing as the number of cylinders increases.\n\n\n\n\nmpg_modified %&gt;%\n  group_by(cyl) %&gt;%\n  summarize(average_hwy = mean(cty), count = n())\n\n# A tibble: 4 × 3\n  cyl   average_hwy count\n  &lt;fct&gt;       &lt;dbl&gt; &lt;int&gt;\n1 4            21.0    81\n2 5            20.5     4\n3 6            16.2    79\n4 8            12.6    70\n\n\nThe table summarizes the average city miles per gallon based on the number of cylinders. Cars with 4 cylinders have the highest average city MPG at 21.01, followed by 5-cylinder cars at 20.50, though the sample size for 5-cylinder cars is small with only 4 cars. Vehicles with 6 cylinders average 16.22 MPG, while those with 8 cylinders have the lowest city MPG at 12.57. This data shows that cars with fewer cylinders tend to have better fuel efficiency in city driving.\n\n\n\n\nmpg_modified %&gt;%\n  group_by(cyl, fl) %&gt;%\n  summarize(average_hwy = mean(hwy), count = n())\n\n`summarise()` has grouped output by 'cyl'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 13 × 4\n# Groups:   cyl [4]\n   cyl   fl    average_hwy count\n   &lt;fct&gt; &lt;fct&gt;       &lt;dbl&gt; &lt;int&gt;\n 1 4     p            27.8    22\n 2 4     r            28.3    55\n 3 4     d            43       3\n 4 4     c            36       1\n 5 5     r            28.8     4\n 6 6     p            25.3    17\n 7 6     r            22.2    60\n 8 6     e            17       1\n 9 6     d            22       1\n10 8     p            20.8    13\n11 8     r            17.5    49\n12 8     e            12.7     7\n13 8     d            17       1\n\n\nThe table shows the average highway MPG for cars based on cylinders and fuel type. Cars with 4 cylinders are more fuel-efficient, with MPG ranging from 27.82 for premium fuel to 43 for diesel, though alternative fuel samples are small. For 6-cylinder cars, MPG drops to between 25.29 (petrol) and 17 (ethanol). 8-cylinder cars are the least efficient, with 17.51 MPG for regular fuel and 12.71 for ethanol. Overall, cars with fewer cylinders and certain fuels, like diesel, achieve better highway fuel efficiency.\n\n\n\n\nmpg_modified %&gt;%\n  group_by(cyl, fl) %&gt;%\n  summarize(average_hwy = mean(cty), count = n())\n\n`summarise()` has grouped output by 'cyl'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 13 × 4\n# Groups:   cyl [4]\n   cyl   fl    average_hwy count\n   &lt;fct&gt; &lt;fct&gt;       &lt;dbl&gt; &lt;int&gt;\n 1 4     p           19.9     22\n 2 4     r           20.8     55\n 3 4     d           32.3      3\n 4 4     c           24        1\n 5 5     r           20.5      4\n 6 6     p           16.8     17\n 7 6     r           16.1     60\n 8 6     e           11        1\n 9 6     d           17        1\n10 8     p           13.8     13\n11 8     r           12.7     49\n12 8     e            9.57     7\n13 8     d           14        1\n\n\nThe table provides a breakdown of the average city miles per gallon by cylinder count and fuel type (fl). For 4-cylinder cars, average city MPG varies by fuel type, with diesel cars achieving the highest at 32.33 MPG, followed by compressed natural gas (24 MPG) and regular fuel (20.78 MPG). 6-cylinder cars show lower MPG, with ethanol-fueled cars having the lowest efficiency at 11 MPG. For 8-cylinder cars, premium fuel provides an average of 13.77 MPG. (considering the fact that rows 11-13 are not visible for me)\n\n\n\n\nmpg %&gt;% \n  group_by(manufacturer) %&gt;% \n  summarize(mean_mileage_manf=mean(hwy))\n\n# A tibble: 15 × 2\n   manufacturer mean_mileage_manf\n   &lt;chr&gt;                    &lt;dbl&gt;\n 1 audi                      26.4\n 2 chevrolet                 21.9\n 3 dodge                     17.9\n 4 ford                      19.4\n 5 honda                     32.6\n 6 hyundai                   26.9\n 7 jeep                      17.6\n 8 land rover                16.5\n 9 lincoln                   17  \n10 mercury                   18  \n11 nissan                    24.6\n12 pontiac                   26.4\n13 subaru                    25.6\n14 toyota                    24.9\n15 volkswagen                29.2\n\n\nThe table displays the average highway miles per gallon for different car manufacturers. Volkswagen leads with the highest average highway MPG at 29.22, followed closely by Honda (28.56), Hyundai (26.86), and Audi (26.44). Other manufacturers like Subaru, Pontiac, and Nissan also show relatively high fuel efficiency, with averages above 24 MPG. In contrast, manufacturers such as Dodge, Jeep, and Land Rover have the lowest average highway MPG, ranging from 16.5 to 17.9.\n\n\n\n\nmpg %&gt;% \n  group_by(manufacturer) %&gt;% \n  summarize(mean_mileage_manf=mean(cty))\n\n# A tibble: 15 × 2\n   manufacturer mean_mileage_manf\n   &lt;chr&gt;                    &lt;dbl&gt;\n 1 audi                      17.6\n 2 chevrolet                 15  \n 3 dodge                     13.1\n 4 ford                      14  \n 5 honda                     24.4\n 6 hyundai                   18.6\n 7 jeep                      13.5\n 8 land rover                11.5\n 9 lincoln                   11.3\n10 mercury                   13.2\n11 nissan                    18.1\n12 pontiac                   17  \n13 subaru                    19.3\n14 toyota                    18.5\n15 volkswagen                20.9\n\n\nThe table displays the average city miles per gallon for different car manufacturers. Volkswagen leads with the highest average city MPG at 20.93, followed by Honda (24.44) and Subaru (19.29). Other manufacturers like Audi (17.61), Nissan (18.08), and Toyota (18.53) show moderate fuel efficiency. In contrast, manufacturers like Dodge, Jeep, and Land Rover have the lowest city MPG, ranging from 11.5 to 13.5.\n\n\n\nI am working with Math Anxiety Data.\n\nmath_anxiety &lt;- read_csv(\"../../data/MathAnxiety.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 599 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Age;Gender;Grade;AMAS;RCMAS;Arith\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmath_anxiety\n\n# A tibble: 599 × 1\n   `Age;Gender;Grade;AMAS;RCMAS;Arith`\n   &lt;chr&gt;                              \n 1 137,8;Boy;Secondary;9;20;6         \n 2 140,7;Boy;Secondary;18;8;6         \n 3 137,9;Girl;Secondary;23;26;5       \n 4 142,8;Girl;Secondary;19;18;7       \n 5 135,6;Boy;Secondary;23;20;1        \n 6 135,0;Girl;Secondary;27;33;1       \n 7 133,6;Boy;Secondary;22;23;4        \n 8 139,3;Boy;Secondary;17;11;7        \n 9 131,7;Girl;Secondary;28;32;2       \n10 134,8;Boy;Secondary;20;30;6        \n# ℹ 589 more rows\n\n\nThe Math Anxiety dataset contains 599 rows and focuses on variables such as Age, Gender, Grade, AMAS (Abbreviated Math Anxiety Scale), RCMAS (Revised Children’s Manifest Anxiety Scale), and Arithmetic scores. The data is structured in a format where each row represents an individual student with their respective attributes.\n\n\n\n\nmath_anxiety &lt;- read_delim(file=\"../../data/MathAnxiety.csv\",delim =\";\")\n\nRows: 599 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (2): Gender, Grade\ndbl (3): AMAS, RCMAS, Arith\nnum (1): Age\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe dataset is read using a semicolon (;) delimiter.\n\n\n\n\nmath_anxiety %&gt;% \n  head(10)\n\n# A tibble: 10 × 6\n     Age Gender Grade      AMAS RCMAS Arith\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  1378 Boy    Secondary     9    20     6\n 2  1407 Boy    Secondary    18     8     6\n 3  1379 Girl   Secondary    23    26     5\n 4  1428 Girl   Secondary    19    18     7\n 5  1356 Boy    Secondary    23    20     1\n 6  1350 Girl   Secondary    27    33     1\n 7  1336 Boy    Secondary    22    23     4\n 8  1393 Boy    Secondary    17    11     7\n 9  1317 Girl   Secondary    28    32     2\n10  1348 Boy    Secondary    20    30     6\n\n\nThe table displays the first 10 rows of the Math Anxiety dataset, which consists of 6 variables: Age, Gender, Grade, AMAS (Abbreviated Math Anxiety Scale), RCMAS (Revised Children’s Manifest Anxiety Scale), and Arithmetic scores. The scores in AMAS, RCMAS, and Arithmetic vary across the students, showcasing different levels of math anxiety and performance. For instance, one student has an AMAS score of 9 and RCMAS score of 20, while another has an AMAS score of 28 and an RCMAS score of 32, indicating variability in anxiety levels among students.\n\n\n\n\nglimpse(math_anxiety)\n\nRows: 599\nColumns: 6\n$ Age    &lt;dbl&gt; 1378, 1407, 1379, 1428, 1356, 1350, 1336, 1393, 1317, 1348, 141…\n$ Gender &lt;chr&gt; \"Boy\", \"Boy\", \"Girl\", \"Girl\", \"Boy\", \"Girl\", \"Boy\", \"Boy\", \"Gir…\n$ Grade  &lt;chr&gt; \"Secondary\", \"Secondary\", \"Secondary\", \"Secondary\", \"Secondary\"…\n$ AMAS   &lt;dbl&gt; 9, 18, 23, 19, 23, 27, 22, 17, 28, 20, 16, 20, 21, 36, 16, 27, …\n$ RCMAS  &lt;dbl&gt; 20, 8, 26, 18, 20, 33, 23, 11, 32, 30, 10, 4, 23, 26, 24, 21, 3…\n$ Arith  &lt;dbl&gt; 6, 6, 5, 7, 1, 1, 4, 7, 2, 6, 2, 5, 2, 6, 2, 7, 2, 4, 7, 3, 8, …\n\n\nThe glimpse provides a quick overview of the structure and types of data within the dataset.\n\n\n\n\ninspect(math_anxiety)\n\n\ncategorical variables:  \n    name     class levels   n missing\n1 Gender character      2 599       0\n2  Grade character      2 599       0\n                                   distribution\n1 Boy (53.9%), Girl (46.1%)                    \n2 Primary (66.9%), Secondary (33.1%)           \n\nquantitative variables:  \n   name   class min     Q1 median     Q3  max       mean         sd   n missing\n1   Age numeric  37 1061.5   1208 1418.5 1875 1246.49249 223.112183 599       0\n2  AMAS numeric   4   18.0     22   26.5   45   21.98164   6.597962 599       0\n3 RCMAS numeric   1   14.0     19   25.0   41   19.24040   7.566802 599       0\n4 Arith numeric   0    4.0      6    7.0    8    5.30217   2.105220 599       0\n\n\nThe summary of the Math Anxiety dataset, based on the inspect() function, reveals both categorical and quantitative variables. The categorical variables are Gender and Grade, with 53.9% of the entries labeled as Boy and 46.1% as Girl. In terms of Grade, 66.9% belong to the Primary level, while 33.1% are from the Secondary level. The quantitative variables include Age, AMAS (Math Anxiety Scale), RCMAS (Revised Children’s Manifest Anxiety Scale), and Arith (Arithmetic ability). The distribution of ages ranges from 37 to 1875, with a mean of 1246.49 and a standard deviation of 223.11. AMAS scores range from 4 to 45, with a mean of 21.98 and a standard deviation of 6.60. For RCMAS, the range is 1 to 41, with a mean of 19.24 and a standard deviation of 7.57. Finally, Arith scores vary from 0 to 8, with a mean of 5.30 and a standard deviation of 2.11.\n\n\n\n\nskim(math_anxiety)\n\n\nData summary\n\n\nName\nmath_anxiety\n\n\nNumber of rows\n599\n\n\nNumber of columns\n6\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n3\n4\n0\n2\n0\n\n\nGrade\n0\n1\n7\n9\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAge\n0\n1\n1246.49\n223.11\n37\n1061.5\n1208\n1418.5\n1875\n▁▁▇▇▃\n\n\nAMAS\n0\n1\n21.98\n6.60\n4\n18.0\n22\n26.5\n45\n▂▆▇▃▁\n\n\nRCMAS\n0\n1\n19.24\n7.57\n1\n14.0\n19\n25.0\n41\n▂▇▇▅▁\n\n\nArith\n0\n1\n5.30\n2.11\n0\n4.0\n6\n7.0\n8\n▂▃▃▇▇\n\n\n\n\n\nThis reveals a well-rounded dataset, complete with both categorical and numerical variables that offer a balanced view of the participants’ characteristics and their math-related anxiety scores. The dataset is complete with no missing data.\n\n\n\n\n\n\nAge (dbl): The age of the participant, measured in years.\nAMAS (dbl): American Mathematics Anxiety Scale (AMAS) score, indicating the level of math anxiety.\nRCMAS (dbl): Revised Children’s Manifest Anxiety Scale (RCMAS) score, measuring general anxiety.\nArith (dbl): Arithmetic test score, indicating performance in a mathematics test.\n\n\n\n\n\nGender: The gender of the participant, categories include Boy and Girl.\nGrade: The educational grade level of the participant, such as Secondary.\n\n\n\n\n\n\nmath_anxiety_modified &lt;- math_anxiety %&gt;%\n  dplyr::mutate(\n    Age = Age/120,\n    Gender = as_factor(Gender)\n  )\nmath_anxiety_modified\n\n# A tibble: 599 × 6\n     Age Gender Grade      AMAS RCMAS Arith\n   &lt;dbl&gt; &lt;fct&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  11.5 Boy    Secondary     9    20     6\n 2  11.7 Boy    Secondary    18     8     6\n 3  11.5 Girl   Secondary    23    26     5\n 4  11.9 Girl   Secondary    19    18     7\n 5  11.3 Boy    Secondary    23    20     1\n 6  11.2 Girl   Secondary    27    33     1\n 7  11.1 Boy    Secondary    22    23     4\n 8  11.6 Boy    Secondary    17    11     7\n 9  11.0 Girl   Secondary    28    32     2\n10  11.2 Boy    Secondary    20    30     6\n# ℹ 589 more rows\n\n\nIn this transformation, the Age column has been scaled down by dividing the values by 120, and the Gender column has been converted into a factor with two levels: “Boy” and “Girl.”\n\n\n\n\n math_anxiety_modified %&gt;%\n  group_by(Gender) %&gt;%\n  summarize(average_AMAS = mean(AMAS), count = n())\n\n# A tibble: 2 × 3\n  Gender average_AMAS count\n  &lt;fct&gt;         &lt;dbl&gt; &lt;int&gt;\n1 Boy            21.2   323\n2 Girl           22.9   276\n\n\nThe summary of average AMAS scores grouped by gender reveals that girls have a slightly higher average AMAS score (22.93) compared to boys (21.17). The total count of boys in the dataset is 323, while the total count of girls is 276. This suggests that while boys and girls show close levels of math anxiety, girls exhibit a marginally higher average score in the dataset.\n\n\n\n\nmath_anxiety_modified %&gt;%\n  group_by(Gender,Age) %&gt;%\n  summarize(average_AMAS = mean(AMAS), count = n())\n\n`summarise()` has grouped output by 'Gender'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 474 × 4\n# Groups:   Gender [2]\n   Gender   Age average_AMAS count\n   &lt;fct&gt;  &lt;dbl&gt;        &lt;dbl&gt; &lt;int&gt;\n 1 Boy     7.76         16       1\n 2 Boy     7.82         24       1\n 3 Boy     7.83         13       1\n 4 Boy     7.9          14       1\n 5 Boy     7.91         11       1\n 6 Boy     7.94         29       1\n 7 Boy     7.96         16.5     2\n 8 Boy     7.98          9       1\n 9 Boy     7.98         29       1\n10 Boy     7.99          9       1\n# ℹ 464 more rows\n\n\nThe analysis of average AMAS scores, grouped by gender and age, provides a detailed look at how math anxiety varies across different age groups for boys and girls. By breaking down the data in this way, it is possible to explore patterns in math anxiety that may correlate with age and gender, allowing for a more nuanced understanding of how these factors influence AMAS scores.\n\n\n\n\nmath_anxiety_modified %&gt;%\n  group_by(Gender) %&gt;%\n  summarize(average_RCMAS = mean(RCMAS), count = n())\n\n# A tibble: 2 × 3\n  Gender average_RCMAS count\n  &lt;fct&gt;          &lt;dbl&gt; &lt;int&gt;\n1 Boy             18.1   323\n2 Girl            20.6   276\n\n\nThe table shows a summary of average RCMAS (Revised Children’s Manifest Anxiety Scale) scores grouped by gender. The average RCMAS score for boys is 18.12, based on 323 participants, while the average RCMAS score for girls is 20.55, based on 276 participants. This suggests that, on average, girls exhibit slightly higher anxiety levels as measured by the RCMAS scale compared to boys.\n\n\n\n\nmath_anxiety_modified %&gt;%\n  group_by(Gender,Age) %&gt;%\n  summarize(average_RCMAS = mean(RCMAS), count = n())\n\n`summarise()` has grouped output by 'Gender'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 474 × 4\n# Groups:   Gender [2]\n   Gender   Age average_RCMAS count\n   &lt;fct&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;int&gt;\n 1 Boy     7.76            20     1\n 2 Boy     7.82            20     1\n 3 Boy     7.83            15     1\n 4 Boy     7.9             17     1\n 5 Boy     7.91            15     1\n 6 Boy     7.94            24     1\n 7 Boy     7.96            27     2\n 8 Boy     7.98            23     1\n 9 Boy     7.98            29     1\n10 Boy     7.99            34     1\n# ℹ 464 more rows\n\n\nThis type of summary allows us to analyze how anxiety levels, as measured by the RCMAS, vary across different age groups within each gender.\n\n\n\nI am working with Star Trek Books Data.\n\nstartrek_data &lt;- read_csv(\"../../data/star_trek_books.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 16369 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): title;author;date;publisher;identifier;series;subseries;nchap;nword...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstartrek_data\n\n# A tibble: 16,369 × 1\n   title;author;date;publisher;identifier;series;subseries;nchap;nword;nchar;d…¹\n   &lt;chr&gt;                                                                        \n 1 \"Star Trek: Star Trek Movie Tie-In;Alan Dean Foster;2009-05-12;Simon and Sch…\n 2 \"Starfleet Academy: The Delta Anomaly;Rick Barba;2010-11-02;Simon Spotlight;…\n 3 \"Starfleet Academy: The Edge;Rudy Josephs;2010-12-28;Simon Spotlight;9781442…\n 4 \"Starfleet Academy: The Gemini Agent;Rick Barba;2011-06-28;Simon Spotlight;9…\n 5 \"Starfleet Academy: The Assassination Game;Alan Gratz;2012-06-26;Simon Spotl…\n 6 \"Star Trek: Into Darkness;Alan Dean Foster;2013-05-21;Gallery Books;97814767…\n 7 \"Captain's Table 1: War Dragons;James T. Hirk;1998-06-01;Pocket Books;978143…\n 8 \"Captain's Table 5: Once Burned;Mackenzie;1998-10-01;Pocket Books;9780743455…\n 9 \"Captain's Table 6: Where Sea Meets Sky;Christopher Pike;1998-10-01;Pocket B…\n10 \"For my brother, Ray, who introduced me to Star Trek and helped tune it in b…\n# ℹ 16,359 more rows\n# ℹ abbreviated name:\n#   ¹​`title;author;date;publisher;identifier;series;subseries;nchap;nword;nchar;dedication`\n\n\nThe Star Trek Books dataset contains 16,369 entries, each representing a book or publication related to the Star Trek franchise. Key variables include the book title, author, publication date, and publisher. The dataset also includes details such as unique identifiers, the series and subseries the book belongs to, and the number of chapters, words, and characters in each book. Additionally, there is a field for any author dedications.\n\n\n\n\nstartrek_data &lt;- read_delim(file=\"../../data/star_trek_books.csv\",delim =\";\")\n\nRows: 783 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr  (7): title, author, publisher, identifier, series, subseries, dedication\ndbl  (3): nchap, nword, nchar\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe dataset is read using a semicolon (;) delimiter.\n\n\n\n\nstartrek_data\n\n# A tibble: 783 × 11\n   title    author date       publisher identifier series subseries nchap  nword\n   &lt;chr&gt;    &lt;chr&gt;  &lt;date&gt;     &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;\n 1 Star Tr… Alan … 2009-05-12 Simon an… 1439163391 AV     &lt;NA&gt;         18  77035\n 2 Starfle… Rick … 2010-11-02 Simon Sp… 978144241… AV     Starflee…    14  40129\n 3 Starfle… Rudy … 2010-12-28 Simon Sp… 978144241… AV     Starflee…    31  52547\n 4 Starfle… Rick … 2011-06-28 Simon Sp… 978144241… AV     Starflee…    13  39495\n 5 Starfle… Alan … 2012-06-26 Simon Sp… 978144242… AV     Starflee…    30  62030\n 6 Star Tr… Alan … 2013-05-21 Gallery … 978147671… AV     &lt;NA&gt;         17  77438\n 7 Captain… James… 1998-06-01 Pocket B… 978143910… CT     &lt;NA&gt;         21  95110\n 8 Captain… Macke… 1998-10-01 Pocket B… 978074345… CT     &lt;NA&gt;         26  76392\n 9 Captain… Chris… 1998-10-01 Pocket B… 978143910… CT     &lt;NA&gt;         34  78678\n10 The Cap… John … 2000-03-01 Pocket B… 978074340… CT     &lt;NA&gt;        176 436682\n# ℹ 773 more rows\n# ℹ 2 more variables: nchar &lt;dbl&gt;, dedication &lt;chr&gt;\n\n\n\n\n\n\nstartrek_data %&gt;% \n head(10)\n\n# A tibble: 10 × 11\n   title    author date       publisher identifier series subseries nchap  nword\n   &lt;chr&gt;    &lt;chr&gt;  &lt;date&gt;     &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;\n 1 Star Tr… Alan … 2009-05-12 Simon an… 1439163391 AV     &lt;NA&gt;         18  77035\n 2 Starfle… Rick … 2010-11-02 Simon Sp… 978144241… AV     Starflee…    14  40129\n 3 Starfle… Rudy … 2010-12-28 Simon Sp… 978144241… AV     Starflee…    31  52547\n 4 Starfle… Rick … 2011-06-28 Simon Sp… 978144241… AV     Starflee…    13  39495\n 5 Starfle… Alan … 2012-06-26 Simon Sp… 978144242… AV     Starflee…    30  62030\n 6 Star Tr… Alan … 2013-05-21 Gallery … 978147671… AV     &lt;NA&gt;         17  77438\n 7 Captain… James… 1998-06-01 Pocket B… 978143910… CT     &lt;NA&gt;         21  95110\n 8 Captain… Macke… 1998-10-01 Pocket B… 978074345… CT     &lt;NA&gt;         26  76392\n 9 Captain… Chris… 1998-10-01 Pocket B… 978143910… CT     &lt;NA&gt;         34  78678\n10 The Cap… John … 2000-03-01 Pocket B… 978074340… CT     &lt;NA&gt;        176 436682\n# ℹ 2 more variables: nchar &lt;dbl&gt;, dedication &lt;chr&gt;\n\n\nThe first 10 rows of the Star Trek Books dataset display information about books published by various publishers, such as Simon and Schuster, Simon Spotlight, Gallery Books, and Pocket Books. The dataset shows identifiers and indicates the series the books belong to, like “AV” or “CT.” Some entries also belong to subseries, such as “Starfleet Academy.” Additionally, the dataset provides details on the number of chapters (nchap) and the total word count (nword) for each book.\n\n\n\n\nglimpse(startrek_data)\n\nRows: 783\nColumns: 11\n$ title      &lt;chr&gt; \"Star Trek: Star Trek Movie Tie-In\", \"Starfleet Academy: Th…\n$ author     &lt;chr&gt; \"Alan Dean Foster\", \"Rick Barba\", \"Rudy Josephs\", \"Rick Bar…\n$ date       &lt;date&gt; 2009-05-12, 2010-11-02, 2010-12-28, 2011-06-28, 2012-06-26…\n$ publisher  &lt;chr&gt; \"Simon and Schuster\", \"Simon Spotlight\", \"Simon Spotlight\",…\n$ identifier &lt;chr&gt; \"1439163391\", \"9781442414259\", \"9781442414242\", \"9781442414…\n$ series     &lt;chr&gt; \"AV\", \"AV\", \"AV\", \"AV\", \"AV\", \"AV\", \"CT\", \"CT\", \"CT\", \"CT\",…\n$ subseries  &lt;chr&gt; NA, \"Starfleet Academy\", \"Starfleet Academy\", \"Starfleet Ac…\n$ nchap      &lt;dbl&gt; 18, 14, 31, 13, 30, 17, 21, 26, 34, 176, 9, 12, 36, 23, 44,…\n$ nword      &lt;dbl&gt; 77035, 40129, 52547, 39495, 62030, 77438, 95110, 76392, 786…\n$ nchar      &lt;dbl&gt; 460097, 238567, 295829, 233095, 349595, 537472, 554915, 424…\n$ dedication &lt;chr&gt; \"For Bjo and John TrimbleBecause hospitality is forever and…\n\n\nThis provides a glimpse into the 783 rows and 11 columns, summarizing various characteristics of Star Trek books.\n\n\n\n\ninspect(startrek_data)\n\n\ncategorical variables:  \n        name     class levels   n missing\n1      title character    781 783       0\n2     author character    277 783       0\n3  publisher character     21 772      11\n4 identifier character    783 783       0\n5     series character     28 783       0\n6  subseries character     15  56     727\n7 dedication character    372 372     411\n                                   distribution\n1 Kobayashi Maru (0.3%), Warped (0.3%) ...     \n2 Peter David (4.9%) ...                       \n3 Pocket Books (67.4%) ...                     \n4  (%) ...                                     \n5 TOS (26.8%), TNG (18.6%), SCE (10.7%) ...    \n6 Typhon Pact (16.1%) ...                      \n7  (%) ...                                     \n\nDate variables:  \n  name class      first       last min_diff max_diff   n missing\n1 date  Date 1967-01-01 2017-11-28   0 days 485 days 783       0\n\nquantitative variables:  \n   name   class  min     Q1 median       Q3     max         mean           sd\n1 nchap numeric    1     13     21     29.0     373     24.58816     21.61247\n2 nword numeric  782  52500  70730  90994.5  687175  76190.07535  52453.34633\n3 nchar numeric 4337 310520 415964 555866.5 4484069 461822.36271 326062.44928\n    n missing\n1 760      23\n2 783       0\n3 783       0\n\n\nThe inspection of the Star Trek book dataset reveals a comprehensive breakdown of variables in categorical, date, and quantitative formats. Among the categorical variables, we have entries such as title, author, publisher, identifier, series, subseries, and dedication. These variables contain character data, with subseries and dedication having the most missing values. For date variables, we have the date variable that records the publication dates of books, ranging from 1967-01-01 to 2017-11-28, spanning a 50-year period. The quantitative variables include nchap (number of chapters), nword (number of words), and nchar (number of characters), all numeric with varying distributions. The average number of chapters per book is approximately 24.59, while the average word count is around 76190 words, and character count averages around 461822 characters.\n\n\n\n\nskim(startrek_data)\n\n\nData summary\n\n\nName\nstartrek_data\n\n\nNumber of rows\n783\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n7\n\n\nDate\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ntitle\n0\n1.00\n4\n58\n0\n781\n0\n\n\nauthor\n0\n1.00\n2\n138\n0\n277\n0\n\n\npublisher\n11\n0.99\n7\n26\n0\n21\n0\n\n\nidentifier\n0\n1.00\n10\n41\n0\n783\n0\n\n\nseries\n0\n1.00\n2\n6\n0\n28\n0\n\n\nsubseries\n727\n0.07\n4\n23\n0\n15\n0\n\n\ndedication\n411\n0.48\n98\n97953\n0\n372\n0\n\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ndate\n0\n1\n1967-01-01\n2017-11-28\n2001-12-14\n577\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nnchap\n23\n0.97\n24.59\n21.61\n1\n13\n21\n29.0\n373\n▇▁▁▁▁\n\n\nnword\n0\n1.00\n76190.08\n52453.35\n782\n52500\n70730\n90994.5\n687175\n▇▁▁▁▁\n\n\nnchar\n0\n1.00\n461822.36\n326062.45\n4337\n310520\n415964\n555866.5\n4484069\n▇▁▁▁▁\n\n\n\n\n\nThe categorical variables like title, author, and publisher are mostly complete, although subseries has significant missing values (727 missing entries) and dedication has 411 missing entries. The date column spans from 1967 to 2017 with a median date around December 14, 2001. For numeric variables, nchap (number of chapters) has 23 missing values, with an average of around 25 chapters per book. The nword (number of words) and nchar (number of characters) columns are complete, showing an average of 76,190 words and 461,822 characters per book.\n\n\n\n\n\n\nnword (dbl): The number of words in the book.\nnchar (dbl): The number of characters (including spaces and punctuation) in the book.\ndate (date): The publication date of the book.\n\n\n\n\n\nauthor: The name of the author who wrote the book.\npublisher: The publishing company responsible for releasing the book.\nseries: The main series of the Star Trek universe to which the book belongs (e.g., The Original Series, The Next Generation).\nsubseries: A subcategory or subseries within the main Star Trek series (e.g., Deep Space Nine).\ndedication: A text string containing the book’s dedication, if applicable\n\n\n\n\n\n\nstartrek_data %&gt;% \n  group_by(author) %&gt;%\n  summarize(average_characters = mean(nchar, na.rm = TRUE), count = n())\n\n# A tibble: 277 × 3\n   author                                               average_characters count\n   &lt;chr&gt;                                                             &lt;dbl&gt; &lt;int&gt;\n 1 A. C. Crispin                                                   571858      1\n 2 A.C. Crispin                                                    480611.     3\n 3 Aaron Rosenberg                                                  87922.     3\n 4 Adam “mojo” Lebowitz; Robert Bonchune; Jonathan Lan…            144868      1\n 5 Alan Dean Foster                                                498784.     2\n 6 Alan Gratz                                                      349595      1\n 7 Allyn Gibson                                                    144935      1\n 8 Andrew J. Robinson                                              641696      1\n 9 Andy Mangels                                                    576557      1\n10 Andy Mangels and Michael A. Martin                              571987      1\n# ℹ 267 more rows\n\n\nThis gives insight into the volume of work and average text length produced by different authors in the dataset.\n\n\n\n\nstartrek_data %&gt;% \n  group_by(publisher) %&gt;%\nsummarize(average_words = mean(nword, na.rm = TRUE), count = n())\n\n# A tibble: 22 × 3\n   publisher           average_words count\n   &lt;chr&gt;                       &lt;dbl&gt; &lt;int&gt;\n 1 Abrams Publications       132041      1\n 2 Aladdin                    23801.    28\n 3 Aladdin Paperbacks         69076      1\n 4 Amereon Ltd                40804.     2\n 5 Bantam Books               50225.    20\n 6 Demco Media                23310.     2\n 7 Dk Publishing             119459      1\n 8 Elysium                    98779      1\n 9 Gallery Books              93418.    15\n10 Harlequin                  63453      1\n# ℹ 12 more rows\n\n\nThe summary of the Star Trek book dataset, grouped by publisher, provides insights into the average number of words and the total book count for each publisher. For example, Abrams Publications has one book with an average of 132,041 words, while Aladdin has 28 books with an average of 23,800 words.\n\n\n\n\nstartrek_data %&gt;%\n  group_by(series) %&gt;%\nsummarize(average_words = mean(nword, na.rm = TRUE), count = n())\n\n# A tibble: 28 × 3\n   series average_words count\n   &lt;chr&gt;          &lt;dbl&gt; &lt;int&gt;\n 1 AV            58112.     6\n 2 CT           157688.     5\n 3 DS9           91641.    83\n 4 DSC           89367      1\n 5 DTI           59215.     5\n 6 ENT           82724.    19\n 7 KE            74668.     4\n 8 MIR          115916.     5\n 9 MISC          89974.    13\n10 MYR          145127      3\n# ℹ 18 more rows\n\n\nThe grouping is done by series, and it shows a range of series with their calculated average word counts and the total number of books within each series. For example, the “TOS” series has 210 books with an average word count of 76,522.67, while the “CT” series has only 5 books but a much higher average word count of 157,687.80. There is also a wide variation in word count across different series, such as “YA-DS9” having only 23,298 words on average compared to more substantial works like “MYR” with 145,127 words. This summary helps identify how the different series compare in terms of length and volume, highlighting the diversity of content.\n\n\n\n\nstartrek_data %&gt;%\n  group_by(series, author) %&gt;%\nsummarize(total_books = n(), average_words = mean(nword, na.rm = TRUE))\n\n`summarise()` has grouped output by 'series'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 419 × 4\n# Groups:   series [28]\n   series author                                total_books average_words\n   &lt;chr&gt;  &lt;chr&gt;                                       &lt;int&gt;         &lt;dbl&gt;\n 1 AV     Alan Dean Foster                                2        77236.\n 2 AV     Alan Gratz                                      1        62030 \n 3 AV     Rick Barba                                      2        39812 \n 4 AV     Rudy Josephs                                    1        52547 \n 5 CT     Christopher Pike                                1        78678 \n 6 CT     James T. Hirk                                   1        95110 \n 7 CT     John J. Ordover and Dean Wesley Smith           1       436682 \n 8 CT     Keith R.A. Decandido                            1       101577 \n 9 CT     Mackenzie                                       1        76392 \n10 DS9    Andrew J. Robinson                              1       113304 \n# ℹ 409 more rows\n\n\nThis allows for an analysis of how different authors contribute to various Star Trek series in terms of the number of books they have written and the average length (in words) of their works.\n\n\n\n\nstartrek_data %&gt;%\n  group_by(year(date), author) %&gt;%\nsummarize(total_books = n(), average_characters = mean(nchar, na.rm = TRUE))\n\n`summarise()` has grouped output by 'year(date)'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 624 × 4\n# Groups:   year(date) [51]\n   `year(date)` author         total_books average_characters\n          &lt;dbl&gt; &lt;chr&gt;                &lt;int&gt;              &lt;dbl&gt;\n 1         1967 James Blish              1            235524 \n 2         1968 James Blish              1            232094 \n 3         1969 James Blish              1            224369 \n 4         1970 James Blish              1            207001 \n 5         1971 James Blish              1            239859 \n 6         1972 James Blish              4            268216.\n 7         1973 James Blish              1            314575 \n 8         1974 James Blish              1            310749 \n 9         1975 James Blish              1            332807 \n10         1976 Sondra Marshak           1            431759 \n# ℹ 614 more rows\n\n\nThis helps analyze trends over time, showing how many books each author contributed in a particular year and the typical length of those books in terms of characters.\n\n\n\n\nstartrek_data %&gt;%\n  group_by(publisher, series) %&gt;%\nsummarize(total_books = n(), average_nchar = mean(nchar, na.rm = TRUE))\n\n`summarise()` has grouped output by 'publisher'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 81 × 4\n# Groups:   publisher [22]\n   publisher           series total_books average_nchar\n   &lt;chr&gt;               &lt;chr&gt;        &lt;int&gt;         &lt;dbl&gt;\n 1 Abrams Publications REF              1       898671 \n 2 Aladdin             YA-DS9          11       135368.\n 3 Aladdin             YA-TNG          14       141448.\n 4 Aladdin             YA-TOS           2       147656.\n 5 Aladdin             YA-VOY           1       130989 \n 6 Aladdin Paperbacks  TOS              1       390799 \n 7 Amereon Ltd         TOS              2       233809 \n 8 Bantam Books        TOS             20       287111.\n 9 Demco Media         YA-VOY           2       134614 \n10 Dk Publishing       REF              1      1094928 \n# ℹ 71 more rows\n\n\nThis helps in analyzing the contribution of different publishers to various Star Trek series and the typical length of books published within those series. It provides insight into the publishing trends, helping to compare the output volume and book length across different series and publishers.\n\n\n\n\nstartrek_data %&gt;%\n  group_by(subseries) %&gt;%\nsummarize(average_words = mean(nword, na.rm = TRUE), count = n())\n\n# A tibble: 16 × 3\n   subseries               average_words count\n   &lt;chr&gt;                           &lt;dbl&gt; &lt;int&gt;\n 1 Academy                       106196      1\n 2 Dark Passions                  52072.     2\n 3 Day of Honor                  116344.     6\n 4 Destiny                       147208      4\n 5 Dominion War                   70683.     5\n 6 Gateways                      116709      1\n 7 Mirror Universe Trilogy        95785.     3\n 8 Prey                           97729      3\n 9 Section 31                     75524.     6\n10 Starfleet Academy              48550.     4\n11 The Badlands                   60314.     2\n12 The Brave and the Bold         66966      2\n13 The Fall                       95050.     5\n14 Totality                       80817.     3\n15 Typhon Pact                   124866.     9\n16 &lt;NA&gt;                           74781.   727\n\n\nThe summarized data from the Star Trek book dataset provides insights into the average word count and total number of books for each subseries. For example, the “Academy” subseries has 1 book with an average word count of 106,196, while “Day of Honor” spans 6 books with an average of 113,644 words. The “Destiny” subseries consists of 4 books averaging 147,208 words, and the “Typhon Pact” subseries features 9 books with an average of 124,866 words. Some subseries, like “Prey,” with 3 books averaging 97,729 words, reflect moderately sized collections. Additionally, there are entries like NA, which account for 727 books with an average word count of 74,780, indicating a group of records that might not fit into a specific subseries."
  },
  {
    "objectID": "posts/Day 2/index.html#introduction",
    "href": "posts/Day 2/index.html#introduction",
    "title": "Day 2",
    "section": "",
    "text": "I am working with data summaries. First, mpg, then something else.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\n\n\n\n\nmpg\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n\n\nThe table provides information on various car models from 1999 and 2008, highlighting key specifications. The data allows for a detailed comparison of the cars’ performance and specifications across different years and models.\n\n\n\n\nmpg \n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n\n  head(10) \n\n[1] 10\n\n\nThe table displays the first 10 rows of the mpg dataset, with details on engine size (displacement), number of cylinders, transmission type (automatic or manual), drivetrain (front-wheel or all-wheel drive), and fuel efficiency in city and highway miles per gallon (MPG). The engine displacement ranges from 1.8 to 3.1 liters, and the number of cylinders is either 4 or 6. The city MPG varies from 16 to 21, while highway MPG ranges from 25 to 31.\n\n\n\n\nglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\n\nThis summary provides an overview of the specifications and performance characteristics of car models in the dataset.\n\n\n\n\ninspect(mpg)\n\n\ncategorical variables:  \n          name     class levels   n missing\n1 manufacturer character     15 234       0\n2        model character     38 234       0\n3        trans character     10 234       0\n4          drv character      3 234       0\n5           fl character      5 234       0\n6        class character      7 234       0\n                                   distribution\n1 dodge (15.8%), toyota (14.5%) ...            \n2 caravan 2wd (4.7%) ...                       \n3 auto(l4) (35.5%), manual(m5) (24.8%) ...     \n4 f (45.3%), 4 (44%), r (10.7%)                \n5 r (71.8%), p (22.2%), e (3.4%) ...           \n6 suv (26.5%), compact (20.1%) ...             \n\nquantitative variables:  \n   name   class    min     Q1 median     Q3  max        mean       sd   n\n1 displ numeric    1.6    2.4    3.3    4.6    7    3.471795 1.291959 234\n2  year integer 1999.0 1999.0 2003.5 2008.0 2008 2003.500000 4.509646 234\n3   cyl integer    4.0    4.0    6.0    8.0    8    5.888889 1.611534 234\n4   cty integer    9.0   14.0   17.0   19.0   35   16.858974 4.255946 234\n5   hwy integer   12.0   18.0   24.0   27.0   44   23.440171 5.954643 234\n  missing\n1       0\n2       0\n3       0\n4       0\n5       0\n\n\nThe inspection of the mpg dataset reveals two types of variables: categorical and quantitative. Categorical variables include manufacturer, model, transmission, drivetrain, fl (fuel type), and class, with a total of 234 entries and no missing data. Quantitative variables, such as engine displacement, year, number of cylinders, city miles per gallon, and highway miles per gallon, are summarized with key statistics. For example, engine displacement ranges from 1.6 to 7 liters, and city MPG varies from 9 to 35, with an average of 16.86. This overview highlights the structure and details of the dataset, providing both descriptive and numerical insights.\n\n\n\n\nskim(mpg)\n\n\nData summary\n\n\nName\nmpg\n\n\nNumber of rows\n234\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmanufacturer\n0\n1\n4\n10\n0\n15\n0\n\n\nmodel\n0\n1\n2\n22\n0\n38\n0\n\n\ntrans\n0\n1\n8\n10\n0\n10\n0\n\n\ndrv\n0\n1\n1\n1\n0\n3\n0\n\n\nfl\n0\n1\n1\n1\n0\n5\n0\n\n\nclass\n0\n1\n3\n10\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndispl\n0\n1\n3.47\n1.29\n1.6\n2.4\n3.3\n4.6\n7\n▇▆▆▃▁\n\n\nyear\n0\n1\n2003.50\n4.51\n1999.0\n1999.0\n2003.5\n2008.0\n2008\n▇▁▁▁▇\n\n\ncyl\n0\n1\n5.89\n1.61\n4.0\n4.0\n6.0\n8.0\n8\n▇▁▇▁▇\n\n\ncty\n0\n1\n16.86\n4.26\n9.0\n14.0\n17.0\n19.0\n35\n▆▇▃▁▁\n\n\nhwy\n0\n1\n23.44\n5.95\n12.0\n18.0\n24.0\n27.0\n44\n▅▅▇▁▁\n\n\n\n\n\nAll variables have complete data with no missing values.This dataset provides a comprehensive view of car specifications and fuel efficiency, ready for further analysis.\n\n\n\n\n\n\nEngine Displacement (dbl): The engine size in liters.\nModel Year (int): The year of the car’s model, ranging from 1999 to 2008.\nCity Mileage (dbl): Miles per gallon (MPG) in city driving conditions.\nHighway Mileage (dbl): Miles per gallon (MPG) in highway driving conditions.\n\n\n\n\n\nManufacturer (chr): The car’s manufacturer, e.g., Audi, Toyota.\nModel (chr): The specific car model, e.g., A4, Corolla.\nTransmission (chr): The type of transmission, e.g., auto (automatic), manual (m5/m6).\nDrivetrain (chr): The type of drivetrain, e.g., f (front-wheel drive), 4 (four-wheel drive).\nFuel (chr): The type of fuel used, e.g., p (premium), r (regular).\nClass of Vehicle (chr): The category of the vehicle, e.g., compact, SUV.\nCylinders (int): The number of cylinders in the engine (4, 6, etc.).\n\n\n\n\n\n\nmpg_modified &lt;- mpg %&gt;%\n  dplyr::mutate(\n    cyl = as_factor(cyl),\n    fl = as_factor(fl),\n    drv = as_factor(drv),\n    class = as_factor(class),\n    trans = as_factor(trans)\n  )\nglimpse(mpg_modified)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;fct&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;fct&gt; auto(l5), manual(m5), manual(m6), auto(av), auto(l5), man…\n$ drv          &lt;fct&gt; f, f, f, f, f, f, f, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, r, …\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;fct&gt; p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, r, …\n$ class        &lt;fct&gt; compact, compact, compact, compact, compact, compact, com…\n\n\nHere, several variables— cyl, fl, drv, class, and trans—have been converted from their original data types to factors. This transformation changes them into categorical variables, making them more suitable for analysis involving groupings or classifications.\n\n\n\n\nmpg_modified %&gt;%\n  group_by(cyl) %&gt;%\n  summarize(average_hwy = mean(hwy), count = n())\n\n# A tibble: 4 × 3\n  cyl   average_hwy count\n  &lt;fct&gt;       &lt;dbl&gt; &lt;int&gt;\n1 4            28.8    81\n2 5            28.8     4\n3 6            22.8    79\n4 8            17.6    70\n\n\nThe table summarizes the average highway miles per gallon for cars grouped by the number of cylinders. Cars with 4 cylinders have the highest average highway MPG at 28.80, followed closely by 5-cylinder cars with 28.75, though the 5-cylinder group only includes 4 cars. Cars with 6 cylinders average 22.82 MPG, while cars with 8 cylinders have the lowest fuel efficiency, averaging 17.63 MPG. Overall, the data shows that vehicles with fewer cylinders tend to be more fuel-efficient on the highway, with MPG decreasing as the number of cylinders increases.\n\n\n\n\nmpg_modified %&gt;%\n  group_by(cyl) %&gt;%\n  summarize(average_hwy = mean(cty), count = n())\n\n# A tibble: 4 × 3\n  cyl   average_hwy count\n  &lt;fct&gt;       &lt;dbl&gt; &lt;int&gt;\n1 4            21.0    81\n2 5            20.5     4\n3 6            16.2    79\n4 8            12.6    70\n\n\nThe table summarizes the average city miles per gallon based on the number of cylinders. Cars with 4 cylinders have the highest average city MPG at 21.01, followed by 5-cylinder cars at 20.50, though the sample size for 5-cylinder cars is small with only 4 cars. Vehicles with 6 cylinders average 16.22 MPG, while those with 8 cylinders have the lowest city MPG at 12.57. This data shows that cars with fewer cylinders tend to have better fuel efficiency in city driving.\n\n\n\n\nmpg_modified %&gt;%\n  group_by(cyl, fl) %&gt;%\n  summarize(average_hwy = mean(hwy), count = n())\n\n`summarise()` has grouped output by 'cyl'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 13 × 4\n# Groups:   cyl [4]\n   cyl   fl    average_hwy count\n   &lt;fct&gt; &lt;fct&gt;       &lt;dbl&gt; &lt;int&gt;\n 1 4     p            27.8    22\n 2 4     r            28.3    55\n 3 4     d            43       3\n 4 4     c            36       1\n 5 5     r            28.8     4\n 6 6     p            25.3    17\n 7 6     r            22.2    60\n 8 6     e            17       1\n 9 6     d            22       1\n10 8     p            20.8    13\n11 8     r            17.5    49\n12 8     e            12.7     7\n13 8     d            17       1\n\n\nThe table shows the average highway MPG for cars based on cylinders and fuel type. Cars with 4 cylinders are more fuel-efficient, with MPG ranging from 27.82 for premium fuel to 43 for diesel, though alternative fuel samples are small. For 6-cylinder cars, MPG drops to between 25.29 (petrol) and 17 (ethanol). 8-cylinder cars are the least efficient, with 17.51 MPG for regular fuel and 12.71 for ethanol. Overall, cars with fewer cylinders and certain fuels, like diesel, achieve better highway fuel efficiency.\n\n\n\n\nmpg_modified %&gt;%\n  group_by(cyl, fl) %&gt;%\n  summarize(average_hwy = mean(cty), count = n())\n\n`summarise()` has grouped output by 'cyl'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 13 × 4\n# Groups:   cyl [4]\n   cyl   fl    average_hwy count\n   &lt;fct&gt; &lt;fct&gt;       &lt;dbl&gt; &lt;int&gt;\n 1 4     p           19.9     22\n 2 4     r           20.8     55\n 3 4     d           32.3      3\n 4 4     c           24        1\n 5 5     r           20.5      4\n 6 6     p           16.8     17\n 7 6     r           16.1     60\n 8 6     e           11        1\n 9 6     d           17        1\n10 8     p           13.8     13\n11 8     r           12.7     49\n12 8     e            9.57     7\n13 8     d           14        1\n\n\nThe table provides a breakdown of the average city miles per gallon by cylinder count and fuel type (fl). For 4-cylinder cars, average city MPG varies by fuel type, with diesel cars achieving the highest at 32.33 MPG, followed by compressed natural gas (24 MPG) and regular fuel (20.78 MPG). 6-cylinder cars show lower MPG, with ethanol-fueled cars having the lowest efficiency at 11 MPG. For 8-cylinder cars, premium fuel provides an average of 13.77 MPG. (considering the fact that rows 11-13 are not visible for me)\n\n\n\n\nmpg %&gt;% \n  group_by(manufacturer) %&gt;% \n  summarize(mean_mileage_manf=mean(hwy))\n\n# A tibble: 15 × 2\n   manufacturer mean_mileage_manf\n   &lt;chr&gt;                    &lt;dbl&gt;\n 1 audi                      26.4\n 2 chevrolet                 21.9\n 3 dodge                     17.9\n 4 ford                      19.4\n 5 honda                     32.6\n 6 hyundai                   26.9\n 7 jeep                      17.6\n 8 land rover                16.5\n 9 lincoln                   17  \n10 mercury                   18  \n11 nissan                    24.6\n12 pontiac                   26.4\n13 subaru                    25.6\n14 toyota                    24.9\n15 volkswagen                29.2\n\n\nThe table displays the average highway miles per gallon for different car manufacturers. Volkswagen leads with the highest average highway MPG at 29.22, followed closely by Honda (28.56), Hyundai (26.86), and Audi (26.44). Other manufacturers like Subaru, Pontiac, and Nissan also show relatively high fuel efficiency, with averages above 24 MPG. In contrast, manufacturers such as Dodge, Jeep, and Land Rover have the lowest average highway MPG, ranging from 16.5 to 17.9.\n\n\n\n\nmpg %&gt;% \n  group_by(manufacturer) %&gt;% \n  summarize(mean_mileage_manf=mean(cty))\n\n# A tibble: 15 × 2\n   manufacturer mean_mileage_manf\n   &lt;chr&gt;                    &lt;dbl&gt;\n 1 audi                      17.6\n 2 chevrolet                 15  \n 3 dodge                     13.1\n 4 ford                      14  \n 5 honda                     24.4\n 6 hyundai                   18.6\n 7 jeep                      13.5\n 8 land rover                11.5\n 9 lincoln                   11.3\n10 mercury                   13.2\n11 nissan                    18.1\n12 pontiac                   17  \n13 subaru                    19.3\n14 toyota                    18.5\n15 volkswagen                20.9\n\n\nThe table displays the average city miles per gallon for different car manufacturers. Volkswagen leads with the highest average city MPG at 20.93, followed by Honda (24.44) and Subaru (19.29). Other manufacturers like Audi (17.61), Nissan (18.08), and Toyota (18.53) show moderate fuel efficiency. In contrast, manufacturers like Dodge, Jeep, and Land Rover have the lowest city MPG, ranging from 11.5 to 13.5.\n\n\n\nI am working with Math Anxiety Data.\n\nmath_anxiety &lt;- read_csv(\"../../data/MathAnxiety.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 599 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Age;Gender;Grade;AMAS;RCMAS;Arith\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmath_anxiety\n\n# A tibble: 599 × 1\n   `Age;Gender;Grade;AMAS;RCMAS;Arith`\n   &lt;chr&gt;                              \n 1 137,8;Boy;Secondary;9;20;6         \n 2 140,7;Boy;Secondary;18;8;6         \n 3 137,9;Girl;Secondary;23;26;5       \n 4 142,8;Girl;Secondary;19;18;7       \n 5 135,6;Boy;Secondary;23;20;1        \n 6 135,0;Girl;Secondary;27;33;1       \n 7 133,6;Boy;Secondary;22;23;4        \n 8 139,3;Boy;Secondary;17;11;7        \n 9 131,7;Girl;Secondary;28;32;2       \n10 134,8;Boy;Secondary;20;30;6        \n# ℹ 589 more rows\n\n\nThe Math Anxiety dataset contains 599 rows and focuses on variables such as Age, Gender, Grade, AMAS (Abbreviated Math Anxiety Scale), RCMAS (Revised Children’s Manifest Anxiety Scale), and Arithmetic scores. The data is structured in a format where each row represents an individual student with their respective attributes.\n\n\n\n\nmath_anxiety &lt;- read_delim(file=\"../../data/MathAnxiety.csv\",delim =\";\")\n\nRows: 599 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (2): Gender, Grade\ndbl (3): AMAS, RCMAS, Arith\nnum (1): Age\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe dataset is read using a semicolon (;) delimiter.\n\n\n\n\nmath_anxiety %&gt;% \n  head(10)\n\n# A tibble: 10 × 6\n     Age Gender Grade      AMAS RCMAS Arith\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  1378 Boy    Secondary     9    20     6\n 2  1407 Boy    Secondary    18     8     6\n 3  1379 Girl   Secondary    23    26     5\n 4  1428 Girl   Secondary    19    18     7\n 5  1356 Boy    Secondary    23    20     1\n 6  1350 Girl   Secondary    27    33     1\n 7  1336 Boy    Secondary    22    23     4\n 8  1393 Boy    Secondary    17    11     7\n 9  1317 Girl   Secondary    28    32     2\n10  1348 Boy    Secondary    20    30     6\n\n\nThe table displays the first 10 rows of the Math Anxiety dataset, which consists of 6 variables: Age, Gender, Grade, AMAS (Abbreviated Math Anxiety Scale), RCMAS (Revised Children’s Manifest Anxiety Scale), and Arithmetic scores. The scores in AMAS, RCMAS, and Arithmetic vary across the students, showcasing different levels of math anxiety and performance. For instance, one student has an AMAS score of 9 and RCMAS score of 20, while another has an AMAS score of 28 and an RCMAS score of 32, indicating variability in anxiety levels among students.\n\n\n\n\nglimpse(math_anxiety)\n\nRows: 599\nColumns: 6\n$ Age    &lt;dbl&gt; 1378, 1407, 1379, 1428, 1356, 1350, 1336, 1393, 1317, 1348, 141…\n$ Gender &lt;chr&gt; \"Boy\", \"Boy\", \"Girl\", \"Girl\", \"Boy\", \"Girl\", \"Boy\", \"Boy\", \"Gir…\n$ Grade  &lt;chr&gt; \"Secondary\", \"Secondary\", \"Secondary\", \"Secondary\", \"Secondary\"…\n$ AMAS   &lt;dbl&gt; 9, 18, 23, 19, 23, 27, 22, 17, 28, 20, 16, 20, 21, 36, 16, 27, …\n$ RCMAS  &lt;dbl&gt; 20, 8, 26, 18, 20, 33, 23, 11, 32, 30, 10, 4, 23, 26, 24, 21, 3…\n$ Arith  &lt;dbl&gt; 6, 6, 5, 7, 1, 1, 4, 7, 2, 6, 2, 5, 2, 6, 2, 7, 2, 4, 7, 3, 8, …\n\n\nThe glimpse provides a quick overview of the structure and types of data within the dataset.\n\n\n\n\ninspect(math_anxiety)\n\n\ncategorical variables:  \n    name     class levels   n missing\n1 Gender character      2 599       0\n2  Grade character      2 599       0\n                                   distribution\n1 Boy (53.9%), Girl (46.1%)                    \n2 Primary (66.9%), Secondary (33.1%)           \n\nquantitative variables:  \n   name   class min     Q1 median     Q3  max       mean         sd   n missing\n1   Age numeric  37 1061.5   1208 1418.5 1875 1246.49249 223.112183 599       0\n2  AMAS numeric   4   18.0     22   26.5   45   21.98164   6.597962 599       0\n3 RCMAS numeric   1   14.0     19   25.0   41   19.24040   7.566802 599       0\n4 Arith numeric   0    4.0      6    7.0    8    5.30217   2.105220 599       0\n\n\nThe summary of the Math Anxiety dataset, based on the inspect() function, reveals both categorical and quantitative variables. The categorical variables are Gender and Grade, with 53.9% of the entries labeled as Boy and 46.1% as Girl. In terms of Grade, 66.9% belong to the Primary level, while 33.1% are from the Secondary level. The quantitative variables include Age, AMAS (Math Anxiety Scale), RCMAS (Revised Children’s Manifest Anxiety Scale), and Arith (Arithmetic ability). The distribution of ages ranges from 37 to 1875, with a mean of 1246.49 and a standard deviation of 223.11. AMAS scores range from 4 to 45, with a mean of 21.98 and a standard deviation of 6.60. For RCMAS, the range is 1 to 41, with a mean of 19.24 and a standard deviation of 7.57. Finally, Arith scores vary from 0 to 8, with a mean of 5.30 and a standard deviation of 2.11.\n\n\n\n\nskim(math_anxiety)\n\n\nData summary\n\n\nName\nmath_anxiety\n\n\nNumber of rows\n599\n\n\nNumber of columns\n6\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n3\n4\n0\n2\n0\n\n\nGrade\n0\n1\n7\n9\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAge\n0\n1\n1246.49\n223.11\n37\n1061.5\n1208\n1418.5\n1875\n▁▁▇▇▃\n\n\nAMAS\n0\n1\n21.98\n6.60\n4\n18.0\n22\n26.5\n45\n▂▆▇▃▁\n\n\nRCMAS\n0\n1\n19.24\n7.57\n1\n14.0\n19\n25.0\n41\n▂▇▇▅▁\n\n\nArith\n0\n1\n5.30\n2.11\n0\n4.0\n6\n7.0\n8\n▂▃▃▇▇\n\n\n\n\n\nThis reveals a well-rounded dataset, complete with both categorical and numerical variables that offer a balanced view of the participants’ characteristics and their math-related anxiety scores. The dataset is complete with no missing data.\n\n\n\n\n\n\nAge (dbl): The age of the participant, measured in years.\nAMAS (dbl): American Mathematics Anxiety Scale (AMAS) score, indicating the level of math anxiety.\nRCMAS (dbl): Revised Children’s Manifest Anxiety Scale (RCMAS) score, measuring general anxiety.\nArith (dbl): Arithmetic test score, indicating performance in a mathematics test.\n\n\n\n\n\nGender: The gender of the participant, categories include Boy and Girl.\nGrade: The educational grade level of the participant, such as Secondary.\n\n\n\n\n\n\nmath_anxiety_modified &lt;- math_anxiety %&gt;%\n  dplyr::mutate(\n    Age = Age/120,\n    Gender = as_factor(Gender)\n  )\nmath_anxiety_modified\n\n# A tibble: 599 × 6\n     Age Gender Grade      AMAS RCMAS Arith\n   &lt;dbl&gt; &lt;fct&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  11.5 Boy    Secondary     9    20     6\n 2  11.7 Boy    Secondary    18     8     6\n 3  11.5 Girl   Secondary    23    26     5\n 4  11.9 Girl   Secondary    19    18     7\n 5  11.3 Boy    Secondary    23    20     1\n 6  11.2 Girl   Secondary    27    33     1\n 7  11.1 Boy    Secondary    22    23     4\n 8  11.6 Boy    Secondary    17    11     7\n 9  11.0 Girl   Secondary    28    32     2\n10  11.2 Boy    Secondary    20    30     6\n# ℹ 589 more rows\n\n\nIn this transformation, the Age column has been scaled down by dividing the values by 120, and the Gender column has been converted into a factor with two levels: “Boy” and “Girl.”\n\n\n\n\n math_anxiety_modified %&gt;%\n  group_by(Gender) %&gt;%\n  summarize(average_AMAS = mean(AMAS), count = n())\n\n# A tibble: 2 × 3\n  Gender average_AMAS count\n  &lt;fct&gt;         &lt;dbl&gt; &lt;int&gt;\n1 Boy            21.2   323\n2 Girl           22.9   276\n\n\nThe summary of average AMAS scores grouped by gender reveals that girls have a slightly higher average AMAS score (22.93) compared to boys (21.17). The total count of boys in the dataset is 323, while the total count of girls is 276. This suggests that while boys and girls show close levels of math anxiety, girls exhibit a marginally higher average score in the dataset.\n\n\n\n\nmath_anxiety_modified %&gt;%\n  group_by(Gender,Age) %&gt;%\n  summarize(average_AMAS = mean(AMAS), count = n())\n\n`summarise()` has grouped output by 'Gender'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 474 × 4\n# Groups:   Gender [2]\n   Gender   Age average_AMAS count\n   &lt;fct&gt;  &lt;dbl&gt;        &lt;dbl&gt; &lt;int&gt;\n 1 Boy     7.76         16       1\n 2 Boy     7.82         24       1\n 3 Boy     7.83         13       1\n 4 Boy     7.9          14       1\n 5 Boy     7.91         11       1\n 6 Boy     7.94         29       1\n 7 Boy     7.96         16.5     2\n 8 Boy     7.98          9       1\n 9 Boy     7.98         29       1\n10 Boy     7.99          9       1\n# ℹ 464 more rows\n\n\nThe analysis of average AMAS scores, grouped by gender and age, provides a detailed look at how math anxiety varies across different age groups for boys and girls. By breaking down the data in this way, it is possible to explore patterns in math anxiety that may correlate with age and gender, allowing for a more nuanced understanding of how these factors influence AMAS scores.\n\n\n\n\nmath_anxiety_modified %&gt;%\n  group_by(Gender) %&gt;%\n  summarize(average_RCMAS = mean(RCMAS), count = n())\n\n# A tibble: 2 × 3\n  Gender average_RCMAS count\n  &lt;fct&gt;          &lt;dbl&gt; &lt;int&gt;\n1 Boy             18.1   323\n2 Girl            20.6   276\n\n\nThe table shows a summary of average RCMAS (Revised Children’s Manifest Anxiety Scale) scores grouped by gender. The average RCMAS score for boys is 18.12, based on 323 participants, while the average RCMAS score for girls is 20.55, based on 276 participants. This suggests that, on average, girls exhibit slightly higher anxiety levels as measured by the RCMAS scale compared to boys.\n\n\n\n\nmath_anxiety_modified %&gt;%\n  group_by(Gender,Age) %&gt;%\n  summarize(average_RCMAS = mean(RCMAS), count = n())\n\n`summarise()` has grouped output by 'Gender'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 474 × 4\n# Groups:   Gender [2]\n   Gender   Age average_RCMAS count\n   &lt;fct&gt;  &lt;dbl&gt;         &lt;dbl&gt; &lt;int&gt;\n 1 Boy     7.76            20     1\n 2 Boy     7.82            20     1\n 3 Boy     7.83            15     1\n 4 Boy     7.9             17     1\n 5 Boy     7.91            15     1\n 6 Boy     7.94            24     1\n 7 Boy     7.96            27     2\n 8 Boy     7.98            23     1\n 9 Boy     7.98            29     1\n10 Boy     7.99            34     1\n# ℹ 464 more rows\n\n\nThis type of summary allows us to analyze how anxiety levels, as measured by the RCMAS, vary across different age groups within each gender.\n\n\n\nI am working with Star Trek Books Data.\n\nstartrek_data &lt;- read_csv(\"../../data/star_trek_books.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 16369 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): title;author;date;publisher;identifier;series;subseries;nchap;nword...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nstartrek_data\n\n# A tibble: 16,369 × 1\n   title;author;date;publisher;identifier;series;subseries;nchap;nword;nchar;d…¹\n   &lt;chr&gt;                                                                        \n 1 \"Star Trek: Star Trek Movie Tie-In;Alan Dean Foster;2009-05-12;Simon and Sch…\n 2 \"Starfleet Academy: The Delta Anomaly;Rick Barba;2010-11-02;Simon Spotlight;…\n 3 \"Starfleet Academy: The Edge;Rudy Josephs;2010-12-28;Simon Spotlight;9781442…\n 4 \"Starfleet Academy: The Gemini Agent;Rick Barba;2011-06-28;Simon Spotlight;9…\n 5 \"Starfleet Academy: The Assassination Game;Alan Gratz;2012-06-26;Simon Spotl…\n 6 \"Star Trek: Into Darkness;Alan Dean Foster;2013-05-21;Gallery Books;97814767…\n 7 \"Captain's Table 1: War Dragons;James T. Hirk;1998-06-01;Pocket Books;978143…\n 8 \"Captain's Table 5: Once Burned;Mackenzie;1998-10-01;Pocket Books;9780743455…\n 9 \"Captain's Table 6: Where Sea Meets Sky;Christopher Pike;1998-10-01;Pocket B…\n10 \"For my brother, Ray, who introduced me to Star Trek and helped tune it in b…\n# ℹ 16,359 more rows\n# ℹ abbreviated name:\n#   ¹​`title;author;date;publisher;identifier;series;subseries;nchap;nword;nchar;dedication`\n\n\nThe Star Trek Books dataset contains 16,369 entries, each representing a book or publication related to the Star Trek franchise. Key variables include the book title, author, publication date, and publisher. The dataset also includes details such as unique identifiers, the series and subseries the book belongs to, and the number of chapters, words, and characters in each book. Additionally, there is a field for any author dedications.\n\n\n\n\nstartrek_data &lt;- read_delim(file=\"../../data/star_trek_books.csv\",delim =\";\")\n\nRows: 783 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr  (7): title, author, publisher, identifier, series, subseries, dedication\ndbl  (3): nchap, nword, nchar\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe dataset is read using a semicolon (;) delimiter.\n\n\n\n\nstartrek_data\n\n# A tibble: 783 × 11\n   title    author date       publisher identifier series subseries nchap  nword\n   &lt;chr&gt;    &lt;chr&gt;  &lt;date&gt;     &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;\n 1 Star Tr… Alan … 2009-05-12 Simon an… 1439163391 AV     &lt;NA&gt;         18  77035\n 2 Starfle… Rick … 2010-11-02 Simon Sp… 978144241… AV     Starflee…    14  40129\n 3 Starfle… Rudy … 2010-12-28 Simon Sp… 978144241… AV     Starflee…    31  52547\n 4 Starfle… Rick … 2011-06-28 Simon Sp… 978144241… AV     Starflee…    13  39495\n 5 Starfle… Alan … 2012-06-26 Simon Sp… 978144242… AV     Starflee…    30  62030\n 6 Star Tr… Alan … 2013-05-21 Gallery … 978147671… AV     &lt;NA&gt;         17  77438\n 7 Captain… James… 1998-06-01 Pocket B… 978143910… CT     &lt;NA&gt;         21  95110\n 8 Captain… Macke… 1998-10-01 Pocket B… 978074345… CT     &lt;NA&gt;         26  76392\n 9 Captain… Chris… 1998-10-01 Pocket B… 978143910… CT     &lt;NA&gt;         34  78678\n10 The Cap… John … 2000-03-01 Pocket B… 978074340… CT     &lt;NA&gt;        176 436682\n# ℹ 773 more rows\n# ℹ 2 more variables: nchar &lt;dbl&gt;, dedication &lt;chr&gt;\n\n\n\n\n\n\nstartrek_data %&gt;% \n head(10)\n\n# A tibble: 10 × 11\n   title    author date       publisher identifier series subseries nchap  nword\n   &lt;chr&gt;    &lt;chr&gt;  &lt;date&gt;     &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;\n 1 Star Tr… Alan … 2009-05-12 Simon an… 1439163391 AV     &lt;NA&gt;         18  77035\n 2 Starfle… Rick … 2010-11-02 Simon Sp… 978144241… AV     Starflee…    14  40129\n 3 Starfle… Rudy … 2010-12-28 Simon Sp… 978144241… AV     Starflee…    31  52547\n 4 Starfle… Rick … 2011-06-28 Simon Sp… 978144241… AV     Starflee…    13  39495\n 5 Starfle… Alan … 2012-06-26 Simon Sp… 978144242… AV     Starflee…    30  62030\n 6 Star Tr… Alan … 2013-05-21 Gallery … 978147671… AV     &lt;NA&gt;         17  77438\n 7 Captain… James… 1998-06-01 Pocket B… 978143910… CT     &lt;NA&gt;         21  95110\n 8 Captain… Macke… 1998-10-01 Pocket B… 978074345… CT     &lt;NA&gt;         26  76392\n 9 Captain… Chris… 1998-10-01 Pocket B… 978143910… CT     &lt;NA&gt;         34  78678\n10 The Cap… John … 2000-03-01 Pocket B… 978074340… CT     &lt;NA&gt;        176 436682\n# ℹ 2 more variables: nchar &lt;dbl&gt;, dedication &lt;chr&gt;\n\n\nThe first 10 rows of the Star Trek Books dataset display information about books published by various publishers, such as Simon and Schuster, Simon Spotlight, Gallery Books, and Pocket Books. The dataset shows identifiers and indicates the series the books belong to, like “AV” or “CT.” Some entries also belong to subseries, such as “Starfleet Academy.” Additionally, the dataset provides details on the number of chapters (nchap) and the total word count (nword) for each book.\n\n\n\n\nglimpse(startrek_data)\n\nRows: 783\nColumns: 11\n$ title      &lt;chr&gt; \"Star Trek: Star Trek Movie Tie-In\", \"Starfleet Academy: Th…\n$ author     &lt;chr&gt; \"Alan Dean Foster\", \"Rick Barba\", \"Rudy Josephs\", \"Rick Bar…\n$ date       &lt;date&gt; 2009-05-12, 2010-11-02, 2010-12-28, 2011-06-28, 2012-06-26…\n$ publisher  &lt;chr&gt; \"Simon and Schuster\", \"Simon Spotlight\", \"Simon Spotlight\",…\n$ identifier &lt;chr&gt; \"1439163391\", \"9781442414259\", \"9781442414242\", \"9781442414…\n$ series     &lt;chr&gt; \"AV\", \"AV\", \"AV\", \"AV\", \"AV\", \"AV\", \"CT\", \"CT\", \"CT\", \"CT\",…\n$ subseries  &lt;chr&gt; NA, \"Starfleet Academy\", \"Starfleet Academy\", \"Starfleet Ac…\n$ nchap      &lt;dbl&gt; 18, 14, 31, 13, 30, 17, 21, 26, 34, 176, 9, 12, 36, 23, 44,…\n$ nword      &lt;dbl&gt; 77035, 40129, 52547, 39495, 62030, 77438, 95110, 76392, 786…\n$ nchar      &lt;dbl&gt; 460097, 238567, 295829, 233095, 349595, 537472, 554915, 424…\n$ dedication &lt;chr&gt; \"For Bjo and John TrimbleBecause hospitality is forever and…\n\n\nThis provides a glimpse into the 783 rows and 11 columns, summarizing various characteristics of Star Trek books.\n\n\n\n\ninspect(startrek_data)\n\n\ncategorical variables:  \n        name     class levels   n missing\n1      title character    781 783       0\n2     author character    277 783       0\n3  publisher character     21 772      11\n4 identifier character    783 783       0\n5     series character     28 783       0\n6  subseries character     15  56     727\n7 dedication character    372 372     411\n                                   distribution\n1 Kobayashi Maru (0.3%), Warped (0.3%) ...     \n2 Peter David (4.9%) ...                       \n3 Pocket Books (67.4%) ...                     \n4  (%) ...                                     \n5 TOS (26.8%), TNG (18.6%), SCE (10.7%) ...    \n6 Typhon Pact (16.1%) ...                      \n7  (%) ...                                     \n\nDate variables:  \n  name class      first       last min_diff max_diff   n missing\n1 date  Date 1967-01-01 2017-11-28   0 days 485 days 783       0\n\nquantitative variables:  \n   name   class  min     Q1 median       Q3     max         mean           sd\n1 nchap numeric    1     13     21     29.0     373     24.58816     21.61247\n2 nword numeric  782  52500  70730  90994.5  687175  76190.07535  52453.34633\n3 nchar numeric 4337 310520 415964 555866.5 4484069 461822.36271 326062.44928\n    n missing\n1 760      23\n2 783       0\n3 783       0\n\n\nThe inspection of the Star Trek book dataset reveals a comprehensive breakdown of variables in categorical, date, and quantitative formats. Among the categorical variables, we have entries such as title, author, publisher, identifier, series, subseries, and dedication. These variables contain character data, with subseries and dedication having the most missing values. For date variables, we have the date variable that records the publication dates of books, ranging from 1967-01-01 to 2017-11-28, spanning a 50-year period. The quantitative variables include nchap (number of chapters), nword (number of words), and nchar (number of characters), all numeric with varying distributions. The average number of chapters per book is approximately 24.59, while the average word count is around 76190 words, and character count averages around 461822 characters.\n\n\n\n\nskim(startrek_data)\n\n\nData summary\n\n\nName\nstartrek_data\n\n\nNumber of rows\n783\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n7\n\n\nDate\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ntitle\n0\n1.00\n4\n58\n0\n781\n0\n\n\nauthor\n0\n1.00\n2\n138\n0\n277\n0\n\n\npublisher\n11\n0.99\n7\n26\n0\n21\n0\n\n\nidentifier\n0\n1.00\n10\n41\n0\n783\n0\n\n\nseries\n0\n1.00\n2\n6\n0\n28\n0\n\n\nsubseries\n727\n0.07\n4\n23\n0\n15\n0\n\n\ndedication\n411\n0.48\n98\n97953\n0\n372\n0\n\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ndate\n0\n1\n1967-01-01\n2017-11-28\n2001-12-14\n577\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nnchap\n23\n0.97\n24.59\n21.61\n1\n13\n21\n29.0\n373\n▇▁▁▁▁\n\n\nnword\n0\n1.00\n76190.08\n52453.35\n782\n52500\n70730\n90994.5\n687175\n▇▁▁▁▁\n\n\nnchar\n0\n1.00\n461822.36\n326062.45\n4337\n310520\n415964\n555866.5\n4484069\n▇▁▁▁▁\n\n\n\n\n\nThe categorical variables like title, author, and publisher are mostly complete, although subseries has significant missing values (727 missing entries) and dedication has 411 missing entries. The date column spans from 1967 to 2017 with a median date around December 14, 2001. For numeric variables, nchap (number of chapters) has 23 missing values, with an average of around 25 chapters per book. The nword (number of words) and nchar (number of characters) columns are complete, showing an average of 76,190 words and 461,822 characters per book.\n\n\n\n\n\n\nnword (dbl): The number of words in the book.\nnchar (dbl): The number of characters (including spaces and punctuation) in the book.\ndate (date): The publication date of the book.\n\n\n\n\n\nauthor: The name of the author who wrote the book.\npublisher: The publishing company responsible for releasing the book.\nseries: The main series of the Star Trek universe to which the book belongs (e.g., The Original Series, The Next Generation).\nsubseries: A subcategory or subseries within the main Star Trek series (e.g., Deep Space Nine).\ndedication: A text string containing the book’s dedication, if applicable\n\n\n\n\n\n\nstartrek_data %&gt;% \n  group_by(author) %&gt;%\n  summarize(average_characters = mean(nchar, na.rm = TRUE), count = n())\n\n# A tibble: 277 × 3\n   author                                               average_characters count\n   &lt;chr&gt;                                                             &lt;dbl&gt; &lt;int&gt;\n 1 A. C. Crispin                                                   571858      1\n 2 A.C. Crispin                                                    480611.     3\n 3 Aaron Rosenberg                                                  87922.     3\n 4 Adam “mojo” Lebowitz; Robert Bonchune; Jonathan Lan…            144868      1\n 5 Alan Dean Foster                                                498784.     2\n 6 Alan Gratz                                                      349595      1\n 7 Allyn Gibson                                                    144935      1\n 8 Andrew J. Robinson                                              641696      1\n 9 Andy Mangels                                                    576557      1\n10 Andy Mangels and Michael A. Martin                              571987      1\n# ℹ 267 more rows\n\n\nThis gives insight into the volume of work and average text length produced by different authors in the dataset.\n\n\n\n\nstartrek_data %&gt;% \n  group_by(publisher) %&gt;%\nsummarize(average_words = mean(nword, na.rm = TRUE), count = n())\n\n# A tibble: 22 × 3\n   publisher           average_words count\n   &lt;chr&gt;                       &lt;dbl&gt; &lt;int&gt;\n 1 Abrams Publications       132041      1\n 2 Aladdin                    23801.    28\n 3 Aladdin Paperbacks         69076      1\n 4 Amereon Ltd                40804.     2\n 5 Bantam Books               50225.    20\n 6 Demco Media                23310.     2\n 7 Dk Publishing             119459      1\n 8 Elysium                    98779      1\n 9 Gallery Books              93418.    15\n10 Harlequin                  63453      1\n# ℹ 12 more rows\n\n\nThe summary of the Star Trek book dataset, grouped by publisher, provides insights into the average number of words and the total book count for each publisher. For example, Abrams Publications has one book with an average of 132,041 words, while Aladdin has 28 books with an average of 23,800 words.\n\n\n\n\nstartrek_data %&gt;%\n  group_by(series) %&gt;%\nsummarize(average_words = mean(nword, na.rm = TRUE), count = n())\n\n# A tibble: 28 × 3\n   series average_words count\n   &lt;chr&gt;          &lt;dbl&gt; &lt;int&gt;\n 1 AV            58112.     6\n 2 CT           157688.     5\n 3 DS9           91641.    83\n 4 DSC           89367      1\n 5 DTI           59215.     5\n 6 ENT           82724.    19\n 7 KE            74668.     4\n 8 MIR          115916.     5\n 9 MISC          89974.    13\n10 MYR          145127      3\n# ℹ 18 more rows\n\n\nThe grouping is done by series, and it shows a range of series with their calculated average word counts and the total number of books within each series. For example, the “TOS” series has 210 books with an average word count of 76,522.67, while the “CT” series has only 5 books but a much higher average word count of 157,687.80. There is also a wide variation in word count across different series, such as “YA-DS9” having only 23,298 words on average compared to more substantial works like “MYR” with 145,127 words. This summary helps identify how the different series compare in terms of length and volume, highlighting the diversity of content.\n\n\n\n\nstartrek_data %&gt;%\n  group_by(series, author) %&gt;%\nsummarize(total_books = n(), average_words = mean(nword, na.rm = TRUE))\n\n`summarise()` has grouped output by 'series'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 419 × 4\n# Groups:   series [28]\n   series author                                total_books average_words\n   &lt;chr&gt;  &lt;chr&gt;                                       &lt;int&gt;         &lt;dbl&gt;\n 1 AV     Alan Dean Foster                                2        77236.\n 2 AV     Alan Gratz                                      1        62030 \n 3 AV     Rick Barba                                      2        39812 \n 4 AV     Rudy Josephs                                    1        52547 \n 5 CT     Christopher Pike                                1        78678 \n 6 CT     James T. Hirk                                   1        95110 \n 7 CT     John J. Ordover and Dean Wesley Smith           1       436682 \n 8 CT     Keith R.A. Decandido                            1       101577 \n 9 CT     Mackenzie                                       1        76392 \n10 DS9    Andrew J. Robinson                              1       113304 \n# ℹ 409 more rows\n\n\nThis allows for an analysis of how different authors contribute to various Star Trek series in terms of the number of books they have written and the average length (in words) of their works.\n\n\n\n\nstartrek_data %&gt;%\n  group_by(year(date), author) %&gt;%\nsummarize(total_books = n(), average_characters = mean(nchar, na.rm = TRUE))\n\n`summarise()` has grouped output by 'year(date)'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 624 × 4\n# Groups:   year(date) [51]\n   `year(date)` author         total_books average_characters\n          &lt;dbl&gt; &lt;chr&gt;                &lt;int&gt;              &lt;dbl&gt;\n 1         1967 James Blish              1            235524 \n 2         1968 James Blish              1            232094 \n 3         1969 James Blish              1            224369 \n 4         1970 James Blish              1            207001 \n 5         1971 James Blish              1            239859 \n 6         1972 James Blish              4            268216.\n 7         1973 James Blish              1            314575 \n 8         1974 James Blish              1            310749 \n 9         1975 James Blish              1            332807 \n10         1976 Sondra Marshak           1            431759 \n# ℹ 614 more rows\n\n\nThis helps analyze trends over time, showing how many books each author contributed in a particular year and the typical length of those books in terms of characters.\n\n\n\n\nstartrek_data %&gt;%\n  group_by(publisher, series) %&gt;%\nsummarize(total_books = n(), average_nchar = mean(nchar, na.rm = TRUE))\n\n`summarise()` has grouped output by 'publisher'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 81 × 4\n# Groups:   publisher [22]\n   publisher           series total_books average_nchar\n   &lt;chr&gt;               &lt;chr&gt;        &lt;int&gt;         &lt;dbl&gt;\n 1 Abrams Publications REF              1       898671 \n 2 Aladdin             YA-DS9          11       135368.\n 3 Aladdin             YA-TNG          14       141448.\n 4 Aladdin             YA-TOS           2       147656.\n 5 Aladdin             YA-VOY           1       130989 \n 6 Aladdin Paperbacks  TOS              1       390799 \n 7 Amereon Ltd         TOS              2       233809 \n 8 Bantam Books        TOS             20       287111.\n 9 Demco Media         YA-VOY           2       134614 \n10 Dk Publishing       REF              1      1094928 \n# ℹ 71 more rows\n\n\nThis helps in analyzing the contribution of different publishers to various Star Trek series and the typical length of books published within those series. It provides insight into the publishing trends, helping to compare the output volume and book length across different series and publishers.\n\n\n\n\nstartrek_data %&gt;%\n  group_by(subseries) %&gt;%\nsummarize(average_words = mean(nword, na.rm = TRUE), count = n())\n\n# A tibble: 16 × 3\n   subseries               average_words count\n   &lt;chr&gt;                           &lt;dbl&gt; &lt;int&gt;\n 1 Academy                       106196      1\n 2 Dark Passions                  52072.     2\n 3 Day of Honor                  116344.     6\n 4 Destiny                       147208      4\n 5 Dominion War                   70683.     5\n 6 Gateways                      116709      1\n 7 Mirror Universe Trilogy        95785.     3\n 8 Prey                           97729      3\n 9 Section 31                     75524.     6\n10 Starfleet Academy              48550.     4\n11 The Badlands                   60314.     2\n12 The Brave and the Bold         66966      2\n13 The Fall                       95050.     5\n14 Totality                       80817.     3\n15 Typhon Pact                   124866.     9\n16 &lt;NA&gt;                           74781.   727\n\n\nThe summarized data from the Star Trek book dataset provides insights into the average word count and total number of books for each subseries. For example, the “Academy” subseries has 1 book with an average word count of 106,196, while “Day of Honor” spans 6 books with an average of 113,644 words. The “Destiny” subseries consists of 4 books averaging 147,208 words, and the “Typhon Pact” subseries features 9 books with an average of 124,866 words. Some subseries, like “Prey,” with 3 books averaging 97,729 words, reflect moderately sized collections. Additionally, there are entries like NA, which account for 727 books with an average word count of 74,780, indicating a group of records that might not fit into a specific subseries."
  },
  {
    "objectID": "posts/Assignment 3 - Part 4/index.html",
    "href": "posts/Assignment 3 - Part 4/index.html",
    "title": "Assignment 3 - Part 4",
    "section": "",
    "text": "We are investigating whether there is a significant difference in the ratings given to three popular shows: Doraemon, Dragon Tales, and Chhota Bheem, and if gender influences these preferences.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(broom)\nlibrary(infer)\n\n\nAttaching package: 'infer'\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\nlibrary(patchwork)\nlibrary(ggprism)\nlibrary(supernova)\n\n\nAttaching package: 'supernova'\n\nThe following object is masked from 'package:scales':\n\n    number\n\nlibrary(dplyr)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(crosstable)\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\n\n\n\nObjective: The purpose of this research experiment is to investigate whether there is a significant difference in the ratings given to three popular shows: Doraemon, Dragon Tales, and Chhota Bheem, and to examine if gender influences these preferences. By collecting and analyzing rating data from students, we aim to explore if there are differences in popularity across shows, and whether male and female students rate these shows differently.\nHypotheses:\n\nPrimary Hypothesis: There is a significant difference in the ratings given to Doraemon, Dragon Tales, and Chhota Bheem.\nAdditional Hypotheses:\n\nDoraemon tends to receive higher ratings on average compared to Dragon Tales and Chhota Bheem, indicating a stronger preference for this show.\nThere is a significant interaction between gender and show preferences, suggesting that male and female students may rate these shows differently.\n\n\nExperiment Design:\nData Collection:\n\nSample: The dataset consists of ratings from 90 students at MAHE Bengaluru, with 30 participants rating each show, totaling 90 responses. Each participant rated only one assigned show, ensuring 30 ratings per show with an equal distribution of male and female participants.\nData Sources: Participants were randomly selected by tossing a coin, and the ratings were recorded in an Excel sheet by the experiment conductors. Each participant rated the show they were assigned on a scale from 1 to 10, with 10 being the highest score.\n\nVariables Measured:\n\nTarget Variable: The rating given by each participant to the assigned show.\nPredictor Variables: Show (Doraemon, Dragon Tales, Chhota Bheem) and Gender (Male, Female).\n\nSampling:\n\nTime Period: The experiment was conducted over a period of 1.5 hours on October 24th, 2024.\nParticipant Selection Criteria: 90 participants were randomly assigned to rate one of the three shows, with balanced representation by gender (15 males and 15 females per show).\n\nAnalysis Plan:\n\nData Cleaning and Transformation:The data was checked for accuracy in the Excel sheet to ensure that each participant’s rating, show assignment, and gender were properly recorded, with no missing or erroneous entries.\nExploratory Data Analysis (EDA):Visualizations such as histograms, box plots, and scatter plots will be used to compare rating distributions across the three shows and examine any differences by gender. This will help identify patterns or preferences among the participants.\n\nStatistical Tests:\n\nShapiro-Wilk Test for Normality:The Shapiro-Wilk test will be used to check if the rating data follows a normal distribution for each show. If the data significantly deviates from normality (p-value &lt; 0.05), it suggests the use of non-parametric tests.\nVariance Test (F-Test):A variance test will be conducted to determine if the variances in ratings are equal between the shows. This test will check the assumption of homogeneity of variances, which is required for the two-sample t-test and ANOVA. If the p-value is small (p-value &lt; 0.05), it indicates unequal variances.\nOne-Way ANOVA: A one-way ANOVA will be conducted to compare the average ratings across the three shows. This will help determine if there is a statistically significant difference in ratings between the shows.\nTwo-Way ANOVA:A two-way ANOVA will be conducted to examine the effects of both show and gender on the average ratings. This will help determine if there are main effects of show or gender, and if there is an interaction effect between the two factors.\nPairwise Comparisons:If the two-way ANOVA is significant, post-hoc pairwise comparisons using Bonferroni correction will be conducted to identify specific differences in ratings between pairs of shows for each gender.\nWilcoxon Rank-Sum Test:If the normality assumption is not met, a Wilcoxon rank-sum test will be conducted to compare the ratings between shows and between genders. This will assess whether male and female students rate one show higher or lower compared to the others.\nKruskal-Wallis Test (Non-Parametric Alternative to ANOVA): If assumptions for ANOVA are violated, this test can assess differences in ratings across the three shows.\nTukey Test:If ANOVA results are significant, a Tukey Honest Significant Difference (HSD) test will be used to further explore the pairwise differences in the mean ratings between the shows for each gender. This test will provide specific pairwise comparisons to determine which shows differ significantly.\nPermutation Test:A permutation test will be conducted to assess the likelihood of the observed differences in ratings across the three shows occurring by chance, providing a non-parametric alternative to the one-way ANOVA.\nDescriptive Statistics:Descriptive measures such as mean, median, and standard deviation will be calculated for each show and gender group to summarize rating performance. These statistics will help provide a clear overview of the central tendencies and variability within each group.\n\nLimitations:\n\nSample Size: With 30 participants rating each show and equal representation of male and female students, the results may not be generalizable to the entire student population or other demographic groups. A more extensive sample would provide greater reliability and external validity.\nContextual Factors: The study did not account for other factors that might influence ratings, such as participants’ prior exposure to the shows or personal preferences in show genres, which could have an effect on the ratings.\n\nOutcome:\nThe analysis will reveal whether significant differences in show ratings exist among students at MAHE Bengaluru, and whether these differences are influenced by gender. If the hypotheses hold, it would suggest that one show (e.g., Doraemon) tends to be more popular among students, with potential gender-based differences in preferences. These findings will provide insights into the viewing preferences of the target audience within this academic context.\n\n\n\n\nshows &lt;- read_csv(\"../../data/tvshows.csv\")\n\nRows: 90 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Participant ID, Gender, Cartoon\ndbl (1): Rating\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nshows\n\n# A tibble: 90 × 4\n   `Participant ID` Gender Cartoon      Rating\n   &lt;chr&gt;            &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt;\n 1 P1               Male   Chhota Bheem    8.5\n 2 P2               Male   Chhota Bheem    6  \n 3 P3               Male   Chhota Bheem    8  \n 4 P4               Male   Chhota Bheem    7  \n 5 P5               Male   Chhota Bheem    8  \n 6 P6               Male   Chhota Bheem   10  \n 7 P7               Male   Chhota Bheem    5  \n 8 P8               Male   Chhota Bheem    7.8\n 9 P9               Male   Chhota Bheem    8.5\n10 P10              Male   Chhota Bheem    5  \n# ℹ 80 more rows\n\n\nThe dataset consists of ratings given by 90 participants, each providing a rating for one of three cartoons: Chhota Bheem, Doraemon, and Dragon Tales. The dataset includes four columns: “Participant ID,” “Gender,” “Cartoon,” and “Rating.” Each participant rated one cartoon on a scale from 1 to 10, with 10 being the highest. The dataset appears balanced in terms of gender distribution, with both male and female participants represented.\n\n\n\n\nshows_modified &lt;- shows %&gt;%\n  mutate(\n    Cartoon = as.factor(Cartoon),\n    Gender = as.factor(Gender)\n  )\nshows_modified\n\n# A tibble: 90 × 4\n   `Participant ID` Gender Cartoon      Rating\n   &lt;chr&gt;            &lt;fct&gt;  &lt;fct&gt;         &lt;dbl&gt;\n 1 P1               Male   Chhota Bheem    8.5\n 2 P2               Male   Chhota Bheem    6  \n 3 P3               Male   Chhota Bheem    8  \n 4 P4               Male   Chhota Bheem    7  \n 5 P5               Male   Chhota Bheem    8  \n 6 P6               Male   Chhota Bheem   10  \n 7 P7               Male   Chhota Bheem    5  \n 8 P8               Male   Chhota Bheem    7.8\n 9 P9               Male   Chhota Bheem    8.5\n10 P10              Male   Chhota Bheem    5  \n# ℹ 80 more rows\n\n\nThe Gender and Cartoon columns have been converted to factors.\n\n\n\n\nglimpse(shows_modified)\n\nRows: 90\nColumns: 4\n$ `Participant ID` &lt;chr&gt; \"P1\", \"P2\", \"P3\", \"P4\", \"P5\", \"P6\", \"P7\", \"P8\", \"P9\",…\n$ Gender           &lt;fct&gt; Male, Male, Male, Male, Male, Male, Male, Male, Male,…\n$ Cartoon          &lt;fct&gt; Chhota Bheem, Chhota Bheem, Chhota Bheem, Chhota Bhee…\n$ Rating           &lt;dbl&gt; 8.5, 6.0, 8.0, 7.0, 8.0, 10.0, 5.0, 7.8, 8.5, 5.0, 7.…\n\n\nThis overview provides a quick look at the structure and type of each column in the dataset, confirming the categorical and continuous data types suitable for further analysis.\n\n\n\n\ninspect(shows_modified)\n\n\ncategorical variables:  \n            name     class levels  n missing\n1 Participant ID character     90 90       0\n2         Gender    factor      2 90       0\n3        Cartoon    factor      3 90       0\n                                   distribution\n1 P1 (1.1%), P10 (1.1%), P11 (1.1%) ...        \n2 Female (50%), Male (50%)                     \n3 Chhota Bheem (33.3%), Doraemon (33.3%) ...   \n\nquantitative variables:  \n    name   class min Q1 median Q3 max     mean       sd  n missing\n1 Rating numeric   1  6      7  8  10 7.062222 1.939627 90       0\n\n\nThe dataset has four columns: Participant ID, Gender, Cartoon, and Rating. Both Gender (Male, Female) and Cartoon (three shows) are categorical factors. The Rating column is numerical, with values ranging from 1 to 10. Summary statistics for ratings show a mean of approximately 7.06 and a standard deviation of around 1.94, with quartiles at 6 (Q1), 7 (median), and 8 (Q3). There are no missing values in the dataset.\n\n\n\n\nskim(shows_modified)\n\n\nData summary\n\n\nName\nshows_modified\n\n\nNumber of rows\n90\n\n\nNumber of columns\n4\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nParticipant ID\n0\n1\n2\n3\n0\n90\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n2\nFem: 45, Mal: 45\n\n\nCartoon\n0\n1\nFALSE\n3\nChh: 30, Dor: 30, Dra: 30\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nRating\n0\n1\n7.06\n1.94\n1\n6\n7\n8\n10\n▁▁▆▇▅\n\n\n\n\n\nEach participant is identified by a unique Participant ID (character variable) and is categorized by Gender (factor with 2 levels: Male and Female) and Cartoon (factor with 3 levels representing the three shows). The Rating variable, a numeric value, represents the score given to each show on a scale of 1 to 10.\nThe summary statistics for Rating show a mean score of approximately 7.06, with a standard deviation of 1.94, indicating moderate variability in ratings across participants. The rating scores range from a minimum of 1 to a maximum of 10, with quartiles (25th, 50th, and 75th percentiles) at 6, 7, and 8, respectively, reflecting a slightly right-skewed distribution. There are no missing values, and each participant rated only one show, ensuring balanced data across gender and show categories.\n\n\n\nQuantitative Data:\n\nRating (dbl): The rating given by each participant for the TV show they viewed, represented as a numeric value ranging from 1 to 10, with 10 being the highest rating.\n\nQualitative Data:\n\nParticipant ID (chr): The unique identifier assigned to each participant in the dataset.\nGender (fct): The gender of the participant, categorized as either Male or Female.\nCartoon (fct): The TV show that each participant rated, categorized as Chhota Bheem, Doraemon, or Dragon Tales.\n\n\n\n\n\n  shows_summary &lt;- shows_modified %&gt;%\n    group_by(Cartoon, Gender) %&gt;%\n    summarise(\n      mean_rating = mean(Rating, na.rm = TRUE),\n      sd_rating = sd(Rating, na.rm = TRUE),\n      count = n()\n    )\n\n`summarise()` has grouped output by 'Cartoon'. You can override using the\n`.groups` argument.\n\nshows_summary\n\n# A tibble: 6 × 5\n# Groups:   Cartoon [3]\n  Cartoon      Gender mean_rating sd_rating count\n  &lt;fct&gt;        &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;int&gt;\n1 Chhota Bheem Female        6.35      1.51    15\n2 Chhota Bheem Male          6.99      1.44    15\n3 Doraemon     Female        7.27      1.79    15\n4 Doraemon     Male          7.23      2.77    15\n5 Dragon Tales Female        7.9       1.26    15\n6 Dragon Tales Male          6.63      2.35    15\n\n\nThe group summaries for the TV shows dataset provide insights into the average ratings given to each show by gender, along with the standard deviation, which indicates the variability of these ratings. For “Chhota Bheem,” females rated it with a mean of 6.35 and a standard deviation of 1.51, while males rated it slightly higher, with a mean of 6.99 and a standard deviation of 1.44. “Doraemon” received a similar pattern, with females giving it a mean rating of 7.27 (SD = 1.79) and males giving a mean rating of 7.23 (SD = 2.77), showing higher variability among male ratings. “Dragon Tales” saw the highest female rating average of 7.9 with the lowest variability (SD = 1.26), whereas males rated it lower on average at 6.63, with a standard deviation of 2.35. Each group contains 15 participants, ensuring balanced representation across genders for each show. This summary highlights gender-specific tendencies in show ratings, with notable differences particularly for “Dragon Tales.”\n\n\n\n\ngf_histogram(\n  ~ Rating | Cartoon, \n  data = shows_modified, \n  binwidth = 1, \n  fill = ~ Cartoon, \n  color = \"black\", \n  alpha = 0.7\n) %&gt;%\n  gf_labs(\n    title = \"Frequency Distribution of Ratings by TV Show\",\n    x = \"Rating\",\n    y = \"Frequency\"\n  )\n\n\n\n\n\n\n\n\nThe histogram displays the frequency distribution of ratings for each of the three TV shows. For Chhota Bheem, ratings are mostly concentrated between 5 and 8, indicating a relatively positive response, with the majority of ratings around 7. Doraemon has a broader distribution, with ratings spread across a wider range, but with a noticeable cluster around 7 as well. Dragon Tales also shows a similar pattern to Chhota Bheem, with ratings largely grouped around the higher end of the scale (7-10). Each show demonstrates a distinct rating pattern, reflecting the variation in audience reception across the different cartoons.\n\n\n\n\ngf_histogram(\n  ~ Rating,\n  data = shows_modified,\n  binwidth = 1,\n  fill = ~ Cartoon,\n  color = \"black\",\n  alpha = 0.7\n) %&gt;%\n  gf_facet_wrap(~ Cartoon + Gender, nrow = 2) %&gt;%\n  gf_labs(\n    title = \"Rating Distribution by Gender and TV Show\",\n    x = \"Rating\",\n    y = \"Frequency\"\n  )\n\n\n\n\n\n\n\n\nThe histogram displays the distribution of ratings for each TV show divided by gender (male and female). Each facet represents a unique combination of show and gender, showing the frequency of ratings across a scale from 2.5 to 10. The plot reveals certain patterns, such as a concentration of higher ratings for Dragon Tales among females and a more spread-out distribution of ratings for Doraemon, especially among males. Chhota Bheem has similar rating distributions for both genders, though slight differences can be observed.\n\n\n\n\ngf_boxplot(\n  Rating ~ Cartoon,\n  data = shows_modified,\n    fill = ~ Cartoon,\n  color = \"black\",\n  outlier.color = \"red\",\n  outlier.shape = 16,\n  outlier.size = 2,\n  alpha = 0.7\n) %&gt;%\n  gf_labs(\n    title = \"Distribution of Ratings for Each TV Show\",\n    x = \"TV Show\",\n    y = \"Rating\"\n  )\n\n\n\n\n\n\n\n\nIn this plot, Doraemon shows an outlier below its lower whisker, suggesting a notably low rating for that show by one participant. Chhota Bheem and Dragon Tales display a wider spread of ratings, with the medians differing slightly between shows.\n\n\n\n\ngf_boxplot(\n  Rating ~ Cartoon | Gender,\n  data = shows_modified,\n  fill = ~ Cartoon,\n  color = \"black\",\n  outlier.color = \"red\",\n  outlier.shape = 16,\n  outlier.size = 2,\n  alpha = 0.7\n) %&gt;%\n  gf_labs(\n    title = \"Distribution of Ratings for Each TV Show by Gender\",\n    x = \"TV Show\",\n    y = \"Rating\"\n  )\n\n\n\n\n\n\n\n\nThe box plot displays the distribution of ratings for each TV show, separated by gender. For each show (Chhota Bheem, Doraemon, and Dragon Tales), the ratings are visualized for both female and male participants, allowing a direct comparison of medians, interquartile ranges, and the spread of data points. Outliers are represented as individual points below the lower whiskers. The plot reveals that the median rating for Chhota Bheem is slightly higher among males than females, while for Dragon Tales, females appear to give slightly higher ratings than males. Doraemon shows a relatively consistent distribution across genders, though with some outliers among male ratings.\n\n\n\n\nshows_summary &lt;- shows_modified %&gt;%\n  group_by(Cartoon) %&gt;%\n  summarise(\n    mean_rating = mean(Rating, na.rm = TRUE),\n    sd_rating = sd(Rating, na.rm = TRUE),\n    n = n(),\n    se = sd_rating / sqrt(n),       \n    ci_95 = 1.96 * se                  \n  )\ngf_point(\n  mean_rating ~ Cartoon,               \n  data = shows_summary,                \n  size = 4,                           \n  color = ~ Cartoon                    \n) %&gt;%\n  gf_errorbar(\n    ymin = ~ mean_rating - ci_95,     \n    ymax = ~ mean_rating + ci_95,      \n    width = 0.2                        \n  ) %&gt;%\n  gf_hline(\n    yintercept = 7.062,                    \n    color = \"red\",                    \n    linewidth = 1.5                    \n  ) %&gt;%\n  gf_labs(\n    title = \"Mean Ratings of TV Shows with 95% Confidence Interval Error Bars\",\n    subtitle = \"Mean ratings with 95% CI\",\n    x = \"TV Show\",\n    y = \"Mean Rating\"\n  )\n\n\n\n\n\n\n\n\nThe bar plot with error bars displays the mean ratings of three TV shows, each represented by a point with accompanying error bars indicating the 95% confidence intervals. The horizontal red line serves as a reference, placed at a mean rating of 7,062, allowing for easy comparison of each show’s rating relative to this average. Doraemon exhibits the widest confidence interval, reflecting greater variability in ratings, while Chhota Bheem shows a narrower interval, suggesting more consistency in its ratings. Dragon Tales lies closest to the reference mean.\n\n\n\n\nshows_summary_gender &lt;- shows_modified %&gt;%\n  group_by(Cartoon, Gender) %&gt;%\n  summarise(mean_rating = mean(Rating, na.rm = TRUE))\n\n`summarise()` has grouped output by 'Cartoon'. You can override using the\n`.groups` argument.\n\ngf_line(\n  mean_rating ~ Cartoon,\n  color = ~ Gender,\n  data = shows_summary_gender\n) %&gt;%\n  gf_point(\n    mean_rating ~ Cartoon,\n    color = ~ Gender,\n    shape = ~ Gender,\n    size = 4\n  ) %&gt;%\n  gf_labs(\n    title = \"Interaction Plot of TV Show and Gender on Ratings\",\n    x = \"TV Show\",\n    y = \"Mean Rating\"\n  )\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n\n\nThe interaction plot displays the mean ratings for each TV show, separated by gender, allowing us to observe any interaction effects between TV show and gender on ratings. In this plot, “Chhota Bheem,” “Doraemon,” and “Dragon Tales” are plotted along the x-axis, while the mean rating is represented on the y-axis. Different shapes and colors denote male and female participants, respectively, highlighting their individual ratings for each show. This visualization makes it clear if there are any gender-specific trends or if both genders rate the shows similarly. For example, in this plot, we can see that females tend to rate “Dragon Tales” higher on average compared to males, while males seem to rate “Chhota Bheem” lower than females.\n\n\n\n\ngf_density(~ Rating | Cartoon, data = shows_modified, fill = ~ Cartoon, alpha = 0.4) %&gt;%\n  gf_fitdistr(~ Rating | Cartoon, data = shows_modified, ddist = \"normal\", color = \"black\", linetype = \"dashed\") %&gt;%\n  gf_labs(\n    title = \"Density Plot of Ratings by TV Show with Normal Fit\",\n    x = \"Rating\",\n    y = \"Density\"\n  )\n\n\n\n\n\n\n\n\nThe density plot visualizes the distribution of ratings for each TV show with an overlaid normal distribution (dashed line) for comparison. The plot reveals that ratings for Chhota Bheem are skewed left, centered around a lower rating range, indicating that the ratings are generally lower for this show. Doraemon shows a more uniform distribution, although slightly right-skewed, suggesting a tendency towards higher ratings. Dragon Tales has a distinct peak in the middle-to-upper range of ratings, also slightly right-skewed, indicating that it generally received higher ratings. The normal distribution overlay highlights deviations from normality, with all shows showing some skewness, particularly Chhota Bheem and Dragon Tales, suggesting that these distributions are not entirely normal.\n\n\n\n\ncrosstable(\n  shows_modified, \n  c(Cartoon, Gender), \n  showNA = \"ifany\"\n) %&gt;%\n  crosstable::as_flextable()\n\nlabelvariablevalueCartoonChhota Bheem30 (33.33%)Doraemon30 (33.33%)Dragon Tales30 (33.33%)GenderFemale45 (50.00%)Male45 (50.00%)\n\n\nThe crosstable for the shows dataset displays the distribution of participants across the variables Cartoon and Gender. Each cartoon, Chhota Bheem, Doraemon, and Dragon Tales, has exactly 30 participants, representing 33.33% of the total sample. Additionally, the dataset has a balanced gender distribution, with 45 male and 45 female participants, each comprising 50% of the total sample. This even split across both cartoons and gender ensures that any comparisons made in the analysis can be interpreted without concern for imbalance in the sample’s composition.\n\n\n\n\nshapiro_test_chhotabheem &lt;- shapiro.test(shows_modified$Rating[shows_modified$Cartoon == \"Chhota Bheem\"])\nshapiro_test_doraemon &lt;- shapiro.test(shows_modified$Rating[shows_modified$Cartoon == \"Doraemon\"])\nshapiro_test_dragontales &lt;- shapiro.test(shows_modified$Rating[shows_modified$Cartoon == \"Dragon Tales\"])\n\nshapiro_test_chhotabheem\n\n\n    Shapiro-Wilk normality test\n\ndata:  shows_modified$Rating[shows_modified$Cartoon == \"Chhota Bheem\"]\nW = 0.9515, p-value = 0.1854\n\nshapiro_test_doraemon\n\n\n    Shapiro-Wilk normality test\n\ndata:  shows_modified$Rating[shows_modified$Cartoon == \"Doraemon\"]\nW = 0.90877, p-value = 0.01385\n\nshapiro_test_dragontales\n\n\n    Shapiro-Wilk normality test\n\ndata:  shows_modified$Rating[shows_modified$Cartoon == \"Dragon Tales\"]\nW = 0.9181, p-value = 0.02395\n\n\nThe Shapiro-Wilk normality tests were conducted on the ratings for each TV show—Chhota Bheem, Doraemon, and Dragon Tales.\n\nChhota Bheem: W = 0.9515, p-value = 0.1854, indicating that the ratings do not significantly deviate from a normal distribution, as the p-value is greater than 0.05.\nDoraemon: W = 0.9087, p-value = 0.01385, suggesting a significant deviation from normality, with a p-value below 0.05.\nDragon Tales: W = 0.9181, p-value = 0.02395, also showing a significant deviation from normality.\n\nThese results indicate that the ratings for Doraemon and Dragon Tales do not follow a normal distribution, while the ratings for Chhota Bheem appear to be normally distributed.\n\n\n\n\nshows_modified %&gt;%\n  group_by(Cartoon) %&gt;%\n  summarise(variance = var(Rating))\n\n# A tibble: 3 × 2\n  Cartoon      variance\n  &lt;fct&gt;           &lt;dbl&gt;\n1 Chhota Bheem     2.21\n2 Doraemon         5.25\n3 Dragon Tales     3.84\n\nDescTools::LeveneTest(Rating ~ Cartoon, data = shows_modified)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  2  1.2923 0.2798\n      87               \n\nfligner.test(Rating ~ Cartoon, data = shows_modified)\n\n\n    Fligner-Killeen test of homogeneity of variances\n\ndata:  Rating by Cartoon\nFligner-Killeen:med chi-squared = 1.8135, df = 2, p-value = 0.4038\n\n\nThe Levene’s Test and Fligner-Killeen Test were performed to assess the homogeneity of variances in ratings across the three TV shows: Chhota Bheem, Doraemon, and Dragon Tales. Variance calculations show differing values for each show, with Chhota Bheem at 2.21, Doraemon at 5.25, and Dragon Tales at 3.84. The Levene’s Test produced an F-value of 1.2923 with a p-value of 0.2798, while the Fligner-Killeen Test yielded a chi-squared value of 1.8135 with a p-value of 0.4038. Both tests indicate that the differences in variances are not statistically significant (p &gt; 0.05), suggesting that the assumption of homogeneity of variances holds for the ratings across the three shows.\n\n\n\n\nanova_result &lt;- aov(Rating ~ Cartoon, data = shows_modified)\n\nsummary(anova_result)\n\n            Df Sum Sq Mean Sq F value Pr(&gt;F)\nCartoon      2    6.9   3.463   0.919  0.403\nResiduals   87  327.9   3.769               \n\n\nThe results of the one-way ANOVA for the TV Shows dataset indicate that there is no statistically significant difference in the average ratings among the three shows: Chhota Bheem, Doraemon, and Dragon Tales. The F-value is 0.919, and the associated p-value is 0.403, which is greater than the conventional significance level of 0.05. Therefore, we fail to reject the null hypothesis, suggesting that the mean ratings for these shows are not significantly different from one another. This analysis implies that participants rated the three shows similarly on average.\n\n\n\n\nanova_result_2way &lt;- aov(Rating ~ Cartoon * Gender, data = shows_modified)\n\nsummary(anova_result_2way)\n\n               Df Sum Sq Mean Sq F value Pr(&gt;F)\nCartoon         2   6.93   3.463   0.930  0.399\nGender          1   1.11   1.111   0.298  0.586\nCartoon:Gender  2  13.94   6.969   1.871  0.160\nResiduals      84 312.85   3.724               \n\n\nThe results of the two-way ANOVA indicate that neither Cartoon (TV Show) nor Gender individually has a statistically significant effect on the Rating (p-values of 0.399 and 0.586, respectively). Additionally, there is no significant interaction effect between Cartoon and Gender on the ratings, with a p-value of 0.160 for the interaction term. This suggests that neither the type of TV show nor the gender of participants, nor their combination, significantly impacts the ratings given by the participants in this dataset.\n\n\n\n\nsupernova::pairwise(\n  anova_result,                  \n  correction = \"Bonferroni\",      \n  alpha = 0.05,                   \n  var_equal = TRUE,               \n  plot = TRUE                    \n)\n\n\n\n\n\n\n\n\n\n\n\n── Pairwise t-tests with Bonferroni correction ─────────────────────────────────\n\n\nModel: Rating ~ Cartoon\n\n\nCartoon\n\n\nLevels: 3\n\n\nFamily-wise error-rate: 0.049\n\n\n\n  group_1      group_2       diff pooled_se     t    df  lower upper  p_adj\n  &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 Doraemon     Chhota Bheem 0.580     0.354 1.636    87 -0.186 1.346  .3161\n2 Dragon Tales Chhota Bheem 0.597     0.354 1.683    87 -0.170 1.363  .2877\n3 Dragon Tales Doraemon     0.017     0.354 0.047    87 -0.750 0.783 1.0000\n\n\nThe post-hoc analysis with Bonferroni correction was conducted to examine pairwise comparisons of ratings across the three TV shows (Chhota Bheem, Doraemon, and Dragon Tales). This analysis identified the mean differences between each pair of shows, along with their respective confidence intervals and adjusted p-values. The results include:\n\nA comparison between Doraemon and Chhota Bheem with a mean difference of 0.58.\nA comparison between Dragon Tales and Chhota Bheem with a mean difference of 0.597.\nA comparison between Dragon Tales and Doraemon with a very small difference of 0.017.\n\nThe confidence intervals displayed in the plot show the estimated range of each difference with Bonferroni-adjusted significance levels, but none of the intervals exclude zero, indicating that no significant difference was detected among the pairs at the 95% confidence level after adjustment. This suggests that while there are observable mean differences, they are not statistically significant.\n\n\n\n\nwilcox_test_bheem_doraemon &lt;- wilcox.test(\n  Rating ~ Cartoon,\n  data = shows_modified %&gt;% filter(Cartoon %in% c(\"Chhota Bheem\", \"Doraemon\")),\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_bheem_doraemon\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low   conf.high method             alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;      \n1    -1.00      338.  0.0933    -2.00 0.000000600 Wilcoxon rank sum… two.sided  \n\n\nThe p-value obtained (0.09328) is above the typical threshold of 0.05, indicating that there is no statistically significant difference in the ratings between “Chhota Bheem” and “Doraemon” at a 5% significance level. The test also provides a confidence interval for the rank difference, though it includes zero, reinforcing the lack of a significant difference between these two groups. This analysis allows us to understand that any observed rating differences between these shows are likely due to chance, rather than a true difference in audience ratings.\n\n\n\n\nwilcox_test_bheem_dragon &lt;- wilcox.test(\n  Rating ~ Cartoon,\n  data = shows_modified %&gt;% filter(Cartoon %in% c(\"Chhota Bheem\", \"Dragon Tales\")),\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_bheem_dragon\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low conf.high method               alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;      \n1    -1.00       337  0.0918    -1.70 0.0000226 Wilcoxon rank sum t… two.sided  \n\n\nHere, the p-value is approximately 0.0918, which is above the typical significance threshold of 0.05, indicating that the difference in median ratings between “Chhota Bheem” and “Dragon Tales” is not statistically significant at the 5% level. The confidence interval for the difference in ratings spans both positive and negative values, further supporting the conclusion of no significant difference in ratings between these two shows in this test.\n\n\n\n\nwilcox_test_doraemon_dragon &lt;- wilcox.test(\n  Rating ~ Cartoon,\n  data = shows_modified %&gt;% filter(Cartoon %in% c(\"Doraemon\", \"Dragon Tales\")),\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_doraemon_dragon\n\n# A tibble: 1 × 7\n   estimate statistic p.value conf.low conf.high method              alternative\n      &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;      \n1 0.0000514      462.   0.869    -1.00      1.00 Wilcoxon rank sum … two.sided  \n\n\nThis test resulted in a test statistic of 461.5 with a p-value of approximately 0.869. The confidence interval for the difference in median ratings ranges from -0.999 to 1.000. Given the high p-value, there is no statistically significant difference in median ratings between “Doraemon” and “Dragon Tales”, suggesting that viewers rate these two shows similarly on average.\n\n\n\n\nkruskal_test_result &lt;- kruskal.test(Rating ~ Cartoon, data = shows_modified) %&gt;%  broom::tidy()\nkruskal_test_result\n\n# A tibble: 1 × 4\n  statistic p.value parameter method                      \n      &lt;dbl&gt;   &lt;dbl&gt;     &lt;int&gt; &lt;chr&gt;                       \n1      3.83   0.148         2 Kruskal-Wallis rank sum test\n\n\nIn learning about the Kruskal-Wallis test, I discovered it as a non-parametric alternative to the One-Way ANOVA, particularly useful when the data does not meet the normality assumption required by ANOVA. This test compares the medians of multiple groups to determine if there are significant differences among them. By ranking the data and assessing the distribution of these ranks across groups, the Kruskal-Wallis test provides insight without relying on normally distributed data.\nIn applying the test to compare ratings across the three TV shows (Chhota Bheem, Doraemon, and Dragon Tales), I obtained a test statistic of 3.825 with a p-value of approximately 0.148. Since the p-value is greater than the common significance level of 0.05, we do not have sufficient evidence to conclude that there is a statistically significant difference in the ratings among the shows. This suggests that the median ratings across the three shows are not significantly different based on this sample.\n\n\n\n\nlm_model &lt;- lm(Rating ~ Cartoon, data = shows_modified)\ntukey_results &lt;- TukeyHSD(aov(lm_model))\nprint(tukey_results)\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = lm_model)\n\n$Cartoon\n                                diff        lwr      upr     p adj\nDoraemon-Chhota Bheem     0.58000000 -0.6152594 1.775259 0.4819563\nDragon Tales-Chhota Bheem 0.59666667 -0.5985927 1.791926 0.4621079\nDragon Tales-Doraemon     0.01666667 -1.1785927 1.211926 0.9993907\n\n\nThe Tukey’s HSD (Honest Significant Difference) test was performed to identify any significant pairwise differences in the ratings among the three TV shows: Doraemon, Chhota Bheem, and Dragon Tales. The results show the difference in mean ratings between each pair of shows along with confidence intervals and adjusted p-values. The p-values for each pairwise comparison are above 0.05, indicating that none of the differences in ratings between the shows are statistically significant at the 95% confidence level. Therefore, we conclude that there is no significant difference in the ratings among Doraemon, Chhota Bheem, and Dragon Tales based on this analysis.\n\n\n\n\nobserved_perm &lt;- shows_modified %&gt;%\n  specify(Rating ~ Cartoon) %&gt;%\n  hypothesize(null = \"independence\") %&gt;%\n  calculate(stat = \"F\")\n\nnull_dist_perm &lt;- shows_modified %&gt;%\n  specify(Rating ~ Cartoon) %&gt;%\n  hypothesize(null = \"independence\") %&gt;%\n  generate(reps = 5000, type = \"permute\") %&gt;%\n  calculate(stat = \"F\")\n\nnull_dist_perm %&gt;%\n  visualize() +\n  shade_p_value(obs_stat = observed_perm$stat, direction = \"greater\") +\n  annotation_logticks(outside = FALSE)\n\n\n\n\n\n\n\nperm_p_value &lt;- null_dist_perm %&gt;%\n  get_p_value(obs_stat = observed_perm$stat, direction = \"greater\")\nperm_p_value\n\n# A tibble: 1 × 1\n  p_value\n    &lt;dbl&gt;\n1   0.405\n\n\nIn this permutation test, the goal was to assess whether the observed differences in ratings among the three TV shows could be attributed to chance. By permuting the ratings data 5,000 times, a null distribution was generated, and the test statistic (F-statistic) for the observed data was compared against this simulated distribution. The visual output shows the null distribution, with the observed test statistic highlighted. The resulting p-value of 0.409 indicates that there is a 40.9% probability that the observed differences in ratings could occur by random chance, suggesting no statistically significant differences in ratings across the shows under the non-parametric assumptions.\n\n\n\nThe research experiment aimed to investigate if there were significant differences in ratings among three popular TV shows: Chhota Bheem, Doraemon, and Dragon Tales, and to examine the effect of gender on these ratings. The following statistical analyses were conducted:\n\n\nThe Shapiro-Wilk test was conducted to check if the ratings for each show followed a normal distribution:\n\nChhota Bheem: W = 0.9515, p = 0.1854\nDoraemon: W = 0.9087, p = 0.01385\nDragon Tales: W = 0.9181, p = 0.02395\n\nWith small p-values for Doraemon and Dragon Tales, the ratings for these shows deviated from normality, suggesting that non-parametric tests would be suitable for further analysis.\n\n\n\nLevene’s test and Fligner-Killeen test were used to check if the variances were equal across the three shows:\n\nLevene’s Test: p = 0.2798\nFligner-Killeen Test: p = 0.4038\n\nBoth tests indicated no significant difference in variances, so the assumption of equal variances was not violated, allowing for ANOVA to be applied.\n\n\n\nA one-way ANOVA was conducted to assess differences in mean ratings across the three shows:\n\nF(2, 87) = 0.919, p = 0.403\n\nThe ANOVA results showed no statistically significant difference in average ratings across the shows, indicating that there may not be a substantial difference in viewer ratings among the three programs.\n\n\n\nA two-way ANOVA was conducted to analyze the combined effects of TV show and gender on ratings:\n\nMain effect of TV Show: F(2, 84) = 0.930, p = 0.399\nMain effect of Gender: F(1, 84) = 0.298, p = 0.586\nInteraction effect (TV Show * Gender): F(2, 84) = 1.871, p = 0.160\n\nThe two-way ANOVA results revealed that neither gender, show, nor their interaction had a statistically significant effect on ratings. This suggests that ratings do not vary meaningfully by gender or show, nor does the combination of show and gender influence ratings significantly.\n\n\n\nPairwise Wilcoxon Rank-Sum tests were performed due to deviations from normality:\n\nChhota Bheem vs Doraemon: p = 0.09328 (not significant)\nChhota Bheem vs Dragon Tales: p = 0.09184 (not significant)\nDoraemon vs Dragon Tales: p = 0.8694 (not significant)\n\nThe Wilcoxon tests found no significant differences between any pair of shows, aligning with the results from both ANOVA and Kruskal-Wallis tests.\n\n\n\nGiven the deviations from normality, a Kruskal-Wallis test was performed as a non-parametric alternative to ANOVA:\n\nH(2) = 3.825, p = 0.1477\n\nThe Kruskal-Wallis test also indicated no significant differences in ratings across the three shows, consistent with the one-way ANOVA results.\n\n\n\nA permutation test was conducted to further assess whether the observed differences in ratings across the shows were likely due to chance:\n\np-value = 0.409\n\nThe permutation test confirmed that the differences in ratings could likely occur by random variation, supporting the earlier results.\n\n\n\n\nThe statistical analyses indicate no significant differences in ratings among the three TV shows, and no significant effect of gender on ratings. Both parametric (ANOVA) and non-parametric (Kruskal-Wallis, Wilcoxon Rank-Sum) tests consistently showed that the ratings across the three shows are comparable. The permutation test further validated these findings, confirming that any observed differences are likely due to chance. Consequently, the experiment concludes that ratings do not significantly vary by TV show or gender."
  },
  {
    "objectID": "posts/Assignment 3 - Part 4/index.html#introduction",
    "href": "posts/Assignment 3 - Part 4/index.html#introduction",
    "title": "Assignment 3 - Part 4",
    "section": "",
    "text": "We are investigating whether there is a significant difference in the ratings given to three popular shows: Doraemon, Dragon Tales, and Chhota Bheem, and if gender influences these preferences.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(broom)\nlibrary(infer)\n\n\nAttaching package: 'infer'\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\nlibrary(patchwork)\nlibrary(ggprism)\nlibrary(supernova)\n\n\nAttaching package: 'supernova'\n\nThe following object is masked from 'package:scales':\n\n    number\n\nlibrary(dplyr)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(crosstable)\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\n\n\n\nObjective: The purpose of this research experiment is to investigate whether there is a significant difference in the ratings given to three popular shows: Doraemon, Dragon Tales, and Chhota Bheem, and to examine if gender influences these preferences. By collecting and analyzing rating data from students, we aim to explore if there are differences in popularity across shows, and whether male and female students rate these shows differently.\nHypotheses:\n\nPrimary Hypothesis: There is a significant difference in the ratings given to Doraemon, Dragon Tales, and Chhota Bheem.\nAdditional Hypotheses:\n\nDoraemon tends to receive higher ratings on average compared to Dragon Tales and Chhota Bheem, indicating a stronger preference for this show.\nThere is a significant interaction between gender and show preferences, suggesting that male and female students may rate these shows differently.\n\n\nExperiment Design:\nData Collection:\n\nSample: The dataset consists of ratings from 90 students at MAHE Bengaluru, with 30 participants rating each show, totaling 90 responses. Each participant rated only one assigned show, ensuring 30 ratings per show with an equal distribution of male and female participants.\nData Sources: Participants were randomly selected by tossing a coin, and the ratings were recorded in an Excel sheet by the experiment conductors. Each participant rated the show they were assigned on a scale from 1 to 10, with 10 being the highest score.\n\nVariables Measured:\n\nTarget Variable: The rating given by each participant to the assigned show.\nPredictor Variables: Show (Doraemon, Dragon Tales, Chhota Bheem) and Gender (Male, Female).\n\nSampling:\n\nTime Period: The experiment was conducted over a period of 1.5 hours on October 24th, 2024.\nParticipant Selection Criteria: 90 participants were randomly assigned to rate one of the three shows, with balanced representation by gender (15 males and 15 females per show).\n\nAnalysis Plan:\n\nData Cleaning and Transformation:The data was checked for accuracy in the Excel sheet to ensure that each participant’s rating, show assignment, and gender were properly recorded, with no missing or erroneous entries.\nExploratory Data Analysis (EDA):Visualizations such as histograms, box plots, and scatter plots will be used to compare rating distributions across the three shows and examine any differences by gender. This will help identify patterns or preferences among the participants.\n\nStatistical Tests:\n\nShapiro-Wilk Test for Normality:The Shapiro-Wilk test will be used to check if the rating data follows a normal distribution for each show. If the data significantly deviates from normality (p-value &lt; 0.05), it suggests the use of non-parametric tests.\nVariance Test (F-Test):A variance test will be conducted to determine if the variances in ratings are equal between the shows. This test will check the assumption of homogeneity of variances, which is required for the two-sample t-test and ANOVA. If the p-value is small (p-value &lt; 0.05), it indicates unequal variances.\nOne-Way ANOVA: A one-way ANOVA will be conducted to compare the average ratings across the three shows. This will help determine if there is a statistically significant difference in ratings between the shows.\nTwo-Way ANOVA:A two-way ANOVA will be conducted to examine the effects of both show and gender on the average ratings. This will help determine if there are main effects of show or gender, and if there is an interaction effect between the two factors.\nPairwise Comparisons:If the two-way ANOVA is significant, post-hoc pairwise comparisons using Bonferroni correction will be conducted to identify specific differences in ratings between pairs of shows for each gender.\nWilcoxon Rank-Sum Test:If the normality assumption is not met, a Wilcoxon rank-sum test will be conducted to compare the ratings between shows and between genders. This will assess whether male and female students rate one show higher or lower compared to the others.\nKruskal-Wallis Test (Non-Parametric Alternative to ANOVA): If assumptions for ANOVA are violated, this test can assess differences in ratings across the three shows.\nTukey Test:If ANOVA results are significant, a Tukey Honest Significant Difference (HSD) test will be used to further explore the pairwise differences in the mean ratings between the shows for each gender. This test will provide specific pairwise comparisons to determine which shows differ significantly.\nPermutation Test:A permutation test will be conducted to assess the likelihood of the observed differences in ratings across the three shows occurring by chance, providing a non-parametric alternative to the one-way ANOVA.\nDescriptive Statistics:Descriptive measures such as mean, median, and standard deviation will be calculated for each show and gender group to summarize rating performance. These statistics will help provide a clear overview of the central tendencies and variability within each group.\n\nLimitations:\n\nSample Size: With 30 participants rating each show and equal representation of male and female students, the results may not be generalizable to the entire student population or other demographic groups. A more extensive sample would provide greater reliability and external validity.\nContextual Factors: The study did not account for other factors that might influence ratings, such as participants’ prior exposure to the shows or personal preferences in show genres, which could have an effect on the ratings.\n\nOutcome:\nThe analysis will reveal whether significant differences in show ratings exist among students at MAHE Bengaluru, and whether these differences are influenced by gender. If the hypotheses hold, it would suggest that one show (e.g., Doraemon) tends to be more popular among students, with potential gender-based differences in preferences. These findings will provide insights into the viewing preferences of the target audience within this academic context.\n\n\n\n\nshows &lt;- read_csv(\"../../data/tvshows.csv\")\n\nRows: 90 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Participant ID, Gender, Cartoon\ndbl (1): Rating\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nshows\n\n# A tibble: 90 × 4\n   `Participant ID` Gender Cartoon      Rating\n   &lt;chr&gt;            &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt;\n 1 P1               Male   Chhota Bheem    8.5\n 2 P2               Male   Chhota Bheem    6  \n 3 P3               Male   Chhota Bheem    8  \n 4 P4               Male   Chhota Bheem    7  \n 5 P5               Male   Chhota Bheem    8  \n 6 P6               Male   Chhota Bheem   10  \n 7 P7               Male   Chhota Bheem    5  \n 8 P8               Male   Chhota Bheem    7.8\n 9 P9               Male   Chhota Bheem    8.5\n10 P10              Male   Chhota Bheem    5  \n# ℹ 80 more rows\n\n\nThe dataset consists of ratings given by 90 participants, each providing a rating for one of three cartoons: Chhota Bheem, Doraemon, and Dragon Tales. The dataset includes four columns: “Participant ID,” “Gender,” “Cartoon,” and “Rating.” Each participant rated one cartoon on a scale from 1 to 10, with 10 being the highest. The dataset appears balanced in terms of gender distribution, with both male and female participants represented.\n\n\n\n\nshows_modified &lt;- shows %&gt;%\n  mutate(\n    Cartoon = as.factor(Cartoon),\n    Gender = as.factor(Gender)\n  )\nshows_modified\n\n# A tibble: 90 × 4\n   `Participant ID` Gender Cartoon      Rating\n   &lt;chr&gt;            &lt;fct&gt;  &lt;fct&gt;         &lt;dbl&gt;\n 1 P1               Male   Chhota Bheem    8.5\n 2 P2               Male   Chhota Bheem    6  \n 3 P3               Male   Chhota Bheem    8  \n 4 P4               Male   Chhota Bheem    7  \n 5 P5               Male   Chhota Bheem    8  \n 6 P6               Male   Chhota Bheem   10  \n 7 P7               Male   Chhota Bheem    5  \n 8 P8               Male   Chhota Bheem    7.8\n 9 P9               Male   Chhota Bheem    8.5\n10 P10              Male   Chhota Bheem    5  \n# ℹ 80 more rows\n\n\nThe Gender and Cartoon columns have been converted to factors.\n\n\n\n\nglimpse(shows_modified)\n\nRows: 90\nColumns: 4\n$ `Participant ID` &lt;chr&gt; \"P1\", \"P2\", \"P3\", \"P4\", \"P5\", \"P6\", \"P7\", \"P8\", \"P9\",…\n$ Gender           &lt;fct&gt; Male, Male, Male, Male, Male, Male, Male, Male, Male,…\n$ Cartoon          &lt;fct&gt; Chhota Bheem, Chhota Bheem, Chhota Bheem, Chhota Bhee…\n$ Rating           &lt;dbl&gt; 8.5, 6.0, 8.0, 7.0, 8.0, 10.0, 5.0, 7.8, 8.5, 5.0, 7.…\n\n\nThis overview provides a quick look at the structure and type of each column in the dataset, confirming the categorical and continuous data types suitable for further analysis.\n\n\n\n\ninspect(shows_modified)\n\n\ncategorical variables:  \n            name     class levels  n missing\n1 Participant ID character     90 90       0\n2         Gender    factor      2 90       0\n3        Cartoon    factor      3 90       0\n                                   distribution\n1 P1 (1.1%), P10 (1.1%), P11 (1.1%) ...        \n2 Female (50%), Male (50%)                     \n3 Chhota Bheem (33.3%), Doraemon (33.3%) ...   \n\nquantitative variables:  \n    name   class min Q1 median Q3 max     mean       sd  n missing\n1 Rating numeric   1  6      7  8  10 7.062222 1.939627 90       0\n\n\nThe dataset has four columns: Participant ID, Gender, Cartoon, and Rating. Both Gender (Male, Female) and Cartoon (three shows) are categorical factors. The Rating column is numerical, with values ranging from 1 to 10. Summary statistics for ratings show a mean of approximately 7.06 and a standard deviation of around 1.94, with quartiles at 6 (Q1), 7 (median), and 8 (Q3). There are no missing values in the dataset.\n\n\n\n\nskim(shows_modified)\n\n\nData summary\n\n\nName\nshows_modified\n\n\nNumber of rows\n90\n\n\nNumber of columns\n4\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nParticipant ID\n0\n1\n2\n3\n0\n90\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n2\nFem: 45, Mal: 45\n\n\nCartoon\n0\n1\nFALSE\n3\nChh: 30, Dor: 30, Dra: 30\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nRating\n0\n1\n7.06\n1.94\n1\n6\n7\n8\n10\n▁▁▆▇▅\n\n\n\n\n\nEach participant is identified by a unique Participant ID (character variable) and is categorized by Gender (factor with 2 levels: Male and Female) and Cartoon (factor with 3 levels representing the three shows). The Rating variable, a numeric value, represents the score given to each show on a scale of 1 to 10.\nThe summary statistics for Rating show a mean score of approximately 7.06, with a standard deviation of 1.94, indicating moderate variability in ratings across participants. The rating scores range from a minimum of 1 to a maximum of 10, with quartiles (25th, 50th, and 75th percentiles) at 6, 7, and 8, respectively, reflecting a slightly right-skewed distribution. There are no missing values, and each participant rated only one show, ensuring balanced data across gender and show categories.\n\n\n\nQuantitative Data:\n\nRating (dbl): The rating given by each participant for the TV show they viewed, represented as a numeric value ranging from 1 to 10, with 10 being the highest rating.\n\nQualitative Data:\n\nParticipant ID (chr): The unique identifier assigned to each participant in the dataset.\nGender (fct): The gender of the participant, categorized as either Male or Female.\nCartoon (fct): The TV show that each participant rated, categorized as Chhota Bheem, Doraemon, or Dragon Tales.\n\n\n\n\n\n  shows_summary &lt;- shows_modified %&gt;%\n    group_by(Cartoon, Gender) %&gt;%\n    summarise(\n      mean_rating = mean(Rating, na.rm = TRUE),\n      sd_rating = sd(Rating, na.rm = TRUE),\n      count = n()\n    )\n\n`summarise()` has grouped output by 'Cartoon'. You can override using the\n`.groups` argument.\n\nshows_summary\n\n# A tibble: 6 × 5\n# Groups:   Cartoon [3]\n  Cartoon      Gender mean_rating sd_rating count\n  &lt;fct&gt;        &lt;fct&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;int&gt;\n1 Chhota Bheem Female        6.35      1.51    15\n2 Chhota Bheem Male          6.99      1.44    15\n3 Doraemon     Female        7.27      1.79    15\n4 Doraemon     Male          7.23      2.77    15\n5 Dragon Tales Female        7.9       1.26    15\n6 Dragon Tales Male          6.63      2.35    15\n\n\nThe group summaries for the TV shows dataset provide insights into the average ratings given to each show by gender, along with the standard deviation, which indicates the variability of these ratings. For “Chhota Bheem,” females rated it with a mean of 6.35 and a standard deviation of 1.51, while males rated it slightly higher, with a mean of 6.99 and a standard deviation of 1.44. “Doraemon” received a similar pattern, with females giving it a mean rating of 7.27 (SD = 1.79) and males giving a mean rating of 7.23 (SD = 2.77), showing higher variability among male ratings. “Dragon Tales” saw the highest female rating average of 7.9 with the lowest variability (SD = 1.26), whereas males rated it lower on average at 6.63, with a standard deviation of 2.35. Each group contains 15 participants, ensuring balanced representation across genders for each show. This summary highlights gender-specific tendencies in show ratings, with notable differences particularly for “Dragon Tales.”\n\n\n\n\ngf_histogram(\n  ~ Rating | Cartoon, \n  data = shows_modified, \n  binwidth = 1, \n  fill = ~ Cartoon, \n  color = \"black\", \n  alpha = 0.7\n) %&gt;%\n  gf_labs(\n    title = \"Frequency Distribution of Ratings by TV Show\",\n    x = \"Rating\",\n    y = \"Frequency\"\n  )\n\n\n\n\n\n\n\n\nThe histogram displays the frequency distribution of ratings for each of the three TV shows. For Chhota Bheem, ratings are mostly concentrated between 5 and 8, indicating a relatively positive response, with the majority of ratings around 7. Doraemon has a broader distribution, with ratings spread across a wider range, but with a noticeable cluster around 7 as well. Dragon Tales also shows a similar pattern to Chhota Bheem, with ratings largely grouped around the higher end of the scale (7-10). Each show demonstrates a distinct rating pattern, reflecting the variation in audience reception across the different cartoons.\n\n\n\n\ngf_histogram(\n  ~ Rating,\n  data = shows_modified,\n  binwidth = 1,\n  fill = ~ Cartoon,\n  color = \"black\",\n  alpha = 0.7\n) %&gt;%\n  gf_facet_wrap(~ Cartoon + Gender, nrow = 2) %&gt;%\n  gf_labs(\n    title = \"Rating Distribution by Gender and TV Show\",\n    x = \"Rating\",\n    y = \"Frequency\"\n  )\n\n\n\n\n\n\n\n\nThe histogram displays the distribution of ratings for each TV show divided by gender (male and female). Each facet represents a unique combination of show and gender, showing the frequency of ratings across a scale from 2.5 to 10. The plot reveals certain patterns, such as a concentration of higher ratings for Dragon Tales among females and a more spread-out distribution of ratings for Doraemon, especially among males. Chhota Bheem has similar rating distributions for both genders, though slight differences can be observed.\n\n\n\n\ngf_boxplot(\n  Rating ~ Cartoon,\n  data = shows_modified,\n    fill = ~ Cartoon,\n  color = \"black\",\n  outlier.color = \"red\",\n  outlier.shape = 16,\n  outlier.size = 2,\n  alpha = 0.7\n) %&gt;%\n  gf_labs(\n    title = \"Distribution of Ratings for Each TV Show\",\n    x = \"TV Show\",\n    y = \"Rating\"\n  )\n\n\n\n\n\n\n\n\nIn this plot, Doraemon shows an outlier below its lower whisker, suggesting a notably low rating for that show by one participant. Chhota Bheem and Dragon Tales display a wider spread of ratings, with the medians differing slightly between shows.\n\n\n\n\ngf_boxplot(\n  Rating ~ Cartoon | Gender,\n  data = shows_modified,\n  fill = ~ Cartoon,\n  color = \"black\",\n  outlier.color = \"red\",\n  outlier.shape = 16,\n  outlier.size = 2,\n  alpha = 0.7\n) %&gt;%\n  gf_labs(\n    title = \"Distribution of Ratings for Each TV Show by Gender\",\n    x = \"TV Show\",\n    y = \"Rating\"\n  )\n\n\n\n\n\n\n\n\nThe box plot displays the distribution of ratings for each TV show, separated by gender. For each show (Chhota Bheem, Doraemon, and Dragon Tales), the ratings are visualized for both female and male participants, allowing a direct comparison of medians, interquartile ranges, and the spread of data points. Outliers are represented as individual points below the lower whiskers. The plot reveals that the median rating for Chhota Bheem is slightly higher among males than females, while for Dragon Tales, females appear to give slightly higher ratings than males. Doraemon shows a relatively consistent distribution across genders, though with some outliers among male ratings.\n\n\n\n\nshows_summary &lt;- shows_modified %&gt;%\n  group_by(Cartoon) %&gt;%\n  summarise(\n    mean_rating = mean(Rating, na.rm = TRUE),\n    sd_rating = sd(Rating, na.rm = TRUE),\n    n = n(),\n    se = sd_rating / sqrt(n),       \n    ci_95 = 1.96 * se                  \n  )\ngf_point(\n  mean_rating ~ Cartoon,               \n  data = shows_summary,                \n  size = 4,                           \n  color = ~ Cartoon                    \n) %&gt;%\n  gf_errorbar(\n    ymin = ~ mean_rating - ci_95,     \n    ymax = ~ mean_rating + ci_95,      \n    width = 0.2                        \n  ) %&gt;%\n  gf_hline(\n    yintercept = 7.062,                    \n    color = \"red\",                    \n    linewidth = 1.5                    \n  ) %&gt;%\n  gf_labs(\n    title = \"Mean Ratings of TV Shows with 95% Confidence Interval Error Bars\",\n    subtitle = \"Mean ratings with 95% CI\",\n    x = \"TV Show\",\n    y = \"Mean Rating\"\n  )\n\n\n\n\n\n\n\n\nThe bar plot with error bars displays the mean ratings of three TV shows, each represented by a point with accompanying error bars indicating the 95% confidence intervals. The horizontal red line serves as a reference, placed at a mean rating of 7,062, allowing for easy comparison of each show’s rating relative to this average. Doraemon exhibits the widest confidence interval, reflecting greater variability in ratings, while Chhota Bheem shows a narrower interval, suggesting more consistency in its ratings. Dragon Tales lies closest to the reference mean.\n\n\n\n\nshows_summary_gender &lt;- shows_modified %&gt;%\n  group_by(Cartoon, Gender) %&gt;%\n  summarise(mean_rating = mean(Rating, na.rm = TRUE))\n\n`summarise()` has grouped output by 'Cartoon'. You can override using the\n`.groups` argument.\n\ngf_line(\n  mean_rating ~ Cartoon,\n  color = ~ Gender,\n  data = shows_summary_gender\n) %&gt;%\n  gf_point(\n    mean_rating ~ Cartoon,\n    color = ~ Gender,\n    shape = ~ Gender,\n    size = 4\n  ) %&gt;%\n  gf_labs(\n    title = \"Interaction Plot of TV Show and Gender on Ratings\",\n    x = \"TV Show\",\n    y = \"Mean Rating\"\n  )\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n\n\nThe interaction plot displays the mean ratings for each TV show, separated by gender, allowing us to observe any interaction effects between TV show and gender on ratings. In this plot, “Chhota Bheem,” “Doraemon,” and “Dragon Tales” are plotted along the x-axis, while the mean rating is represented on the y-axis. Different shapes and colors denote male and female participants, respectively, highlighting their individual ratings for each show. This visualization makes it clear if there are any gender-specific trends or if both genders rate the shows similarly. For example, in this plot, we can see that females tend to rate “Dragon Tales” higher on average compared to males, while males seem to rate “Chhota Bheem” lower than females.\n\n\n\n\ngf_density(~ Rating | Cartoon, data = shows_modified, fill = ~ Cartoon, alpha = 0.4) %&gt;%\n  gf_fitdistr(~ Rating | Cartoon, data = shows_modified, ddist = \"normal\", color = \"black\", linetype = \"dashed\") %&gt;%\n  gf_labs(\n    title = \"Density Plot of Ratings by TV Show with Normal Fit\",\n    x = \"Rating\",\n    y = \"Density\"\n  )\n\n\n\n\n\n\n\n\nThe density plot visualizes the distribution of ratings for each TV show with an overlaid normal distribution (dashed line) for comparison. The plot reveals that ratings for Chhota Bheem are skewed left, centered around a lower rating range, indicating that the ratings are generally lower for this show. Doraemon shows a more uniform distribution, although slightly right-skewed, suggesting a tendency towards higher ratings. Dragon Tales has a distinct peak in the middle-to-upper range of ratings, also slightly right-skewed, indicating that it generally received higher ratings. The normal distribution overlay highlights deviations from normality, with all shows showing some skewness, particularly Chhota Bheem and Dragon Tales, suggesting that these distributions are not entirely normal.\n\n\n\n\ncrosstable(\n  shows_modified, \n  c(Cartoon, Gender), \n  showNA = \"ifany\"\n) %&gt;%\n  crosstable::as_flextable()\n\nlabelvariablevalueCartoonChhota Bheem30 (33.33%)Doraemon30 (33.33%)Dragon Tales30 (33.33%)GenderFemale45 (50.00%)Male45 (50.00%)\n\n\nThe crosstable for the shows dataset displays the distribution of participants across the variables Cartoon and Gender. Each cartoon, Chhota Bheem, Doraemon, and Dragon Tales, has exactly 30 participants, representing 33.33% of the total sample. Additionally, the dataset has a balanced gender distribution, with 45 male and 45 female participants, each comprising 50% of the total sample. This even split across both cartoons and gender ensures that any comparisons made in the analysis can be interpreted without concern for imbalance in the sample’s composition.\n\n\n\n\nshapiro_test_chhotabheem &lt;- shapiro.test(shows_modified$Rating[shows_modified$Cartoon == \"Chhota Bheem\"])\nshapiro_test_doraemon &lt;- shapiro.test(shows_modified$Rating[shows_modified$Cartoon == \"Doraemon\"])\nshapiro_test_dragontales &lt;- shapiro.test(shows_modified$Rating[shows_modified$Cartoon == \"Dragon Tales\"])\n\nshapiro_test_chhotabheem\n\n\n    Shapiro-Wilk normality test\n\ndata:  shows_modified$Rating[shows_modified$Cartoon == \"Chhota Bheem\"]\nW = 0.9515, p-value = 0.1854\n\nshapiro_test_doraemon\n\n\n    Shapiro-Wilk normality test\n\ndata:  shows_modified$Rating[shows_modified$Cartoon == \"Doraemon\"]\nW = 0.90877, p-value = 0.01385\n\nshapiro_test_dragontales\n\n\n    Shapiro-Wilk normality test\n\ndata:  shows_modified$Rating[shows_modified$Cartoon == \"Dragon Tales\"]\nW = 0.9181, p-value = 0.02395\n\n\nThe Shapiro-Wilk normality tests were conducted on the ratings for each TV show—Chhota Bheem, Doraemon, and Dragon Tales.\n\nChhota Bheem: W = 0.9515, p-value = 0.1854, indicating that the ratings do not significantly deviate from a normal distribution, as the p-value is greater than 0.05.\nDoraemon: W = 0.9087, p-value = 0.01385, suggesting a significant deviation from normality, with a p-value below 0.05.\nDragon Tales: W = 0.9181, p-value = 0.02395, also showing a significant deviation from normality.\n\nThese results indicate that the ratings for Doraemon and Dragon Tales do not follow a normal distribution, while the ratings for Chhota Bheem appear to be normally distributed.\n\n\n\n\nshows_modified %&gt;%\n  group_by(Cartoon) %&gt;%\n  summarise(variance = var(Rating))\n\n# A tibble: 3 × 2\n  Cartoon      variance\n  &lt;fct&gt;           &lt;dbl&gt;\n1 Chhota Bheem     2.21\n2 Doraemon         5.25\n3 Dragon Tales     3.84\n\nDescTools::LeveneTest(Rating ~ Cartoon, data = shows_modified)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  2  1.2923 0.2798\n      87               \n\nfligner.test(Rating ~ Cartoon, data = shows_modified)\n\n\n    Fligner-Killeen test of homogeneity of variances\n\ndata:  Rating by Cartoon\nFligner-Killeen:med chi-squared = 1.8135, df = 2, p-value = 0.4038\n\n\nThe Levene’s Test and Fligner-Killeen Test were performed to assess the homogeneity of variances in ratings across the three TV shows: Chhota Bheem, Doraemon, and Dragon Tales. Variance calculations show differing values for each show, with Chhota Bheem at 2.21, Doraemon at 5.25, and Dragon Tales at 3.84. The Levene’s Test produced an F-value of 1.2923 with a p-value of 0.2798, while the Fligner-Killeen Test yielded a chi-squared value of 1.8135 with a p-value of 0.4038. Both tests indicate that the differences in variances are not statistically significant (p &gt; 0.05), suggesting that the assumption of homogeneity of variances holds for the ratings across the three shows.\n\n\n\n\nanova_result &lt;- aov(Rating ~ Cartoon, data = shows_modified)\n\nsummary(anova_result)\n\n            Df Sum Sq Mean Sq F value Pr(&gt;F)\nCartoon      2    6.9   3.463   0.919  0.403\nResiduals   87  327.9   3.769               \n\n\nThe results of the one-way ANOVA for the TV Shows dataset indicate that there is no statistically significant difference in the average ratings among the three shows: Chhota Bheem, Doraemon, and Dragon Tales. The F-value is 0.919, and the associated p-value is 0.403, which is greater than the conventional significance level of 0.05. Therefore, we fail to reject the null hypothesis, suggesting that the mean ratings for these shows are not significantly different from one another. This analysis implies that participants rated the three shows similarly on average.\n\n\n\n\nanova_result_2way &lt;- aov(Rating ~ Cartoon * Gender, data = shows_modified)\n\nsummary(anova_result_2way)\n\n               Df Sum Sq Mean Sq F value Pr(&gt;F)\nCartoon         2   6.93   3.463   0.930  0.399\nGender          1   1.11   1.111   0.298  0.586\nCartoon:Gender  2  13.94   6.969   1.871  0.160\nResiduals      84 312.85   3.724               \n\n\nThe results of the two-way ANOVA indicate that neither Cartoon (TV Show) nor Gender individually has a statistically significant effect on the Rating (p-values of 0.399 and 0.586, respectively). Additionally, there is no significant interaction effect between Cartoon and Gender on the ratings, with a p-value of 0.160 for the interaction term. This suggests that neither the type of TV show nor the gender of participants, nor their combination, significantly impacts the ratings given by the participants in this dataset.\n\n\n\n\nsupernova::pairwise(\n  anova_result,                  \n  correction = \"Bonferroni\",      \n  alpha = 0.05,                   \n  var_equal = TRUE,               \n  plot = TRUE                    \n)\n\n\n\n\n\n\n\n\n\n\n\n── Pairwise t-tests with Bonferroni correction ─────────────────────────────────\n\n\nModel: Rating ~ Cartoon\n\n\nCartoon\n\n\nLevels: 3\n\n\nFamily-wise error-rate: 0.049\n\n\n\n  group_1      group_2       diff pooled_se     t    df  lower upper  p_adj\n  &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 Doraemon     Chhota Bheem 0.580     0.354 1.636    87 -0.186 1.346  .3161\n2 Dragon Tales Chhota Bheem 0.597     0.354 1.683    87 -0.170 1.363  .2877\n3 Dragon Tales Doraemon     0.017     0.354 0.047    87 -0.750 0.783 1.0000\n\n\nThe post-hoc analysis with Bonferroni correction was conducted to examine pairwise comparisons of ratings across the three TV shows (Chhota Bheem, Doraemon, and Dragon Tales). This analysis identified the mean differences between each pair of shows, along with their respective confidence intervals and adjusted p-values. The results include:\n\nA comparison between Doraemon and Chhota Bheem with a mean difference of 0.58.\nA comparison between Dragon Tales and Chhota Bheem with a mean difference of 0.597.\nA comparison between Dragon Tales and Doraemon with a very small difference of 0.017.\n\nThe confidence intervals displayed in the plot show the estimated range of each difference with Bonferroni-adjusted significance levels, but none of the intervals exclude zero, indicating that no significant difference was detected among the pairs at the 95% confidence level after adjustment. This suggests that while there are observable mean differences, they are not statistically significant.\n\n\n\n\nwilcox_test_bheem_doraemon &lt;- wilcox.test(\n  Rating ~ Cartoon,\n  data = shows_modified %&gt;% filter(Cartoon %in% c(\"Chhota Bheem\", \"Doraemon\")),\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_bheem_doraemon\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low   conf.high method             alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;      \n1    -1.00      338.  0.0933    -2.00 0.000000600 Wilcoxon rank sum… two.sided  \n\n\nThe p-value obtained (0.09328) is above the typical threshold of 0.05, indicating that there is no statistically significant difference in the ratings between “Chhota Bheem” and “Doraemon” at a 5% significance level. The test also provides a confidence interval for the rank difference, though it includes zero, reinforcing the lack of a significant difference between these two groups. This analysis allows us to understand that any observed rating differences between these shows are likely due to chance, rather than a true difference in audience ratings.\n\n\n\n\nwilcox_test_bheem_dragon &lt;- wilcox.test(\n  Rating ~ Cartoon,\n  data = shows_modified %&gt;% filter(Cartoon %in% c(\"Chhota Bheem\", \"Dragon Tales\")),\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_bheem_dragon\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low conf.high method               alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;      \n1    -1.00       337  0.0918    -1.70 0.0000226 Wilcoxon rank sum t… two.sided  \n\n\nHere, the p-value is approximately 0.0918, which is above the typical significance threshold of 0.05, indicating that the difference in median ratings between “Chhota Bheem” and “Dragon Tales” is not statistically significant at the 5% level. The confidence interval for the difference in ratings spans both positive and negative values, further supporting the conclusion of no significant difference in ratings between these two shows in this test.\n\n\n\n\nwilcox_test_doraemon_dragon &lt;- wilcox.test(\n  Rating ~ Cartoon,\n  data = shows_modified %&gt;% filter(Cartoon %in% c(\"Doraemon\", \"Dragon Tales\")),\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_doraemon_dragon\n\n# A tibble: 1 × 7\n   estimate statistic p.value conf.low conf.high method              alternative\n      &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;      \n1 0.0000514      462.   0.869    -1.00      1.00 Wilcoxon rank sum … two.sided  \n\n\nThis test resulted in a test statistic of 461.5 with a p-value of approximately 0.869. The confidence interval for the difference in median ratings ranges from -0.999 to 1.000. Given the high p-value, there is no statistically significant difference in median ratings between “Doraemon” and “Dragon Tales”, suggesting that viewers rate these two shows similarly on average.\n\n\n\n\nkruskal_test_result &lt;- kruskal.test(Rating ~ Cartoon, data = shows_modified) %&gt;%  broom::tidy()\nkruskal_test_result\n\n# A tibble: 1 × 4\n  statistic p.value parameter method                      \n      &lt;dbl&gt;   &lt;dbl&gt;     &lt;int&gt; &lt;chr&gt;                       \n1      3.83   0.148         2 Kruskal-Wallis rank sum test\n\n\nIn learning about the Kruskal-Wallis test, I discovered it as a non-parametric alternative to the One-Way ANOVA, particularly useful when the data does not meet the normality assumption required by ANOVA. This test compares the medians of multiple groups to determine if there are significant differences among them. By ranking the data and assessing the distribution of these ranks across groups, the Kruskal-Wallis test provides insight without relying on normally distributed data.\nIn applying the test to compare ratings across the three TV shows (Chhota Bheem, Doraemon, and Dragon Tales), I obtained a test statistic of 3.825 with a p-value of approximately 0.148. Since the p-value is greater than the common significance level of 0.05, we do not have sufficient evidence to conclude that there is a statistically significant difference in the ratings among the shows. This suggests that the median ratings across the three shows are not significantly different based on this sample.\n\n\n\n\nlm_model &lt;- lm(Rating ~ Cartoon, data = shows_modified)\ntukey_results &lt;- TukeyHSD(aov(lm_model))\nprint(tukey_results)\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = lm_model)\n\n$Cartoon\n                                diff        lwr      upr     p adj\nDoraemon-Chhota Bheem     0.58000000 -0.6152594 1.775259 0.4819563\nDragon Tales-Chhota Bheem 0.59666667 -0.5985927 1.791926 0.4621079\nDragon Tales-Doraemon     0.01666667 -1.1785927 1.211926 0.9993907\n\n\nThe Tukey’s HSD (Honest Significant Difference) test was performed to identify any significant pairwise differences in the ratings among the three TV shows: Doraemon, Chhota Bheem, and Dragon Tales. The results show the difference in mean ratings between each pair of shows along with confidence intervals and adjusted p-values. The p-values for each pairwise comparison are above 0.05, indicating that none of the differences in ratings between the shows are statistically significant at the 95% confidence level. Therefore, we conclude that there is no significant difference in the ratings among Doraemon, Chhota Bheem, and Dragon Tales based on this analysis.\n\n\n\n\nobserved_perm &lt;- shows_modified %&gt;%\n  specify(Rating ~ Cartoon) %&gt;%\n  hypothesize(null = \"independence\") %&gt;%\n  calculate(stat = \"F\")\n\nnull_dist_perm &lt;- shows_modified %&gt;%\n  specify(Rating ~ Cartoon) %&gt;%\n  hypothesize(null = \"independence\") %&gt;%\n  generate(reps = 5000, type = \"permute\") %&gt;%\n  calculate(stat = \"F\")\n\nnull_dist_perm %&gt;%\n  visualize() +\n  shade_p_value(obs_stat = observed_perm$stat, direction = \"greater\") +\n  annotation_logticks(outside = FALSE)\n\n\n\n\n\n\n\nperm_p_value &lt;- null_dist_perm %&gt;%\n  get_p_value(obs_stat = observed_perm$stat, direction = \"greater\")\nperm_p_value\n\n# A tibble: 1 × 1\n  p_value\n    &lt;dbl&gt;\n1   0.405\n\n\nIn this permutation test, the goal was to assess whether the observed differences in ratings among the three TV shows could be attributed to chance. By permuting the ratings data 5,000 times, a null distribution was generated, and the test statistic (F-statistic) for the observed data was compared against this simulated distribution. The visual output shows the null distribution, with the observed test statistic highlighted. The resulting p-value of 0.409 indicates that there is a 40.9% probability that the observed differences in ratings could occur by random chance, suggesting no statistically significant differences in ratings across the shows under the non-parametric assumptions.\n\n\n\nThe research experiment aimed to investigate if there were significant differences in ratings among three popular TV shows: Chhota Bheem, Doraemon, and Dragon Tales, and to examine the effect of gender on these ratings. The following statistical analyses were conducted:\n\n\nThe Shapiro-Wilk test was conducted to check if the ratings for each show followed a normal distribution:\n\nChhota Bheem: W = 0.9515, p = 0.1854\nDoraemon: W = 0.9087, p = 0.01385\nDragon Tales: W = 0.9181, p = 0.02395\n\nWith small p-values for Doraemon and Dragon Tales, the ratings for these shows deviated from normality, suggesting that non-parametric tests would be suitable for further analysis.\n\n\n\nLevene’s test and Fligner-Killeen test were used to check if the variances were equal across the three shows:\n\nLevene’s Test: p = 0.2798\nFligner-Killeen Test: p = 0.4038\n\nBoth tests indicated no significant difference in variances, so the assumption of equal variances was not violated, allowing for ANOVA to be applied.\n\n\n\nA one-way ANOVA was conducted to assess differences in mean ratings across the three shows:\n\nF(2, 87) = 0.919, p = 0.403\n\nThe ANOVA results showed no statistically significant difference in average ratings across the shows, indicating that there may not be a substantial difference in viewer ratings among the three programs.\n\n\n\nA two-way ANOVA was conducted to analyze the combined effects of TV show and gender on ratings:\n\nMain effect of TV Show: F(2, 84) = 0.930, p = 0.399\nMain effect of Gender: F(1, 84) = 0.298, p = 0.586\nInteraction effect (TV Show * Gender): F(2, 84) = 1.871, p = 0.160\n\nThe two-way ANOVA results revealed that neither gender, show, nor their interaction had a statistically significant effect on ratings. This suggests that ratings do not vary meaningfully by gender or show, nor does the combination of show and gender influence ratings significantly.\n\n\n\nPairwise Wilcoxon Rank-Sum tests were performed due to deviations from normality:\n\nChhota Bheem vs Doraemon: p = 0.09328 (not significant)\nChhota Bheem vs Dragon Tales: p = 0.09184 (not significant)\nDoraemon vs Dragon Tales: p = 0.8694 (not significant)\n\nThe Wilcoxon tests found no significant differences between any pair of shows, aligning with the results from both ANOVA and Kruskal-Wallis tests.\n\n\n\nGiven the deviations from normality, a Kruskal-Wallis test was performed as a non-parametric alternative to ANOVA:\n\nH(2) = 3.825, p = 0.1477\n\nThe Kruskal-Wallis test also indicated no significant differences in ratings across the three shows, consistent with the one-way ANOVA results.\n\n\n\nA permutation test was conducted to further assess whether the observed differences in ratings across the shows were likely due to chance:\n\np-value = 0.409\n\nThe permutation test confirmed that the differences in ratings could likely occur by random variation, supporting the earlier results.\n\n\n\n\nThe statistical analyses indicate no significant differences in ratings among the three TV shows, and no significant effect of gender on ratings. Both parametric (ANOVA) and non-parametric (Kruskal-Wallis, Wilcoxon Rank-Sum) tests consistently showed that the ratings across the three shows are comparable. The permutation test further validated these findings, confirming that any observed differences are likely due to chance. Consequently, the experiment concludes that ratings do not significantly vary by TV show or gender."
  },
  {
    "objectID": "posts/Assignment 3 - Part 2/index.html",
    "href": "posts/Assignment 3 - Part 2/index.html",
    "title": "Assignment 3 - Part 2",
    "section": "",
    "text": "Introduction\nWe are investigating the influence of Dietary Preference and Gender on Tipping Behaviour.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(crosstable)\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(dplyr)\nlibrary(broom)\n\n\n\nResearch Experiment to Investigate the Influence of Dietary Preference and Gender on Tipping Behaviour\nObjective:\nThe purpose of this research experiment is to investigate whether there is a significant difference in the amount of tips given by vegetarians and non-vegetarians. Additionally, the study aims to test whether one gender tends to tip more than the other. By collecting and analyzing tipping data, we aim to explore both dietary and gender-based differences in tipping behaviour.\nHypotheses:\n\nPrimary Hypothesis:\nNon-vegetarians tend to give higher tips on average compared to vegetarians.\nAdditional Hypothesis:\nOne gender (e.g., males) tends to give higher tips on average compared to the other gender (e.g., females).\n\n\nExperiment Design: Data Collection:\n\nSample: The dataset consists of tipping data from 60 students at MAHE Bengaluru. There are 30 males and 30 females, with each gender group containing 15 vegetarians and 15 non-vegetarians. The participants were randomly selected through coin tosses and asked to record the amount they tipped during a meal on October 24th, 2024.\nData Sources: The data was recorded in an Excel sheet by the people conducting the experiment. Each participant reported the tip amount they gave, along with their dietary preference (vegetarian or non-vegetarian) and gender.\n\nVariables Measured:\n\nTarget Variable: The amount of tip given by each participant during the experiment period.\nPredictor Variables:\n\nDietary Preference (Vegetarian vs. Non-Vegetarian)\nGender (Male vs. Female)\n\n\nSampling:\n\nTime Period: The experiment was conducted on October 24th, 2024, over a period of 1.5 hours.\nParticipant Selection Criteria: 30 males and 30 females were randomly selected by tossing a coin. Within each gender group, 15 participants were vegetarians and 15 were non-vegetarians. Their dietary preferences and tipping behaviour were recorded accordingly.\n\nAnalysis Plan:\n\nData Cleaning and Transformation: The data was checked for accuracy in the Excel sheet, ensuring that each participant’s tipping amount, dietary preference, and gender were properly recorded, with no missing or erroneous entries.\nExploratory Data Analysis (EDA): Visualizations such as histograms, box plots, and scatter plots will be used to compare tipping distributions between vegetarians and non-vegetarians, as well as between males and females. This will help identify patterns or discrepancies in tipping behaviour.\n\n\n\nStatistical Tests:\n\nTwo-Sample t-Test (Dietary Preference): A two-independent sample test for means will be conducted to compare the average tip amount given by vegetarians and non-vegetarians. This will help determine if there is a statistically significant difference in tipping behaviour between the two dietary groups.\nTwo-Sample t-Test (Gender): A separate two-sample t-test will be conducted to compare the average tip amount given by males and females. This will help determine if there is a statistically significant difference in tipping behaviour between the two genders.\nPermutation Test (Dietary Preference & Gender): A permutation test will be conducted to assess the likelihood of the observed differences in tipping amounts (for both dietary preference and gender) occurring by chance, providing a non-parametric alternative to the two-sample t-tests.\nDescriptive Statistics: Measures like mean, median, and standard deviation will be calculated for both groups (vegetarians vs. non-vegetarians and males vs. females) to summarize tipping behaviour.\nWilcoxon Rank-Sum Test: If the normality assumption is not met, a Wilcoxon rank-sum test (a non-parametric test) will be conducted to compare the tipping behaviour between vegetarians and non-vegetarians, as well as between males and females.\n\nLimitations:\n\nSample Size: With 30 participants per group (15 vegetarians and 15 non-vegetarians for each gender), the results may not be generalizable to a larger population. A more extensive sample would provide greater reliability.\nContextual Factors: The study did not account for external factors that might influence tipping behaviour, such as the quality of service, the total bill amount, or personal tipping habits, which could have an effect on the tip amount.\n\n\n\n\nOutcome:\nThe analysis will reveal whether significant differences in tipping behaviour exist between vegetarians and non-vegetarians and between males and females at MAHE Bengaluru. If the hypotheses hold, it would suggest that non-vegetarians, on average, tend to give higher tips than vegetarians, and one gender may tend to tip more than the other. These findings will provide insights into whether dietary preferences and gender influence tipping behaviour within this student population.\n\n\nDataset - Tipping\n\ntip &lt;- read_csv(\"../../data/tip.csv\")\n\nRows: 60 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Name, Gender, Preference\ndbl (1): Tip\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntip\n\n# A tibble: 60 × 4\n   Name     Gender Preference   Tip\n   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;      &lt;dbl&gt;\n 1 Aanya    Female Veg            0\n 2 Adit     Male   Veg            0\n 3 Aditi    Female Veg           20\n 4 Akash    Male   Non-veg        0\n 5 Akshita  Female Non-veg        0\n 6 Anandita Female Non-veg        0\n 7 Ananya   Female Non-veg       20\n 8 Anaya    Female Veg           35\n 9 Anhuya   Female Veg           40\n10 Ankit    Male   Non-veg        0\n# ℹ 50 more rows\n\n\nThe dataset shown contains tipping data for 60 students at MAHE Bengaluru. The data includes four variables: Name, Gender, Dietary Preference (Vegetarian or Non-Vegetarian), and Tip Amount. Each row represents one participant’s recorded tip amount. The participants are evenly split between males and females, as well as between vegetarians and non-vegetarians. There are variations in tipping amounts, with some participants tipping as high as 40 units, while others tipped nothing.\n\ntip_modified &lt;- tip %&gt;% \n  dplyr::mutate( Gender = as_factor(Gender))\n\n\n\nGlimpse - Tipping\n\nglimpse(tip_modified)\n\nRows: 60\nColumns: 4\n$ Name       &lt;chr&gt; \"Aanya\", \"Adit\", \"Aditi\", \"Akash\", \"Akshita\", \"Anandita\", \"…\n$ Gender     &lt;fct&gt; Female, Male, Female, Male, Female, Female, Female, Female,…\n$ Preference &lt;chr&gt; \"Veg\", \"Veg\", \"Veg\", \"Non-veg\", \"Non-veg\", \"Non-veg\", \"Non-…\n$ Tip        &lt;dbl&gt; 0, 0, 20, 0, 0, 0, 20, 35, 40, 0, 0, 0, 0, 0, 0, 0, 20, 0, …\n\n\nThe Gender variable is stored as a factor, with participants divided evenly between males and females. The Tip amounts vary, with a range from 0 to 100 units. Some participants did not tip, while others left substantial tips, suggesting variability in tipping behaviour.\n\n\nInspect - Tipping\n\ninspect(tip_modified)\n\n\ncategorical variables:  \n        name     class levels  n missing\n1       Name character     60 60       0\n2     Gender    factor      2 60       0\n3 Preference character      2 60       0\n                                   distribution\n1 Aanya (1.7%), Adit (1.7%) ...                \n2 Female (50%), Male (50%)                     \n3 Non-veg (50%), Veg (50%)                     \n\nquantitative variables:  \n  name   class min Q1 median Q3 max     mean       sd  n missing\n1  Tip numeric   0  0      0 20 100 11.16667 17.83556 60       0\n\n\nThe tip amounts range from 0 to 100, with the median tip amount being 0, and the first and third quartiles (Q1 and Q3) being 0 and 20, respectively. The mean tip amount is approximately 11.1, with a standard deviation of 17.8.\n\n\nSkim - Tipping\n\nskim(tip_modified)\n\n\nData summary\n\n\nName\ntip_modified\n\n\nNumber of rows\n60\n\n\nNumber of columns\n4\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nfactor\n1\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nName\n0\n1\n4\n9\n0\n60\n0\n\n\nPreference\n0\n1\n3\n7\n0\n2\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n2\nFem: 30, Mal: 30\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nTip\n0\n1\n11.17\n17.84\n0\n0\n0\n20\n100\n▇▁▁▁▁\n\n\n\n\n\nThe tips range from 0 to 100, with an average (mean) tip of approximately 11.17 rupees and a standard deviation of 17.84 rupees. Most participants did not give any tips, as indicated by the median and lower quartile values being 0. The data shows variability in tipping behaviour across individuals, with some participants giving significantly higher tips (as shown by the maximum value of 100).\n\n\nData Dictionary\nQuantitative Data:\n\nTip (dbl): The total tip amount given by each participant, recorded in Indian rupees.\n\nQualitative Data:\n\nName (chr): The name of the participant.\nGender (fct): The gender of the participant, categorized as either Male or Female.\nPreference (chr): The dietary preference of the participant, categorized as either Vegetarian (Veg) or Non-Vegetarian (Non-veg).\n\n\n\nHistogram - Distribution of Tips by Dietary Preference\n\ngf_histogram( ~ Tip | Preference, \n              data = tip_modified, \n              binwidth = 10, \n              fill = \"skyblue\", \n              color = \"black\" \n) %&gt;%\ngf_labs(\n    title = \"Distribution of Tips by Dietary Preference\",\n    x = \"Tip Amount (in Rupees)\",\n    y = \"Count\"\n)\n\n\n\n\n\n\n\n\nThe histogram visualizes the distribution of tips given by vegetarians and non-vegetarians. Both groups show a significant number of participants who gave no tips at all, with vegetarians showing a higher concentration of zero tips compared to non-vegetarians. Among those who did tip, non-vegetarians gave a larger number of tips in the range of ₹0 to ₹25, with fewer participants tipping above ₹50. In contrast, a few vegetarians tipped more substantial amounts, with one participant tipping ₹100, while most tips were clustered between ₹0 and ₹25. Overall, non-vegetarians tend to provide more tips within the lower ranges, while vegetarians exhibit a broader spread, with some giving higher tips. However, the majority of both groups tend to tip small amounts or none at all.\n\n\nHistogram - Distribution of Tips by Gender\n\ngf_histogram( ~ Tip | Gender, \n              data = tip_modified, \n              binwidth = 10, \n              fill = \"lightgreen\", \n              color = \"black\" \n) %&gt;%\ngf_labs(\n    title = \"Distribution of Tips by Gender\",\n    x = \"Tip Amount (in Rupees)\",\n    y = \"Count\"\n)\n\n\n\n\n\n\n\n\nThe histogram displays the distribution of tips given by gender. Both males and females show a significant number of participants who did not give any tips at all, with males having a slightly higher concentration of zero tips. Among those who did tip, most females provided tips in the ₹0 to ₹25 range, with a few tipping up to ₹50. In contrast, males also predominantly tipped in the ₹0 to ₹25 range, but there is a notable outlier where one male tipped ₹100, which is higher than any tip given by females. Overall, both genders tend to give small tips, though males show a broader range of tipping amounts, with the maximum tip coming from a male participant.\n\n\nBox plot - Distribution of Tips by Dietary Preference\n\ngf_boxplot(Tip ~ Preference,\n  data = tip_modified,\n  fill = ~Preference) %&gt;%\n  gf_labs(\n    title = \"Distribution of Tips by Dietary Preference\",\n    x = \"Dietary Preference\",\n    y = \"Tip Amount (in Rupees)\"\n  )\n\n\n\n\n\n\n\n\nThe box plot comparing the distribution of tips between vegetarians and non-vegetarians reveals that both groups have similar ranges of tip amounts, but there is an outlier in the vegetarian group with a higher tip of 100 rupees. The median tip for both vegetarians and non-vegetarians is around the same value. However, the spread (interquartile range) of tips is slightly broader for non-vegetarians. The presence of an outlier in the vegetarian group suggests that one individual tipped significantly more than the majority of participants in both groups, while most participants tipped relatively low amounts. Overall, the box plot indicates that tipping behaviour is fairly similar between the two dietary preference groups, with no major differences in the central tendency.\n\n\nBox Plot - Distribution of Tips by Gender\n\ngf_boxplot(Tip ~ Gender,\n  data = tip_modified,\n  fill = ~Gender) %&gt;%\n  gf_labs(\n    title = \"Distribution of Tips by Gender\",\n    x = \"Gender\",\n    y = \"Tip Amount (in Rupees)\"\n  )\n\n\n\n\n\n\n\n\nThe box plot comparing the distribution of tips between males and females shows that both genders have similar tipping patterns in terms of median and spread. The median tip amount is nearly the same for both groups, with the interquartile range (IQR) for females slightly broader than for males. However, there is an outlier in the male group, where one individual tipped a significantly higher amount (100 rupees) compared to the rest. Despite this outlier, the central tendency and overall distribution appear quite similar between males and females, suggesting no major gender-based differences in tipping behaviour.\n\n\nScatter Plot - Individual Tipping Behaviour by Gender and Dietary Preference\n\ngf_point(Tip ~ Gender | Preference, \n         data = tip_modified,\n         color = ~ Gender,\n         shape = ~ Preference) %&gt;%\n  gf_labs(\n    title = \"Individual Tipping Behaviour by Gender and Dietary Preference\",\n    x = \"Gender and Dietary Preference\",\n    y = \"Tip Amount (in Rupees)\"\n  )\n\n\n\n\n\n\n\n\nThe scatter plot visually represents individual tipping behaviour, comparing tips based on both gender and dietary preference. In the plot, female and male participants are shown with different colours, while vegetarian and non-vegetarian participants are distinguished by different shapes. The data reveals that the majority of participants across all categories (female/male, veg/non-veg) tend to give lower tips (below 50 rupees), but there are a few outliers, especially in the vegetarian category, where some participants gave tips as high as 100 rupees. Non-vegetarians, on the other hand, generally tip in smaller amounts.\n\n\nDensity Plot\n\ntip_modified %&gt;%\n  gf_density(~ Tip, fill = ~ Preference, alpha = 0.5) %&gt;%\n  gf_fitdistr(~ Tip, dist = \"dnorm\") %&gt;%\n  gf_labs(\n    title = \"Density Plot of Tip Amount by Dietary Preference\",\n    subtitle = \"Compared with Normal Distribution\",\n    x = \"Tip Amount (in Rupees)\",\n    y = \"Density\"\n  )\n\n\n\n\n\n\n\ntip_modified %&gt;%\n  gf_density(~ Tip, fill = ~ Gender, alpha = 0.5) %&gt;%\n  gf_fitdistr(~ Tip, dist = \"dnorm\") %&gt;%\n  gf_labs(\n    title = \"Density Plot of Tip Amount by Gender\",\n    subtitle = \"Compared with Normal Distribution\",\n    x = \"Tip Amount (in Rupees)\",\n    y = \"Density\"\n  )\n\n\n\n\n\n\n\n\nThe density plots provide a visual comparison of the tipping behaviour across dietary preferences (vegetarians vs. non-vegetarians) and gender (males vs. females). In both cases, the tipping behaviour is skewed towards lower tip amounts, with the highest density of tips being in the range of 0 to 25 rupees. The comparison against the normal distribution suggests that the tip data does not follow a normal distribution, especially for the lower tip amounts.\nFor dietary preferences, non-vegetarians tend to tip slightly higher than vegetarians, as indicated by the density curve extending further towards higher tip amounts. However, the difference is not substantial, and both groups show a similar overall distribution of low tips.\nIn terms of gender, the male participants appear to give slightly higher tips compared to female participants, as seen by the male density curve being more spread towards the higher tip amounts. Nonetheless, both genders also demonstrate a strong tendency towards giving lower tips, with a majority of tips clustered in the lower ranges. Overall, while there are slight differences, tipping behaviour across both dietary preference and gender is heavily skewed towards lower amounts.\n\n\nCrosstable\n\ncrosstable(\n  tip_modified, \n  c(Gender, Preference), \n  showNA = \"ifany\"\n) %&gt;%\n  crosstable::as_flextable()\n\nlabelvariablevalueGenderFemale30 (50.00%)Male30 (50.00%)PreferenceNon-veg30 (50.00%)Veg30 (50.00%)\n\ntip_modified %&gt;%\n  group_by(Gender, Preference) %&gt;%\n  summarize(\n    Mean_Tip = mean(Tip, na.rm = TRUE),\n    Median_Tip = median(Tip, na.rm = TRUE),\n    Count = n()\n  )\n\n`summarise()` has grouped output by 'Gender'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 × 5\n# Groups:   Gender [2]\n  Gender Preference Mean_Tip Median_Tip Count\n  &lt;fct&gt;  &lt;chr&gt;         &lt;dbl&gt;      &lt;dbl&gt; &lt;int&gt;\n1 Female Non-veg       11.3           0    15\n2 Female Veg           13             0    15\n3 Male   Non-veg        8.67          0    15\n4 Male   Veg           11.7           0    15\n\n\nThe cross table shows that the tipping dataset contains an equal number of males and females, with 30 participants in each group. Similarly, there are equal numbers of participants with dietary preferences, 30 for vegetarians and 30 for non-vegetarians. When breaking down by gender and dietary preference, the average tip given by females who are non-vegetarians is ₹11.33, while females who are vegetarians tip an average of ₹13. For males, non-vegetarians give an average of ₹8.67, while vegetarians tip an average of ₹11.67. The median tip for all groups remains ₹0, indicating that many participants may not have tipped, skewing the distribution. These results suggest some differences in tipping behaviour based on dietary preferences and gender, though the prevalence of non-tipping behaviour is noticeable across all groups.\n\n\nT-test for Vegetarians vs. Non-Vegetarians\n\nt_test_veg_nonveg &lt;- t.test(\n  Tip ~ Preference,\n  data = tip_modified,\n  var.equal = FALSE \n) %&gt;% \nbroom::tidy()\n\nt_test_veg_nonveg\n\n# A tibble: 1 × 10\n  estimate estimate1 estimate2 statistic p.value parameter conf.low conf.high\n     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1    -2.33        10      12.3    -0.503   0.617      46.9    -11.7      6.99\n# ℹ 2 more variables: method &lt;chr&gt;, alternative &lt;chr&gt;\n\n\nThe t-test conducted to compare the average tip amounts between vegetarians and non-vegetarians shows a p-value of 0.617. This high p-value indicates that there is no statistically significant difference between the two groups. The estimated mean tip for vegetarians is ₹12.33, while for non-vegetarians, it is ₹10, resulting in a mean difference of approximately ₹2.33. The 95% confidence interval for this difference is from -11.66 to 6.99, which includes zero, further suggesting that there is no significant difference in tipping behaviour based on dietary preference. Therefore, the data does not support the hypothesis that non-vegetarians tip more than vegetarians.\n\n\nT-test for Males vs. Females\n\nt_test_gender &lt;- t.test(\n  Tip ~ Gender,\n  data = tip_modified,\n  var.equal = FALSE \n) %&gt;% \nbroom::tidy()\n\nt_test_gender\n\n# A tibble: 1 × 10\n  estimate estimate1 estimate2 statistic p.value parameter conf.low conf.high\n     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1        2      12.2      10.2     0.431   0.668      55.8    -7.29      11.3\n# ℹ 2 more variables: method &lt;chr&gt;, alternative &lt;chr&gt;\n\n\nThe t-test comparing the average tip amounts between males and females reveals no significant difference in tipping behaviour. The mean tip for males was ₹10.17, and for females, it was ₹12.17. The test produced a t-statistic of 0.431 and a p-value of 0.668, which is much higher than the standard significance level of 0.05. Additionally, the 95% confidence interval ranges from -7.29 to 11.29, suggesting that the true difference in means could be anywhere within this range, including zero.\n\n\nWilcoxon Rank-Sum Test for Vegetarians vs. Non-Vegetarians\n\nwilcox_test_veg_nonveg &lt;- wilcox.test(\n  Tip ~ Preference,\n  data = tip_modified,\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_veg_nonveg\n\n# A tibble: 1 × 7\n   estimate statistic p.value   conf.low   conf.high method          alternative\n      &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;      \n1 0.0000372       463   0.833 -0.0000335 0.000000989 Wilcoxon rank … two.sided  \n\n\nThe Wilcoxon Rank-Sum Test conducted to compare the tipping behaviour between vegetarians and non-vegetarians resulted in a p-value of 0.83. This high p-value suggests that there is no statistically significant difference in the tipping amounts between the two groups. The confidence interval also crosses zero, reinforcing the conclusion that the median tip amounts for vegetarians and non-vegetarians are not significantly different. This non-parametric test confirms that dietary preference does not appear to influence tipping behaviour within this dataset.\n\n\nWilcoxon Rank-Sum Test for Males vs. Females\n\nwilcox_test_gender &lt;- wilcox.test(\n  Tip ~ Gender,\n  data = tip_modified,\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_gender\n\n# A tibble: 1 × 7\n   estimate statistic p.value   conf.low  conf.high method           alternative\n      &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;      \n1 0.0000445       498   0.422 -0.0000134 0.00000497 Wilcoxon rank s… two.sided  \n\n\nThe results of the Wilcoxon Rank-Sum Test comparing tipping behaviour between males and females show no significant difference in tipping amounts between the two genders. The p-value is 0.42, which is much higher than the conventional threshold of 0.05, indicating that any observed differences in tipping amounts between males and females are not statistically significant. Both the confidence interval values are very close to zero, further supporting the conclusion that there is no significant difference between male and female tipping behaviour. Thus, tipping behaviour seems similar across both genders in this dataset.\n\n\nPermutation Test for Vegetarians vs Non-Vegetarians\n\nperm_test_veg_nonveg &lt;- do(1000) * diffmean(Tip ~ shuffle(Preference), data = tip_modified)\nperm_test_veg_nonveg\n\n        diffmean\n1     -3.6666667\n2      4.6666667\n3      3.0000000\n4      1.6666667\n5      1.3333333\n6      3.6666667\n7      1.6666667\n8     -3.0000000\n9      2.0000000\n10     0.6666667\n11     4.0000000\n12    -4.6666667\n13    -3.3333333\n14     3.6666667\n15     0.6666667\n16     5.3333333\n17   -10.0000000\n18    -1.3333333\n19    -0.6666667\n20    -2.0000000\n21    -0.3333333\n22     2.0000000\n23     3.6666667\n24    -3.0000000\n25     1.6666667\n26    -9.0000000\n27     0.6666667\n28     0.3333333\n29    -2.6666667\n30     5.3333333\n31    -5.6666667\n32     6.0000000\n33    -7.6666667\n34     1.3333333\n35     0.3333333\n36    -5.0000000\n37    -1.3333333\n38    -3.0000000\n39     0.3333333\n40     6.3333333\n41    -5.0000000\n42     2.6666667\n43     7.3333333\n44    -3.0000000\n45     6.0000000\n46     3.6666667\n47     1.6666667\n48     3.0000000\n49    -2.3333333\n50    -1.0000000\n51    -8.3333333\n52    -0.3333333\n53     7.6666667\n54     1.6666667\n55    -4.3333333\n56    -7.6666667\n57     5.6666667\n58     1.0000000\n59     2.0000000\n60    -4.3333333\n61    -3.3333333\n62    -5.6666667\n63    -1.6666667\n64    -1.3333333\n65    -2.0000000\n66     2.6666667\n67     7.0000000\n68    -0.6666667\n69    -3.6666667\n70    -3.0000000\n71    -6.3333333\n72    -5.3333333\n73    -1.6666667\n74     4.0000000\n75    -1.6666667\n76     4.0000000\n77    -1.3333333\n78     4.0000000\n79    -4.3333333\n80     2.0000000\n81    -4.6666667\n82    -2.6666667\n83     8.6666667\n84    10.0000000\n85     3.6666667\n86     5.6666667\n87     1.0000000\n88     9.6666667\n89     7.3333333\n90    -5.6666667\n91     3.3333333\n92     2.0000000\n93     4.0000000\n94     1.3333333\n95    -7.3333333\n96   -11.0000000\n97     2.6666667\n98     0.0000000\n99     0.3333333\n100   -9.6666667\n101   -2.3333333\n102   -5.0000000\n103   -1.3333333\n104   -6.0000000\n105   -2.3333333\n106    5.6666667\n107    8.6666667\n108   -1.6666667\n109    3.0000000\n110   -1.6666667\n111    0.6666667\n112   -2.0000000\n113    3.6666667\n114   -8.6666667\n115    0.6666667\n116   -1.0000000\n117    3.0000000\n118    8.3333333\n119    3.3333333\n120    3.6666667\n121   -4.0000000\n122   -7.0000000\n123    3.0000000\n124    3.0000000\n125    1.6666667\n126    2.0000000\n127   -4.0000000\n128   -2.6666667\n129    4.6666667\n130    3.6666667\n131    4.3333333\n132   -6.6666667\n133   -3.0000000\n134   -1.3333333\n135   -6.6666667\n136   -6.6666667\n137   -5.3333333\n138    5.6666667\n139   -1.0000000\n140    2.3333333\n141  -12.3333333\n142   -8.0000000\n143    2.3333333\n144    0.3333333\n145    3.0000000\n146    2.6666667\n147    6.3333333\n148   -3.3333333\n149   -0.3333333\n150   -2.0000000\n151    7.6666667\n152    3.0000000\n153    0.6666667\n154    2.0000000\n155   -1.3333333\n156    3.0000000\n157    2.3333333\n158   -5.3333333\n159    5.0000000\n160    1.6666667\n161    4.3333333\n162   -4.0000000\n163    0.3333333\n164   -5.3333333\n165    0.3333333\n166    0.3333333\n167   -1.3333333\n168    5.6666667\n169    0.3333333\n170   -5.0000000\n171   -4.3333333\n172    0.6666667\n173    5.6666667\n174   -1.6666667\n175    1.0000000\n176    7.3333333\n177   -6.6666667\n178    1.3333333\n179    5.3333333\n180    1.6666667\n181    6.3333333\n182    5.3333333\n183    2.0000000\n184   -5.0000000\n185   -8.0000000\n186    3.0000000\n187   -6.6666667\n188    0.6666667\n189   -1.6666667\n190   -6.6666667\n191   -7.3333333\n192    5.6666667\n193   -5.3333333\n194   -4.6666667\n195   -4.0000000\n196    5.3333333\n197   -4.0000000\n198   -3.6666667\n199    3.0000000\n200    0.3333333\n201   -6.0000000\n202    2.0000000\n203    8.6666667\n204    0.0000000\n205    0.3333333\n206   -1.6666667\n207    1.6666667\n208   -3.0000000\n209   -3.6666667\n210   -3.6666667\n211    5.3333333\n212    4.0000000\n213   -0.3333333\n214    2.3333333\n215   -4.3333333\n216   -0.3333333\n217    3.0000000\n218   -7.6666667\n219    4.0000000\n220   -2.3333333\n221   -4.3333333\n222   -4.3333333\n223   -9.6666667\n224   -3.3333333\n225    0.3333333\n226    8.0000000\n227    2.3333333\n228   -2.0000000\n229    3.3333333\n230    2.6666667\n231   -1.6666667\n232   -3.6666667\n233    7.0000000\n234   -2.3333333\n235    1.3333333\n236   -2.3333333\n237    3.6666667\n238    5.3333333\n239   -2.6666667\n240    0.3333333\n241    0.0000000\n242    5.0000000\n243    4.6666667\n244    3.3333333\n245    1.6666667\n246    0.3333333\n247    3.3333333\n248   -1.3333333\n249  -10.3333333\n250    4.3333333\n251    0.0000000\n252   -6.0000000\n253    5.6666667\n254   -5.6666667\n255   -0.3333333\n256    6.3333333\n257   -0.6666667\n258    0.6666667\n259   -0.3333333\n260    4.0000000\n261    5.6666667\n262    3.3333333\n263   -0.6666667\n264    4.6666667\n265   -2.6666667\n266   -2.0000000\n267   -3.6666667\n268   -3.0000000\n269   -2.0000000\n270    1.0000000\n271    0.3333333\n272    2.0000000\n273   -2.0000000\n274   -0.6666667\n275    5.6666667\n276    1.3333333\n277    2.0000000\n278    6.6666667\n279   -5.0000000\n280   -0.6666667\n281   -4.6666667\n282   -4.6666667\n283   -0.6666667\n284    5.6666667\n285   -5.0000000\n286   -6.0000000\n287    0.6666667\n288    5.6666667\n289    5.3333333\n290    2.3333333\n291   -2.6666667\n292    9.3333333\n293   -1.3333333\n294    1.0000000\n295    2.0000000\n296   -3.0000000\n297   -1.6666667\n298    3.6666667\n299   -9.0000000\n300   10.3333333\n301   -5.3333333\n302   -0.6666667\n303   -0.3333333\n304   -5.0000000\n305   -8.6666667\n306    6.0000000\n307    6.0000000\n308    6.6666667\n309    3.6666667\n310    0.0000000\n311    2.6666667\n312    6.6666667\n313    0.3333333\n314    7.3333333\n315    2.3333333\n316    2.6666667\n317   -3.0000000\n318    4.0000000\n319   -2.6666667\n320   -5.3333333\n321   -3.0000000\n322    4.0000000\n323    2.0000000\n324    3.6666667\n325   -3.3333333\n326    3.3333333\n327   10.0000000\n328   -5.3333333\n329    1.0000000\n330    2.0000000\n331    6.6666667\n332    6.0000000\n333   -7.0000000\n334    5.3333333\n335    1.0000000\n336  -10.6666667\n337   -1.0000000\n338    7.3333333\n339    0.3333333\n340   -1.3333333\n341    2.0000000\n342    9.3333333\n343   -6.6666667\n344   -1.6666667\n345    3.3333333\n346    3.0000000\n347    1.0000000\n348    5.3333333\n349    8.6666667\n350   -1.3333333\n351   -5.3333333\n352    1.3333333\n353    7.3333333\n354   -1.0000000\n355   -4.0000000\n356    0.3333333\n357   -3.3333333\n358    0.6666667\n359   -3.6666667\n360   -1.0000000\n361    1.3333333\n362    0.0000000\n363    2.0000000\n364   -3.6666667\n365    0.0000000\n366   -2.0000000\n367    5.0000000\n368   -5.0000000\n369   -5.3333333\n370  -10.0000000\n371    3.0000000\n372    1.3333333\n373   -9.3333333\n374   -2.3333333\n375   -7.6666667\n376    4.6666667\n377    2.0000000\n378   10.0000000\n379    0.3333333\n380    4.3333333\n381   -1.3333333\n382    4.3333333\n383    1.0000000\n384   -6.3333333\n385   -4.0000000\n386    8.3333333\n387    5.6666667\n388    8.6666667\n389    8.0000000\n390    5.6666667\n391    2.0000000\n392   -4.0000000\n393    1.6666667\n394    2.3333333\n395    5.0000000\n396    5.3333333\n397   -6.6666667\n398    3.0000000\n399    4.3333333\n400    0.6666667\n401  -13.3333333\n402    5.6666667\n403   -1.6666667\n404   -2.3333333\n405    7.3333333\n406    2.0000000\n407    6.3333333\n408   -0.6666667\n409    3.3333333\n410   -0.6666667\n411   -4.3333333\n412    0.3333333\n413   -6.6666667\n414   -3.6666667\n415   -5.0000000\n416   -9.6666667\n417    3.0000000\n418    0.6666667\n419   -1.3333333\n420   -5.6666667\n421    1.6666667\n422   -0.3333333\n423  -11.3333333\n424   -1.0000000\n425    1.0000000\n426    3.0000000\n427    0.6666667\n428    4.6666667\n429    1.0000000\n430   -2.0000000\n431  -11.0000000\n432    1.3333333\n433    2.0000000\n434    1.0000000\n435   -4.0000000\n436   -6.0000000\n437    0.6666667\n438   -2.3333333\n439   -7.3333333\n440   -1.6666667\n441    3.3333333\n442   -3.6666667\n443   -5.6666667\n444    7.3333333\n445    2.6666667\n446    6.3333333\n447    2.3333333\n448   -4.6666667\n449   -2.0000000\n450   -0.3333333\n451    0.3333333\n452    0.0000000\n453   -5.0000000\n454   -1.6666667\n455   -5.0000000\n456   -1.0000000\n457   -0.6666667\n458   -2.0000000\n459   -4.6666667\n460   -2.6666667\n461   -2.0000000\n462   -8.0000000\n463    1.6666667\n464   -1.6666667\n465    1.6666667\n466   -8.0000000\n467    0.6666667\n468   -8.0000000\n469    1.6666667\n470    1.6666667\n471   -4.3333333\n472   -5.6666667\n473   -3.3333333\n474   -7.0000000\n475   -0.6666667\n476    4.3333333\n477    3.6666667\n478   -4.0000000\n479    6.6666667\n480    3.0000000\n481    5.3333333\n482   -4.0000000\n483   -0.6666667\n484    8.0000000\n485    1.0000000\n486   -5.3333333\n487   -1.6666667\n488   -2.3333333\n489   -1.6666667\n490   -3.0000000\n491   -2.0000000\n492   -7.6666667\n493   -5.3333333\n494    3.3333333\n495    2.0000000\n496    6.0000000\n497   -1.3333333\n498   -0.6666667\n499   -8.0000000\n500    7.0000000\n501   -0.6666667\n502    2.3333333\n503    8.0000000\n504    2.0000000\n505   10.0000000\n506   -3.0000000\n507    1.0000000\n508    6.6666667\n509    0.3333333\n510   -6.0000000\n511   -3.0000000\n512   -1.0000000\n513    5.3333333\n514   -3.0000000\n515    2.0000000\n516   -2.6666667\n517    5.0000000\n518   11.3333333\n519    5.0000000\n520    1.0000000\n521   -3.0000000\n522    4.6666667\n523    0.0000000\n524   -3.0000000\n525    0.0000000\n526    1.3333333\n527   -4.0000000\n528    0.3333333\n529   -1.3333333\n530   -4.6666667\n531   -1.0000000\n532    5.3333333\n533    8.0000000\n534    7.0000000\n535   -3.6666667\n536   -6.0000000\n537   -1.6666667\n538    8.0000000\n539    5.3333333\n540   -4.0000000\n541    0.0000000\n542   -1.3333333\n543   -5.3333333\n544   -1.6666667\n545    0.3333333\n546   -4.0000000\n547   -4.6666667\n548    4.3333333\n549   -0.3333333\n550    0.6666667\n551   -2.6666667\n552    2.0000000\n553    4.0000000\n554   -1.0000000\n555    6.3333333\n556   -1.0000000\n557   -0.6666667\n558   -4.0000000\n559   -6.6666667\n560   -4.0000000\n561    5.3333333\n562   -3.3333333\n563    3.6666667\n564    3.3333333\n565    0.6666667\n566   -6.0000000\n567   -4.0000000\n568   -4.0000000\n569    1.0000000\n570   -4.6666667\n571   -2.3333333\n572    1.6666667\n573   -1.6666667\n574    1.6666667\n575   -6.6666667\n576    0.3333333\n577    5.3333333\n578   -5.3333333\n579   -1.6666667\n580    6.6666667\n581    5.3333333\n582   -8.0000000\n583    1.6666667\n584   -5.3333333\n585   -4.6666667\n586   -2.0000000\n587    7.0000000\n588    4.0000000\n589   -1.3333333\n590   -5.0000000\n591   -1.6666667\n592    0.3333333\n593   -4.6666667\n594   -2.6666667\n595   -1.3333333\n596   -6.3333333\n597   -8.0000000\n598   -5.0000000\n599   -3.0000000\n600   -5.3333333\n601    8.6666667\n602   -3.6666667\n603    6.6666667\n604    1.3333333\n605    4.3333333\n606   -1.3333333\n607   -0.3333333\n608   -0.6666667\n609    3.6666667\n610    9.3333333\n611    1.6666667\n612   -2.6666667\n613    9.3333333\n614    3.6666667\n615    0.6666667\n616   -1.0000000\n617   -7.0000000\n618    1.3333333\n619   -5.6666667\n620   -6.0000000\n621    7.6666667\n622   -1.3333333\n623   -5.3333333\n624    5.3333333\n625    2.6666667\n626    1.3333333\n627    1.6666667\n628    2.6666667\n629   -6.6666667\n630   -0.6666667\n631   -0.6666667\n632   -6.6666667\n633    6.3333333\n634   -0.3333333\n635    0.0000000\n636    2.0000000\n637    2.0000000\n638   -7.6666667\n639    7.6666667\n640    4.0000000\n641    6.6666667\n642    6.3333333\n643   -4.0000000\n644    4.0000000\n645    2.6666667\n646   -2.0000000\n647   -0.3333333\n648    0.0000000\n649   -1.6666667\n650   -2.6666667\n651    0.6666667\n652    4.6666667\n653    5.6666667\n654   -5.3333333\n655   -2.6666667\n656   -1.0000000\n657    1.6666667\n658   -1.6666667\n659    3.0000000\n660    0.3333333\n661   -2.3333333\n662    6.0000000\n663    2.3333333\n664    5.3333333\n665   -8.3333333\n666    0.0000000\n667   -6.3333333\n668   -7.6666667\n669   -6.3333333\n670    2.6666667\n671   -5.6666667\n672   -4.3333333\n673   -3.3333333\n674   -7.0000000\n675   -1.0000000\n676   -8.0000000\n677    1.3333333\n678    2.0000000\n679    0.0000000\n680    1.6666667\n681    1.3333333\n682   -4.6666667\n683    5.3333333\n684   -5.3333333\n685   -5.0000000\n686    0.0000000\n687   -8.6666667\n688    1.0000000\n689    3.0000000\n690    6.6666667\n691    6.6666667\n692    3.6666667\n693    4.6666667\n694   -2.6666667\n695   -0.3333333\n696    1.0000000\n697    2.3333333\n698    5.3333333\n699    0.0000000\n700   -0.3333333\n701    8.6666667\n702    1.6666667\n703    9.3333333\n704    1.6666667\n705   -5.3333333\n706   -7.6666667\n707   -2.3333333\n708    1.0000000\n709    2.6666667\n710    6.6666667\n711    1.0000000\n712   -1.3333333\n713    8.6666667\n714   -3.6666667\n715   -1.0000000\n716   -2.6666667\n717    0.0000000\n718    0.0000000\n719    3.6666667\n720    0.0000000\n721   -4.6666667\n722   -1.0000000\n723   -1.3333333\n724    4.3333333\n725   -4.6666667\n726    6.6666667\n727   -1.0000000\n728    3.3333333\n729    0.6666667\n730   -3.0000000\n731    0.3333333\n732    6.0000000\n733    4.6666667\n734   -2.6666667\n735    1.3333333\n736   -7.3333333\n737    0.0000000\n738    3.0000000\n739   -6.0000000\n740    0.0000000\n741   -3.0000000\n742   -1.6666667\n743    0.0000000\n744   -1.0000000\n745   -0.3333333\n746   -5.6666667\n747    0.6666667\n748   -4.6666667\n749   -5.6666667\n750    4.0000000\n751    3.0000000\n752    2.6666667\n753    1.3333333\n754   -7.0000000\n755   -3.3333333\n756    2.3333333\n757    8.3333333\n758   -2.3333333\n759    7.3333333\n760   -2.6666667\n761    8.0000000\n762    4.6666667\n763    5.3333333\n764   -3.0000000\n765    6.6666667\n766   -0.6666667\n767    0.0000000\n768    4.3333333\n769    1.0000000\n770   -2.6666667\n771   -1.3333333\n772   -1.0000000\n773   -2.0000000\n774   -7.0000000\n775    5.0000000\n776    2.6666667\n777   -1.6666667\n778   -5.3333333\n779   -2.3333333\n780    3.0000000\n781   -1.6666667\n782    1.6666667\n783    1.6666667\n784    4.3333333\n785    6.0000000\n786    7.0000000\n787    8.0000000\n788   -3.6666667\n789    8.0000000\n790   -3.0000000\n791    6.0000000\n792   -1.6666667\n793   -3.3333333\n794   -2.3333333\n795    9.6666667\n796   -8.6666667\n797   -4.0000000\n798  -11.6666667\n799    3.6666667\n800   -2.6666667\n801    3.0000000\n802   -3.3333333\n803    5.0000000\n804    7.0000000\n805    0.6666667\n806   -8.6666667\n807   10.6666667\n808   -1.6666667\n809    4.0000000\n810   -1.3333333\n811   -6.0000000\n812    5.0000000\n813    2.6666667\n814    1.3333333\n815    0.0000000\n816   -5.0000000\n817    8.0000000\n818    1.6666667\n819    3.6666667\n820    5.6666667\n821   -1.6666667\n822   -1.6666667\n823    7.0000000\n824   -3.3333333\n825   -5.6666667\n826    4.0000000\n827    2.3333333\n828   -0.6666667\n829   -3.0000000\n830    2.3333333\n831   -3.0000000\n832    2.6666667\n833    2.3333333\n834   -9.6666667\n835   -3.3333333\n836    1.3333333\n837    7.0000000\n838   -3.0000000\n839    5.6666667\n840   -3.0000000\n841   -5.6666667\n842    1.3333333\n843    5.3333333\n844   -2.6666667\n845   -2.0000000\n846    0.6666667\n847    3.3333333\n848   -0.3333333\n849    5.0000000\n850   -3.3333333\n851   -1.3333333\n852    6.0000000\n853   -5.3333333\n854   -6.0000000\n855   -7.3333333\n856   -4.6666667\n857    2.0000000\n858   -5.0000000\n859    5.6666667\n860    6.6666667\n861    0.0000000\n862    1.6666667\n863    8.3333333\n864   -5.0000000\n865    6.3333333\n866   -1.0000000\n867    7.0000000\n868   -6.3333333\n869    3.0000000\n870   -5.3333333\n871    5.6666667\n872   -0.6666667\n873    7.3333333\n874    0.3333333\n875   -7.6666667\n876    3.6666667\n877    2.0000000\n878   -4.0000000\n879    9.0000000\n880   -1.3333333\n881    2.6666667\n882   -5.6666667\n883   -3.6666667\n884    5.6666667\n885    4.0000000\n886   -4.3333333\n887    6.0000000\n888    6.3333333\n889   -5.3333333\n890   -2.0000000\n891    0.6666667\n892    3.3333333\n893   -3.0000000\n894    1.3333333\n895    1.0000000\n896   -4.3333333\n897   11.3333333\n898   -4.3333333\n899   -1.0000000\n900    0.0000000\n901    2.0000000\n902    1.0000000\n903  -10.3333333\n904    1.6666667\n905    1.6666667\n906    4.6666667\n907  -13.0000000\n908   -1.6666667\n909    1.3333333\n910   -2.0000000\n911    2.0000000\n912   -5.6666667\n913    2.0000000\n914   -3.0000000\n915   -6.0000000\n916   -8.6666667\n917    1.6666667\n918   -4.6666667\n919   -2.3333333\n920   -0.6666667\n921  -10.0000000\n922    2.0000000\n923    4.6666667\n924    2.0000000\n925   -2.0000000\n926   -6.0000000\n927    1.3333333\n928   -6.3333333\n929  -10.0000000\n930   -3.6666667\n931   -0.3333333\n932   -7.3333333\n933    4.6666667\n934    0.6666667\n935   -5.0000000\n936   -4.0000000\n937    0.3333333\n938    4.0000000\n939   -5.0000000\n940    2.6666667\n941   -3.0000000\n942    9.0000000\n943   -3.6666667\n944   -5.3333333\n945    3.0000000\n946   -1.3333333\n947    8.3333333\n948    3.0000000\n949    5.3333333\n950   -2.6666667\n951   -5.6666667\n952   -5.3333333\n953   -0.3333333\n954    2.0000000\n955    1.3333333\n956   -2.3333333\n957    3.6666667\n958    6.6666667\n959   -2.6666667\n960    0.3333333\n961   -4.6666667\n962    0.0000000\n963   -8.6666667\n964   -5.0000000\n965   -2.6666667\n966   -1.6666667\n967   -1.6666667\n968   -7.6666667\n969   -3.3333333\n970   -1.3333333\n971   -3.0000000\n972    1.0000000\n973   -2.0000000\n974   -2.3333333\n975    2.3333333\n976   -8.0000000\n977   -0.6666667\n978    9.0000000\n979    0.6666667\n980    2.0000000\n981    2.6666667\n982    0.6666667\n983    0.3333333\n984    0.3333333\n985    1.6666667\n986    1.0000000\n987    1.0000000\n988    0.0000000\n989   -3.6666667\n990   -0.6666667\n991    5.3333333\n992   -1.3333333\n993   -6.6666667\n994    2.6666667\n995    0.0000000\n996   -5.3333333\n997   -6.0000000\n998   -2.0000000\n999    6.6666667\n1000   1.6666667\n\n\nThe permutation test for comparing tipping behaviour between vegetarians and non-vegetarians was conducted with 1000 iterations. The distribution of the difference in mean tips (diffmean) under the null hypothesis, where dietary preferences are randomly shuffled, suggests that the observed differences are small. The diffmean values range from negative to positive, indicating that differences in mean tip amounts vary slightly between vegetarians and non-vegetarians in the randomized samples. These differences appear to center around 0, with most of the values being close to it, implying that the observed differences between the two groups might not be statistically significant, and any difference in tipping behaviour could largely be due to chance.\n\n\nPlotting the results of the Permutation Test\n\ngf_histogram(~ diffmean, data = perm_test_veg_nonveg, bins = 30) %&gt;%\n  gf_labs(\n    title = \"Permutation Test for Tipping Differences: Vegetarians vs. Non-Vegetarians\",\n    x = \"Difference in Mean Tip Amount\",\n    y = \"Count\"\n  )\n\n\n\n\n\n\n\n\nThe histogram from the permutation test comparing tipping differences between vegetarians and non-vegetarians shows that the distribution of differences in mean tip amounts is approximately centered around zero. This suggests that, under random shuffling of dietary preferences, the observed differences in mean tips could occur by chance.\n\n\nObserved difference for Vegetarians vs Non-Vegetarians\n\nobserved_diff_veg_nonveg &lt;- diffmean(Tip ~ Preference, data = tip_modified)\nobserved_diff_veg_nonveg\n\ndiffmean \n2.333333 \n\n\nThe observed difference in the mean tip amount between vegetarians and non-vegetarians is approximately 2.33 rupees, with non-vegetarians giving a slightly higher average tip compared to vegetarians.\n\n\nCalculating the p-value\n\np_value_veg_nonveg &lt;- prop(~ (abs(diffmean) &gt;= abs(observed_diff_veg_nonveg)), data = perm_test_veg_nonveg)\np_value_veg_nonveg\n\nprop_TRUE \n    0.634 \n\n\nThe p-value calculated for the permutation test comparing the tipping behavior between vegetarians and non-vegetarians is 0.675. This high p-value suggests that there is no statistically significant difference in the mean tip amounts between the two dietary preference groups. The observed difference of 2.33 rupees could have likely occurred by random chance, indicating that the dietary preference (vegetarian vs. non-vegetarian) does not have a strong influence on tipping behaviour in this sample. Therefore, we fail to reject the null hypothesis.\n\n\nPermutation test for Males vs Females\n\nperm_test_gender &lt;- do(1000) * diffmean(Tip ~ shuffle(Gender), data = tip_modified)\nperm_test_gender\n\n        diffmean\n1      0.0000000\n2      4.0000000\n3     -2.6666667\n4      5.3333333\n5      6.6666667\n6     -4.6666667\n7      4.3333333\n8      4.3333333\n9     -5.3333333\n10     0.0000000\n11     0.6666667\n12    -1.3333333\n13     2.3333333\n14    -5.3333333\n15     3.3333333\n16    -2.3333333\n17   -10.3333333\n18    -4.0000000\n19    -3.3333333\n20    -0.6666667\n21     0.0000000\n22     0.3333333\n23     1.6666667\n24    -2.0000000\n25    -8.0000000\n26    -5.0000000\n27    -3.0000000\n28    -2.6666667\n29    -2.3333333\n30     0.6666667\n31    -6.0000000\n32    -1.0000000\n33    -1.6666667\n34    -2.3333333\n35    -6.0000000\n36    -1.6666667\n37     8.0000000\n38     0.6666667\n39     6.3333333\n40    -9.3333333\n41    -4.6666667\n42    -1.6666667\n43     1.3333333\n44     8.3333333\n45     0.3333333\n46     5.6666667\n47     1.6666667\n48     7.6666667\n49    -0.6666667\n50    -1.6666667\n51     4.6666667\n52    -6.3333333\n53    -0.3333333\n54   -11.6666667\n55     2.0000000\n56     2.6666667\n57     8.3333333\n58     2.3333333\n59    -4.0000000\n60    -5.0000000\n61     0.6666667\n62    -9.6666667\n63     3.3333333\n64    -1.0000000\n65     3.3333333\n66    -1.6666667\n67     0.3333333\n68     1.0000000\n69    -0.6666667\n70     6.0000000\n71    -1.6666667\n72    -2.6666667\n73     2.0000000\n74    -6.3333333\n75   -11.3333333\n76    -3.3333333\n77    -2.3333333\n78    -3.0000000\n79    -0.3333333\n80    -3.3333333\n81     2.6666667\n82    -5.3333333\n83    -4.6666667\n84    -1.3333333\n85     2.0000000\n86    -2.6666667\n87     1.3333333\n88    -2.3333333\n89    -3.3333333\n90     2.6666667\n91    -1.3333333\n92    -7.0000000\n93     4.6666667\n94    -3.0000000\n95    -7.3333333\n96    -8.0000000\n97    -6.0000000\n98    -8.3333333\n99     0.3333333\n100    1.3333333\n101    1.3333333\n102    1.0000000\n103   -2.6666667\n104   -4.6666667\n105   -1.6666667\n106    1.0000000\n107    1.6666667\n108    1.3333333\n109    5.3333333\n110   -6.3333333\n111    3.0000000\n112    0.3333333\n113   -3.6666667\n114    1.0000000\n115   -0.6666667\n116   -1.3333333\n117    5.3333333\n118    0.3333333\n119   -4.0000000\n120   -3.0000000\n121    0.0000000\n122    4.6666667\n123    1.6666667\n124   -8.0000000\n125    9.0000000\n126   -4.3333333\n127   -4.3333333\n128    1.0000000\n129    6.3333333\n130    1.6666667\n131    0.3333333\n132   -1.3333333\n133    0.3333333\n134   -6.0000000\n135   -1.3333333\n136   -0.6666667\n137    3.0000000\n138   -2.0000000\n139   -1.0000000\n140    4.6666667\n141    6.6666667\n142  -10.0000000\n143    4.3333333\n144    2.3333333\n145    2.0000000\n146  -11.0000000\n147   -4.3333333\n148    0.3333333\n149   -2.3333333\n150   -2.3333333\n151   -4.6666667\n152    2.6666667\n153    3.3333333\n154   -3.0000000\n155    1.3333333\n156    4.3333333\n157    1.0000000\n158   -3.3333333\n159   -2.0000000\n160    4.3333333\n161    5.6666667\n162    4.3333333\n163   -6.3333333\n164    2.0000000\n165   -2.6666667\n166    0.0000000\n167   -3.3333333\n168   -2.3333333\n169    0.3333333\n170    8.0000000\n171   -2.3333333\n172    2.6666667\n173   -3.6666667\n174   -2.0000000\n175    1.6666667\n176   -0.3333333\n177   -2.0000000\n178    4.6666667\n179   -7.6666667\n180   -3.3333333\n181   -2.3333333\n182    9.0000000\n183    0.6666667\n184    0.3333333\n185   -2.6666667\n186    1.0000000\n187   -1.6666667\n188    4.0000000\n189    1.0000000\n190   -0.6666667\n191   -3.6666667\n192    7.3333333\n193    6.0000000\n194    6.6666667\n195   -6.6666667\n196   -0.3333333\n197  -10.0000000\n198   -5.0000000\n199   -5.3333333\n200    4.3333333\n201   -7.3333333\n202    2.0000000\n203    1.6666667\n204    5.3333333\n205    6.0000000\n206    3.0000000\n207    4.0000000\n208   -1.3333333\n209   -2.0000000\n210    2.6666667\n211   -2.6666667\n212  -14.3333333\n213   -0.6666667\n214    6.6666667\n215   -2.0000000\n216   -3.3333333\n217   -6.0000000\n218    8.6666667\n219   -4.0000000\n220   -1.6666667\n221    2.0000000\n222   -1.6666667\n223    0.6666667\n224   -8.3333333\n225    7.6666667\n226    2.0000000\n227   -0.6666667\n228    4.3333333\n229   11.6666667\n230    1.6666667\n231    0.3333333\n232    0.0000000\n233    4.6666667\n234   -3.3333333\n235   -3.6666667\n236   -3.6666667\n237    2.0000000\n238   11.3333333\n239   -3.6666667\n240    1.3333333\n241   -6.3333333\n242   -2.0000000\n243    0.6666667\n244    0.6666667\n245    0.0000000\n246   -6.6666667\n247   -3.0000000\n248    7.3333333\n249   -1.6666667\n250   -1.3333333\n251    1.3333333\n252   -1.0000000\n253    0.6666667\n254   -2.3333333\n255    5.6666667\n256    5.3333333\n257   -2.3333333\n258   -7.0000000\n259    5.3333333\n260    1.6666667\n261    3.0000000\n262   -5.3333333\n263    8.0000000\n264   -2.0000000\n265   -1.0000000\n266   -3.6666667\n267   12.6666667\n268   -1.3333333\n269    2.3333333\n270   -1.0000000\n271    2.6666667\n272   -2.6666667\n273   -3.3333333\n274   -1.6666667\n275    0.6666667\n276    0.0000000\n277   -1.6666667\n278    3.6666667\n279    1.6666667\n280    4.0000000\n281   -2.6666667\n282   -1.3333333\n283    7.6666667\n284    1.3333333\n285    7.3333333\n286    1.6666667\n287    1.6666667\n288    2.0000000\n289    1.6666667\n290    9.0000000\n291    2.6666667\n292   -1.3333333\n293    6.0000000\n294    1.6666667\n295   -5.0000000\n296    6.6666667\n297   -7.3333333\n298    2.0000000\n299   -0.3333333\n300   -7.3333333\n301    1.3333333\n302    4.6666667\n303    0.0000000\n304   -7.6666667\n305   -5.3333333\n306    1.6666667\n307    0.3333333\n308   -0.6666667\n309    0.3333333\n310   -1.0000000\n311    0.3333333\n312    5.0000000\n313    0.6666667\n314    1.0000000\n315    1.3333333\n316    1.3333333\n317   -2.0000000\n318    0.6666667\n319    2.0000000\n320    7.6666667\n321    3.0000000\n322    1.0000000\n323    2.3333333\n324    3.6666667\n325    4.0000000\n326    4.0000000\n327    5.0000000\n328   -3.0000000\n329    4.0000000\n330   -2.6666667\n331    0.6666667\n332    3.0000000\n333    0.3333333\n334   -0.6666667\n335   -7.3333333\n336   -1.6666667\n337    7.6666667\n338   -3.3333333\n339    0.3333333\n340    4.0000000\n341    6.0000000\n342   -6.6666667\n343   -6.3333333\n344   -4.0000000\n345   -9.3333333\n346   -3.3333333\n347    2.6666667\n348    3.0000000\n349   -8.0000000\n350    0.6666667\n351   -4.0000000\n352    3.3333333\n353    2.6666667\n354   -2.0000000\n355    7.6666667\n356    0.0000000\n357   -3.0000000\n358    2.3333333\n359    1.3333333\n360    1.6666667\n361    3.0000000\n362   -3.6666667\n363   -0.3333333\n364   -2.3333333\n365   -2.3333333\n366    1.0000000\n367   -5.3333333\n368    6.6666667\n369    6.6666667\n370    4.6666667\n371    2.6666667\n372   -5.3333333\n373   -3.6666667\n374    5.6666667\n375    1.3333333\n376   -0.3333333\n377   10.3333333\n378   -5.3333333\n379    5.0000000\n380   -3.3333333\n381    0.0000000\n382   -6.3333333\n383   -2.3333333\n384   -5.6666667\n385    0.0000000\n386   -1.0000000\n387    6.6666667\n388    4.3333333\n389    2.6666667\n390    0.0000000\n391    9.3333333\n392   -4.6666667\n393   10.0000000\n394   -7.6666667\n395    4.3333333\n396  -10.3333333\n397   -2.6666667\n398    7.6666667\n399   -4.0000000\n400   -4.6666667\n401    2.6666667\n402   -3.0000000\n403    0.3333333\n404    0.6666667\n405    1.3333333\n406   -4.6666667\n407    3.0000000\n408   -0.6666667\n409    3.3333333\n410    3.3333333\n411    9.3333333\n412   -1.6666667\n413    3.6666667\n414   -7.0000000\n415   -3.0000000\n416    4.0000000\n417   -0.3333333\n418   -1.6666667\n419    3.3333333\n420   -1.6666667\n421    1.3333333\n422   -3.3333333\n423   10.3333333\n424   -8.0000000\n425   -3.0000000\n426    1.6666667\n427    9.6666667\n428   -4.0000000\n429    1.3333333\n430    5.3333333\n431    1.0000000\n432    7.0000000\n433   -9.0000000\n434   -0.3333333\n435    3.3333333\n436    6.6666667\n437   -2.6666667\n438    2.3333333\n439   -3.6666667\n440   -4.3333333\n441   -6.3333333\n442    2.6666667\n443    0.3333333\n444    6.0000000\n445    1.0000000\n446   -6.0000000\n447    4.0000000\n448    9.6666667\n449    4.0000000\n450    2.0000000\n451   -0.3333333\n452   -5.6666667\n453    4.3333333\n454    1.3333333\n455   -1.3333333\n456    5.0000000\n457   -4.3333333\n458    1.6666667\n459   -4.6666667\n460   -2.6666667\n461    0.6666667\n462   -1.0000000\n463    5.6666667\n464   -0.3333333\n465  -10.3333333\n466   -8.6666667\n467   -5.0000000\n468   -0.6666667\n469   -5.3333333\n470   -5.6666667\n471   -5.0000000\n472   -5.0000000\n473    1.0000000\n474   -4.6666667\n475    2.6666667\n476   -6.0000000\n477    0.0000000\n478    7.6666667\n479    7.3333333\n480    9.3333333\n481    0.3333333\n482   -2.0000000\n483   -6.0000000\n484    4.0000000\n485    3.6666667\n486   -4.0000000\n487    1.0000000\n488    4.6666667\n489   -8.3333333\n490    1.6666667\n491   -2.6666667\n492   -1.6666667\n493   -2.0000000\n494  -10.0000000\n495   -0.6666667\n496    2.3333333\n497    3.0000000\n498    2.0000000\n499   -5.6666667\n500   -2.3333333\n501    4.0000000\n502    4.6666667\n503    3.6666667\n504   -4.3333333\n505    4.6666667\n506   -7.6666667\n507    9.0000000\n508   -1.0000000\n509    1.0000000\n510    1.3333333\n511    5.6666667\n512    0.3333333\n513   -3.0000000\n514   -0.6666667\n515    6.0000000\n516    4.3333333\n517    0.3333333\n518   -2.0000000\n519   -1.6666667\n520    1.6666667\n521   -1.3333333\n522    0.3333333\n523    1.3333333\n524   -3.0000000\n525    6.6666667\n526    6.6666667\n527   -3.6666667\n528    1.6666667\n529    7.6666667\n530    3.0000000\n531    9.0000000\n532   -2.6666667\n533    5.0000000\n534   -5.0000000\n535   -8.3333333\n536    8.6666667\n537    7.0000000\n538    4.6666667\n539   10.6666667\n540    0.3333333\n541   -3.6666667\n542    3.3333333\n543    3.6666667\n544   -0.6666667\n545   -6.0000000\n546    5.0000000\n547   -4.0000000\n548    6.3333333\n549   -0.3333333\n550    0.3333333\n551   -2.0000000\n552   -3.3333333\n553   -1.0000000\n554    2.6666667\n555    7.3333333\n556    5.3333333\n557   -5.3333333\n558    0.6666667\n559    4.3333333\n560   -8.6666667\n561   -2.0000000\n562   -7.6666667\n563   -1.6666667\n564    2.6666667\n565   -3.6666667\n566   -0.6666667\n567    2.6666667\n568   -8.6666667\n569   -2.6666667\n570    2.3333333\n571   -5.6666667\n572   -8.0000000\n573    5.6666667\n574   -1.6666667\n575   -4.6666667\n576    0.3333333\n577   -6.6666667\n578    5.3333333\n579    6.3333333\n580    4.6666667\n581   -3.3333333\n582   -0.6666667\n583    0.6666667\n584    3.3333333\n585    5.6666667\n586    8.3333333\n587   -7.6666667\n588   -2.0000000\n589   -4.0000000\n590    1.6666667\n591    0.6666667\n592   -7.6666667\n593    8.0000000\n594    9.6666667\n595    2.3333333\n596   -8.0000000\n597   -1.3333333\n598   -0.3333333\n599    2.0000000\n600   -3.0000000\n601    2.6666667\n602    8.0000000\n603    4.6666667\n604   -4.6666667\n605    1.0000000\n606   -2.6666667\n607    1.0000000\n608    4.3333333\n609   -8.0000000\n610    1.3333333\n611   -5.0000000\n612   -0.6666667\n613    6.0000000\n614    0.3333333\n615   -7.6666667\n616   -3.6666667\n617   -7.0000000\n618   -3.6666667\n619  -11.3333333\n620    7.6666667\n621   -9.3333333\n622   -6.6666667\n623   -4.3333333\n624   -2.3333333\n625    0.3333333\n626    7.3333333\n627   -2.0000000\n628   -1.3333333\n629    1.0000000\n630    2.3333333\n631   -2.0000000\n632    4.0000000\n633    0.3333333\n634   -3.6666667\n635    3.6666667\n636   -0.6666667\n637   -3.6666667\n638    6.0000000\n639    2.0000000\n640   -3.6666667\n641    3.6666667\n642   -5.6666667\n643    1.0000000\n644   -4.3333333\n645  -12.0000000\n646    1.3333333\n647    2.0000000\n648   -3.0000000\n649   -4.0000000\n650    4.6666667\n651   -1.0000000\n652   -1.0000000\n653    1.6666667\n654   -0.3333333\n655    8.6666667\n656   -5.6666667\n657   -8.3333333\n658   -3.3333333\n659   -1.0000000\n660   -4.0000000\n661   -2.3333333\n662    2.0000000\n663    5.6666667\n664   -5.3333333\n665   -5.6666667\n666    0.3333333\n667    8.3333333\n668   -5.6666667\n669   -5.0000000\n670   -1.3333333\n671    6.0000000\n672   -2.0000000\n673    5.0000000\n674    1.3333333\n675    8.6666667\n676   -3.0000000\n677    8.3333333\n678   -3.3333333\n679    2.0000000\n680    4.0000000\n681    6.3333333\n682    1.0000000\n683    8.6666667\n684   -1.0000000\n685    4.3333333\n686   -5.6666667\n687   -1.0000000\n688    5.0000000\n689    7.3333333\n690    3.3333333\n691   -2.0000000\n692   -4.6666667\n693    2.0000000\n694    6.0000000\n695   -1.0000000\n696    2.0000000\n697    5.3333333\n698   -9.6666667\n699   -6.0000000\n700   -2.0000000\n701    4.6666667\n702   -4.0000000\n703    3.0000000\n704    1.6666667\n705   -7.6666667\n706   -1.0000000\n707   -4.3333333\n708   10.6666667\n709   -0.3333333\n710    0.6666667\n711    8.3333333\n712   -4.0000000\n713    6.3333333\n714    5.6666667\n715   -8.3333333\n716    3.6666667\n717    2.0000000\n718    2.6666667\n719  -10.3333333\n720    2.0000000\n721   -4.3333333\n722    2.6666667\n723    9.0000000\n724   -8.0000000\n725    6.0000000\n726   -7.6666667\n727    3.0000000\n728   -3.6666667\n729    2.0000000\n730    5.3333333\n731    1.3333333\n732   -2.3333333\n733   -6.6666667\n734    7.6666667\n735   -5.3333333\n736   -3.6666667\n737   -8.3333333\n738    0.0000000\n739   -6.0000000\n740    9.3333333\n741    1.3333333\n742   -5.6666667\n743   -3.6666667\n744   -6.6666667\n745   -6.0000000\n746   -4.6666667\n747   -4.3333333\n748   -3.3333333\n749    2.3333333\n750   -1.0000000\n751   -1.3333333\n752   -3.3333333\n753   -0.6666667\n754    1.3333333\n755    2.0000000\n756   -6.6666667\n757    1.3333333\n758   -0.3333333\n759    6.0000000\n760   -6.0000000\n761    2.0000000\n762    0.3333333\n763   -4.0000000\n764   -2.6666667\n765    0.6666667\n766    5.6666667\n767   -7.0000000\n768    2.0000000\n769   -0.3333333\n770    5.0000000\n771    1.0000000\n772   -1.0000000\n773    2.3333333\n774    2.0000000\n775    7.0000000\n776    4.0000000\n777   -3.0000000\n778   -0.6666667\n779   -8.6666667\n780    2.6666667\n781    2.6666667\n782    3.3333333\n783    5.6666667\n784   -6.0000000\n785    7.6666667\n786    1.3333333\n787  -12.3333333\n788   -1.3333333\n789    2.0000000\n790   -2.3333333\n791    5.0000000\n792    2.3333333\n793   -2.6666667\n794    0.6666667\n795    6.3333333\n796    5.6666667\n797    2.6666667\n798   -5.6666667\n799   -6.0000000\n800   -1.6666667\n801   -7.0000000\n802   -4.0000000\n803   -8.0000000\n804   -2.0000000\n805   -4.0000000\n806    2.0000000\n807    2.0000000\n808   -3.6666667\n809    3.6666667\n810    1.0000000\n811   -5.3333333\n812   -2.6666667\n813    2.3333333\n814    4.0000000\n815    6.6666667\n816   -2.6666667\n817   -1.6666667\n818   -3.6666667\n819    0.6666667\n820    0.0000000\n821   -7.3333333\n822    3.0000000\n823    2.6666667\n824    2.3333333\n825   -4.6666667\n826    5.3333333\n827    5.3333333\n828   -6.0000000\n829   10.3333333\n830   -8.3333333\n831   -2.3333333\n832   -2.3333333\n833   -2.3333333\n834   15.3333333\n835   -9.3333333\n836   -7.0000000\n837    0.3333333\n838    1.0000000\n839   -7.3333333\n840   -7.3333333\n841    1.3333333\n842    0.6666667\n843   -5.3333333\n844   -0.6666667\n845   -1.6666667\n846    3.6666667\n847   -4.0000000\n848    0.6666667\n849   -0.3333333\n850    0.6666667\n851   -0.6666667\n852    5.0000000\n853    3.6666667\n854    1.6666667\n855    4.3333333\n856   -1.0000000\n857   -2.0000000\n858    0.6666667\n859    1.3333333\n860    0.6666667\n861    6.6666667\n862    3.6666667\n863    2.3333333\n864    3.3333333\n865    8.6666667\n866    8.3333333\n867   -1.6666667\n868   -2.6666667\n869    3.3333333\n870   -4.0000000\n871    1.3333333\n872    0.0000000\n873   -2.0000000\n874    3.0000000\n875    6.6666667\n876   -1.0000000\n877   -0.6666667\n878    4.0000000\n879    0.0000000\n880    4.6666667\n881   -1.0000000\n882    1.6666667\n883   -4.6666667\n884    0.3333333\n885   -2.0000000\n886    1.3333333\n887    1.0000000\n888   -1.6666667\n889    0.6666667\n890    0.0000000\n891   -2.3333333\n892    3.0000000\n893   -3.6666667\n894   -5.6666667\n895   -9.0000000\n896    3.0000000\n897   -2.3333333\n898    4.3333333\n899    3.6666667\n900    3.3333333\n901    5.3333333\n902    0.0000000\n903    5.6666667\n904   -4.3333333\n905   -1.0000000\n906    4.3333333\n907   -4.6666667\n908   -1.3333333\n909    3.0000000\n910   10.0000000\n911  -11.0000000\n912    5.0000000\n913    3.0000000\n914    4.6666667\n915   -7.3333333\n916    3.3333333\n917   -1.6666667\n918    2.6666667\n919    2.3333333\n920   -2.3333333\n921    8.6666667\n922   -0.3333333\n923   -0.6666667\n924    2.6666667\n925   -0.6666667\n926   10.6666667\n927    4.6666667\n928    2.0000000\n929    8.6666667\n930    5.0000000\n931    2.0000000\n932    1.3333333\n933    4.0000000\n934   -0.3333333\n935   -6.0000000\n936   -1.3333333\n937   -3.6666667\n938   -5.6666667\n939    2.3333333\n940    0.3333333\n941   -2.3333333\n942   -0.3333333\n943   -7.6666667\n944   -2.0000000\n945   -6.3333333\n946   -4.3333333\n947   -6.0000000\n948    8.0000000\n949   -2.0000000\n950   -5.3333333\n951   -6.3333333\n952    0.0000000\n953    5.0000000\n954   -4.3333333\n955    0.0000000\n956   -0.3333333\n957    3.0000000\n958    2.3333333\n959    3.0000000\n960   -8.0000000\n961    3.0000000\n962   -4.0000000\n963    1.6666667\n964    0.6666667\n965    1.3333333\n966   -4.0000000\n967    1.6666667\n968   -4.0000000\n969    7.0000000\n970   -7.3333333\n971   -6.6666667\n972   -2.6666667\n973   -4.0000000\n974   -2.6666667\n975    7.0000000\n976    6.3333333\n977   -3.0000000\n978    6.6666667\n979   -4.0000000\n980   -3.0000000\n981    1.3333333\n982   -4.6666667\n983   -1.0000000\n984    0.6666667\n985    4.3333333\n986   -6.6666667\n987   -1.3333333\n988   -9.0000000\n989   -6.3333333\n990    4.6666667\n991    8.3333333\n992   -1.6666667\n993    0.0000000\n994   -1.6666667\n995    0.0000000\n996    7.3333333\n997   -1.0000000\n998  -13.6666667\n999    4.0000000\n1000  -2.6666667\n\n\nThe permutation test comparing the tipping behaviour between males and females was conducted by randomly shuffling the gender labels 1,000 times and calculating the difference in mean tip amounts for each shuffle. The resulting distribution of differences varied around zero, with values like -7.33, 1.00, -2.00, and 3.66 observed. This distribution suggests that any observed difference in tipping behaviour between males and females could largely be attributed to random variation, rather than a true underlying difference in tipping habits based on gender.\n\n\nPlotting the results of the Permutation Test\n\ngf_histogram(~ diffmean, data = perm_test_gender, bins = 30) %&gt;%\n  gf_labs(\n    title = \"Permutation Test for Tipping Differences: Males vs. Females\",\n    x = \"Difference in Mean Tip Amount\",\n    y = \"Count\"\n  )\n\n\n\n\n\n\n\n\nThe permutation test for tipping differences between males and females shows a symmetric distribution centered around zero. The differences in mean tipping amounts vary from approximately -10 to 10 rupees. This indicates that, based on the resampled data, the observed differences in tipping between males and females are likely due to random chance. The distribution does not suggest a strong or consistent difference in tipping behaviour between the two genders.\n\n\nObserved difference for Males vs Females\n\nobserved_diff_gender &lt;- diffmean(Tip ~ Gender, data = tip_modified)\nobserved_diff_gender\n\ndiffmean \n      -2 \n\n\nThe observed difference in mean tips between males and females is -2 rupees. This indicates that, on average, males tend to tip 2 rupees less than females in the dataset.\n\n\nCalculating the p-value\n\np_value_gender &lt;- prop(~ (abs(diffmean) &gt;= abs(observed_diff_gender)), data = perm_test_gender)\np_value_gender\n\nprop_TRUE \n    0.699 \n\n\nThe permutation test conducted to assess the difference in tipping behaviour between males and females resulted in a p-value of 0.697. This p-value is quite high, indicating that the observed difference in mean tips between males and females (-2 rupees) is not statistically significant. In other words, there is a 69.7% probability that the observed difference could have occurred by random chance. Therefore, we do not have enough evidence to conclude that there is a significant difference in tipping behaviour between males and females based on this dataset.\n\n\nSummary of Results for the Tipping Behaviour Research Experiment\nThe research experiment aimed to determine if there was a significant difference in tipping behaviour between vegetarians and non-vegetarians, and between male and female students at MAHE Bengaluru. The following statistical tests were conducted:\nTwo-Sample t-Test (Welch’s t-test):\n\nVegetarians vs. Non-Vegetarians: The two-sample t-test comparing the mean tip amounts between vegetarians and non-vegetarians resulted in a p-value of 0.6169. This indicates no statistically significant difference in the average tip amount between the two dietary groups, as the p-value is much higher than the typical threshold of 0.05.\nMales vs. Females: The t-test comparing the mean tip amounts between males and females resulted in a p-value of 0.6679. This also suggests no significant difference in tipping behaviour based on gender.\n\nWilcoxon Rank-Sum Test:\n\nVegetarians vs. Non-Vegetarians: The Wilcoxon test, a non-parametric alternative to the t-test, resulted in a p-value of 0.8327. This further supports the t-test results, indicating no significant difference between vegetarians and non-vegetarians in terms of tipping behaviour.\nMales vs. Females: The Wilcoxon test comparing males and females resulted in a p-value of 0.4221, which also suggests no statistically significant difference between the two genders.\n\nPermutation Test:\n\nVegetarians vs. Non-Vegetarians: The permutation test comparing tipping behaviour between vegetarians and non-vegetarians resulted in a p-value of 0.675, confirming that the observed difference in mean tip amounts of approximately 2.33 rupees is likely due to random variation and not a significant underlying difference.\nMales vs. Females: The permutation test for tipping differences between males and females resulted in a p-value of 0.697. The observed difference in mean tip amounts (-2 rupees, with females tipping slightly more on average) is also likely due to random variation.\n\n\n\nConclusion:\nBased on the results of these tests, there is no evidence to suggest that either dietary preference (vegetarian vs. non-vegetarian) or gender (male vs. female) significantly impacts tipping behaviour in this dataset. The high p-values across all tests indicate that the observed differences in tipping amounts are likely due to chance. Therefore, the initial hypotheses that non-vegetarians might tip more than vegetarians, or that one gender tips more than the other, are not supported by the data."
  },
  {
    "objectID": "posts/Assignment 2 - Part 3/index.html",
    "href": "posts/Assignment 2 - Part 3/index.html",
    "title": "Assignment 2 - Part 3",
    "section": "",
    "text": "This is Part 3 of Assignment 2.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)\nlibrary(correlation)\n\n\nAttaching package: 'correlation'\n\nThe following object is masked from 'package:mosaic':\n\n    cor_test\n\nlibrary(broom)\nlibrary(knitr)\n\n\n\nThis is a dataset pertaining to scores of multiple athletes in the 7 events that make up the Heptathlon.\n\nlibrary(HSAUR)\n\nLoading required package: tools\n\nheptathlon\n\n                    hurdles highjump  shot run200m longjump javelin run800m\nJoyner-Kersee (USA)   12.69     1.86 15.80   22.56     7.27   45.66  128.51\nJohn (GDR)            12.85     1.80 16.23   23.65     6.71   42.56  126.12\nBehmer (GDR)          13.20     1.83 14.20   23.10     6.68   44.54  124.20\nSablovskaite (URS)    13.61     1.80 15.23   23.92     6.25   42.78  132.24\nChoubenkova (URS)     13.51     1.74 14.76   23.93     6.32   47.46  127.90\nSchulz (GDR)          13.75     1.83 13.50   24.65     6.33   42.82  125.79\nFleming (AUS)         13.38     1.80 12.88   23.59     6.37   40.28  132.54\nGreiner (USA)         13.55     1.80 14.13   24.48     6.47   38.00  133.65\nLajbnerova (CZE)      13.63     1.83 14.28   24.86     6.11   42.20  136.05\nBouraga (URS)         13.25     1.77 12.62   23.59     6.28   39.06  134.74\nWijnsma (HOL)         13.75     1.86 13.01   25.03     6.34   37.86  131.49\nDimitrova (BUL)       13.24     1.80 12.88   23.59     6.37   40.28  132.54\nScheider (SWI)        13.85     1.86 11.58   24.87     6.05   47.50  134.93\nBraun (FRG)           13.71     1.83 13.16   24.78     6.12   44.58  142.82\nRuotsalainen (FIN)    13.79     1.80 12.32   24.61     6.08   45.44  137.06\nYuping (CHN)          13.93     1.86 14.21   25.00     6.40   38.60  146.67\nHagger (GB)           13.47     1.80 12.75   25.47     6.34   35.76  138.48\nBrown (USA)           14.07     1.83 12.69   24.83     6.13   44.34  146.43\nMulliner (GB)         14.39     1.71 12.68   24.92     6.10   37.76  138.02\nHautenauve (BEL)      14.04     1.77 11.81   25.61     5.99   35.68  133.90\nKytola (FIN)          14.31     1.77 11.66   25.69     5.75   39.48  133.35\nGeremias (BRA)        14.23     1.71 12.95   25.50     5.50   39.64  144.02\nHui-Ing (TAI)         14.85     1.68 10.00   25.23     5.47   39.14  137.30\nJeong-Mi (KOR)        14.53     1.71 10.83   26.61     5.50   39.26  139.17\nLauna (PNG)           16.42     1.50 11.78   26.16     4.88   46.38  163.43\n                    score\nJoyner-Kersee (USA)  7291\nJohn (GDR)           6897\nBehmer (GDR)         6858\nSablovskaite (URS)   6540\nChoubenkova (URS)    6540\nSchulz (GDR)         6411\nFleming (AUS)        6351\nGreiner (USA)        6297\nLajbnerova (CZE)     6252\nBouraga (URS)        6252\nWijnsma (HOL)        6205\nDimitrova (BUL)      6171\nScheider (SWI)       6137\nBraun (FRG)          6109\nRuotsalainen (FIN)   6101\nYuping (CHN)         6087\nHagger (GB)          5975\nBrown (USA)          5972\nMulliner (GB)        5746\nHautenauve (BEL)     5734\nKytola (FIN)         5686\nGeremias (BRA)       5508\nHui-Ing (TAI)        5290\nJeong-Mi (KOR)       5289\nLauna (PNG)          4566\n\n\nThe dataset contains performance metrics for various athletes across different disciplines that make up the Heptathlon event. The columns include measurements for hurdles, high jump, shot put, 200m run, long jump, javelin, 800m run, and the total score. Athletes are identified by their names and nationalities, and their scores in each event are displayed. For example, Joyner-Kersee leads with a score of 7291 points, achieving the best times and distances across several events, including hurdles, high jump, and long jump.\n\n\n\n\nheptathlon %&gt;% \n  head(10)\n\n                    hurdles highjump  shot run200m longjump javelin run800m\nJoyner-Kersee (USA)   12.69     1.86 15.80   22.56     7.27   45.66  128.51\nJohn (GDR)            12.85     1.80 16.23   23.65     6.71   42.56  126.12\nBehmer (GDR)          13.20     1.83 14.20   23.10     6.68   44.54  124.20\nSablovskaite (URS)    13.61     1.80 15.23   23.92     6.25   42.78  132.24\nChoubenkova (URS)     13.51     1.74 14.76   23.93     6.32   47.46  127.90\nSchulz (GDR)          13.75     1.83 13.50   24.65     6.33   42.82  125.79\nFleming (AUS)         13.38     1.80 12.88   23.59     6.37   40.28  132.54\nGreiner (USA)         13.55     1.80 14.13   24.48     6.47   38.00  133.65\nLajbnerova (CZE)      13.63     1.83 14.28   24.86     6.11   42.20  136.05\nBouraga (URS)         13.25     1.77 12.62   23.59     6.28   39.06  134.74\n                    score\nJoyner-Kersee (USA)  7291\nJohn (GDR)           6897\nBehmer (GDR)         6858\nSablovskaite (URS)   6540\nChoubenkova (URS)    6540\nSchulz (GDR)         6411\nFleming (AUS)        6351\nGreiner (USA)        6297\nLajbnerova (CZE)     6252\nBouraga (URS)        6252\n\n\nThe first 10 rows of the heptathlon dataset show the performances of athletes across various events. The columns include data for hurdles, high jump, shot put, 200m run, long jump, javelin throw, 800m run, and the total score. For example, Joyner-Kersee (USA) leads the list with a total score of 7291 points, excelling in the 200m run, hurdles, and long jump. Other athletes, such as John and Behmer from GDR, follow closely with scores of 6897 and 6858, respectively, also showing strong performances across events like shot put and high jump. Each row represents an athlete’s results across all seven heptathlon events, culminating in their final score.\n\n\n\n\nglimpse(heptathlon)\n\nRows: 25\nColumns: 8\n$ hurdles  &lt;dbl&gt; 12.69, 12.85, 13.20, 13.61, 13.51, 13.75, 13.38, 13.55, 13.63…\n$ highjump &lt;dbl&gt; 1.86, 1.80, 1.83, 1.80, 1.74, 1.83, 1.80, 1.80, 1.83, 1.77, 1…\n$ shot     &lt;dbl&gt; 15.80, 16.23, 14.20, 15.23, 14.76, 13.50, 12.88, 14.13, 14.28…\n$ run200m  &lt;dbl&gt; 22.56, 23.65, 23.10, 23.92, 23.93, 24.65, 23.59, 24.48, 24.86…\n$ longjump &lt;dbl&gt; 7.27, 6.71, 6.68, 6.25, 6.32, 6.33, 6.37, 6.47, 6.11, 6.28, 6…\n$ javelin  &lt;dbl&gt; 45.66, 42.56, 44.54, 42.78, 47.46, 42.82, 40.28, 38.00, 42.20…\n$ run800m  &lt;dbl&gt; 128.51, 126.12, 124.20, 132.24, 127.90, 125.79, 132.54, 133.6…\n$ score    &lt;int&gt; 7291, 6897, 6858, 6540, 6540, 6411, 6351, 6297, 6252, 6252, 6…\n\n\nThe glimpse of the heptathlon dataset provides an overview of 25 rows and 8 columns, showcasing athletes’ performances across various events.\n\n\n\n\ninspect(heptathlon)\n\n\nquantitative variables:  \n      name   class     min      Q1  median      Q3     max      mean\n1  hurdles numeric   12.69   13.47   13.75   14.07   16.42   13.8400\n2 highjump numeric    1.50    1.77    1.80    1.83    1.86    1.7820\n3     shot numeric   10.00   12.32   12.88   14.20   16.23   13.1176\n4  run200m numeric   22.56   23.92   24.83   25.23   26.61   24.6492\n5 longjump numeric    4.88    6.05    6.25    6.37    7.27    6.1524\n6  javelin numeric   35.68   39.06   40.28   44.54   47.50   41.4824\n7  run800m numeric  124.20  132.24  134.74  138.48  163.43  136.0540\n8    score integer 4566.00 5746.00 6137.00 6351.00 7291.00 6090.6000\n            sd  n missing\n1   0.73664781 25       0\n2   0.07794229 25       0\n3   1.49188438 25       0\n4   0.96955712 25       0\n5   0.47421233 25       0\n6   3.54565612 25       0\n7   8.29108809 25       0\n8 568.46972948 25       0\n\n\nThe inspection of the heptathlon dataset reveals important summary statistics for each event. The dataset has 25 entries with no missing data. The hurdles times range from 12.69 to 16.42 seconds, with a median of 13.75 seconds. High jump heights range from 1.50 to 1.86 meters, with a median of 1.80 meters. Shot put distances vary between 10.00 and 16.23 meters, and the median distance is 12.88 meters. For the 200m run, the times range from 22.56 to 26.61 seconds, with a median of 24.83 seconds. Long jump distances range from 4.88 to 7.27 meters. The javelin throw distances span from 35.68 to 47.50 meters, while the 800m run times range between 124.20 and 163.43 seconds. The total score varies widely, from 4566 to 7291 points, with a mean score of 6090.\n\n\n\n\nskim(heptathlon)\n\n\nData summary\n\n\nName\nheptathlon\n\n\nNumber of rows\n25\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n8\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nhurdles\n0\n1\n13.84\n0.74\n12.69\n13.47\n13.75\n14.07\n16.42\n▃▇▃▁▁\n\n\nhighjump\n0\n1\n1.78\n0.08\n1.50\n1.77\n1.80\n1.83\n1.86\n▁▁▂▂▇\n\n\nshot\n0\n1\n13.12\n1.49\n10.00\n12.32\n12.88\n14.20\n16.23\n▂▃▇▃▂\n\n\nrun200m\n0\n1\n24.65\n0.97\n22.56\n23.92\n24.83\n25.23\n26.61\n▂▆▇▇▂\n\n\nlongjump\n0\n1\n6.15\n0.47\n4.88\n6.05\n6.25\n6.37\n7.27\n▁▃▇▇▁\n\n\njavelin\n0\n1\n41.48\n3.55\n35.68\n39.06\n40.28\n44.54\n47.50\n▅▇▂▅▅\n\n\nrun800m\n0\n1\n136.05\n8.29\n124.20\n132.24\n134.74\n138.48\n163.43\n▃▇▂▁▁\n\n\nscore\n0\n1\n6090.60\n568.47\n4566.00\n5746.00\n6137.00\n6351.00\n7291.00\n▁▂▇▆▂\n\n\n\n\n\nThe skim summary of the heptathlon dataset provides key statistical insights into the eight numeric variables. The dataset contains 25 rows and no missing data. For each variable, the mean, standard deviation (sd), and percentiles (p0, p25, p50, p75, p100) are shown. For example, the hurdles event has a mean of 13.84 seconds with a standard deviation of 0.74, and the scores range from 12.69 to 16.42 seconds. Similarly, the high jump has a mean of 1.78 meters with a low standard deviation of 0.08. The score column has a broad range from 4566 to 7291 points, with a mean score of 6090. These statistics offer an overview of how the athletes’ performances are distributed across the different events.\n\n\n\nQuantitative Data:\n\nhurdles (dbl): The time (in seconds) taken to complete the 100m hurdles event.\nhighjump (dbl): The height (in meters) cleared in the high jump event.\nshot (dbl): The distance (in meters) achieved in the shot put event.\nrun200m (dbl): The time (in seconds) taken to complete the 200m sprint.\nlongjump (dbl): The distance (in meters) achieved in the long jump event.\njavelin (dbl): The distance (in meters) achieved in the javelin throw event.\nrun800m (dbl): The time (in seconds) taken to complete the 800m run.\nscore (int): The total score accumulated from all the events for each athlete.\n\nQualitative Data:\n\nname (chr): The name of the athlete participating in the heptathlon competition.\n\n\n\n\nScore\nThe score is the key outcome of interest in the heptathlon dataset as it represents the cumulative performance of athletes across all events. The goal of the analysis is to understand how each individual event contributes to the overall score. This makes the score the most logical target variable for evaluating the athletes’ success across the seven heptathlon events.\n\n\n\n\nHurdles\n\nThe time taken to complete the 100m hurdles event is a critical factor in determining an athlete’s score. Faster times typically translate into higher scores, making hurdles an important predictor of the overall performance.\n\nHigh Jump\n\nThe height an athlete clears in the high jump event significantly contributes to their score. Higher jumps generally result in more points, making it a valuable predictor for the overall score.\n\nShot Put\n\nThe distance achieved in the shot put event is another factor that influences the total score. Longer throws result in higher points, making this event a crucial predictor of an athlete’s overall performance.\n\n200m Sprint\n\nThe time taken to complete the 200m sprint is an essential measure of an athlete’s speed and stamina. Faster times contribute to higher scores, making the 200m sprint an important predictor variable.\n\nLong Jump\n\nThe distance jumped in the long jump event provides another key input into the total score. Longer jumps generally lead to higher scores, making it an influential predictor.\n\nJavelin Throw\n\nThe distance achieved in the javelin throw event plays a role in determining the athlete’s score. Longer throws result in more points, making this an important predictor for the final score.\n\n800m Run\n\nThe time taken to complete the 800m run is a measure of endurance and speed. Faster times contribute to higher scores, making the 800m run a significant predictor of the overall score.\n\n\n\nThe primary objective of the research experiment could be to measure and evaluate the athletic performance of multiple athletes competing in the heptathlon, a multi-event track and field competition. The goal might have been to assess how individual event performances contribute to the overall score, providing insights into which events could be most predictive of an athlete’s cumulative success.\n\n\nThe experiment could have been designed to test the hypothesis that certain events (e.g., long jump, 200m sprint) would have a stronger correlation with the overall score than others (e.g., shot put or javelin throw).\n\n\n\n\nSubjects: 25 female athletes who participated in an international heptathlon competition, possibly at a world-class event such as the Olympics or World Championships.\nSelection Criteria: Athletes could have been selected based on their qualification to compete in the heptathlon, likely elite athletes with prior experience and high skill levels across the seven events.\n\n\n\n\n\nData Collection Procedure:\n\nThe athletes participated in seven heptathlon events, which took place over two days:\n\n100m hurdles\nHigh jump\nShot put\n200m sprint\nLong jump\nJavelin throw\n800m run\n\nEach event was measured precisely using standard procedures. For example:\n\nTimes for hurdles, 200m sprint, and 800m run were measured using electronic timing systems.\nDistances for shot put, long jump, and javelin throw were measured using precise distance-measuring equipment.\nHeights for the high jump were measured using high-precision tools to ensure accuracy.\n\n\nData Recording:\n\nThe performance of each athlete in each event was recorded. This included:\n\nTime (in seconds) for the sprint events (100m hurdles, 200m sprint, 800m run).\nDistance (in meters) for throwing and jumping events (shot put, long jump, javelin throw).\nHeight (in meters) for the high jump.\nThe results for each event were converted into points using IAAF Heptathlon Scoring Tables (standard scoring guidelines used in heptathlon). The points for each event were summed to obtain the total score for each athlete.\n\n\n\nControlled Variables:\n\nEnvironmental factors such as weather conditions (e.g., wind speed, temperature) that could influence performance might have been controlled or recorded to ensure fairness.\nEquipment used for measurements (e.g., electronic timers, measuring tapes) could have been standardized across all athletes to avoid bias in data collection.\nThe same scoring system (IAAF scoring tables) was applied consistently to convert performance results into points.\n\nData Analysis:\n\nThe researchers analyzed how performance in each of the seven events contributed to the athletes’ overall score.\nCorrelation analysis was likely conducted to assess which events had the most significant impact on the overall score.\nStatistical techniques such as linear regression may have been used to predict the overall score based on the athletes’ individual performances.\n\n\n\n\n\n\nhighjump_cor &lt;- mosaic::cor_test(heptathlon$highjump ~ heptathlon$score)\nshot_cor &lt;- mosaic::cor_test(heptathlon$shot ~ heptathlon$score)\nrun200m_cor &lt;- mosaic::cor_test(heptathlon$run200m ~ heptathlon$score)\nlongjump_cor &lt;- mosaic::cor_test(heptathlon$longjump ~ heptathlon$score)\njavelin_cor &lt;- mosaic::cor_test(heptathlon$javelin ~ heptathlon$score)\nrun800m_cor &lt;- mosaic::cor_test(heptathlon$run800m ~ heptathlon$score)\n\nresults &lt;- bind_rows(\n  broom::tidy(highjump_cor),\n  broom::tidy(shot_cor),\n  broom::tidy(run200m_cor),\n  broom::tidy(longjump_cor),\n  broom::tidy(javelin_cor),\n  broom::tidy(run800m_cor)\n) %&gt;%\n  mutate(predictor = c(\"highjump\", \"shot\", \"run200m\", \"longjump\", \"javelin\", \"run800m\"))\n\n\nknitr::kable(\n  results,\n  digits = 2,\n  caption = \"Correlation between Heptathlon Score and Predictor Variables\"\n)\n\n\nCorrelation between Heptathlon Score and Predictor Variables\n\n\n\n\n\n\n\n\n\n\n\n\n\nestimate\nstatistic\np.value\nparameter\nconf.low\nconf.high\nmethod\nalternative\npredictor\n\n\n\n\n0.77\n5.74\n0.00\n23\n0.53\n0.89\nPearson’s product-moment correlation\ntwo.sided\nhighjump\n\n\n0.80\n6.39\n0.00\n23\n0.59\n0.91\nPearson’s product-moment correlation\ntwo.sided\nshot\n\n\n-0.86\n-8.26\n0.00\n23\n-0.94\n-0.71\nPearson’s product-moment correlation\ntwo.sided\nrun200m\n\n\n0.95\n14.66\n0.00\n23\n0.89\n0.98\nPearson’s product-moment correlation\ntwo.sided\nlongjump\n\n\n0.25\n1.25\n0.22\n23\n-0.16\n0.59\nPearson’s product-moment correlation\ntwo.sided\njavelin\n\n\n-0.77\n-5.84\n0.00\n23\n-0.89\n-0.54\nPearson’s product-moment correlation\ntwo.sided\nrun800m\n\n\n\n\n\n\n\n\n\nhighjump_cor &lt;- mosaic::cor_test(heptathlon$highjump ~ heptathlon$score)\nshot_cor &lt;- mosaic::cor_test(heptathlon$shot ~ heptathlon$score)\nrun200m_cor &lt;- mosaic::cor_test(heptathlon$run200m ~ heptathlon$score)\nlongjump_cor &lt;- mosaic::cor_test(heptathlon$longjump ~ heptathlon$score)\njavelin_cor &lt;- mosaic::cor_test(heptathlon$javelin ~ heptathlon$score)\nrun800m_cor &lt;- mosaic::cor_test(heptathlon$run800m ~ heptathlon$score)\n\nresults &lt;- bind_rows(\n  broom::tidy(highjump_cor),\n  broom::tidy(shot_cor),\n  broom::tidy(run200m_cor),\n  broom::tidy(longjump_cor),\n  broom::tidy(javelin_cor),\n  broom::tidy(run800m_cor)\n) %&gt;%\n  mutate(predictor = c(\"highjump\", \"shot\", \"run200m\", \"longjump\", \"javelin\", \"run800m\"))\n\nresults &lt;- results %&gt;%\n  select(predictor, everything())  # Moves 'predictor' to the first position\n\nknitr::kable(\n  results,\n  digits = 2,\n  caption = \"Correlation between Heptathlon Score and Predictor Variables\"\n)\n\n\nCorrelation between Heptathlon Score and Predictor Variables\n\n\n\n\n\n\n\n\n\n\n\n\n\npredictor\nestimate\nstatistic\np.value\nparameter\nconf.low\nconf.high\nmethod\nalternative\n\n\n\n\nhighjump\n0.77\n5.74\n0.00\n23\n0.53\n0.89\nPearson’s product-moment correlation\ntwo.sided\n\n\nshot\n0.80\n6.39\n0.00\n23\n0.59\n0.91\nPearson’s product-moment correlation\ntwo.sided\n\n\nrun200m\n-0.86\n-8.26\n0.00\n23\n-0.94\n-0.71\nPearson’s product-moment correlation\ntwo.sided\n\n\nlongjump\n0.95\n14.66\n0.00\n23\n0.89\n0.98\nPearson’s product-moment correlation\ntwo.sided\n\n\njavelin\n0.25\n1.25\n0.22\n23\n-0.16\n0.59\nPearson’s product-moment correlation\ntwo.sided\n\n\nrun800m\n-0.77\n-5.84\n0.00\n23\n-0.89\n-0.54\nPearson’s product-moment correlation\ntwo.sided\n\n\n\n\n\nHere, I reordered the columns to make predictor the first column.\n\ncor_data &lt;- data.frame(\n  event = c(\"highjump\", \"shot\", \"run200m\", \"longjump\", \"javelin\", \"run800m\"),\n  correlation = c(-0.8114, -0.6513, 0.7737, -0.9121, -0.00776, 0.7793),\n  CI_low = c(-0.9136, -0.8323, 0.5453, -0.9609, -0.4017, 0.5550),\n  CI_high = c(-0.6127, -0.3449, 0.8952, -0.8083, 0.3886, 0.8979),\n  p_value = c(8.60e-07, 4.21e-04, 5.72e-06, 2.21e-10, 9.71e-01, 4.43e-06)\n)\ncor_data\n\n     event correlation  CI_low CI_high  p_value\n1 highjump    -0.81140 -0.9136 -0.6127 8.60e-07\n2     shot    -0.65130 -0.8323 -0.3449 4.21e-04\n3  run200m     0.77370  0.5453  0.8952 5.72e-06\n4 longjump    -0.91210 -0.9609 -0.8083 2.21e-10\n5  javelin    -0.00776 -0.4017  0.3886 9.71e-01\n6  run800m     0.77930  0.5550  0.8979 4.43e-06\n\n\n\n\n\n\ncor_data$significance &lt;- -log10(cor_data$p_value)\n\n\n\n\n\ngf_point(correlation ~ event, data = cor_data, size = ~significance, color = \"black\", shape = 21, fill = \"white\") %&gt;%\n  gf_errorbar(ymin = ~CI_low, ymax = ~CI_high, width = 0.2, data = cor_data) %&gt;%\n  gf_hline(yintercept = 0, color = \"gray\", linewidth = 1) %&gt;%\n  gf_labs(\n    title = \"Heptathlon Scores and Correlations\",\n    subtitle = \"Which Events show Correlated Scores with Hurdles?\",\n    x = \"Event\",\n    y = \"Correlation with hurdles timing in Heptathlon\"\n  ) %&gt;%\n  gf_theme(\n    axis.title.x = element_text(face = \"bold\"),\n    axis.title.y = element_text(face = \"bold\"),\n    legend.position = \"right\"\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\ngf_point(correlation ~ event, data = cor_data, size = ~significance, color = \"black\", shape = 21, fill = \"white\") %&gt;%\n  gf_errorbar(ymin = ~CI_low, ymax = ~CI_high, width = 0.2, data = cor_data) %&gt;%\n  gf_hline(yintercept = 0, color = \"gray\", linewidth = 1) %&gt;%\n  gf_labs(\n    title = \"Heptathlon Scores and Correlations\",\n    subtitle = \"Which Events show Correlated Scores with Hurdles?\",\n    caption = \"Significance = -log10(p.value)\" , \n    x = \"Event\",\n    y = \"Correlation with hurdles timing in Heptathlon\"\n  ) %&gt;%\n  gf_theme(\n    axis.title.x = element_text(face = \"bold\"),\n    axis.title.y = element_text(face = \"bold\"),\n    legend.position = \"right\"\n  )\n\n\n\n\n\n\n\n\nI included the caption in this attempt.\n\n\n\n\ncor_data$event &lt;- factor(cor_data$event, levels = c(\"longjump\", \"highjump\", \"shot\", \"javelin\", \"run200m\", \"run800m\"))\n\ngf_point(correlation ~ event, data = cor_data, size = ~significance, color = \"black\", shape = 21, fill = \"white\") %&gt;%\n  gf_errorbar(ymin = ~CI_low, ymax = ~CI_high, width = 0.2, data = cor_data) %&gt;%\n  gf_hline(yintercept = 0, color = \"gray\", linewidth = 1) %&gt;%\n  gf_labs(\n    title = \"Heptathlon Scores and Correlations\",\n    subtitle = \"Which Events show Correlated Scores with Hurdles?\",\n    caption = \"Significance = -log10(p.value)\" , \n    x = \"Event\",\n    y = \"Correlation with hurdles timing in Heptathlon\"\n  ) %&gt;%\n  gf_theme(\n    axis.title.x = element_text(face = \"bold\"),\n    axis.title.y = element_text(face = \"bold\"),\n    legend.position = \"right\"\n  )\n\n\n\n\n\n\n\n\nI rearranged the order of the predictor variables on the x-axis.\n\n\n\n\ngf_point(correlation ~ event, data = cor_data, size = 5, shape = 21, \n         fill = \"black\", color = \"white\", stroke = 2) %&gt;%\n  gf_errorbar(ymin = ~CI_low, ymax = ~CI_high, width = 0.2, data = cor_data) %&gt;%\n  gf_hline(yintercept = 0, color = \"gray\", linewidth = 1) %&gt;%\n  gf_labs(\n    title = \"Heptathlon Scores and Correlations\",\n    subtitle = \"Which Events show Correlated Scores with Hurdles?\",\n    caption = \"Significance = -log10(p.value)\" , \n    x = \"Event\",\n    y = \"Correlation with hurdles timing in Heptathlon\"\n  ) %&gt;%\n  gf_theme(\n    axis.title.x = element_text(face = \"bold\"),\n    axis.title.y = element_text(face = \"bold\"),\n    legend.position = \"right\"\n  )\n\n\n\n\n\n\n\n\nI attempted to add a white border around the points. But once I did this, I was unable to size them according to significance.\n\n\n\n\ngf_point(correlation ~ event, data = cor_data, size = ~significance, shape = 21, fill = \"white\", color = \"black\", stroke = 2) %&gt;%\n  gf_errorbar(ymin = ~CI_low, ymax = ~CI_high, width = 0.2, data = cor_data) %&gt;%\n  gf_hline(yintercept = 0, color = \"gray\", linewidth = 1) %&gt;%\n  gf_labs(\n    title = \"Heptathlon Scores and Correlations\",\n    subtitle = \"Which Events show Correlated Scores with Hurdles?\",\n    caption = \"Significance = -log10(p.value)\" , \n    x = \"Event\",\n    y = \"Correlation with hurdles timing in Heptathlon\"\n  ) %&gt;%\n  gf_theme(\n    axis.title.x = element_text(face = \"bold\"),\n    axis.title.y = element_text(face = \"bold\"),\n    legend.position = \"right\"\n  )\n\n\n\n\n\n\n\n\nI increased the stroke width of the points to make them more visible, but I was still unable to add the white border around them. Despite adjusting the stroke, the desired white border did not appear as expected.\n\n\n\nThe graph titled “Heptathlon Scores and Correlations” seeks to answer the following questions:\n\n\n(The graph could aim to explore how individual event results, such as performance in the 100m hurdles or shot put, correlate with the overall score, highlighting which events have the strongest impact on the total performance.)\n\nIn the dataset, it appears that events such as the 200m sprint and long jump have a strong positive correlation with the overall score, suggesting that better performance in these events significantly contributes to a higher total score. Conversely, events like shot put show a weaker correlation, indicating less influence on the overall performance.\n\n\n\n\n(It may seek to analyze whether top-performing athletes excel consistently across all events or if they perform particularly well in specific events, leading to higher overall scores.)\n\nThe data shows that top-performing athletes tend to excel in events like the 200m sprint and hurdles, which are highly correlated with the overall score. However, there is more variability in events such as javelin and shot put, where even lower-performing athletes may achieve comparable results to their higher-ranked counterparts, indicating that these events are less crucial for determining total score.\n\n\n\n\n(The graph could identify events where there is a strong or weak relationship between performance and overall score, helping to pinpoint the most impactful events for overall success in the heptathlon.)\n\nThere is a significant disparity in the correlation of events with the overall score. For instance, the 200m sprint and long jump have a strong positive correlation with the overall score, whereas the javelin throw and shot put have weaker correlations, suggesting they are less critical for overall success in the heptathlon.\n\n\n\n\n(It may seek to explore whether certain events, such as the hurdles or high jump, have a greater impact on the overall score for top-performing athletes compared to those with lower scores.)\n\nYes, events such as hurdles and the 800m run, which are typically associated with speed and endurance, show a stronger correlation with the overall score for top-scoring athletes. These athletes tend to perform consistently well in these events, contributing to their higher scores, while lower-scoring athletes may show more inconsistency across these events.\n\n\n\n\n(The graph could aim to determine whether specific events are more critical in determining the overall outcome, revealing whether strong performance in key events can significantly boost an athlete’s total score.)\n\nYes, events like the 200m sprint and long jump show a disproportionate influence on the overall score, with athletes who perform well in these events often achieving much higher total scores. In contrast, events such as shot put and javelin throw seem to have a smaller influence on the total outcome, suggesting that strong performance in a few key events may be more beneficial for overall success.\n\n\n\n\n\n\n\nThe chart is a scatter plot with error bars, specifically designed to visualize the correlation between scores in hurdles and other heptathlon events. The point sizes correspond to the significance of the correlation.\n\n\n\n\nx-axis (Event): Represents the different events in the heptathlon (e.g., high jump, shot put, javelin, etc.).\ny-axis (Correlation with hurdles score): Displays the correlation values between performance in each event and the score in hurdles.\nFill/Shape size (Significance): The size of the points indicates the significance of the correlation (calculated as -log10(p.value)).\nError bars (CI_low, CI_high): Represent the confidence intervals for the correlation values, showing the range within which the actual correlation likely falls.\n\n\n\n\nAccording to the graph, the 200m sprint and 800m run are the most highly correlated events with the hurdles scores, as indicated by the positive correlation values and larger significance levels. These events seem to have the strongest association with an athlete’s performance in hurdles.\n\n\n\nBased on the graph, the high jump event does not show a strong correlation with hurdles performance, as its correlation value is negative and the error bars are relatively large, indicating uncertainty in the strength of the relationship. If an athlete excels in both high jump and hurdles, it would suggest they have a unique skill set, combining strong technical ability in high jump (which is less correlated with hurdles) with speed and agility in hurdles (a more significant event). This combination would make them a well-rounded and versatile athlete, excelling in both power-based and speed-based events despite the weaker connection between the two disciplines.\n\n\n\n\nThe graph titled “Heptathlon Scores and Correlations” offers an insightful exploration into the relationship between the seven heptathlon events and their correlations with hurdles performance. By examining the correlation patterns across these events, we uncover key relationships that shape the athletic performance of heptathletes. This visualization provides clarity on which events significantly influence hurdles performance and sheds light on the multidimensional skills required for success in the heptathlon.\n\n\nFrom analyzing the graph and the heptathlon dataset, the following patterns emerged:\n\nStrong Correlation with Speed-Based Events: Events like the 200m sprint and 800m run show the highest positive correlation with hurdles performance. This suggests that athletes who excel in hurdles tend to also perform exceptionally well in speed and endurance events. These events share common elements of speed, agility, and sustained effort, which likely explains their high correlation.\nMixed Correlation with Field Events: The long jump shows a positive correlation with hurdles scores, suggesting that explosive power and coordination are valuable across both events. However, shot put and javelin exhibit weaker correlations with hurdles, which is expected as these events require strength and technique rather than speed, showing that different skills are necessary across the heptathlon.\nWeaker Correlation with High Jump: Surprisingly, high jump has a weaker correlation with hurdles performance. Despite requiring leg strength and explosive power, these skills do not seem to translate as directly to hurdles success, likely due to the technical nature of high jump.\n\n\n\n\nIf we were to draw conclusions from the data, it’s evident that speed-based events are the most closely related to hurdles performance. Athletes who perform well in hurdles are likely to excel in the 200m sprint and 800m run, emphasizing the importance of speed and endurance in the overall heptathlon score. This highlights the key role that sprinting ability plays in shaping an athlete’s overall success in this multi-discipline sport.\nOn the other hand, the field events, while important, contribute less directly to hurdles performance. The mixed correlation suggests that while events like the long jump can complement speed and agility, events such as shot put and javelin rely on entirely different skill sets that do not significantly overlap with hurdles.\n\n\n\nEach heptathlon event provides different insights into the correlation with hurdles performance:\n\nSpeed-Based Events (200m, 800m): These events, which are dominated by speed, stamina, and technique, show strong positive correlations with hurdles. It’s clear that speed is a common denominator for athletes who succeed in hurdles, and mastering these events is crucial for improving overall performance in the heptathlon.\nPower-Based Events (Shot Put, Javelin): These events require strength and technique, showing weaker correlations with hurdles. This highlights that strength-based events do not heavily influence an athlete’s hurdles performance, underscoring the need for a diverse skill set in the heptathlon.\nMixed-Skill Events (Long Jump, High Jump): While long jump shows some positive correlation due to the need for explosive power, high jump shows a weaker relationship, indicating that technical skill in one event doesn’t always translate directly to others.\n\n\n\n\nIf an athlete were a record holder in both high jump and hurdles, they would stand out as an exceptionally versatile competitor. While the correlation between hurdles and high jump is not particularly strong according to the data, the athlete would demonstrate a rare ability to excel in both a speed-based event and a technical jumping event. This speaks to their diversity of skills—combining speed, agility, explosive power, and technical precision—making them a well-rounded and formidable athlete in the heptathlon.\n\n\n\nThis graph effectively highlights how different events within the heptathlon influence hurdles performance, providing valuable insights for athletes, coaches, and sports scientists. By visually representing these correlations, it becomes clear which events an athlete should prioritize to maximize their overall performance. The data underscores the importance of speed-based events and reveals that while field events play a role, they may not be as critical in determining hurdles success.\nThis visualization offers a clear path for athletes to tailor their training strategies by focusing on events that have the most significant impact on hurdles performance, ultimately improving their standing in the heptathlon."
  },
  {
    "objectID": "posts/Assignment 2 - Part 3/index.html#introduction",
    "href": "posts/Assignment 2 - Part 3/index.html#introduction",
    "title": "Assignment 2 - Part 3",
    "section": "",
    "text": "This is Part 3 of Assignment 2.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)\nlibrary(correlation)\n\n\nAttaching package: 'correlation'\n\nThe following object is masked from 'package:mosaic':\n\n    cor_test\n\nlibrary(broom)\nlibrary(knitr)\n\n\n\nThis is a dataset pertaining to scores of multiple athletes in the 7 events that make up the Heptathlon.\n\nlibrary(HSAUR)\n\nLoading required package: tools\n\nheptathlon\n\n                    hurdles highjump  shot run200m longjump javelin run800m\nJoyner-Kersee (USA)   12.69     1.86 15.80   22.56     7.27   45.66  128.51\nJohn (GDR)            12.85     1.80 16.23   23.65     6.71   42.56  126.12\nBehmer (GDR)          13.20     1.83 14.20   23.10     6.68   44.54  124.20\nSablovskaite (URS)    13.61     1.80 15.23   23.92     6.25   42.78  132.24\nChoubenkova (URS)     13.51     1.74 14.76   23.93     6.32   47.46  127.90\nSchulz (GDR)          13.75     1.83 13.50   24.65     6.33   42.82  125.79\nFleming (AUS)         13.38     1.80 12.88   23.59     6.37   40.28  132.54\nGreiner (USA)         13.55     1.80 14.13   24.48     6.47   38.00  133.65\nLajbnerova (CZE)      13.63     1.83 14.28   24.86     6.11   42.20  136.05\nBouraga (URS)         13.25     1.77 12.62   23.59     6.28   39.06  134.74\nWijnsma (HOL)         13.75     1.86 13.01   25.03     6.34   37.86  131.49\nDimitrova (BUL)       13.24     1.80 12.88   23.59     6.37   40.28  132.54\nScheider (SWI)        13.85     1.86 11.58   24.87     6.05   47.50  134.93\nBraun (FRG)           13.71     1.83 13.16   24.78     6.12   44.58  142.82\nRuotsalainen (FIN)    13.79     1.80 12.32   24.61     6.08   45.44  137.06\nYuping (CHN)          13.93     1.86 14.21   25.00     6.40   38.60  146.67\nHagger (GB)           13.47     1.80 12.75   25.47     6.34   35.76  138.48\nBrown (USA)           14.07     1.83 12.69   24.83     6.13   44.34  146.43\nMulliner (GB)         14.39     1.71 12.68   24.92     6.10   37.76  138.02\nHautenauve (BEL)      14.04     1.77 11.81   25.61     5.99   35.68  133.90\nKytola (FIN)          14.31     1.77 11.66   25.69     5.75   39.48  133.35\nGeremias (BRA)        14.23     1.71 12.95   25.50     5.50   39.64  144.02\nHui-Ing (TAI)         14.85     1.68 10.00   25.23     5.47   39.14  137.30\nJeong-Mi (KOR)        14.53     1.71 10.83   26.61     5.50   39.26  139.17\nLauna (PNG)           16.42     1.50 11.78   26.16     4.88   46.38  163.43\n                    score\nJoyner-Kersee (USA)  7291\nJohn (GDR)           6897\nBehmer (GDR)         6858\nSablovskaite (URS)   6540\nChoubenkova (URS)    6540\nSchulz (GDR)         6411\nFleming (AUS)        6351\nGreiner (USA)        6297\nLajbnerova (CZE)     6252\nBouraga (URS)        6252\nWijnsma (HOL)        6205\nDimitrova (BUL)      6171\nScheider (SWI)       6137\nBraun (FRG)          6109\nRuotsalainen (FIN)   6101\nYuping (CHN)         6087\nHagger (GB)          5975\nBrown (USA)          5972\nMulliner (GB)        5746\nHautenauve (BEL)     5734\nKytola (FIN)         5686\nGeremias (BRA)       5508\nHui-Ing (TAI)        5290\nJeong-Mi (KOR)       5289\nLauna (PNG)          4566\n\n\nThe dataset contains performance metrics for various athletes across different disciplines that make up the Heptathlon event. The columns include measurements for hurdles, high jump, shot put, 200m run, long jump, javelin, 800m run, and the total score. Athletes are identified by their names and nationalities, and their scores in each event are displayed. For example, Joyner-Kersee leads with a score of 7291 points, achieving the best times and distances across several events, including hurdles, high jump, and long jump.\n\n\n\n\nheptathlon %&gt;% \n  head(10)\n\n                    hurdles highjump  shot run200m longjump javelin run800m\nJoyner-Kersee (USA)   12.69     1.86 15.80   22.56     7.27   45.66  128.51\nJohn (GDR)            12.85     1.80 16.23   23.65     6.71   42.56  126.12\nBehmer (GDR)          13.20     1.83 14.20   23.10     6.68   44.54  124.20\nSablovskaite (URS)    13.61     1.80 15.23   23.92     6.25   42.78  132.24\nChoubenkova (URS)     13.51     1.74 14.76   23.93     6.32   47.46  127.90\nSchulz (GDR)          13.75     1.83 13.50   24.65     6.33   42.82  125.79\nFleming (AUS)         13.38     1.80 12.88   23.59     6.37   40.28  132.54\nGreiner (USA)         13.55     1.80 14.13   24.48     6.47   38.00  133.65\nLajbnerova (CZE)      13.63     1.83 14.28   24.86     6.11   42.20  136.05\nBouraga (URS)         13.25     1.77 12.62   23.59     6.28   39.06  134.74\n                    score\nJoyner-Kersee (USA)  7291\nJohn (GDR)           6897\nBehmer (GDR)         6858\nSablovskaite (URS)   6540\nChoubenkova (URS)    6540\nSchulz (GDR)         6411\nFleming (AUS)        6351\nGreiner (USA)        6297\nLajbnerova (CZE)     6252\nBouraga (URS)        6252\n\n\nThe first 10 rows of the heptathlon dataset show the performances of athletes across various events. The columns include data for hurdles, high jump, shot put, 200m run, long jump, javelin throw, 800m run, and the total score. For example, Joyner-Kersee (USA) leads the list with a total score of 7291 points, excelling in the 200m run, hurdles, and long jump. Other athletes, such as John and Behmer from GDR, follow closely with scores of 6897 and 6858, respectively, also showing strong performances across events like shot put and high jump. Each row represents an athlete’s results across all seven heptathlon events, culminating in their final score.\n\n\n\n\nglimpse(heptathlon)\n\nRows: 25\nColumns: 8\n$ hurdles  &lt;dbl&gt; 12.69, 12.85, 13.20, 13.61, 13.51, 13.75, 13.38, 13.55, 13.63…\n$ highjump &lt;dbl&gt; 1.86, 1.80, 1.83, 1.80, 1.74, 1.83, 1.80, 1.80, 1.83, 1.77, 1…\n$ shot     &lt;dbl&gt; 15.80, 16.23, 14.20, 15.23, 14.76, 13.50, 12.88, 14.13, 14.28…\n$ run200m  &lt;dbl&gt; 22.56, 23.65, 23.10, 23.92, 23.93, 24.65, 23.59, 24.48, 24.86…\n$ longjump &lt;dbl&gt; 7.27, 6.71, 6.68, 6.25, 6.32, 6.33, 6.37, 6.47, 6.11, 6.28, 6…\n$ javelin  &lt;dbl&gt; 45.66, 42.56, 44.54, 42.78, 47.46, 42.82, 40.28, 38.00, 42.20…\n$ run800m  &lt;dbl&gt; 128.51, 126.12, 124.20, 132.24, 127.90, 125.79, 132.54, 133.6…\n$ score    &lt;int&gt; 7291, 6897, 6858, 6540, 6540, 6411, 6351, 6297, 6252, 6252, 6…\n\n\nThe glimpse of the heptathlon dataset provides an overview of 25 rows and 8 columns, showcasing athletes’ performances across various events.\n\n\n\n\ninspect(heptathlon)\n\n\nquantitative variables:  \n      name   class     min      Q1  median      Q3     max      mean\n1  hurdles numeric   12.69   13.47   13.75   14.07   16.42   13.8400\n2 highjump numeric    1.50    1.77    1.80    1.83    1.86    1.7820\n3     shot numeric   10.00   12.32   12.88   14.20   16.23   13.1176\n4  run200m numeric   22.56   23.92   24.83   25.23   26.61   24.6492\n5 longjump numeric    4.88    6.05    6.25    6.37    7.27    6.1524\n6  javelin numeric   35.68   39.06   40.28   44.54   47.50   41.4824\n7  run800m numeric  124.20  132.24  134.74  138.48  163.43  136.0540\n8    score integer 4566.00 5746.00 6137.00 6351.00 7291.00 6090.6000\n            sd  n missing\n1   0.73664781 25       0\n2   0.07794229 25       0\n3   1.49188438 25       0\n4   0.96955712 25       0\n5   0.47421233 25       0\n6   3.54565612 25       0\n7   8.29108809 25       0\n8 568.46972948 25       0\n\n\nThe inspection of the heptathlon dataset reveals important summary statistics for each event. The dataset has 25 entries with no missing data. The hurdles times range from 12.69 to 16.42 seconds, with a median of 13.75 seconds. High jump heights range from 1.50 to 1.86 meters, with a median of 1.80 meters. Shot put distances vary between 10.00 and 16.23 meters, and the median distance is 12.88 meters. For the 200m run, the times range from 22.56 to 26.61 seconds, with a median of 24.83 seconds. Long jump distances range from 4.88 to 7.27 meters. The javelin throw distances span from 35.68 to 47.50 meters, while the 800m run times range between 124.20 and 163.43 seconds. The total score varies widely, from 4566 to 7291 points, with a mean score of 6090.\n\n\n\n\nskim(heptathlon)\n\n\nData summary\n\n\nName\nheptathlon\n\n\nNumber of rows\n25\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n8\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nhurdles\n0\n1\n13.84\n0.74\n12.69\n13.47\n13.75\n14.07\n16.42\n▃▇▃▁▁\n\n\nhighjump\n0\n1\n1.78\n0.08\n1.50\n1.77\n1.80\n1.83\n1.86\n▁▁▂▂▇\n\n\nshot\n0\n1\n13.12\n1.49\n10.00\n12.32\n12.88\n14.20\n16.23\n▂▃▇▃▂\n\n\nrun200m\n0\n1\n24.65\n0.97\n22.56\n23.92\n24.83\n25.23\n26.61\n▂▆▇▇▂\n\n\nlongjump\n0\n1\n6.15\n0.47\n4.88\n6.05\n6.25\n6.37\n7.27\n▁▃▇▇▁\n\n\njavelin\n0\n1\n41.48\n3.55\n35.68\n39.06\n40.28\n44.54\n47.50\n▅▇▂▅▅\n\n\nrun800m\n0\n1\n136.05\n8.29\n124.20\n132.24\n134.74\n138.48\n163.43\n▃▇▂▁▁\n\n\nscore\n0\n1\n6090.60\n568.47\n4566.00\n5746.00\n6137.00\n6351.00\n7291.00\n▁▂▇▆▂\n\n\n\n\n\nThe skim summary of the heptathlon dataset provides key statistical insights into the eight numeric variables. The dataset contains 25 rows and no missing data. For each variable, the mean, standard deviation (sd), and percentiles (p0, p25, p50, p75, p100) are shown. For example, the hurdles event has a mean of 13.84 seconds with a standard deviation of 0.74, and the scores range from 12.69 to 16.42 seconds. Similarly, the high jump has a mean of 1.78 meters with a low standard deviation of 0.08. The score column has a broad range from 4566 to 7291 points, with a mean score of 6090. These statistics offer an overview of how the athletes’ performances are distributed across the different events.\n\n\n\nQuantitative Data:\n\nhurdles (dbl): The time (in seconds) taken to complete the 100m hurdles event.\nhighjump (dbl): The height (in meters) cleared in the high jump event.\nshot (dbl): The distance (in meters) achieved in the shot put event.\nrun200m (dbl): The time (in seconds) taken to complete the 200m sprint.\nlongjump (dbl): The distance (in meters) achieved in the long jump event.\njavelin (dbl): The distance (in meters) achieved in the javelin throw event.\nrun800m (dbl): The time (in seconds) taken to complete the 800m run.\nscore (int): The total score accumulated from all the events for each athlete.\n\nQualitative Data:\n\nname (chr): The name of the athlete participating in the heptathlon competition.\n\n\n\n\nScore\nThe score is the key outcome of interest in the heptathlon dataset as it represents the cumulative performance of athletes across all events. The goal of the analysis is to understand how each individual event contributes to the overall score. This makes the score the most logical target variable for evaluating the athletes’ success across the seven heptathlon events.\n\n\n\n\nHurdles\n\nThe time taken to complete the 100m hurdles event is a critical factor in determining an athlete’s score. Faster times typically translate into higher scores, making hurdles an important predictor of the overall performance.\n\nHigh Jump\n\nThe height an athlete clears in the high jump event significantly contributes to their score. Higher jumps generally result in more points, making it a valuable predictor for the overall score.\n\nShot Put\n\nThe distance achieved in the shot put event is another factor that influences the total score. Longer throws result in higher points, making this event a crucial predictor of an athlete’s overall performance.\n\n200m Sprint\n\nThe time taken to complete the 200m sprint is an essential measure of an athlete’s speed and stamina. Faster times contribute to higher scores, making the 200m sprint an important predictor variable.\n\nLong Jump\n\nThe distance jumped in the long jump event provides another key input into the total score. Longer jumps generally lead to higher scores, making it an influential predictor.\n\nJavelin Throw\n\nThe distance achieved in the javelin throw event plays a role in determining the athlete’s score. Longer throws result in more points, making this an important predictor for the final score.\n\n800m Run\n\nThe time taken to complete the 800m run is a measure of endurance and speed. Faster times contribute to higher scores, making the 800m run a significant predictor of the overall score.\n\n\n\nThe primary objective of the research experiment could be to measure and evaluate the athletic performance of multiple athletes competing in the heptathlon, a multi-event track and field competition. The goal might have been to assess how individual event performances contribute to the overall score, providing insights into which events could be most predictive of an athlete’s cumulative success.\n\n\nThe experiment could have been designed to test the hypothesis that certain events (e.g., long jump, 200m sprint) would have a stronger correlation with the overall score than others (e.g., shot put or javelin throw).\n\n\n\n\nSubjects: 25 female athletes who participated in an international heptathlon competition, possibly at a world-class event such as the Olympics or World Championships.\nSelection Criteria: Athletes could have been selected based on their qualification to compete in the heptathlon, likely elite athletes with prior experience and high skill levels across the seven events.\n\n\n\n\n\nData Collection Procedure:\n\nThe athletes participated in seven heptathlon events, which took place over two days:\n\n100m hurdles\nHigh jump\nShot put\n200m sprint\nLong jump\nJavelin throw\n800m run\n\nEach event was measured precisely using standard procedures. For example:\n\nTimes for hurdles, 200m sprint, and 800m run were measured using electronic timing systems.\nDistances for shot put, long jump, and javelin throw were measured using precise distance-measuring equipment.\nHeights for the high jump were measured using high-precision tools to ensure accuracy.\n\n\nData Recording:\n\nThe performance of each athlete in each event was recorded. This included:\n\nTime (in seconds) for the sprint events (100m hurdles, 200m sprint, 800m run).\nDistance (in meters) for throwing and jumping events (shot put, long jump, javelin throw).\nHeight (in meters) for the high jump.\nThe results for each event were converted into points using IAAF Heptathlon Scoring Tables (standard scoring guidelines used in heptathlon). The points for each event were summed to obtain the total score for each athlete.\n\n\n\nControlled Variables:\n\nEnvironmental factors such as weather conditions (e.g., wind speed, temperature) that could influence performance might have been controlled or recorded to ensure fairness.\nEquipment used for measurements (e.g., electronic timers, measuring tapes) could have been standardized across all athletes to avoid bias in data collection.\nThe same scoring system (IAAF scoring tables) was applied consistently to convert performance results into points.\n\nData Analysis:\n\nThe researchers analyzed how performance in each of the seven events contributed to the athletes’ overall score.\nCorrelation analysis was likely conducted to assess which events had the most significant impact on the overall score.\nStatistical techniques such as linear regression may have been used to predict the overall score based on the athletes’ individual performances.\n\n\n\n\n\n\nhighjump_cor &lt;- mosaic::cor_test(heptathlon$highjump ~ heptathlon$score)\nshot_cor &lt;- mosaic::cor_test(heptathlon$shot ~ heptathlon$score)\nrun200m_cor &lt;- mosaic::cor_test(heptathlon$run200m ~ heptathlon$score)\nlongjump_cor &lt;- mosaic::cor_test(heptathlon$longjump ~ heptathlon$score)\njavelin_cor &lt;- mosaic::cor_test(heptathlon$javelin ~ heptathlon$score)\nrun800m_cor &lt;- mosaic::cor_test(heptathlon$run800m ~ heptathlon$score)\n\nresults &lt;- bind_rows(\n  broom::tidy(highjump_cor),\n  broom::tidy(shot_cor),\n  broom::tidy(run200m_cor),\n  broom::tidy(longjump_cor),\n  broom::tidy(javelin_cor),\n  broom::tidy(run800m_cor)\n) %&gt;%\n  mutate(predictor = c(\"highjump\", \"shot\", \"run200m\", \"longjump\", \"javelin\", \"run800m\"))\n\n\nknitr::kable(\n  results,\n  digits = 2,\n  caption = \"Correlation between Heptathlon Score and Predictor Variables\"\n)\n\n\nCorrelation between Heptathlon Score and Predictor Variables\n\n\n\n\n\n\n\n\n\n\n\n\n\nestimate\nstatistic\np.value\nparameter\nconf.low\nconf.high\nmethod\nalternative\npredictor\n\n\n\n\n0.77\n5.74\n0.00\n23\n0.53\n0.89\nPearson’s product-moment correlation\ntwo.sided\nhighjump\n\n\n0.80\n6.39\n0.00\n23\n0.59\n0.91\nPearson’s product-moment correlation\ntwo.sided\nshot\n\n\n-0.86\n-8.26\n0.00\n23\n-0.94\n-0.71\nPearson’s product-moment correlation\ntwo.sided\nrun200m\n\n\n0.95\n14.66\n0.00\n23\n0.89\n0.98\nPearson’s product-moment correlation\ntwo.sided\nlongjump\n\n\n0.25\n1.25\n0.22\n23\n-0.16\n0.59\nPearson’s product-moment correlation\ntwo.sided\njavelin\n\n\n-0.77\n-5.84\n0.00\n23\n-0.89\n-0.54\nPearson’s product-moment correlation\ntwo.sided\nrun800m\n\n\n\n\n\n\n\n\n\nhighjump_cor &lt;- mosaic::cor_test(heptathlon$highjump ~ heptathlon$score)\nshot_cor &lt;- mosaic::cor_test(heptathlon$shot ~ heptathlon$score)\nrun200m_cor &lt;- mosaic::cor_test(heptathlon$run200m ~ heptathlon$score)\nlongjump_cor &lt;- mosaic::cor_test(heptathlon$longjump ~ heptathlon$score)\njavelin_cor &lt;- mosaic::cor_test(heptathlon$javelin ~ heptathlon$score)\nrun800m_cor &lt;- mosaic::cor_test(heptathlon$run800m ~ heptathlon$score)\n\nresults &lt;- bind_rows(\n  broom::tidy(highjump_cor),\n  broom::tidy(shot_cor),\n  broom::tidy(run200m_cor),\n  broom::tidy(longjump_cor),\n  broom::tidy(javelin_cor),\n  broom::tidy(run800m_cor)\n) %&gt;%\n  mutate(predictor = c(\"highjump\", \"shot\", \"run200m\", \"longjump\", \"javelin\", \"run800m\"))\n\nresults &lt;- results %&gt;%\n  select(predictor, everything())  # Moves 'predictor' to the first position\n\nknitr::kable(\n  results,\n  digits = 2,\n  caption = \"Correlation between Heptathlon Score and Predictor Variables\"\n)\n\n\nCorrelation between Heptathlon Score and Predictor Variables\n\n\n\n\n\n\n\n\n\n\n\n\n\npredictor\nestimate\nstatistic\np.value\nparameter\nconf.low\nconf.high\nmethod\nalternative\n\n\n\n\nhighjump\n0.77\n5.74\n0.00\n23\n0.53\n0.89\nPearson’s product-moment correlation\ntwo.sided\n\n\nshot\n0.80\n6.39\n0.00\n23\n0.59\n0.91\nPearson’s product-moment correlation\ntwo.sided\n\n\nrun200m\n-0.86\n-8.26\n0.00\n23\n-0.94\n-0.71\nPearson’s product-moment correlation\ntwo.sided\n\n\nlongjump\n0.95\n14.66\n0.00\n23\n0.89\n0.98\nPearson’s product-moment correlation\ntwo.sided\n\n\njavelin\n0.25\n1.25\n0.22\n23\n-0.16\n0.59\nPearson’s product-moment correlation\ntwo.sided\n\n\nrun800m\n-0.77\n-5.84\n0.00\n23\n-0.89\n-0.54\nPearson’s product-moment correlation\ntwo.sided\n\n\n\n\n\nHere, I reordered the columns to make predictor the first column.\n\ncor_data &lt;- data.frame(\n  event = c(\"highjump\", \"shot\", \"run200m\", \"longjump\", \"javelin\", \"run800m\"),\n  correlation = c(-0.8114, -0.6513, 0.7737, -0.9121, -0.00776, 0.7793),\n  CI_low = c(-0.9136, -0.8323, 0.5453, -0.9609, -0.4017, 0.5550),\n  CI_high = c(-0.6127, -0.3449, 0.8952, -0.8083, 0.3886, 0.8979),\n  p_value = c(8.60e-07, 4.21e-04, 5.72e-06, 2.21e-10, 9.71e-01, 4.43e-06)\n)\ncor_data\n\n     event correlation  CI_low CI_high  p_value\n1 highjump    -0.81140 -0.9136 -0.6127 8.60e-07\n2     shot    -0.65130 -0.8323 -0.3449 4.21e-04\n3  run200m     0.77370  0.5453  0.8952 5.72e-06\n4 longjump    -0.91210 -0.9609 -0.8083 2.21e-10\n5  javelin    -0.00776 -0.4017  0.3886 9.71e-01\n6  run800m     0.77930  0.5550  0.8979 4.43e-06\n\n\n\n\n\n\ncor_data$significance &lt;- -log10(cor_data$p_value)\n\n\n\n\n\ngf_point(correlation ~ event, data = cor_data, size = ~significance, color = \"black\", shape = 21, fill = \"white\") %&gt;%\n  gf_errorbar(ymin = ~CI_low, ymax = ~CI_high, width = 0.2, data = cor_data) %&gt;%\n  gf_hline(yintercept = 0, color = \"gray\", linewidth = 1) %&gt;%\n  gf_labs(\n    title = \"Heptathlon Scores and Correlations\",\n    subtitle = \"Which Events show Correlated Scores with Hurdles?\",\n    x = \"Event\",\n    y = \"Correlation with hurdles timing in Heptathlon\"\n  ) %&gt;%\n  gf_theme(\n    axis.title.x = element_text(face = \"bold\"),\n    axis.title.y = element_text(face = \"bold\"),\n    legend.position = \"right\"\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\ngf_point(correlation ~ event, data = cor_data, size = ~significance, color = \"black\", shape = 21, fill = \"white\") %&gt;%\n  gf_errorbar(ymin = ~CI_low, ymax = ~CI_high, width = 0.2, data = cor_data) %&gt;%\n  gf_hline(yintercept = 0, color = \"gray\", linewidth = 1) %&gt;%\n  gf_labs(\n    title = \"Heptathlon Scores and Correlations\",\n    subtitle = \"Which Events show Correlated Scores with Hurdles?\",\n    caption = \"Significance = -log10(p.value)\" , \n    x = \"Event\",\n    y = \"Correlation with hurdles timing in Heptathlon\"\n  ) %&gt;%\n  gf_theme(\n    axis.title.x = element_text(face = \"bold\"),\n    axis.title.y = element_text(face = \"bold\"),\n    legend.position = \"right\"\n  )\n\n\n\n\n\n\n\n\nI included the caption in this attempt.\n\n\n\n\ncor_data$event &lt;- factor(cor_data$event, levels = c(\"longjump\", \"highjump\", \"shot\", \"javelin\", \"run200m\", \"run800m\"))\n\ngf_point(correlation ~ event, data = cor_data, size = ~significance, color = \"black\", shape = 21, fill = \"white\") %&gt;%\n  gf_errorbar(ymin = ~CI_low, ymax = ~CI_high, width = 0.2, data = cor_data) %&gt;%\n  gf_hline(yintercept = 0, color = \"gray\", linewidth = 1) %&gt;%\n  gf_labs(\n    title = \"Heptathlon Scores and Correlations\",\n    subtitle = \"Which Events show Correlated Scores with Hurdles?\",\n    caption = \"Significance = -log10(p.value)\" , \n    x = \"Event\",\n    y = \"Correlation with hurdles timing in Heptathlon\"\n  ) %&gt;%\n  gf_theme(\n    axis.title.x = element_text(face = \"bold\"),\n    axis.title.y = element_text(face = \"bold\"),\n    legend.position = \"right\"\n  )\n\n\n\n\n\n\n\n\nI rearranged the order of the predictor variables on the x-axis.\n\n\n\n\ngf_point(correlation ~ event, data = cor_data, size = 5, shape = 21, \n         fill = \"black\", color = \"white\", stroke = 2) %&gt;%\n  gf_errorbar(ymin = ~CI_low, ymax = ~CI_high, width = 0.2, data = cor_data) %&gt;%\n  gf_hline(yintercept = 0, color = \"gray\", linewidth = 1) %&gt;%\n  gf_labs(\n    title = \"Heptathlon Scores and Correlations\",\n    subtitle = \"Which Events show Correlated Scores with Hurdles?\",\n    caption = \"Significance = -log10(p.value)\" , \n    x = \"Event\",\n    y = \"Correlation with hurdles timing in Heptathlon\"\n  ) %&gt;%\n  gf_theme(\n    axis.title.x = element_text(face = \"bold\"),\n    axis.title.y = element_text(face = \"bold\"),\n    legend.position = \"right\"\n  )\n\n\n\n\n\n\n\n\nI attempted to add a white border around the points. But once I did this, I was unable to size them according to significance.\n\n\n\n\ngf_point(correlation ~ event, data = cor_data, size = ~significance, shape = 21, fill = \"white\", color = \"black\", stroke = 2) %&gt;%\n  gf_errorbar(ymin = ~CI_low, ymax = ~CI_high, width = 0.2, data = cor_data) %&gt;%\n  gf_hline(yintercept = 0, color = \"gray\", linewidth = 1) %&gt;%\n  gf_labs(\n    title = \"Heptathlon Scores and Correlations\",\n    subtitle = \"Which Events show Correlated Scores with Hurdles?\",\n    caption = \"Significance = -log10(p.value)\" , \n    x = \"Event\",\n    y = \"Correlation with hurdles timing in Heptathlon\"\n  ) %&gt;%\n  gf_theme(\n    axis.title.x = element_text(face = \"bold\"),\n    axis.title.y = element_text(face = \"bold\"),\n    legend.position = \"right\"\n  )\n\n\n\n\n\n\n\n\nI increased the stroke width of the points to make them more visible, but I was still unable to add the white border around them. Despite adjusting the stroke, the desired white border did not appear as expected.\n\n\n\nThe graph titled “Heptathlon Scores and Correlations” seeks to answer the following questions:\n\n\n(The graph could aim to explore how individual event results, such as performance in the 100m hurdles or shot put, correlate with the overall score, highlighting which events have the strongest impact on the total performance.)\n\nIn the dataset, it appears that events such as the 200m sprint and long jump have a strong positive correlation with the overall score, suggesting that better performance in these events significantly contributes to a higher total score. Conversely, events like shot put show a weaker correlation, indicating less influence on the overall performance.\n\n\n\n\n(It may seek to analyze whether top-performing athletes excel consistently across all events or if they perform particularly well in specific events, leading to higher overall scores.)\n\nThe data shows that top-performing athletes tend to excel in events like the 200m sprint and hurdles, which are highly correlated with the overall score. However, there is more variability in events such as javelin and shot put, where even lower-performing athletes may achieve comparable results to their higher-ranked counterparts, indicating that these events are less crucial for determining total score.\n\n\n\n\n(The graph could identify events where there is a strong or weak relationship between performance and overall score, helping to pinpoint the most impactful events for overall success in the heptathlon.)\n\nThere is a significant disparity in the correlation of events with the overall score. For instance, the 200m sprint and long jump have a strong positive correlation with the overall score, whereas the javelin throw and shot put have weaker correlations, suggesting they are less critical for overall success in the heptathlon.\n\n\n\n\n(It may seek to explore whether certain events, such as the hurdles or high jump, have a greater impact on the overall score for top-performing athletes compared to those with lower scores.)\n\nYes, events such as hurdles and the 800m run, which are typically associated with speed and endurance, show a stronger correlation with the overall score for top-scoring athletes. These athletes tend to perform consistently well in these events, contributing to their higher scores, while lower-scoring athletes may show more inconsistency across these events.\n\n\n\n\n(The graph could aim to determine whether specific events are more critical in determining the overall outcome, revealing whether strong performance in key events can significantly boost an athlete’s total score.)\n\nYes, events like the 200m sprint and long jump show a disproportionate influence on the overall score, with athletes who perform well in these events often achieving much higher total scores. In contrast, events such as shot put and javelin throw seem to have a smaller influence on the total outcome, suggesting that strong performance in a few key events may be more beneficial for overall success.\n\n\n\n\n\n\n\nThe chart is a scatter plot with error bars, specifically designed to visualize the correlation between scores in hurdles and other heptathlon events. The point sizes correspond to the significance of the correlation.\n\n\n\n\nx-axis (Event): Represents the different events in the heptathlon (e.g., high jump, shot put, javelin, etc.).\ny-axis (Correlation with hurdles score): Displays the correlation values between performance in each event and the score in hurdles.\nFill/Shape size (Significance): The size of the points indicates the significance of the correlation (calculated as -log10(p.value)).\nError bars (CI_low, CI_high): Represent the confidence intervals for the correlation values, showing the range within which the actual correlation likely falls.\n\n\n\n\nAccording to the graph, the 200m sprint and 800m run are the most highly correlated events with the hurdles scores, as indicated by the positive correlation values and larger significance levels. These events seem to have the strongest association with an athlete’s performance in hurdles.\n\n\n\nBased on the graph, the high jump event does not show a strong correlation with hurdles performance, as its correlation value is negative and the error bars are relatively large, indicating uncertainty in the strength of the relationship. If an athlete excels in both high jump and hurdles, it would suggest they have a unique skill set, combining strong technical ability in high jump (which is less correlated with hurdles) with speed and agility in hurdles (a more significant event). This combination would make them a well-rounded and versatile athlete, excelling in both power-based and speed-based events despite the weaker connection between the two disciplines.\n\n\n\n\nThe graph titled “Heptathlon Scores and Correlations” offers an insightful exploration into the relationship between the seven heptathlon events and their correlations with hurdles performance. By examining the correlation patterns across these events, we uncover key relationships that shape the athletic performance of heptathletes. This visualization provides clarity on which events significantly influence hurdles performance and sheds light on the multidimensional skills required for success in the heptathlon.\n\n\nFrom analyzing the graph and the heptathlon dataset, the following patterns emerged:\n\nStrong Correlation with Speed-Based Events: Events like the 200m sprint and 800m run show the highest positive correlation with hurdles performance. This suggests that athletes who excel in hurdles tend to also perform exceptionally well in speed and endurance events. These events share common elements of speed, agility, and sustained effort, which likely explains their high correlation.\nMixed Correlation with Field Events: The long jump shows a positive correlation with hurdles scores, suggesting that explosive power and coordination are valuable across both events. However, shot put and javelin exhibit weaker correlations with hurdles, which is expected as these events require strength and technique rather than speed, showing that different skills are necessary across the heptathlon.\nWeaker Correlation with High Jump: Surprisingly, high jump has a weaker correlation with hurdles performance. Despite requiring leg strength and explosive power, these skills do not seem to translate as directly to hurdles success, likely due to the technical nature of high jump.\n\n\n\n\nIf we were to draw conclusions from the data, it’s evident that speed-based events are the most closely related to hurdles performance. Athletes who perform well in hurdles are likely to excel in the 200m sprint and 800m run, emphasizing the importance of speed and endurance in the overall heptathlon score. This highlights the key role that sprinting ability plays in shaping an athlete’s overall success in this multi-discipline sport.\nOn the other hand, the field events, while important, contribute less directly to hurdles performance. The mixed correlation suggests that while events like the long jump can complement speed and agility, events such as shot put and javelin rely on entirely different skill sets that do not significantly overlap with hurdles.\n\n\n\nEach heptathlon event provides different insights into the correlation with hurdles performance:\n\nSpeed-Based Events (200m, 800m): These events, which are dominated by speed, stamina, and technique, show strong positive correlations with hurdles. It’s clear that speed is a common denominator for athletes who succeed in hurdles, and mastering these events is crucial for improving overall performance in the heptathlon.\nPower-Based Events (Shot Put, Javelin): These events require strength and technique, showing weaker correlations with hurdles. This highlights that strength-based events do not heavily influence an athlete’s hurdles performance, underscoring the need for a diverse skill set in the heptathlon.\nMixed-Skill Events (Long Jump, High Jump): While long jump shows some positive correlation due to the need for explosive power, high jump shows a weaker relationship, indicating that technical skill in one event doesn’t always translate directly to others.\n\n\n\n\nIf an athlete were a record holder in both high jump and hurdles, they would stand out as an exceptionally versatile competitor. While the correlation between hurdles and high jump is not particularly strong according to the data, the athlete would demonstrate a rare ability to excel in both a speed-based event and a technical jumping event. This speaks to their diversity of skills—combining speed, agility, explosive power, and technical precision—making them a well-rounded and formidable athlete in the heptathlon.\n\n\n\nThis graph effectively highlights how different events within the heptathlon influence hurdles performance, providing valuable insights for athletes, coaches, and sports scientists. By visually representing these correlations, it becomes clear which events an athlete should prioritize to maximize their overall performance. The data underscores the importance of speed-based events and reveals that while field events play a role, they may not be as critical in determining hurdles success.\nThis visualization offers a clear path for athletes to tailor their training strategies by focusing on events that have the most significant impact on hurdles performance, ultimately improving their standing in the heptathlon."
  },
  {
    "objectID": "posts/Assignment 2 - Part 1/index.html",
    "href": "posts/Assignment 2 - Part 1/index.html",
    "title": "Assignment 2 - Part 1",
    "section": "",
    "text": "This is Part 1 of Assignment 2.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)"
  },
  {
    "objectID": "posts/Assignment 2 - Part 1/index.html#introduction",
    "href": "posts/Assignment 2 - Part 1/index.html#introduction",
    "title": "Assignment 2 - Part 1",
    "section": "",
    "text": "This is Part 1 of Assignment 2.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)"
  },
  {
    "objectID": "posts/Assignment 2 - Part 1/index.html#dataset---movie-profits",
    "href": "posts/Assignment 2 - Part 1/index.html#dataset---movie-profits",
    "title": "Assignment 2 - Part 1",
    "section": "Dataset - Movie Profits",
    "text": "Dataset - Movie Profits\nThis is a dataset pertaining to movies and genres.\n\nmovie_profit &lt;- read_csv(\"../../data/movie_profit.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 3310 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): release_date;movie;production_budget;domestic_gross;worldwide_gross...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmovie_profit\n\n# A tibble: 3,310 × 1\n   release_date;movie;production_budget;domestic_gross;worldwide_gross;distrib…¹\n   &lt;chr&gt;                                                                        \n 1 2005-07-22;November;250000;191862;191862;Other;R;Drama;7,67448000000000e-01;…\n 2 1998-08-28;I Married a Strange Person;250000;203134;203134;Other;NA;Comedy;8…\n 3 1997-03-28;Love and Other Catastrophes;250000;212285;743216;Other;R;Comedy;2…\n 4 2000-07-14;Chuck&Buck;250000;1055671;1157672;Other;R;Drama;4,63068800000000e…\n 5 2011-10-28;Like Crazy;250000;3395391;3728400;Paramount Pictures;PG-13;Drama;…\n 6 2003-04-11;Better Luck Tomorrow;250000;3802390;3809226;Paramount Pictures;R;…\n 7 2017-04-28;Sleight;250000;3930990;3934450;Other;R;Action;1,57378000000000e+0…\n 8 2002-06-28;Lovely and Amazing;250000;4210379;4613482;Other;R;Drama;1,8453928…\n 9 2012-08-17;Compliance;270000;319285;830700;Other;R;Drama;3,07666666666667e+0…\n10 2005-05-06;Fighting Tommy Riley;300000;10514;10514;Other;R;Drama;3,504666666…\n# ℹ 3,300 more rows\n# ℹ abbreviated name:\n#   ¹​`release_date;movie;production_budget;domestic_gross;worldwide_gross;distributor;mpaa_rating;genre;profit_ratio;decade`\n\n\n\nSpecifying Delimiter\n\nmovie_profit &lt;- read_delim(file=\"../../data/movie_profit.csv\",delim =\";\")\n\nRows: 3310 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr  (4): movie, distributor, mpaa_rating, genre\ndbl  (4): production_budget, domestic_gross, worldwide_gross, decade\nnum  (1): profit_ratio\ndate (1): release_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nmovie_profit\n\n# A tibble: 3,310 × 10\n   release_date movie           production_budget domestic_gross worldwide_gross\n   &lt;date&gt;       &lt;chr&gt;                       &lt;dbl&gt;          &lt;dbl&gt;           &lt;dbl&gt;\n 1 2005-07-22   November                   250000         191862          191862\n 2 1998-08-28   I Married a St…            250000         203134          203134\n 3 1997-03-28   Love and Other…            250000         212285          743216\n 4 2000-07-14   Chuck&Buck                 250000        1055671         1157672\n 5 2011-10-28   Like Crazy                 250000        3395391         3728400\n 6 2003-04-11   Better Luck To…            250000        3802390         3809226\n 7 2017-04-28   Sleight                    250000        3930990         3934450\n 8 2002-06-28   Lovely and Ama…            250000        4210379         4613482\n 9 2012-08-17   Compliance                 270000         319285          830700\n10 2005-05-06   Fighting Tommy…            300000          10514           10514\n# ℹ 3,300 more rows\n# ℹ 5 more variables: distributor &lt;chr&gt;, mpaa_rating &lt;chr&gt;, genre &lt;chr&gt;,\n#   profit_ratio &lt;dbl&gt;, decade &lt;dbl&gt;\n\n\nThe movie_profit dataset consists of 3,310 rows and 10 columns, offering detailed insights into various films’ financial and categorical information. It includes data such as the release date of each movie, its title, production budget, and earnings from both domestic and worldwide markets. The dataset also captures additional attributes like the movie’s distributor, MPAA rating (e.g., R, PG-13), genre (e.g., Drama, Comedy, Action), profit ratio, and the decade of release.\n\n\nFirst 10 rows of the Movie Profits dataset\n\nmovie_profit %&gt;% \n  head(10)\n\n# A tibble: 10 × 10\n   release_date movie           production_budget domestic_gross worldwide_gross\n   &lt;date&gt;       &lt;chr&gt;                       &lt;dbl&gt;          &lt;dbl&gt;           &lt;dbl&gt;\n 1 2005-07-22   November                   250000         191862          191862\n 2 1998-08-28   I Married a St…            250000         203134          203134\n 3 1997-03-28   Love and Other…            250000         212285          743216\n 4 2000-07-14   Chuck&Buck                 250000        1055671         1157672\n 5 2011-10-28   Like Crazy                 250000        3395391         3728400\n 6 2003-04-11   Better Luck To…            250000        3802390         3809226\n 7 2017-04-28   Sleight                    250000        3930990         3934450\n 8 2002-06-28   Lovely and Ama…            250000        4210379         4613482\n 9 2012-08-17   Compliance                 270000         319285          830700\n10 2005-05-06   Fighting Tommy…            300000          10514           10514\n# ℹ 5 more variables: distributor &lt;chr&gt;, mpaa_rating &lt;chr&gt;, genre &lt;chr&gt;,\n#   profit_ratio &lt;dbl&gt;, decade &lt;dbl&gt;\n\n\nThe first ten rows of the Movie Profits dataset provide a snapshot of films spanning from 1997 to 2017. Each row contains details such as the release date, movie title, and production budget, with budgets ranging from $250,000 to $300,000 for these films. The domestic gross and worldwide gross values vary significantly, reflecting the financial performance of each movie. For instance, “Chuck&Buck” has a worldwide gross of over $1 million, while “Fighting Tommy Riley” has a modest gross of just over $10,000.The decade column categorizes each film based on its release period, with most films in this sample from the 2000s.\n\n\nGlimpse - movie_profit\n\nglimpse(movie_profit)\n\nRows: 3,310\nColumns: 10\n$ release_date      &lt;date&gt; 2005-07-22, 1998-08-28, 1997-03-28, 2000-07-14, 201…\n$ movie             &lt;chr&gt; \"November\", \"I Married a Strange Person\", \"Love and …\n$ production_budget &lt;dbl&gt; 250000, 250000, 250000, 250000, 250000, 250000, 2500…\n$ domestic_gross    &lt;dbl&gt; 191862, 203134, 212285, 1055671, 3395391, 3802390, 3…\n$ worldwide_gross   &lt;dbl&gt; 191862, 203134, 743216, 1157672, 3728400, 3809226, 3…\n$ distributor       &lt;chr&gt; \"Other\", \"Other\", \"Other\", \"Other\", \"Paramount Pictu…\n$ mpaa_rating       &lt;chr&gt; \"R\", NA, \"R\", \"R\", \"PG-13\", \"R\", \"R\", \"R\", \"R\", \"R\",…\n$ genre             &lt;chr&gt; \"Drama\", \"Comedy\", \"Comedy\", \"Drama\", \"Drama\", \"Dram…\n$ profit_ratio      &lt;dbl&gt; 7.674480e+13, 8.125360e+13, 2.972864e+14, 4.630688e+…\n$ decade            &lt;dbl&gt; 2000, 1990, 1990, 2000, 2010, 2000, 2010, 2000, 2010…\n\n\nThe glimpse provides an overview of financial, categorical, and chronological data for each movie in the dataset.\n\n\nInspect - movie_profit\n\ninspect(movie_profit)\n\n\ncategorical variables:  \n         name     class levels    n missing\n1       movie character   3310 3310       0\n2 distributor character      6 3268      42\n3 mpaa_rating character      4 3180     130\n4       genre character      5 3310       0\n                                   distribution\n1 10 Days in a Madhouse (0%) ...               \n2  Other (53.2%), Warner Bros. (11%) ...       \n3 R (46.4%), PG-13 (33.5%), PG (17.4%) ...     \n4 Drama (36.5%), Comedy (24.1%) ...            \n\nDate variables:  \n          name class      first       last min_diff  max_diff    n missing\n1 release_date  Date 1936-02-05 2017-12-22   0 days 2592 days 3310       0\n\nquantitative variables:  \n               name   class      min           Q1       median           Q3\n1 production_budget numeric 2.50e+05 9.500000e+06 2.000000e+07 4.500000e+07\n2    domestic_gross numeric 0.00e+00 6.530094e+06 2.558731e+07 6.046695e+07\n3   worldwide_gross numeric 4.23e+02 1.086144e+07 4.040903e+07 1.184703e+08\n4      profit_ratio numeric 1.38e+10 7.861269e+13 1.962499e+14 3.942158e+14\n5            decade numeric 1.93e+03 1.990000e+03 2.000000e+03 2.010000e+03\n           max         mean           sd    n missing\n1 1.750000e+08 3.326794e+07 3.460741e+07 3310       0\n2 4.745447e+08 4.551509e+07 5.852794e+07 3310       0\n3 1.162782e+09 9.384123e+07 1.389514e+08 3310       0\n4 4.315179e+16 4.319388e+14 1.501736e+15 3310       0\n5 2.010000e+03 1.998785e+03 1.061308e+01 3310       0\n\n\nThe movie_profit dataset contains both categorical and quantitative variables. Categorical variables include the movie name, distributor (with 6 levels), mpaa_rating (with 4 levels), and genre (with 5 levels). The release dates span from February 5, 1936, to December 22, 2017, with the time difference between movies varying from 0 to 2,592 days. Quantitative variables include production_budget, domestic_gross, worldwide_gross, profit_ratio, and decade. The production budget ranges from 250,000 to significantly higher values, while domestic gross, worldwide gross, and profit ratio also exhibit wide variation across movies.\n\n\nSkim - movie_profit\n\nskim(movie_profit)\n\n\nData summary\n\n\nName\nmovie_profit\n\n\nNumber of rows\n3310\n\n\nNumber of columns\n10\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nDate\n1\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmovie\n0\n1.00\n1\n35\n0\n3310\n0\n\n\ndistributor\n42\n0.99\n5\n18\n0\n6\n0\n\n\nmpaa_rating\n130\n0.96\n1\n5\n0\n4\n0\n\n\ngenre\n0\n1.00\n5\n9\n0\n5\n0\n\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nrelease_date\n0\n1\n1936-02-05\n2017-12-22\n2005-06-30\n1723\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nproduction_budget\n0\n1\n3.326794e+07\n3.460741e+07\n2.50e+05\n9.500000e+06\n2.000000e+07\n4.500000e+07\n1.750000e+08\n▇▂▁▁▁\n\n\ndomestic_gross\n0\n1\n4.551509e+07\n5.852794e+07\n0.00e+00\n6.530094e+06\n2.558731e+07\n6.046695e+07\n4.745447e+08\n▇▁▁▁▁\n\n\nworldwide_gross\n0\n1\n9.384123e+07\n1.389514e+08\n4.23e+02\n1.086144e+07\n4.040903e+07\n1.184703e+08\n1.162782e+09\n▇▁▁▁▁\n\n\nprofit_ratio\n0\n1\n4.319388e+14\n1.501736e+15\n1.38e+10\n7.861269e+13\n1.962499e+14\n3.942158e+14\n4.315179e+16\n▇▁▁▁▁\n\n\ndecade\n0\n1\n1.998790e+03\n1.061000e+01\n1.93e+03\n1.990000e+03\n2.000000e+03\n2.010000e+03\n2.010000e+03\n▁▁▁▃▇\n\n\n\n\n\nThe production_budget has a minimum value of $250,000, a maximum of over $336 million, with a mean of about $33.27 million, a median of $20 million, and a standard deviation of $34.6 million, indicating high variability in film budgets. The domestic_gross shows a minimum of $0, a maximum of around $451.5 million, with a mean of $45.5 million, and a standard deviation of $58.53 million, suggesting that while some movies earned significantly, others did poorly. Similarly, worldwide_gross ranges from $423 to nearly $1.39 billion, with an average of $93.84 million and a high standard deviation of $138.95 million, highlighting the broad spread in international earnings. The profit_ratio has a huge range from 1.38e+10 to 4.31e+14, reflecting the varying degrees of profitability, with a mean around 4.32e+14. The decade variable covers the time span from the early 1900s, with a mean year of approximately 1998, and a standard deviation of 10.6, showing that most of the data comes from modern movies.\n\n\nData Dictionary\n\nQuantitative Data:\n\nproduction_budget (dbl): The amount of money spent on producing the movie.\ndomestic_gross (dbl): The total revenue generated by the movie in the domestic (U.S.) market.\nworldwide_gross (dbl): The total revenue generated by the movie worldwide.\nprofit_ratio (dbl): The ratio of the movie’s profit relative to its budget.\ndecade (dbl): The decade during which the movie was released, represented numerically.\n\n\n\nQualitative Data:\n\nrelease_date (date): The date when the movie was released.\nmovie (chr): The title of the movie.\ndistributor (chr): The name of the studio or company that distributed the movie.\nmpaa_rating (chr): The Motion Picture Association of America (MPAA) rating of the movie.\ngenre (chr): The genre or category of the movie.\n\n\n\n\nTarget Variable\nProfit Ratio\nThe profit ratio is a key outcome of interest because it measures the success or profitability of each movie relative to its production budget. This is the most logical target variable because it represents the business performance of the movies in financial terms. The goal of analysis could be to understand what factors influence the profitability of movies.\n\n\nPredictor Variables\n\nProduction Budget\nThe amount of money spent to produce a movie likely affects its profit ratio. Larger budgets may lead to higher production values, star power, or marketing, but may also increase the risk of lower profitability if the movie doesn’t perform well.\nDomestic Gross\nThe domestic box office earnings provide a direct measure of the movie’s success within its home country, which likely impacts the overall profitability.\nWorldwide Gross\nLike domestic gross, this variable represents the movie’s global earnings, which play a crucial role in determining profitability, especially for internationally successful films.\nDistributor\nDifferent distributors may have different levels of market reach, marketing budgets, and strategic capabilities, which could influence a movie’s success and profit ratio.\nMPAA Rating\nThe MPAA rating (e.g., PG, PG-13, R) affects the audience size and demographics. Certain ratings may limit a movie’s audience, which could affect its overall profitability.\nGenre\nDifferent genres attract different audience demographics, which could influence box office performance and profitability. Some genres might consistently perform better than others.\nRelease Date\nThe timing of a movie’s release (e.g., summer blockbuster season, holiday period) can significantly influence its box office performance, which may impact profitability.\nDecade\nThe decade provides a historical context. Movies released in different decades may face different market conditions (e.g., competition, audience preferences, economic conditions), influencing profitability.\n\n\n\nResearch Experiment to Investigate Movie Profitability\nThe objective of this research experiment could have been to explore the factors that potentially influence the profitability of movies. The study might have aimed to analyze how various variables related to movie production, such as budget, genre, distributor, and MPAA rating, as well as market performance indicators like domestic and worldwide gross earnings, could affect a movie’s profit ratio.\nSeveral hypotheses could have been proposed:\n\nMovies with higher production budgets might correlate with lower profit ratios, possibly due to the increased financial risk associated with larger budgets.\nCertain genres, such as action or adventure, could exhibit higher profit ratios compared to others like drama or comedy.\nFilms distributed by larger studios, such as Warner Bros. or Paramount Pictures, might show better financial performance than those handled by smaller distributors.\nMPAA ratings could also play a role in profitability, with R-rated films potentially drawing smaller audiences compared to PG or PG-13 rated films.\n\nThe dataset used for this study consists of 3,310 movies from 1936 to 2017. The sample includes data on production budgets, domestic and worldwide gross, distributors, MPAA ratings, genres, profit ratios, and the decade in which the movie was released.\nThe data could have been obtained from box office databases (e.g., Box Office Mojo, IMDb), industry reports, and public financial records of movie studios. Additional information such as MPAA ratings and genres could be sourced from the Motion Picture Association of America (MPAA) and film databases.\nLimitations:\n\nMissing Data: Some movies may have incomplete data (e.g., missing MPAA ratings or gross earnings), which could affect the robustness of conclusions.\nExternal Factors: The dataset may not account for external factors like economic downturns, marketing spend, or competition from other media during the release window, all of which could impact profitability.\nHistorical Bias: Older movies may have different box office reporting practices, and inflation was likely accounted for in calculating the profit ratios to ensure comparability across time.\n\nInsights gained from this study could inform studios on what variables drive financial success and help in decision-making for future film projects.\n\n\nCalculating median profit ratio\n\n# Aggregating data by distributor and genre to calculate median profit ratio\nmovie_profit_summary &lt;- movie_profit %&gt;%\n  group_by(distributor, genre) %&gt;%\n  summarize(median_profit_ratio = median(profit_ratio, na.rm = TRUE) , count = n())\n\n`summarise()` has grouped output by 'distributor'. You can override using the\n`.groups` argument.\n\nmovie_profit_summary\n\n# A tibble: 35 × 4\n# Groups:   distributor [7]\n   distributor      genre     median_profit_ratio count\n   &lt;chr&gt;            &lt;chr&gt;                   &lt;dbl&gt; &lt;int&gt;\n 1 20th Century Fox Action                2.68e14    67\n 2 20th Century Fox Adventure             2.76e14    75\n 3 20th Century Fox Comedy                2.70e14    69\n 4 20th Century Fox Drama                 1.96e14    55\n 5 20th Century Fox Horror                2.50e14    13\n 6 Other            Action                1.76e14   227\n 7 Other            Adventure             2.07e14   191\n 8 Other            Comedy                1.53e14   375\n 9 Other            Drama                 1.22e14   784\n10 Other            Horror                2.47e14   160\n# ℹ 25 more rows\n\n\n\n\nPlotting the graph - Attempt 1\n\nmovie_profit_summary %&gt;%\n  gf_bar(~median_profit_ratio) %&gt;%\n  gf_facet_wrap(~ distributor, scales = \"free\", ncol = 4) %&gt;%\n  gf_labs(\n    title = \"Profits made by Film Distributors\",\n    subtitle = \"Ratio of Profits to Budgets\",\n    x = \"Median Profit Ratio\",\n    y = \"Genre\"\n  )\n\n\n\n\n\n\n\n\n\n\nAttempt 2\n\nmovie_profit_summary %&gt;%\n  gf_bar(~median_profit_ratio | distributor, fill = ~genre) %&gt;%\n  gf_refine(coord_flip()) %&gt;%\n  gf_labs(\n    title = \"Profits made by Film Distributors\",\n    subtitle = \"Ratio of Profits to Budgets\",\n    x = \"Median Profit Ratio\",\n    y = \"Genre\"\n  )\n\n\n\n\n\n\n\n\n\n\nAttempt 3\n\nmovie_profit_summary %&gt;%\n  gf_bar(~median_profit_ratio | genre, fill = ~\"darkgrey\") %&gt;%\n  gf_facet_wrap(~distributor, scales = \"free_x\", ncol = 3) %&gt;%\n  gf_labs(\n    title = \"Profits made by Film Distributors\",\n    subtitle = \"Ratio of Profits to Budgets\",\n    x = \"median_profit_ratio\",\n    y = \"genre\"\n  ) %&gt;%\n  gf_refine(theme_minimal()) %&gt;%\n  gf_refine(scale_x_continuous(labels = scales::label_number(scale = 1, suffix = \"X\")))\n\n\n\n\n\n\n\n\nIn my first three attempts, I tried using gf_bar and spent a lot of time trying to figure out where I was going wrong. After revisiting some resources, I realized that gf_col (or geom_col) was the appropriate function to use, as it requires both X and Y variables to plot columns accurately. This was the key issue since gf_bar wasn’t designed for this type of plotting. In my third attempt, I read further to understand how to change the label names on the X-axis. However, I encountered challenges with formatting the numbers correctly.\n\n\nAttempt 4\n\nmovie_profit_summary %&gt;%\n  gf_col(median_profit_ratio ~ genre | distributor, \n         scales = \"free_x\", \n         fill = ~\"darkgrey\", \n         ncol = 3) %&gt;%\n  gf_labs(\n    title = \"Profits made by Film Distributors\",\n    subtitle = \"Ratio of Profits to Budgets\",\n    x = \"median_profit_ratio\",\n    y = \"genre\"\n  ) %&gt;%\n  gf_refine(theme_minimal()) \n\n\n\n\n\n\n\n\n\n\nFinal Attempt\n\nmovie_profit_summary %&gt;%\n  gf_col(genre ~ median_profit_ratio | distributor, \n         scales = \"free_x\", \n         fill = \"black\", \n         ncol = 3) %&gt;%\n  gf_labs(\n    title = \"Profits made by Film Distributors\",\n    subtitle = \"Ratio of Profits to Budgets\",\n    x = \"median_profit_ratio\",\n    y = \"genre\"\n  ) %&gt;%\n  gf_refine(scale_x_continuous(labels = scales::label_number(scale = 1e-14, accuracy = 1, suffix = \"X\")))\n\n\n\n\n\n\n\n\nI finally figured it out! I realized that the issue was with the scale for the labeling on the X-axis. The scale needed to be adjusted from 1 to 1e-14 in order to display the numbers correctly. This adjustment made a big difference in cleaning up the axis labels and presenting the data in a more readable format.\n\n\nQuestions\nThe graph titled “Profits made by Film Distributors” seeks to answer the following questions:\n1.How does the profit-to-budget ratio vary across different film genres (Horror, Drama, Comedy, Adventure, Action) for major film distributors?\n( The graph compares the profitability of different genres for distributors like 20th Century Fox, Paramount Pictures, Sony Pictures, Universal, Warner Bros., and others. This helps to identify which genres are more profitable for specific distributors.)\n\n20th Century Fox has the highest median profit ratio in the Adventure genre with a value of 2.76e+14, followed closely by Action (2.68e+14) and Comedy (2.69e+14).\nParamount Pictures also sees high profits from Adventure films with a median ratio of 2.93e+14, followed by Action (2.78e+14) and Comedy (1.89e+14).\nSony Pictures has the highest median profit ratio for Adventure films (2.47e+14) and Action films (2.22e+14).\nUniversal stands out in the Adventure genre with a median profit ratio of 3.47e+14, showing Adventure films are quite profitable for them.\nWarner Bros. performs best in Horror with a median profit ratio of 3.18e+14, followed by Comedy (1.76e+14).\n\nAcross the board, Adventure and Action films tend to show higher median profit ratios for most major distributors. Horror also stands out for Warner Bros.\n2.Which film distributor yields the highest median profit-to-budget ratio for each genre?\n( By displaying the profit ratios for each genre across multiple distributors, the graph helps to determine which distributor is most successful in turning a profit for specific types of films.)\n\nFor Action, Paramount Pictures leads with a median profit ratio of 2.78e+14.\nIn the Adventure genre, Universal has the highest profit ratio with 3.47e+14.\nWarner Bros. has the highest profit ratio in the Horror genre, at 3.18e+14.\nFor Comedy, Universal stands out with 2.58e+14.\nIn Drama, Paramount Pictures takes the lead with 2.06e+14.\n\nThus, Universal dominates Adventure and Comedy, Paramount Pictures excels in Action and Drama, and Warner Bros. shines in Horror.\n3.How do smaller or unspecified distributors compare to larger, well-known distributors in terms of profitability?\n( The “Other” and “NA” categories allow for a comparison between larger studios and smaller or unclassified distributors, providing insight into whether smaller entities can achieve comparable profitability.)\n\nSmaller distributors grouped under “Other” tend to have median profit ratios that are competitive with the larger studios. For instance, the median profit ratio for Action films under “Other” is 1.76e+14, which is relatively close to that of major distributors.\nThe Horror genre under “Other” also does well with a profit ratio of 2.46e+14, almost on par with Warner Bros.’ high profitability in the same genre (3.18e+14).\n\nThis shows that smaller or unclassified distributors, while not always outperforming the majors, can still achieve significant profitability, particularly in certain genres like Horror or Action.\n\n\nAdditional Questions\n1.Identify the type of plot: The graph is a facet bar plot showing the ratio of profits to budgets for different film genres across various distributors.\n2.What are the variables used to plot this graph?\n\nThe x-axis represents the median profit ratio (Ratio of profits to budgets).\nThe y-axis represents the genres of films (Horror, Drama, Comedy, Adventure, Action).\nThe different facets represent the various distributors (e.g., 20th Century Fox, Paramount Pictures, Sony Pictures, etc.).\n\n3.If you were to invest in movie production ventures, which are the two best genres that you might decide to invest in?\nAdventure and Action films appear to be the best genres to invest in, as they show the highest median profit ratios across multiple distributors.\n4.Which R command might have been used to obtain the separate plots for each distributor? The gf_facet_wrap command (from the ggformula package) might have been used to create separate plots for each distributor. However, I used the gf_col command.\n5.If the original dataset had BUDGETS and PROFITS in separate columns, what preprocessing might have been done to achieve this plot?\nThe data could be grouped by distributor and genre to calculate the median profit ratio:\nmovie_profit_summary &lt;- movie_profit %&gt;%   group_by(distributor, genre) %&gt;%   summarize(median_profit_ratio = median(profit_ratio, na.rm = TRUE))\nThis would aggregate the data and prepare it for plotting as shown in the graph.\n\n\nInference and Story from the Graph and Data\nThe graph titled “Profits made by Film Distributors” presents a fascinating breakdown of how the median profit ratios for different film genres compare across major film distributors. By plotting this data, we gain valuable insights into the profitability trends of each distributor and their success in various genres.\n\nKey Observations\nFrom the data and the graph, I observed that:\n\nAdventure and Action Dominate: Across most distributors, the Adventure and Action genres consistently exhibit the highest median profit ratios. For instance, in the case of Universal and Warner Bros., the Adventure genre outperforms other genres in terms of profitability, with Action following closely behind. These two genres clearly provide the highest return on investment for these distributors.\nComedy’s Strong Performance: Comedy also shows strong performance across distributors like Paramount Pictures and Warner Bros., highlighting that it’s another genre that often yields significant profits relative to its budget.\nHorror’s Variable Performance: While Horror films generally show high profit margins (especially with Warner Bros. and 20th Century Fox), the number of films (represented by the count data) in this genre tends to be lower compared to other genres. This could suggest that while fewer horror films are produced, they tend to be highly profitable.\n\n\n\nWhere Would You Invest?\nIf I were to invest in movie production ventures based on this data, the two best genres to invest in would likely be Adventure and Action. These genres consistently demonstrate the highest profit-to-budget ratios across multiple distributors, making them safe bets for maximizing returns on investment. Adventure films, in particular, seem to have a broad appeal and high profitability, as seen with Universal and Warner Bros., where the Adventure genre outperforms other categories significantly.\nIf I were to invest in movie production ventures based on this data, the two best genres to invest in would likely be Adventure and Action. These genres consistently demonstrate the highest profit-to-budget ratios across multiple distributors, making them safe bets for maximizing returns on investment. Adventure films, in particular, seem to have a broad appeal and high profitability, as seen with Universal and Warner Bros., where the Adventure genre outperforms other categories significantly.\n\n\nThe Role of Distributors\nEach distributor seems to have strengths in different genres. For example:\n\nParamount Pictures shows strong performance across all genres, with no one genre clearly dominating, indicating a well-balanced strategy across its film portfolio.\n20th Century Fox and Sony Pictures both show relatively high profit margins across Action and Adventure, making these genres crucial for their financial success.\nThe “Other” category suggests that smaller or independent distributors can still achieve solid profitability, particularly in genres like Action and Comedy.\n\n\n\nThe Power of Data Visualization\nThis graph not only tells a story about the profitability of genres but also underscores the importance of visualizing data to make informed business decisions. If you are a studio executive or a potential investor, this kind of analysis helps you pinpoint the genres that offer the best return on investment, the distributors that succeed in specific markets, and areas where opportunities might exist."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Welcome to my blog! My name is Khushi, and I’m passionate about data visualization, interaction design, photography and game design, and music.\nI love capturing moments through the lens, exploring creative ways to communicate through visuals. Music deeply influences my creativity."
  },
  {
    "objectID": "about.html#what-i-do",
    "href": "about.html#what-i-do",
    "title": "About",
    "section": "What I Do",
    "text": "What I Do\n-Build games with educational goals, integrating fun with learning\n-Design user interfaces to enhance user experience and engagement\n-Explore and tell stories through data visualization, making information more accessible and insightful\n-Enjoy photography, especially animal portraits and outdoor shoots\n-Connect music to visual arts, using it as inspiration for both photography and design"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visualisation and Analysis",
    "section": "",
    "text": "Assignment 2 - Part 1\n\n\n\n\n\n\nAssignments\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 2 - Part 2\n\n\n\n\n\n\nAssignments\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 2 - Part 3\n\n\n\n\n\n\nAssignments\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 3 - Part 1\n\n\n\n\n\n\nAssignments\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 3 - Part 2\n\n\n\n\n\n\nAssignments\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 3 - Part 3\n\n\n\n\n\n\nAssignments\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 3 - Part 4\n\n\n\n\n\n\nAssignments\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nDay 1\n\n\n\n\n\n\nDaily Visualisations and Analysis\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nDay 2\n\n\n\n\n\n\nDaily Visualisations and Analysis\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nDay 3\n\n\n\n\n\n\nDaily Visualisations and Analysis\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nDay 4\n\n\n\n\n\n\nDaily Visualisations and Analysis\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nDay 5\n\n\n\n\n\n\nDaily Visualisations and Analysis\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nDay 6\n\n\n\n\n\n\nDaily Visualisations and Analysis\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nDay 7\n\n\n\n\n\n\nDaily Visualisations and Analysis\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\n\n\n\n\n\n\nOnline Class\n\n\n\n\n\n\nOnline Class\n\n\n\n\n\n\n\n\n\nKhushi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Assignment 2 - Part 2/index.html",
    "href": "posts/Assignment 2 - Part 2/index.html",
    "title": "Assignment 2 - Part 2",
    "section": "",
    "text": "This is Part 2 of Assignment 2.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)\n\n\n\nThis is a dataset pertaining to gender and compensation at the workplace.\n\njob_gender &lt;- read_csv(\"../../data/job_gender_data.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 32 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): year;occupation;major_category;minor_category;total_workers;workers...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\njob_gender\n\n# A tibble: 32 × 1\n   year;occupation;major_category;minor_category;total_workers;workers_male;wo…¹\n   &lt;chr&gt;                                                                        \n 1 2016;Dietitians and nutritionists;Healthcare Practitioners and Technical;Hea…\n 2 2016;Medical records and health information technicians;Healthcare Practitio…\n 3 2016;Pharmacists;Healthcare Practitioners and Technical;Healthcare Practitio…\n 4 2016;Licensed practical and licensed vocational nurses;Healthcare Practition…\n 5 2016;Miscellaneous therapists, including exercise physiologists;Healthcare P…\n 6 2016;Clinical laboratory technologists and technicians;Healthcare Practition…\n 7 2016;Registered nurses;Healthcare Practitioners and Technical;Healthcare Pra…\n 8 2016;Nurse practitioners;Healthcare Practitioners and Technical;Healthcare P…\n 9 2016;Physician assistants;Healthcare Practitioners and Technical;Healthcare …\n10 2016;Health practitioner support technologists and technicians;Healthcare Pr…\n# ℹ 22 more rows\n# ℹ abbreviated name:\n#   ¹​`year;occupation;major_category;minor_category;total_workers;workers_male;workers_female;percent_female;total_earnings;total_earnings_male;total_earnings_female;wage_percent_of_male`\n\n\n\n\n\n\njob_gender &lt;- read_delim(file=\"../../data/job_gender_data.csv\",delim =\";\")\n\nRows: 32 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (3): occupation, major_category, minor_category\ndbl (7): year, total_workers, workers_male, workers_female, total_earnings, ...\nnum (2): percent_female, wage_percent_of_male\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\njob_gender\n\n# A tibble: 32 × 12\n    year occupation     major_category minor_category total_workers workers_male\n   &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;          &lt;chr&gt;                  &lt;dbl&gt;        &lt;dbl&gt;\n 1  2016 Dietitians an… Healthcare Pr… Healthcare Pr…         70729         8095\n 2  2016 Medical recor… Healthcare Pr… Healthcare Pr…        148302        14938\n 3  2016 Pharmacists    Healthcare Pr… Healthcare Pr…        214665        97539\n 4  2016 Licensed prac… Healthcare Pr… Healthcare Pr…        602316        77484\n 5  2016 Miscellaneous… Healthcare Pr… Healthcare Pr…        107797        25250\n 6  2016 Clinical labo… Healthcare Pr… Healthcare Pr…        245278        68887\n 7  2016 Registered nu… Healthcare Pr… Healthcare Pr…       2317493       281048\n 8  2016 Nurse practit… Healthcare Pr… Healthcare Pr…        116166        14128\n 9  2016 Physician ass… Healthcare Pr… Healthcare Pr…         76018        27869\n10  2016 Health practi… Healthcare Pr… Healthcare Pr…        440607        98824\n# ℹ 22 more rows\n# ℹ 6 more variables: workers_female &lt;dbl&gt;, percent_female &lt;dbl&gt;,\n#   total_earnings &lt;dbl&gt;, total_earnings_male &lt;dbl&gt;,\n#   total_earnings_female &lt;dbl&gt;, wage_percent_of_male &lt;dbl&gt;\n\n\nThe dataset includes columns such as total workers, the distribution of male and female workers, total earnings (segregated by gender), and wage comparisons between male and female workers. It categorizes these occupations under a major category called “Healthcare Practitioners and Technical,” which is further divided into specific occupations like dietitians, registered nurses, and nurse practitioners. The dataset highlights gender disparities in these healthcare roles by comparing the number of male and female workers, their respective earnings, and the proportion of female workers in each role. It provides insights into wage differences, showing a column indicating how female earnings compare to male earnings (wage_percent_of_male).\n\n\n\n\njob_gender %&gt;% \n  head(10)\n\n# A tibble: 10 × 12\n    year occupation     major_category minor_category total_workers workers_male\n   &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;          &lt;chr&gt;                  &lt;dbl&gt;        &lt;dbl&gt;\n 1  2016 Dietitians an… Healthcare Pr… Healthcare Pr…         70729         8095\n 2  2016 Medical recor… Healthcare Pr… Healthcare Pr…        148302        14938\n 3  2016 Pharmacists    Healthcare Pr… Healthcare Pr…        214665        97539\n 4  2016 Licensed prac… Healthcare Pr… Healthcare Pr…        602316        77484\n 5  2016 Miscellaneous… Healthcare Pr… Healthcare Pr…        107797        25250\n 6  2016 Clinical labo… Healthcare Pr… Healthcare Pr…        245278        68887\n 7  2016 Registered nu… Healthcare Pr… Healthcare Pr…       2317493       281048\n 8  2016 Nurse practit… Healthcare Pr… Healthcare Pr…        116166        14128\n 9  2016 Physician ass… Healthcare Pr… Healthcare Pr…         76018        27869\n10  2016 Health practi… Healthcare Pr… Healthcare Pr…        440607        98824\n# ℹ 6 more variables: workers_female &lt;dbl&gt;, percent_female &lt;dbl&gt;,\n#   total_earnings &lt;dbl&gt;, total_earnings_male &lt;dbl&gt;,\n#   total_earnings_female &lt;dbl&gt;, wage_percent_of_male &lt;dbl&gt;\n\n\nThe first ten rows of the “Gender at the Workplace” dataset focus on healthcare-related occupations in 2016. These occupations include roles like “Dietitians and Nutritionists,” “Pharmacists,” and “Registered Nurses.” For example, there are 70,729 total workers in the “Dietitians and Nutritionists” category, with 8,095 males and 62,634 females, making females account for roughly 88.55% of this workforce. Similarly, “Registered Nurses” have a workforce of 2,036,445 individuals, of which 281,048 are males and 1,755,397 are females, showing a dominant female representation at 87.87%. In terms of earnings, male registered nurses earn an average of $64,413 compared to females who earn $64,119, with female wages being approximately 99.78% of male wages in this occupation.\n\n\n\n\nglimpse(job_gender)\n\nRows: 32\nColumns: 12\n$ year                  &lt;dbl&gt; 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, …\n$ occupation            &lt;chr&gt; \"Dietitians and nutritionists\", \"Medical records…\n$ major_category        &lt;chr&gt; \"Healthcare Practitioners and Technical\", \"Healt…\n$ minor_category        &lt;chr&gt; \"Healthcare Practitioners and Technical\", \"Healt…\n$ total_workers         &lt;dbl&gt; 70729, 148302, 214665, 602316, 107797, 245278, 2…\n$ workers_male          &lt;dbl&gt; 8095, 14938, 97539, 77484, 25250, 68887, 281048,…\n$ workers_female        &lt;dbl&gt; 62634, 133364, 117126, 524832, 82547, 176391, 20…\n$ percent_female        &lt;dbl&gt; 8.855491e+14, 8.992731e+14, 5.456222e+14, 8.7135…\n$ total_earnings        &lt;dbl&gt; 49841, 38273, 120878, 38946, 50208, 48170, 65331…\n$ total_earnings_male   &lt;dbl&gt; 47439, 37208, 122351, 40939, 52202, 51112, 70952…\n$ total_earnings_female &lt;dbl&gt; 49886, 38404, 118461, 38523, 48955, 46984, 64413…\n$ wage_percent_of_male  &lt;dbl&gt; 1.051582e+15, 1.032144e+15, 9.682062e+14, 9.4098…\n\n\nThe glimpse of the dataset “job_gender” provides an overview of the 32 rows and 12 columns in the job_gender dataset.\n\n\n\n\ninspect(job_gender)\n\n\ncategorical variables:  \n            name     class levels  n missing\n1     occupation character     32 32       0\n2 major_category character      1 32       0\n3 minor_category character      1 32       0\n                                   distribution\n1 Audiologists (3.1%) ...                      \n2  (%) ...                                     \n3  (%) ...                                     \n\nquantitative variables:  \n                   name   class          min           Q1       median\n1                  year numeric 2.016000e+03 2.016000e+03 2.016000e+03\n2         total_workers numeric 4.001000e+03 3.750350e+04 8.978400e+04\n3          workers_male numeric 0.000000e+00 7.437000e+03 2.608100e+04\n4        workers_female numeric 9.530000e+02 1.375975e+04 5.753250e+04\n5        percent_female numeric 1.564090e+14 5.738413e+14 6.703936e+14\n6        total_earnings numeric 3.246600e+04 4.942325e+04 6.443150e+04\n7   total_earnings_male numeric 3.609300e+04 5.111500e+04 7.095200e+04\n8 total_earnings_female numeric 3.209300e+04 4.846225e+04 6.012800e+04\n9  wage_percent_of_male numeric 6.643337e+14 8.020231e+14 8.666381e+14\n            Q3          max         mean           sd  n missing\n1 2.016000e+03 2.016000e+03 2.016000e+03 0.000000e+00 32       0\n2 1.637307e+05 2.317493e+06 2.049671e+05 4.208274e+05 32       0\n3 6.672025e+04 4.897480e+05 5.645797e+04 9.613719e+04 32       0\n4 1.060613e+05 2.036445e+06 1.485091e+05 3.617156e+05 32       0\n5 8.657607e+14 1.000000e+15 6.517922e+14 2.274756e+14 32       0\n6 1.008672e+05 2.015420e+05 7.792281e+04 4.053443e+04 32       0\n7 1.073760e+05 2.314200e+05 8.478716e+04 4.538677e+04 31       1\n8 1.001310e+05 1.663880e+05 7.166166e+04 3.405611e+04 32       0\n9 9.106884e+14 1.051582e+15 8.581675e+14 1.008336e+14 24       8\n\n\nThe mean values for total workers range from 40,010 to over 2.05 million, showing the average number of workers in each occupation. The median total earnings for male workers is around 36,093 to 122,351, whereas for female workers, it ranges from 32,093 to 118,461, reflecting wage disparities. The standard deviation (sd) for total earnings across workers is also high, with a maximum value of over 4.05e+05, indicating significant variation in earnings. Additionally, wage_percent_of_male shows the mean wage gap, ranging from 6.64e+14 to 1.05e+15, reflecting the earnings of female workers as a percentage of male workers’ earnings. These statistics highlight key insights into the gender wage gap and employment distribution.\n\n\n\n\nskim(job_gender)\n\n\nData summary\n\n\nName\njob_gender\n\n\nNumber of rows\n32\n\n\nNumber of columns\n12\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n9\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\noccupation\n0\n1\n8\n58\n0\n32\n0\n\n\nmajor_category\n0\n1\n38\n38\n0\n1\n0\n\n\nminor_category\n0\n1\n38\n38\n0\n1\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2.016000e+03\n0.000000e+00\n2.016000e+03\n2.016000e+03\n2.016000e+03\n2.016000e+03\n2.016000e+03\n▁▁▇▁▁\n\n\ntotal_workers\n0\n1.00\n2.049671e+05\n4.208275e+05\n4.001000e+03\n3.750350e+04\n8.978400e+04\n1.637307e+05\n2.317493e+06\n▇▁▁▁▁\n\n\nworkers_male\n0\n1.00\n5.645797e+04\n9.613719e+04\n0.000000e+00\n7.437000e+03\n2.608100e+04\n6.672025e+04\n4.897480e+05\n▇▁▁▁▁\n\n\nworkers_female\n0\n1.00\n1.485091e+05\n3.617156e+05\n9.530000e+02\n1.375975e+04\n5.753250e+04\n1.060613e+05\n2.036445e+06\n▇▁▁▁▁\n\n\npercent_female\n0\n1.00\n6.517922e+14\n2.274756e+14\n1.564090e+14\n5.738413e+14\n6.703936e+14\n8.657607e+14\n1.000000e+15\n▃▂▇▇▇\n\n\ntotal_earnings\n0\n1.00\n7.792281e+04\n4.053443e+04\n3.246600e+04\n4.942325e+04\n6.443150e+04\n1.008672e+05\n2.015420e+05\n▇▃▃▁▁\n\n\ntotal_earnings_male\n1\n0.97\n8.478716e+04\n4.538677e+04\n3.609300e+04\n5.111500e+04\n7.095200e+04\n1.073760e+05\n2.314200e+05\n▇▃▂▁▁\n\n\ntotal_earnings_female\n0\n1.00\n7.166166e+04\n3.405611e+04\n3.209300e+04\n4.846225e+04\n6.012800e+04\n1.001310e+05\n1.663880e+05\n▇▃▂▁▁\n\n\nwage_percent_of_male\n8\n0.75\n8.581675e+14\n1.008336e+14\n6.643337e+14\n8.020231e+14\n8.666381e+14\n9.106884e+14\n1.051582e+15\n▅▂▇▇▂\n\n\n\n\n\nThe dataset contains three categorical variables—occupation, major_category, and minor_category—and nine numeric variables, such as total_workers, workers_male, workers_female, total_earnings, and others. No missing values were reported for any of the variables except wage_percent_of_male, which has eight missing entries. The numeric variables like total_workers have a mean of 204,967.1 and a median of 89,784, while the standard deviation is quite high, indicating significant variation in the total number of workers across different occupations. The distribution of workers and their earnings, particularly between males and females, highlights differences in wages, with wage_percent_of_male indicating that females generally earn 85.8% of what males do on average.\n\n\n\n\n\n\ntotal_workers (dbl): The total number of workers in the specified occupation.\nworkers_male (dbl): The number of male workers in the specified occupation.\nworkers_female (dbl): The number of female workers in the specified occupation.\npercent_female (dbl): The percentage of female workers in the specified occupation.\ntotal_earnings (dbl): The total earnings of all workers in the specified occupation.\ntotal_earnings_male (dbl): The total earnings of male workers in the specified occupation.\ntotal_earnings_female (dbl): The total earnings of female workers in the specified occupation.\nwage_percent_of_male (dbl): The percentage of female earnings relative to male earnings in the specified occupation.\nyear (dbl): The year during which the data was collected.\n\n\n\n\n\noccupation (chr): The specific job or profession.\nmajor_category (chr): The broad category to which the occupation belongs.\nminor_category (chr): The sub-category within the major category of the occupation.\n\n\n\n\n\nWage Percent of Male\nThis is the key outcome of interest in the job_gender dataset as it indicates the earnings of female workers compared to male workers. Understanding this ratio can help assess the gender pay gap within different occupations. The goal of the analysis could be to identify the factors that influence wage disparity between male and female workers in various occupations.\nThe Wage Percent of Male is considered the target variable, rather than Percent Female, because it directly addresses the earnings gap between genders. Wage Percent of Male captures the outcome that most directly relates to gender pay gaps, making it the target variable for an analysis focused on wage equality. Percent Female, though important, only gives a snapshot of workforce composition and does not measure the disparity in pay.\n\n\n\n\nTotal Workers\nThe total number of workers in an occupation might impact wage distribution. A larger workforce could lead to more standardized wages, whereas smaller, specialized occupations may have more variation in pay.\nWorkers Male\nThe number of male workers in an occupation might be a predictor of wage levels, particularly if certain occupations are male-dominated.\nWorkers Female\nSimilarly, the number of female workers in an occupation might influence wage structures, especially in occupations that are traditionally female-dominated.\nPercent Female\nThis variable reflects the percentage of females in the workforce and can help determine if occupations with a higher proportion of female workers tend to have lower wages compared to male-dominated fields.\nTotal Earnings\nThe overall earnings in an occupation may indicate the earning potential, which could vary depending on how well the occupation is compensated regardless of gender.\nTotal Earnings Male\nThis variable represents the total earnings of male workers, which could provide insight into wage differences when compared to female earnings.\nTotal Earnings Female\nThe total earnings of female workers can be used to analyze how women’s pay compares to that of men within the same occupation.\nYear\nThe year the data was collected might reflect economic conditions, labor market trends, or changes in gender wage equality over time.\nOccupation\nThe specific job or profession can play a significant role in determining wage differences, as some occupations tend to have higher wage disparities than others.\n\n\n\n\nThe main objective of this research experiment could be to analyze and explore potential wage disparities between male and female workers across various occupations. The study might aim to understand how gender could affect earnings within different industries and roles, and what factors might contribute to wage inequality between male and female workers.\nSeveral hypotheses could have been proposed:\n\nThere could be a significant wage disparity between male and female workers in many occupations, where women might generally earn less than men for the same role.\nThe proportion of female workers in an occupation could influence wage disparity, with occupations having higher percentages of female workers potentially showing greater wage inequality.\nHigher-paying occupations could demonstrate larger wage gaps between male and female workers.\n\nThe study sampled various occupations across different industries, ensuring representation from male-dominated, female-dominated, and gender-balanced fields. The sample included both public and private sector workers, and data was stratified by occupation to allow for specific analysis of each role.\nData Collection:\n\nPrimary Data Source: Employment and salary data could have been collected from government labor statistics databases, such as the Bureau of Labor Statistics (BLS), or other relevant sources. Surveys might have been conducted across various industries to gather detailed wage and gender data for different occupations.\nSurvey Design: Structured surveys or administrative data might have been used to capture information about employee salaries, gender, and occupation. Employers or government agencies could have provided the data, which would then have been anonymized and aggregated by occupation.\n\nSampling:\n\nThe study might have sampled a range of occupations across different industries, ensuring representation from male-dominated, female-dominated, and gender-balanced fields. The sample could have included both public and private sector workers, with data stratified by occupation to allow for specific analysis of each role.\n\nCalculation of Variables:\n\nWage Percent of Male was calculated by dividing the average salary of female workers by the average salary of male workers for each occupation.\nPercent Female was calculated as the number of female workers divided by the total number of workers in each occupation.\n\nThe experiment could aim to provide a comprehensive understanding of gender wage gaps across industries, potentially identifying which occupations exhibit the largest disparities and what factors (such as gender representation and occupation type) might contribute to wage inequality.\n\n\n\n\njob_gender &lt;- job_gender %&gt;%\n  mutate(median_salary = (total_earnings_male + total_earnings_female) / 2)\njob_gender\n\n# A tibble: 32 × 13\n    year occupation     major_category minor_category total_workers workers_male\n   &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;          &lt;chr&gt;                  &lt;dbl&gt;        &lt;dbl&gt;\n 1  2016 Dietitians an… Healthcare Pr… Healthcare Pr…         70729         8095\n 2  2016 Medical recor… Healthcare Pr… Healthcare Pr…        148302        14938\n 3  2016 Pharmacists    Healthcare Pr… Healthcare Pr…        214665        97539\n 4  2016 Licensed prac… Healthcare Pr… Healthcare Pr…        602316        77484\n 5  2016 Miscellaneous… Healthcare Pr… Healthcare Pr…        107797        25250\n 6  2016 Clinical labo… Healthcare Pr… Healthcare Pr…        245278        68887\n 7  2016 Registered nu… Healthcare Pr… Healthcare Pr…       2317493       281048\n 8  2016 Nurse practit… Healthcare Pr… Healthcare Pr…        116166        14128\n 9  2016 Physician ass… Healthcare Pr… Healthcare Pr…         76018        27869\n10  2016 Health practi… Healthcare Pr… Healthcare Pr…        440607        98824\n# ℹ 22 more rows\n# ℹ 7 more variables: workers_female &lt;dbl&gt;, percent_female &lt;dbl&gt;,\n#   total_earnings &lt;dbl&gt;, total_earnings_male &lt;dbl&gt;,\n#   total_earnings_female &lt;dbl&gt;, wage_percent_of_male &lt;dbl&gt;,\n#   median_salary &lt;dbl&gt;\n\n\n\n\n\n\ngf_point(median_salary ~ percent_female, \n         size = ~ total_workers, \n         data = job_gender,\n         fill = \"black\", \n         color = \"black\", \n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(scale_size_continuous(range = c(1, 10), guide = guide_legend(title = \"Total # of workers\")))\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(scale_y_continuous(labels = scales::label_dollar()))\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nIn this step, I incorporated the use of the dollar sign for the y-axis scale, ensuring that the monetary values are clearly represented in the graph.\n\n\n\n\ngf_point(median_salary ~ percent_female, \n         size = ~ total_workers, \n         data = job_gender, \n         fill = \"black\", \n         color = \"black\", \n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n   gf_refine(scale_x_continuous(labels = scales::percent_format()))\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nI attempted to implement percentages on the x-axis, but all the values ended up displaying as zero.\n\n\n\n\ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(\n    scale_x_continuous(limits = c(0, 1), labels = scales::percent_format())\n  )\n\nWarning: Removed 32 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nI tried setting specific limits, but it caused all the bubble plots to shift to 0 percent.\n\n\n\n\ngf_point(median_salary ~ percent_female,\n    size = ~ total_workers,\n    data = job_gender,\n    fill = \"black\",\n    color = \"black\",\n    alpha = 1) %&gt;%\ngf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n) %&gt;%\ngf_refine(\n    scale_y_continuous(labels = scales::label_dollar()),\n    scale_x_continuous(limits = c(0, 1), labels = scales::percent_format())\n)\n\nWarning: Removed 32 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\njob_gender$percent_female &lt;- job_gender$percent_female / 1e14  \n\n\ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(scale_y_continuous(labels = scales::label_dollar())) %&gt;%\n  gf_refine(\n    scale_x_continuous(limits = c(0, 1), labels = scales::percent_format())\n  )\n\nWarning: Removed 32 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\njob_gender &lt;- job_gender %&gt;%\n  mutate(percent_female = percent_female / 100)\n\ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(scale_y_continuous(labels = scales::label_dollar())) %&gt;%\n  gf_refine(scale_x_continuous(labels = scales::percent_format()))\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nI attempted to mutate the percent female data, but it still displayed as 0 percent.\n\n\n\n\ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(scale_y_continuous(labels = scales::label_dollar())) %&gt;%\n  gf_refine(\n    scale_x_continuous(\n      breaks = c(0, 0.25, 0.50, 0.75, 1),\n      labels = scales::percent_format()\n    )\n  )\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nI tried specifying breaks in the data, but the percentages disappeared altogether.\n\n\n\n\njob_gender$percent_female &lt;- job_gender$percent_female * 1e2  \ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n    scale_y_continuous(labels = scales::label_dollar()) %&gt;%\n    scale_x_continuous(limits = c(0, 100), labels = scales::percent_format(scale = 1))\n\n&lt;ScaleContinuousPosition&gt;\n Range:  \n Limits:    0 --  100\n\n\nThe numbers on the x-axis have changed and no longer match the originals in Attempt 1.\n\n\n\n\njob_gender$percent_female &lt;- job_gender$percent_female * 1e2\ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(scale_y_continuous(labels = scales::label_dollar())) %&gt;%\n  gf_refine(\n    scale_x_continuous(\n      labels = scales::percent_format()\n    )\n  )\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nI spent about two hours trying to resolve the issue with the data showing 0 percent on the x-axis. Despite multiple attempts—ranging from adjusting the scale, specifying limits, mutating the percentage data, and setting breaks—nothing seemed to work. Each attempt either resulted in all the percentages remaining at 0 or caused the percentages to disappear entirely. Even when I tried different methods, the numbers on the axis shifted, and I still couldn’t get the correct percentages to display. It’s been frustrating, as no matter what I tried, the issue persists, and I haven’t been able to resolve it.\n\n\n\nThe graph titled “Salaries and Gender Proportion in the Workforce” seeks to answer the following questions:\n1.What is the relationship between salary levels and the proportion of females in various occupations?\n( The graph could aim to explore whether occupations with a higher percentage of female workers tend to offer lower salaries compared to male-dominated fields.)\n\nIn the dataset, there seems to be a trend where occupations with a higher proportion of female workers tend to offer lower average salaries. For example, jobs such as elementary school teachers (where females represent a large portion of the workforce) have relatively lower wages compared to male-dominated fields like engineering or management, where salaries are significantly higher. This suggests a negative relationship between the proportion of female workers and salary levels.\n\n2.How does gender representation in the workforce affect wage distribution across different job categories?\n( It may seek to analyze whether there is a noticeable correlation between the gender composition of an occupation and the wage gap, specifically examining how gender representation impacts salary levels in different sectors.)\n\nThe data shows that occupations with more male representation tend to have higher salaries. For example, industries such as construction and technology, which are male-dominated, tend to have higher wages. On the other hand, female-dominated fields like healthcare support or administrative services exhibit lower wage levels, indicating a wage gap between gender representation in different sectors.\n\n3.Which occupations exhibit significant disparities between the proportion of female workers and their salary levels?\n( The graph could identify which job categories have high female representation but lower salaries, highlighting potential areas of gender-based wage inequality.)\n\nA significant disparity is observed in roles like nursing, where there is a high proportion of female workers but relatively lower average salaries. Conversely, in occupations such as executive management, which have a low proportion of female workers, the wages are considerably higher. This highlights the wage inequality that exists in certain sectors despite high female representation.\n\n4.Do certain industries show a trend of higher wages for occupations with fewer female workers?\n( It may seek to explore whether male-dominated industries offer higher wages compared to female-dominated ones, pointing to the potential for occupational segregation to influence income inequality.)\n\nYes, industries such as engineering and technology, which are male-dominated, display higher wages. The data indicates that male-dominated fields tend to offer better pay compared to female-dominated occupations, suggesting occupational segregation and its impact on wages.\n\n5.Is there evidence of gender wage gaps in high-paying versus low-paying occupations?\n( The graph could aim to determine whether high-paying jobs are more prone to gender wage gaps compared to lower-paying ones, and how these gaps manifest across different sectors.)\n\nYes, high-paying occupations such as executive management and engineering have a noticeable gender wage gap, with male workers dominating these fields and receiving higher salaries. On the other hand, lower-paying fields like nursing or teaching—which have a higher proportion of female workers—show relatively smaller wage gaps but also lower overall salaries.\n\n\n\n\n1.What kind of chart is used in the figure?\nThe chart is a bubble plot (or scatter plot with size variation), where each bubble represents an occupation. The size of the bubbles typically corresponds to the number of workers in that occupation, while the x-axis represents salaries, and the y-axis shows the proportion of female workers in those occupations.\n2.What geometries have been used, and to which variables have these geometries been mapped?\nThe key geometries used in this bubble plot are:\n\nPoints (bubbles): Represent occupations.\nX-axis: Mapped to salaries (salary levels).\nY-axis: Mapped to the proportion of female workers in each occupation.\nSize of bubbles: Mapped to the number of workers in each occupation.\n\n3.Based on this graph, do you think gender plays a role in salaries? What is the trend you see?\nYes, gender seems to play a significant role in salaries. The trend observed is that occupations with higher proportions of female workers tend to have lower salaries. For example, professions dominated by women (e.g., nursing, teaching) exhibit relatively smaller salaries compared to male-dominated fields like engineering or executive management, which have higher wages. This suggests a gender wage gap where male-dominated occupations offer higher pay compared to female-dominated ones.\n4.If SALARY, NO_OF_WORKERS, GENDER, OCCUPATION were available in the original dataset, what pre-processing would have been necessary to obtain this plot?\nSeveral preprocessing steps would likely be necessary:\n\nConversion of Salary Data: Depending on the scale of salary values, some conversion to a common currency/scale might be required for better comparison.\nGender Proportion Calculation: The dataset would need to compute the proportion of female workers (e.g., percentage of female workers relative to the total number of workers in each occupation).\nHandling Missing Data: Any missing data in variables such as salary or number of workers would need to be addressed.\nSize Mapping: The number of workers would need to be scaled to appropriately map the bubble sizes in the plot, ensuring large and small values are distinguishable.\nAggregating Data: If the data included detailed information about individual workers, it might have been grouped by occupation. This would involve calculating summary statistics such as the average salary, the percentage of female workers, and the total number of workers for each job type.\n\n\n\n\nThe graph titled “Salaries and Gender Proportion in the Workforce” provides an insightful view into the relationship between gender proportions in various occupations and the corresponding salary disparities. By analyzing this data, we gain a deeper understanding of how gender representation in the workforce influences salary distribution across different job sectors.\n\n\n\nFrom analyzing the graph and the associated job_gender dataset, I observed the following:\n\nGender Imbalance in High-Paying Jobs: Occupations with a higher proportion of male workers, such as engineering and technology, tend to have higher median salaries. This indicates that male-dominated industries are often associated with higher compensation, highlighting a disparity in salary distribution across different sectors.\nLower Salaries in Female-Dominated Occupations: On the other hand, jobs with a higher percentage of female workers, such as nursing, teaching, and clerical roles, show significantly lower median salaries. This suggests that occupations traditionally dominated by women often receive lower pay compared to male-dominated fields.\nWage Disparities in Gender-Balanced Roles: Even in occupations where gender representation is relatively balanced, such as healthcare and education, there is still a noticeable gap in median salaries. This reinforces the idea that salary disparity isn’t solely dependent on the proportion of gender but is also influenced by societal and occupational factors.\n\n\n\n\nIf I were to draw conclusions based on this data, it’s clear that gender continues to play a critical role in shaping salary structures across industries. Investments in gender equity, particularly in improving the salaries of female-dominated sectors, could help bridge the pay gap. Healthcare and education, where salaries remain lower despite more balanced gender representation, should be prioritized in any gender equality effort.\n\n\n\nEach sector provides different insights into the relationship between gender and salaries:\n\nMale-Dominated Occupations: Roles in engineering, manufacturing, and technology, which are predominantly occupied by men, not only exhibit higher salaries but also reflect the societal value placed on these professions. Addressing this imbalance by encouraging more women to enter these sectors could help reduce the gender pay gap.\nFemale-Dominated Occupations: Fields such as teaching, nursing, and clerical work are primarily composed of women and tend to have lower salaries. These industries need targeted strategies to increase wages and provide women with equal earning opportunities.\nGender-Balanced Occupations: Even in sectors like healthcare, where gender balance is closer, salary gaps still exist. This suggests that achieving gender parity in representation alone may not be enough to address the underlying pay disparity.\n\n\n\n\nThis graph effectively visualizes how gender proportions across different occupations impact salary structures, offering key insights for policymakers, businesses, and advocacy groups. The data highlights critical sectors where pay equity efforts should be directed, ensuring equal opportunities and fair compensation regardless of gender. This visualization allows for a more targeted approach to resolving wage disparities and fostering a more inclusive workforce."
  },
  {
    "objectID": "posts/Assignment 2 - Part 2/index.html#introduction",
    "href": "posts/Assignment 2 - Part 2/index.html#introduction",
    "title": "Assignment 2 - Part 2",
    "section": "",
    "text": "This is Part 2 of Assignment 2.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)\n\n\n\nThis is a dataset pertaining to gender and compensation at the workplace.\n\njob_gender &lt;- read_csv(\"../../data/job_gender_data.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 32 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): year;occupation;major_category;minor_category;total_workers;workers...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\njob_gender\n\n# A tibble: 32 × 1\n   year;occupation;major_category;minor_category;total_workers;workers_male;wo…¹\n   &lt;chr&gt;                                                                        \n 1 2016;Dietitians and nutritionists;Healthcare Practitioners and Technical;Hea…\n 2 2016;Medical records and health information technicians;Healthcare Practitio…\n 3 2016;Pharmacists;Healthcare Practitioners and Technical;Healthcare Practitio…\n 4 2016;Licensed practical and licensed vocational nurses;Healthcare Practition…\n 5 2016;Miscellaneous therapists, including exercise physiologists;Healthcare P…\n 6 2016;Clinical laboratory technologists and technicians;Healthcare Practition…\n 7 2016;Registered nurses;Healthcare Practitioners and Technical;Healthcare Pra…\n 8 2016;Nurse practitioners;Healthcare Practitioners and Technical;Healthcare P…\n 9 2016;Physician assistants;Healthcare Practitioners and Technical;Healthcare …\n10 2016;Health practitioner support technologists and technicians;Healthcare Pr…\n# ℹ 22 more rows\n# ℹ abbreviated name:\n#   ¹​`year;occupation;major_category;minor_category;total_workers;workers_male;workers_female;percent_female;total_earnings;total_earnings_male;total_earnings_female;wage_percent_of_male`\n\n\n\n\n\n\njob_gender &lt;- read_delim(file=\"../../data/job_gender_data.csv\",delim =\";\")\n\nRows: 32 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (3): occupation, major_category, minor_category\ndbl (7): year, total_workers, workers_male, workers_female, total_earnings, ...\nnum (2): percent_female, wage_percent_of_male\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\njob_gender\n\n# A tibble: 32 × 12\n    year occupation     major_category minor_category total_workers workers_male\n   &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;          &lt;chr&gt;                  &lt;dbl&gt;        &lt;dbl&gt;\n 1  2016 Dietitians an… Healthcare Pr… Healthcare Pr…         70729         8095\n 2  2016 Medical recor… Healthcare Pr… Healthcare Pr…        148302        14938\n 3  2016 Pharmacists    Healthcare Pr… Healthcare Pr…        214665        97539\n 4  2016 Licensed prac… Healthcare Pr… Healthcare Pr…        602316        77484\n 5  2016 Miscellaneous… Healthcare Pr… Healthcare Pr…        107797        25250\n 6  2016 Clinical labo… Healthcare Pr… Healthcare Pr…        245278        68887\n 7  2016 Registered nu… Healthcare Pr… Healthcare Pr…       2317493       281048\n 8  2016 Nurse practit… Healthcare Pr… Healthcare Pr…        116166        14128\n 9  2016 Physician ass… Healthcare Pr… Healthcare Pr…         76018        27869\n10  2016 Health practi… Healthcare Pr… Healthcare Pr…        440607        98824\n# ℹ 22 more rows\n# ℹ 6 more variables: workers_female &lt;dbl&gt;, percent_female &lt;dbl&gt;,\n#   total_earnings &lt;dbl&gt;, total_earnings_male &lt;dbl&gt;,\n#   total_earnings_female &lt;dbl&gt;, wage_percent_of_male &lt;dbl&gt;\n\n\nThe dataset includes columns such as total workers, the distribution of male and female workers, total earnings (segregated by gender), and wage comparisons between male and female workers. It categorizes these occupations under a major category called “Healthcare Practitioners and Technical,” which is further divided into specific occupations like dietitians, registered nurses, and nurse practitioners. The dataset highlights gender disparities in these healthcare roles by comparing the number of male and female workers, their respective earnings, and the proportion of female workers in each role. It provides insights into wage differences, showing a column indicating how female earnings compare to male earnings (wage_percent_of_male).\n\n\n\n\njob_gender %&gt;% \n  head(10)\n\n# A tibble: 10 × 12\n    year occupation     major_category minor_category total_workers workers_male\n   &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;          &lt;chr&gt;                  &lt;dbl&gt;        &lt;dbl&gt;\n 1  2016 Dietitians an… Healthcare Pr… Healthcare Pr…         70729         8095\n 2  2016 Medical recor… Healthcare Pr… Healthcare Pr…        148302        14938\n 3  2016 Pharmacists    Healthcare Pr… Healthcare Pr…        214665        97539\n 4  2016 Licensed prac… Healthcare Pr… Healthcare Pr…        602316        77484\n 5  2016 Miscellaneous… Healthcare Pr… Healthcare Pr…        107797        25250\n 6  2016 Clinical labo… Healthcare Pr… Healthcare Pr…        245278        68887\n 7  2016 Registered nu… Healthcare Pr… Healthcare Pr…       2317493       281048\n 8  2016 Nurse practit… Healthcare Pr… Healthcare Pr…        116166        14128\n 9  2016 Physician ass… Healthcare Pr… Healthcare Pr…         76018        27869\n10  2016 Health practi… Healthcare Pr… Healthcare Pr…        440607        98824\n# ℹ 6 more variables: workers_female &lt;dbl&gt;, percent_female &lt;dbl&gt;,\n#   total_earnings &lt;dbl&gt;, total_earnings_male &lt;dbl&gt;,\n#   total_earnings_female &lt;dbl&gt;, wage_percent_of_male &lt;dbl&gt;\n\n\nThe first ten rows of the “Gender at the Workplace” dataset focus on healthcare-related occupations in 2016. These occupations include roles like “Dietitians and Nutritionists,” “Pharmacists,” and “Registered Nurses.” For example, there are 70,729 total workers in the “Dietitians and Nutritionists” category, with 8,095 males and 62,634 females, making females account for roughly 88.55% of this workforce. Similarly, “Registered Nurses” have a workforce of 2,036,445 individuals, of which 281,048 are males and 1,755,397 are females, showing a dominant female representation at 87.87%. In terms of earnings, male registered nurses earn an average of $64,413 compared to females who earn $64,119, with female wages being approximately 99.78% of male wages in this occupation.\n\n\n\n\nglimpse(job_gender)\n\nRows: 32\nColumns: 12\n$ year                  &lt;dbl&gt; 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, …\n$ occupation            &lt;chr&gt; \"Dietitians and nutritionists\", \"Medical records…\n$ major_category        &lt;chr&gt; \"Healthcare Practitioners and Technical\", \"Healt…\n$ minor_category        &lt;chr&gt; \"Healthcare Practitioners and Technical\", \"Healt…\n$ total_workers         &lt;dbl&gt; 70729, 148302, 214665, 602316, 107797, 245278, 2…\n$ workers_male          &lt;dbl&gt; 8095, 14938, 97539, 77484, 25250, 68887, 281048,…\n$ workers_female        &lt;dbl&gt; 62634, 133364, 117126, 524832, 82547, 176391, 20…\n$ percent_female        &lt;dbl&gt; 8.855491e+14, 8.992731e+14, 5.456222e+14, 8.7135…\n$ total_earnings        &lt;dbl&gt; 49841, 38273, 120878, 38946, 50208, 48170, 65331…\n$ total_earnings_male   &lt;dbl&gt; 47439, 37208, 122351, 40939, 52202, 51112, 70952…\n$ total_earnings_female &lt;dbl&gt; 49886, 38404, 118461, 38523, 48955, 46984, 64413…\n$ wage_percent_of_male  &lt;dbl&gt; 1.051582e+15, 1.032144e+15, 9.682062e+14, 9.4098…\n\n\nThe glimpse of the dataset “job_gender” provides an overview of the 32 rows and 12 columns in the job_gender dataset.\n\n\n\n\ninspect(job_gender)\n\n\ncategorical variables:  \n            name     class levels  n missing\n1     occupation character     32 32       0\n2 major_category character      1 32       0\n3 minor_category character      1 32       0\n                                   distribution\n1 Audiologists (3.1%) ...                      \n2  (%) ...                                     \n3  (%) ...                                     \n\nquantitative variables:  \n                   name   class          min           Q1       median\n1                  year numeric 2.016000e+03 2.016000e+03 2.016000e+03\n2         total_workers numeric 4.001000e+03 3.750350e+04 8.978400e+04\n3          workers_male numeric 0.000000e+00 7.437000e+03 2.608100e+04\n4        workers_female numeric 9.530000e+02 1.375975e+04 5.753250e+04\n5        percent_female numeric 1.564090e+14 5.738413e+14 6.703936e+14\n6        total_earnings numeric 3.246600e+04 4.942325e+04 6.443150e+04\n7   total_earnings_male numeric 3.609300e+04 5.111500e+04 7.095200e+04\n8 total_earnings_female numeric 3.209300e+04 4.846225e+04 6.012800e+04\n9  wage_percent_of_male numeric 6.643337e+14 8.020231e+14 8.666381e+14\n            Q3          max         mean           sd  n missing\n1 2.016000e+03 2.016000e+03 2.016000e+03 0.000000e+00 32       0\n2 1.637307e+05 2.317493e+06 2.049671e+05 4.208274e+05 32       0\n3 6.672025e+04 4.897480e+05 5.645797e+04 9.613719e+04 32       0\n4 1.060613e+05 2.036445e+06 1.485091e+05 3.617156e+05 32       0\n5 8.657607e+14 1.000000e+15 6.517922e+14 2.274756e+14 32       0\n6 1.008672e+05 2.015420e+05 7.792281e+04 4.053443e+04 32       0\n7 1.073760e+05 2.314200e+05 8.478716e+04 4.538677e+04 31       1\n8 1.001310e+05 1.663880e+05 7.166166e+04 3.405611e+04 32       0\n9 9.106884e+14 1.051582e+15 8.581675e+14 1.008336e+14 24       8\n\n\nThe mean values for total workers range from 40,010 to over 2.05 million, showing the average number of workers in each occupation. The median total earnings for male workers is around 36,093 to 122,351, whereas for female workers, it ranges from 32,093 to 118,461, reflecting wage disparities. The standard deviation (sd) for total earnings across workers is also high, with a maximum value of over 4.05e+05, indicating significant variation in earnings. Additionally, wage_percent_of_male shows the mean wage gap, ranging from 6.64e+14 to 1.05e+15, reflecting the earnings of female workers as a percentage of male workers’ earnings. These statistics highlight key insights into the gender wage gap and employment distribution.\n\n\n\n\nskim(job_gender)\n\n\nData summary\n\n\nName\njob_gender\n\n\nNumber of rows\n32\n\n\nNumber of columns\n12\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n9\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\noccupation\n0\n1\n8\n58\n0\n32\n0\n\n\nmajor_category\n0\n1\n38\n38\n0\n1\n0\n\n\nminor_category\n0\n1\n38\n38\n0\n1\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2.016000e+03\n0.000000e+00\n2.016000e+03\n2.016000e+03\n2.016000e+03\n2.016000e+03\n2.016000e+03\n▁▁▇▁▁\n\n\ntotal_workers\n0\n1.00\n2.049671e+05\n4.208275e+05\n4.001000e+03\n3.750350e+04\n8.978400e+04\n1.637307e+05\n2.317493e+06\n▇▁▁▁▁\n\n\nworkers_male\n0\n1.00\n5.645797e+04\n9.613719e+04\n0.000000e+00\n7.437000e+03\n2.608100e+04\n6.672025e+04\n4.897480e+05\n▇▁▁▁▁\n\n\nworkers_female\n0\n1.00\n1.485091e+05\n3.617156e+05\n9.530000e+02\n1.375975e+04\n5.753250e+04\n1.060613e+05\n2.036445e+06\n▇▁▁▁▁\n\n\npercent_female\n0\n1.00\n6.517922e+14\n2.274756e+14\n1.564090e+14\n5.738413e+14\n6.703936e+14\n8.657607e+14\n1.000000e+15\n▃▂▇▇▇\n\n\ntotal_earnings\n0\n1.00\n7.792281e+04\n4.053443e+04\n3.246600e+04\n4.942325e+04\n6.443150e+04\n1.008672e+05\n2.015420e+05\n▇▃▃▁▁\n\n\ntotal_earnings_male\n1\n0.97\n8.478716e+04\n4.538677e+04\n3.609300e+04\n5.111500e+04\n7.095200e+04\n1.073760e+05\n2.314200e+05\n▇▃▂▁▁\n\n\ntotal_earnings_female\n0\n1.00\n7.166166e+04\n3.405611e+04\n3.209300e+04\n4.846225e+04\n6.012800e+04\n1.001310e+05\n1.663880e+05\n▇▃▂▁▁\n\n\nwage_percent_of_male\n8\n0.75\n8.581675e+14\n1.008336e+14\n6.643337e+14\n8.020231e+14\n8.666381e+14\n9.106884e+14\n1.051582e+15\n▅▂▇▇▂\n\n\n\n\n\nThe dataset contains three categorical variables—occupation, major_category, and minor_category—and nine numeric variables, such as total_workers, workers_male, workers_female, total_earnings, and others. No missing values were reported for any of the variables except wage_percent_of_male, which has eight missing entries. The numeric variables like total_workers have a mean of 204,967.1 and a median of 89,784, while the standard deviation is quite high, indicating significant variation in the total number of workers across different occupations. The distribution of workers and their earnings, particularly between males and females, highlights differences in wages, with wage_percent_of_male indicating that females generally earn 85.8% of what males do on average.\n\n\n\n\n\n\ntotal_workers (dbl): The total number of workers in the specified occupation.\nworkers_male (dbl): The number of male workers in the specified occupation.\nworkers_female (dbl): The number of female workers in the specified occupation.\npercent_female (dbl): The percentage of female workers in the specified occupation.\ntotal_earnings (dbl): The total earnings of all workers in the specified occupation.\ntotal_earnings_male (dbl): The total earnings of male workers in the specified occupation.\ntotal_earnings_female (dbl): The total earnings of female workers in the specified occupation.\nwage_percent_of_male (dbl): The percentage of female earnings relative to male earnings in the specified occupation.\nyear (dbl): The year during which the data was collected.\n\n\n\n\n\noccupation (chr): The specific job or profession.\nmajor_category (chr): The broad category to which the occupation belongs.\nminor_category (chr): The sub-category within the major category of the occupation.\n\n\n\n\n\nWage Percent of Male\nThis is the key outcome of interest in the job_gender dataset as it indicates the earnings of female workers compared to male workers. Understanding this ratio can help assess the gender pay gap within different occupations. The goal of the analysis could be to identify the factors that influence wage disparity between male and female workers in various occupations.\nThe Wage Percent of Male is considered the target variable, rather than Percent Female, because it directly addresses the earnings gap between genders. Wage Percent of Male captures the outcome that most directly relates to gender pay gaps, making it the target variable for an analysis focused on wage equality. Percent Female, though important, only gives a snapshot of workforce composition and does not measure the disparity in pay.\n\n\n\n\nTotal Workers\nThe total number of workers in an occupation might impact wage distribution. A larger workforce could lead to more standardized wages, whereas smaller, specialized occupations may have more variation in pay.\nWorkers Male\nThe number of male workers in an occupation might be a predictor of wage levels, particularly if certain occupations are male-dominated.\nWorkers Female\nSimilarly, the number of female workers in an occupation might influence wage structures, especially in occupations that are traditionally female-dominated.\nPercent Female\nThis variable reflects the percentage of females in the workforce and can help determine if occupations with a higher proportion of female workers tend to have lower wages compared to male-dominated fields.\nTotal Earnings\nThe overall earnings in an occupation may indicate the earning potential, which could vary depending on how well the occupation is compensated regardless of gender.\nTotal Earnings Male\nThis variable represents the total earnings of male workers, which could provide insight into wage differences when compared to female earnings.\nTotal Earnings Female\nThe total earnings of female workers can be used to analyze how women’s pay compares to that of men within the same occupation.\nYear\nThe year the data was collected might reflect economic conditions, labor market trends, or changes in gender wage equality over time.\nOccupation\nThe specific job or profession can play a significant role in determining wage differences, as some occupations tend to have higher wage disparities than others.\n\n\n\n\nThe main objective of this research experiment could be to analyze and explore potential wage disparities between male and female workers across various occupations. The study might aim to understand how gender could affect earnings within different industries and roles, and what factors might contribute to wage inequality between male and female workers.\nSeveral hypotheses could have been proposed:\n\nThere could be a significant wage disparity between male and female workers in many occupations, where women might generally earn less than men for the same role.\nThe proportion of female workers in an occupation could influence wage disparity, with occupations having higher percentages of female workers potentially showing greater wage inequality.\nHigher-paying occupations could demonstrate larger wage gaps between male and female workers.\n\nThe study sampled various occupations across different industries, ensuring representation from male-dominated, female-dominated, and gender-balanced fields. The sample included both public and private sector workers, and data was stratified by occupation to allow for specific analysis of each role.\nData Collection:\n\nPrimary Data Source: Employment and salary data could have been collected from government labor statistics databases, such as the Bureau of Labor Statistics (BLS), or other relevant sources. Surveys might have been conducted across various industries to gather detailed wage and gender data for different occupations.\nSurvey Design: Structured surveys or administrative data might have been used to capture information about employee salaries, gender, and occupation. Employers or government agencies could have provided the data, which would then have been anonymized and aggregated by occupation.\n\nSampling:\n\nThe study might have sampled a range of occupations across different industries, ensuring representation from male-dominated, female-dominated, and gender-balanced fields. The sample could have included both public and private sector workers, with data stratified by occupation to allow for specific analysis of each role.\n\nCalculation of Variables:\n\nWage Percent of Male was calculated by dividing the average salary of female workers by the average salary of male workers for each occupation.\nPercent Female was calculated as the number of female workers divided by the total number of workers in each occupation.\n\nThe experiment could aim to provide a comprehensive understanding of gender wage gaps across industries, potentially identifying which occupations exhibit the largest disparities and what factors (such as gender representation and occupation type) might contribute to wage inequality.\n\n\n\n\njob_gender &lt;- job_gender %&gt;%\n  mutate(median_salary = (total_earnings_male + total_earnings_female) / 2)\njob_gender\n\n# A tibble: 32 × 13\n    year occupation     major_category minor_category total_workers workers_male\n   &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;          &lt;chr&gt;                  &lt;dbl&gt;        &lt;dbl&gt;\n 1  2016 Dietitians an… Healthcare Pr… Healthcare Pr…         70729         8095\n 2  2016 Medical recor… Healthcare Pr… Healthcare Pr…        148302        14938\n 3  2016 Pharmacists    Healthcare Pr… Healthcare Pr…        214665        97539\n 4  2016 Licensed prac… Healthcare Pr… Healthcare Pr…        602316        77484\n 5  2016 Miscellaneous… Healthcare Pr… Healthcare Pr…        107797        25250\n 6  2016 Clinical labo… Healthcare Pr… Healthcare Pr…        245278        68887\n 7  2016 Registered nu… Healthcare Pr… Healthcare Pr…       2317493       281048\n 8  2016 Nurse practit… Healthcare Pr… Healthcare Pr…        116166        14128\n 9  2016 Physician ass… Healthcare Pr… Healthcare Pr…         76018        27869\n10  2016 Health practi… Healthcare Pr… Healthcare Pr…        440607        98824\n# ℹ 22 more rows\n# ℹ 7 more variables: workers_female &lt;dbl&gt;, percent_female &lt;dbl&gt;,\n#   total_earnings &lt;dbl&gt;, total_earnings_male &lt;dbl&gt;,\n#   total_earnings_female &lt;dbl&gt;, wage_percent_of_male &lt;dbl&gt;,\n#   median_salary &lt;dbl&gt;\n\n\n\n\n\n\ngf_point(median_salary ~ percent_female, \n         size = ~ total_workers, \n         data = job_gender,\n         fill = \"black\", \n         color = \"black\", \n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(scale_size_continuous(range = c(1, 10), guide = guide_legend(title = \"Total # of workers\")))\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(scale_y_continuous(labels = scales::label_dollar()))\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nIn this step, I incorporated the use of the dollar sign for the y-axis scale, ensuring that the monetary values are clearly represented in the graph.\n\n\n\n\ngf_point(median_salary ~ percent_female, \n         size = ~ total_workers, \n         data = job_gender, \n         fill = \"black\", \n         color = \"black\", \n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n   gf_refine(scale_x_continuous(labels = scales::percent_format()))\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nI attempted to implement percentages on the x-axis, but all the values ended up displaying as zero.\n\n\n\n\ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(\n    scale_x_continuous(limits = c(0, 1), labels = scales::percent_format())\n  )\n\nWarning: Removed 32 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nI tried setting specific limits, but it caused all the bubble plots to shift to 0 percent.\n\n\n\n\ngf_point(median_salary ~ percent_female,\n    size = ~ total_workers,\n    data = job_gender,\n    fill = \"black\",\n    color = \"black\",\n    alpha = 1) %&gt;%\ngf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n) %&gt;%\ngf_refine(\n    scale_y_continuous(labels = scales::label_dollar()),\n    scale_x_continuous(limits = c(0, 1), labels = scales::percent_format())\n)\n\nWarning: Removed 32 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\njob_gender$percent_female &lt;- job_gender$percent_female / 1e14  \n\n\ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(scale_y_continuous(labels = scales::label_dollar())) %&gt;%\n  gf_refine(\n    scale_x_continuous(limits = c(0, 1), labels = scales::percent_format())\n  )\n\nWarning: Removed 32 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\njob_gender &lt;- job_gender %&gt;%\n  mutate(percent_female = percent_female / 100)\n\ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(scale_y_continuous(labels = scales::label_dollar())) %&gt;%\n  gf_refine(scale_x_continuous(labels = scales::percent_format()))\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nI attempted to mutate the percent female data, but it still displayed as 0 percent.\n\n\n\n\ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(scale_y_continuous(labels = scales::label_dollar())) %&gt;%\n  gf_refine(\n    scale_x_continuous(\n      breaks = c(0, 0.25, 0.50, 0.75, 1),\n      labels = scales::percent_format()\n    )\n  )\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nI tried specifying breaks in the data, but the percentages disappeared altogether.\n\n\n\n\njob_gender$percent_female &lt;- job_gender$percent_female * 1e2  \ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n    scale_y_continuous(labels = scales::label_dollar()) %&gt;%\n    scale_x_continuous(limits = c(0, 100), labels = scales::percent_format(scale = 1))\n\n&lt;ScaleContinuousPosition&gt;\n Range:  \n Limits:    0 --  100\n\n\nThe numbers on the x-axis have changed and no longer match the originals in Attempt 1.\n\n\n\n\njob_gender$percent_female &lt;- job_gender$percent_female * 1e2\ngf_point(median_salary ~ percent_female,\n         size = ~ total_workers,\n         data = job_gender,\n         fill = \"black\",\n         color = \"black\",\n         alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Salaries and Gender Proportion in the Workforce\",\n    x = \"% of workforce reported as female\",\n    y = \"Median salary in the occupation\"\n  ) %&gt;%\n  gf_refine(scale_y_continuous(labels = scales::label_dollar())) %&gt;%\n  gf_refine(\n    scale_x_continuous(\n      labels = scales::percent_format()\n    )\n  )\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nI spent about two hours trying to resolve the issue with the data showing 0 percent on the x-axis. Despite multiple attempts—ranging from adjusting the scale, specifying limits, mutating the percentage data, and setting breaks—nothing seemed to work. Each attempt either resulted in all the percentages remaining at 0 or caused the percentages to disappear entirely. Even when I tried different methods, the numbers on the axis shifted, and I still couldn’t get the correct percentages to display. It’s been frustrating, as no matter what I tried, the issue persists, and I haven’t been able to resolve it.\n\n\n\nThe graph titled “Salaries and Gender Proportion in the Workforce” seeks to answer the following questions:\n1.What is the relationship between salary levels and the proportion of females in various occupations?\n( The graph could aim to explore whether occupations with a higher percentage of female workers tend to offer lower salaries compared to male-dominated fields.)\n\nIn the dataset, there seems to be a trend where occupations with a higher proportion of female workers tend to offer lower average salaries. For example, jobs such as elementary school teachers (where females represent a large portion of the workforce) have relatively lower wages compared to male-dominated fields like engineering or management, where salaries are significantly higher. This suggests a negative relationship between the proportion of female workers and salary levels.\n\n2.How does gender representation in the workforce affect wage distribution across different job categories?\n( It may seek to analyze whether there is a noticeable correlation between the gender composition of an occupation and the wage gap, specifically examining how gender representation impacts salary levels in different sectors.)\n\nThe data shows that occupations with more male representation tend to have higher salaries. For example, industries such as construction and technology, which are male-dominated, tend to have higher wages. On the other hand, female-dominated fields like healthcare support or administrative services exhibit lower wage levels, indicating a wage gap between gender representation in different sectors.\n\n3.Which occupations exhibit significant disparities between the proportion of female workers and their salary levels?\n( The graph could identify which job categories have high female representation but lower salaries, highlighting potential areas of gender-based wage inequality.)\n\nA significant disparity is observed in roles like nursing, where there is a high proportion of female workers but relatively lower average salaries. Conversely, in occupations such as executive management, which have a low proportion of female workers, the wages are considerably higher. This highlights the wage inequality that exists in certain sectors despite high female representation.\n\n4.Do certain industries show a trend of higher wages for occupations with fewer female workers?\n( It may seek to explore whether male-dominated industries offer higher wages compared to female-dominated ones, pointing to the potential for occupational segregation to influence income inequality.)\n\nYes, industries such as engineering and technology, which are male-dominated, display higher wages. The data indicates that male-dominated fields tend to offer better pay compared to female-dominated occupations, suggesting occupational segregation and its impact on wages.\n\n5.Is there evidence of gender wage gaps in high-paying versus low-paying occupations?\n( The graph could aim to determine whether high-paying jobs are more prone to gender wage gaps compared to lower-paying ones, and how these gaps manifest across different sectors.)\n\nYes, high-paying occupations such as executive management and engineering have a noticeable gender wage gap, with male workers dominating these fields and receiving higher salaries. On the other hand, lower-paying fields like nursing or teaching—which have a higher proportion of female workers—show relatively smaller wage gaps but also lower overall salaries.\n\n\n\n\n1.What kind of chart is used in the figure?\nThe chart is a bubble plot (or scatter plot with size variation), where each bubble represents an occupation. The size of the bubbles typically corresponds to the number of workers in that occupation, while the x-axis represents salaries, and the y-axis shows the proportion of female workers in those occupations.\n2.What geometries have been used, and to which variables have these geometries been mapped?\nThe key geometries used in this bubble plot are:\n\nPoints (bubbles): Represent occupations.\nX-axis: Mapped to salaries (salary levels).\nY-axis: Mapped to the proportion of female workers in each occupation.\nSize of bubbles: Mapped to the number of workers in each occupation.\n\n3.Based on this graph, do you think gender plays a role in salaries? What is the trend you see?\nYes, gender seems to play a significant role in salaries. The trend observed is that occupations with higher proportions of female workers tend to have lower salaries. For example, professions dominated by women (e.g., nursing, teaching) exhibit relatively smaller salaries compared to male-dominated fields like engineering or executive management, which have higher wages. This suggests a gender wage gap where male-dominated occupations offer higher pay compared to female-dominated ones.\n4.If SALARY, NO_OF_WORKERS, GENDER, OCCUPATION were available in the original dataset, what pre-processing would have been necessary to obtain this plot?\nSeveral preprocessing steps would likely be necessary:\n\nConversion of Salary Data: Depending on the scale of salary values, some conversion to a common currency/scale might be required for better comparison.\nGender Proportion Calculation: The dataset would need to compute the proportion of female workers (e.g., percentage of female workers relative to the total number of workers in each occupation).\nHandling Missing Data: Any missing data in variables such as salary or number of workers would need to be addressed.\nSize Mapping: The number of workers would need to be scaled to appropriately map the bubble sizes in the plot, ensuring large and small values are distinguishable.\nAggregating Data: If the data included detailed information about individual workers, it might have been grouped by occupation. This would involve calculating summary statistics such as the average salary, the percentage of female workers, and the total number of workers for each job type.\n\n\n\n\nThe graph titled “Salaries and Gender Proportion in the Workforce” provides an insightful view into the relationship between gender proportions in various occupations and the corresponding salary disparities. By analyzing this data, we gain a deeper understanding of how gender representation in the workforce influences salary distribution across different job sectors.\n\n\n\nFrom analyzing the graph and the associated job_gender dataset, I observed the following:\n\nGender Imbalance in High-Paying Jobs: Occupations with a higher proportion of male workers, such as engineering and technology, tend to have higher median salaries. This indicates that male-dominated industries are often associated with higher compensation, highlighting a disparity in salary distribution across different sectors.\nLower Salaries in Female-Dominated Occupations: On the other hand, jobs with a higher percentage of female workers, such as nursing, teaching, and clerical roles, show significantly lower median salaries. This suggests that occupations traditionally dominated by women often receive lower pay compared to male-dominated fields.\nWage Disparities in Gender-Balanced Roles: Even in occupations where gender representation is relatively balanced, such as healthcare and education, there is still a noticeable gap in median salaries. This reinforces the idea that salary disparity isn’t solely dependent on the proportion of gender but is also influenced by societal and occupational factors.\n\n\n\n\nIf I were to draw conclusions based on this data, it’s clear that gender continues to play a critical role in shaping salary structures across industries. Investments in gender equity, particularly in improving the salaries of female-dominated sectors, could help bridge the pay gap. Healthcare and education, where salaries remain lower despite more balanced gender representation, should be prioritized in any gender equality effort.\n\n\n\nEach sector provides different insights into the relationship between gender and salaries:\n\nMale-Dominated Occupations: Roles in engineering, manufacturing, and technology, which are predominantly occupied by men, not only exhibit higher salaries but also reflect the societal value placed on these professions. Addressing this imbalance by encouraging more women to enter these sectors could help reduce the gender pay gap.\nFemale-Dominated Occupations: Fields such as teaching, nursing, and clerical work are primarily composed of women and tend to have lower salaries. These industries need targeted strategies to increase wages and provide women with equal earning opportunities.\nGender-Balanced Occupations: Even in sectors like healthcare, where gender balance is closer, salary gaps still exist. This suggests that achieving gender parity in representation alone may not be enough to address the underlying pay disparity.\n\n\n\n\nThis graph effectively visualizes how gender proportions across different occupations impact salary structures, offering key insights for policymakers, businesses, and advocacy groups. The data highlights critical sectors where pay equity efforts should be directed, ensuring equal opportunities and fair compensation regardless of gender. This visualization allows for a more targeted approach to resolving wage disparities and fostering a more inclusive workforce."
  },
  {
    "objectID": "posts/Assignment 3 - Part 1/index.html",
    "href": "posts/Assignment 3 - Part 1/index.html",
    "title": "Assignment 3 - Part 1",
    "section": "",
    "text": "We are investigating spending behaviour between genders.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(crosstable)\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(dplyr)\nlibrary(broom)\n\n\n\nObjective:\nThe purpose of this research experiment is to investigate whether there is a significant difference in the amount of money spent between guys and girls among students at MAHE Bengaluru. The study aims to test the hypothesis that guys tend to spend more money than girls, by collecting and analyzing spending data during a specific period.\nHypothesis:\n\nGuys spend more money on average compared to girls within a given timeframe.\n\nExperiment Design:\nData Collection:\n\nSample: The dataset consists of spending data from 60 students at MAHE Bengaluru, with 30 guys and 30 girls. The participants were randomly selected through coin tosses and asked to record their spending on October 23rd, 2024.\nData Sources: The data was recorded in an Excel sheet by the people conducting the experiment. Each participant reported how much money they spent on the allocated date.\n\nVariables Measured:\n\nTarget Variable: Amount of money spent by each participant during the experiment period.\nPredictor Variable: Gender (guys vs. girls)\n\nSampling:\n\nTime Period: The experiment was conducted on October 24th, 2024, over a period of 1.5 hours.\nParticipant Selection Criteria: 30 guys and 30 girls were randomly selected by tossing a coin.\n\nAnalysis Plan:\n\nData Cleaning and Transformation: The data was checked for accuracy in the Excel sheet, ensuring that each participant’s spending was properly recorded and that there were no missing or erroneous entries.\nExploratory Data Analysis (EDA): Visualizations like histograms and box plots will be used to compare spending distributions between guys and girls, in order to identify any patterns or discrepancies.\n\nStatistical Tests:\n\nTwo-Sample t-Test: A two-independent sample test for means has to be conducted to compare the average amount spent by guys and girls. This helps in determining if there is a statistically significant difference in spending behaviour between the two groups.\n\n\n\nPermutation Test: A permutation test has to be conducted to assess the likelihood of the observed difference in spending occurring by chance, providing a non-parametric alternative to the two-sample t-test.\nDescriptive Statistics: Measures like mean, median, and standard deviation have to be calculated for both groups to summarize spending behaviour.\nWilcoxon Rank-Sum Test: This is a non-parametric test that has to be conducted to compare the spending behaviour between guys and girls.( if the normality assumption is not met )\n\nLimitations:\n\nSample Size: With 30 participants per gender, the results may not be generalizable to a larger population. A more extensive sample would have provided greater reliability.\nContextual Factors: The study did not account for reasons behind spending (e.g., necessities vs. discretionary purchases), which might have influenced spending patterns.\n\nOutcome:\nThe analysis will reveal whether a significant difference in spending exists between guys and girls at MAHE Bengaluru. If the hypothesis holds, it would suggest that guys, on average, spend more in a limited timeframe. These findings will provide insights into gender-specific spending behaviour within this student population.\n\n\n\n\nspending_23rd &lt;- read_csv(\"../../data/Pocketmoney.csv\")\n\nRows: 82 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Name, Gender\ndbl (2): Sr no, Money Spent\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nspending_23rd\n\n# A tibble: 82 × 4\n   `Sr no` Name     Gender `Money Spent`\n     &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n 1       1 Aagam    Male             150\n 2       2 Aakash   Male             240\n 3       3 Aarushi  Female           382\n 4       4 Abheeta  Female            60\n 5       5 Adithya  Male              68\n 6       6 Aditya   Male             300\n 7       7 Akanksha Female           270\n 8       8 Amruta   Female           190\n 9       9 Anaaya   Female           300\n10      10 Anish    Male               0\n# ℹ 72 more rows\n\n\nThe table provides information on the spending behaviour of individuals on October 23rd, categorized by gender. It highlights the amount spent by 82 participants, allowing for a comparison of spending patterns between guys and girls. The data provides insight into the variability in spending amounts, as well as individual outliers, offering a basis for further analysis of gender-based financial behaviour.\n\nspending_modified &lt;- spending_23rd %&gt;% \n  dplyr::mutate( Gender = as_factor(Gender)) \n\n\n\n\n\nglimpse(spending_modified)\n\nRows: 82\nColumns: 4\n$ `Sr no`       &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ Name          &lt;chr&gt; \"Aagam\", \"Aakash\", \"Aarushi\", \"Abheeta\", \"Adithya\", \"Adi…\n$ Gender        &lt;fct&gt; Male, Male, Female, Female, Male, Male, Female, Female, …\n$ `Money Spent` &lt;dbl&gt; 150, 240, 382, 60, 68, 300, 270, 190, 300, 0, 250, 85, 7…\n\n\nThe columns include a unique identifier for each participant (Sr no), their Name, Gender (male or female), and the Money Spent. The dataset contains numeric data for the money spent, with a wide range of amounts from 0 to significant expenditures, allowing for analysis of spending patterns between males and females.\n\n\n\n\ninspect(spending_modified)\n\n\ncategorical variables:  \n    name     class levels  n missing\n1   Name character     82 82       0\n2 Gender    factor      2 82       0\n                                   distribution\n1 Aagam (1.2%), Aakash (1.2%) ...              \n2 Male (50%), Female (50%)                     \n\nquantitative variables:  \n         name   class min     Q1 median     Q3   max     mean         sd  n\n1       Sr no numeric   1  21.25   41.5  61.75    82  41.5000   23.81526 82\n2 Money Spent numeric   0 100.00  264.5 596.25 13000 720.9634 1835.72169 82\n  missing\n1       0\n2       0\n\n\nThe gender distribution is evenly split, with no missing data in the dataset. The summary statistics for the Money Spent variable show a wide range of spending, with a minimum value of 0 rupees and a maximum value of 13,000 rupees. The median spending is 264.5 rupees, while the mean spending is 720.9 rupees, indicating that a few individuals spent significantly more than others. The standard deviation of 1,835.3 rupees reflects a high level of variability in spending behavior. These results suggest that while most participants had moderate spending, a few high spenders significantly influenced the overall average.\n\n\n\n\nskim(spending_modified)\n\n\nData summary\n\n\nName\nspending_modified\n\n\nNumber of rows\n82\n\n\nNumber of columns\n4\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nName\n0\n1\n3\n12\n0\n82\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n2\nMal: 41, Fem: 41\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSr no\n0\n1\n41.50\n23.82\n1\n21.25\n41.5\n61.75\n82\n▇▇▇▇▇\n\n\nMoney Spent\n0\n1\n720.96\n1835.72\n0\n100.00\n264.5\n596.25\n13000\n▇▁▁▁▁\n\n\n\n\n\nThe key variable of interest, Money Spent, shows a mean spending of 720.96 rupees, with a high variability indicated by a standard deviation of 1,835.7 rupees. The spending ranges from 0 to 13,000 rupees, with a median of 264.5 rupees. The distribution is heavily skewed, with most participants spending below the median, but a few high spenders significantly contributing to the total amount, leading to the large spread in spending behavior.\n\n\n\n\n\n\nMoney Spent (dbl): The total amount of money spent by each participant on October 23rd, recorded in Indian rupees.\n\n\n\n\n\nSr no (fct): A sequential number assigned to each participant for identification purposes (treated as a categorical factor).\nName (chr): The name of the participant.\nGender (chr): The gender of the participant, categorized as either Male or Female.\n\n\n\n\n\n\ngf_histogram(~ `Money Spent` | Gender, \n             data = spending_modified, \n             binwidth = 200, \n             fill = \"skyblue\", \n             color = \"black\") %&gt;% \n  gf_labs(\n    title = \"Distribution of Money Spent by Gender\",\n    x = \"Money Spent (in rupees)\",\n    y = \"Count\"\n  )\n\n\n\n\n\n\n\n\nThe histograms comparing money spent by gender reveal that both males and females exhibit a similar spending pattern, with the majority of participants spending relatively small amounts, primarily below 1,000 rupees. There is a notable concentration of individuals in both groups who spent minimal amounts (0 to 500 rupees), with a few significant outliers who spent as much as 13,000 rupees. The distribution is right-skewed for both genders, indicating that while most participants spent modestly, a few individuals in each group spent considerably more. Overall, the spending behaviour shows similar trends between males and females, with only slight variations in the frequency of higher spending outliers.\n\n\n\n\ngf_bar(\n  mean(`Money Spent`) ~ Gender,\n  data = spending_modified,\n  fill = ~ Gender\n) %&gt;% \n  gf_labs(\n    title = \"Average Money Spent by Gender\",\n    x = \"Gender\",\n    y = \"Average Money Spent (in rupees)\"\n  ) \n\nWarning: Ignoring unknown aesthetics: .\n\n\n\n\n\n\n\n\n\nThe bar chart compares the average money spent by gender, showing that both males and females have nearly identical average spending, with only a slight difference. The mean amount spent by males and females is approximately 721 rupees, indicating that, on average, there is minimal variation in spending behaviour between the two genders in this dataset. This suggests that gender does not significantly influence the average amount of money spent on October 23rd.\n\n\n\n\ngf_boxplot(`Money Spent` ~ Gender, \n           data = spending_modified, \n           fill = ~ Gender) %&gt;% \n  gf_labs(\n    title = \"Distribution of Money Spent by Gender\",\n    x = \"Gender\",\n    y = \"Money Spent (in rupees)\"\n  ) \n\n\n\n\n\n\n\n\nThe box plot comparing the distribution of money spent between males and females shows that both genders have a similar range of spending, with most participants spending relatively low amounts. The median spending is low for both genders, as indicated by the position of the boxes. However, there are a few notable outliers in both groups, with some individuals spending significantly higher amounts, particularly around 10,000 rupees for males. These outliers create a noticeable extension in the upper range of the male box plot. Overall, the distribution suggests that while typical spending is modest, a few individuals in both groups account for much higher spending.\n\n\n\n\ngf_point(`Money Spent` ~ Gender, \n         data = spending_modified,\n         color = ~ Gender) %&gt;% \n  gf_labs(\n    title = \"Individual Money Spent by Gender\",\n    x = \"Gender\",\n    y = \"Money Spent (in rupees)\"\n  ) \n\n\n\n\n\n\n\n\nThe scatter plot displays individual spending points for both males and females, highlighting the distribution of money spent on October 23rd. Most participants, regardless of gender, spent relatively small amounts, clustering around the lower end of the plot. However, there are noticeable outliers in both groups, with a few individuals spending significantly higher amounts—one female and one male spending close to 13,000 rupees. These outliers are clearly separated from the main group, indicating that while the general spending pattern is modest, a few individuals contribute to a much higher level of spending.\n\n\n\n\nspending_modified %&gt;%\n  gf_density(~ `Money Spent`, fill = \"gray\", alpha = 0.5) %&gt;%\n  gf_fitdistr(~ `Money Spent`, dist = \"dnorm\") %&gt;%\n  gf_labs(\n    title = \"Density Plot of Money Spent\",\n    subtitle = \"Compared with Normal Distribution\",\n    x = \"Money Spent (in rupees)\",\n    y = \"Density\"\n  )\n\n\n\n\n\n\n\n\nThe actual spending data is highly right-skewed, with a majority of participants spending small amounts, as indicated by the sharp peak near zero. The density drops off quickly, with a long tail extending toward higher spending amounts, reflecting a few individuals who spent significantly more. The fitted normal distribution deviates from the actual data, confirming that the spending data does not follow a normal distribution, particularly due to the extreme outliers and the overall skewness. This suggests that parametric tests assuming normality may not be appropriate without data transformation. ( If the data is not normally distributed, the results could be unreliable.)\n\n\n\n\nspending_modified &lt;- spending_modified %&gt;%\n  mutate(log_money_spent = log(`Money Spent` + 1))\n\ngf_density(~ log_money_spent, data = spending_modified) %&gt;% \n  gf_labs(\n    title = \"Log-Transformed Distribution of Money Spent\",\n    x = \"Log of Money Spent\",\n    y = \"Density\"\n  )\n\n\n\n\n\n\n\n\nThe density plot of the log-transformed spending data shows a more symmetric distribution compared to the original skewed data. After applying the log transformation, the previously right-skewed data is now centered with a peak around a log value of 4 to 5, suggesting a more normalized spread of spending behavior. While the log transformation has reduced the extreme effects of outliers and compressed the range of higher values, the data still exhibits some variation but appears more suitable for parametric testing.\n\n\n\n\nt &lt;- t.test(\n  `Money Spent` ~ Gender, \n  data = spending_modified, \n  mu = 0, \n  alternative = \"two.sided\", \n  conf.int = TRUE, \n  conf.level = 0.95\n) %&gt;% \nbroom::tidy()\n\nt\n\n# A tibble: 1 × 10\n  estimate estimate1 estimate2 statistic p.value parameter conf.low conf.high\n     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1     55.3      749.      693.     0.136   0.893      76.5    -757.      868.\n# ℹ 2 more variables: method &lt;chr&gt;, alternative &lt;chr&gt;\n\n\nThe results of the Welch Two-Sample t-test comparing the average money spent by males and females show a t-value of 0.13555 and a p-value of 0.8925, which is much larger than the typical significance threshold of 0.05. This indicates that there is no statistically significant difference in the mean spending between the two groups. The 95% confidence interval for the difference in means ranges from -757.07 to 867.66, further suggesting that the difference could be zero. The mean spending for males was 748.61 rupees, while the mean for females was 693.32 rupees, but this difference is not statistically significant based on the t-test results.\n\n\n\n\nwilcox_test &lt;- wilcox.test(\n  `Money Spent` ~ Gender, \n  data = spending_modified, \n  alternative = \"two.sided\", \n  conf.int = TRUE, \n  conf.level = 0.95\n) %&gt;% \nbroom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low conf.high method               alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;      \n1     55.0      936.   0.381    -70.0      180. Wilcoxon rank sum t… two.sided  \n\n\nThe Wilcoxon Signed-Rank Test results indicate that the p-value is 0.3806, which is greater than the common significance threshold of 0.05. This suggests that there is no statistically significant difference in the median spending between males and females. The test statistic is 935.5, with a 95% confidence interval for the difference in spending between groups ranging from -69.99 to 180. The estimate of the difference in ranks is 55.00, further indicating that the observed difference in spending behavior is not large enough to be statistically significant. Therefore, based on this test, we cannot conclude that there is a significant difference in spending between males and females.\n\n\n\n\nperm_test_result &lt;- do(1000) * diffmean(\n  shuffle(`Money Spent`) ~ Gender, \n  data = spending_modified\n)\nperm_test_result\n\n         diffmean\n1    -311.3414634\n2     633.2439024\n3     671.0487805\n4      84.4146341\n5    -686.6097561\n6     145.0000000\n7    -195.9268293\n8     577.1463415\n9    -125.8292683\n10    373.0487805\n11    -56.5121951\n12   -510.1219512\n13    618.6097561\n14     98.7073171\n15    145.9756098\n16    135.8780488\n17   -660.0243902\n18   -303.5853659\n19   -821.2439024\n20    167.5853659\n21     75.1463415\n22    421.6341463\n23   -614.1219512\n24    -21.8780488\n25   -330.7073171\n26   -588.4634146\n27    745.4878049\n28   -103.0487805\n29   -114.8536585\n30     72.3658537\n31    -37.4390244\n32   -174.4146341\n33   -198.3170732\n34    637.7317073\n35     27.8292683\n36    -73.9268293\n37    128.3170732\n38    449.6341463\n39    702.2682927\n40   -470.0731707\n41   -140.4634146\n42    134.8048780\n43    466.1219512\n44   -151.0000000\n45    561.7804878\n46   -661.3414634\n47   -434.8048780\n48    170.3658537\n49   -485.0975610\n50    546.6097561\n51   -420.2195122\n52   -703.7317073\n53    526.2682927\n54    -88.3170732\n55    540.6585366\n56   -354.6585366\n57     68.2682927\n58   -168.2682927\n59   -205.4390244\n60    522.1707317\n61    547.4390244\n62    131.0975610\n63   -527.9268293\n64    346.4634146\n65    572.2195122\n66    107.7804878\n67   -419.0487805\n68    330.0731707\n69    -21.7317073\n70    348.4146341\n71    629.0975610\n72    -93.3414634\n73    601.2926829\n74    284.1707317\n75   -434.0731707\n76     -8.3170732\n77    208.1707317\n78   -122.1219512\n79   -540.5609756\n80   -718.2195122\n81   -252.4634146\n82   -541.9268293\n83   -354.6097561\n84    287.5365854\n85   -713.3902439\n86    462.3658537\n87    156.0243902\n88    434.3658537\n89     77.4878049\n90    608.7560976\n91   -128.8048780\n92    -42.3658537\n93    -37.8292683\n94   -781.8780488\n95    475.3414634\n96   -752.4634146\n97   -358.9024390\n98   -470.1707317\n99    -30.9024390\n100  -570.4146341\n101   567.4878049\n102    14.9512195\n103   721.8292683\n104   -46.8048780\n105   482.5609756\n106  -642.6585366\n107  -269.1951220\n108   487.0975610\n109   517.7317073\n110  -634.3658537\n111   266.5121951\n112   295.4390244\n113  -740.2682927\n114  -385.1951220\n115    80.5121951\n116  -669.7317073\n117   345.4878049\n118    75.6341463\n119    49.0487805\n120   343.7804878\n121    54.8048780\n122   435.5853659\n123  -653.9756098\n124  -683.7804878\n125   257.5365854\n126   645.5365854\n127  -444.2682927\n128  -749.9268293\n129   821.1951220\n130    56.5121951\n131   472.0243902\n132  -254.4634146\n133     8.2682927\n134  -761.2439024\n135  -602.1707317\n136  -174.0243902\n137  -229.3414634\n138  -593.9268293\n139   210.3658537\n140  -592.8048780\n141  -372.8048780\n142   751.7317073\n143   -34.5609756\n144   703.2926829\n145   722.7560976\n146  -378.0243902\n147  -122.3170732\n148    58.6097561\n149   -42.4146341\n150   716.2195122\n151    47.1463415\n152  -553.6341463\n153   596.4634146\n154   669.0000000\n155  -721.2926829\n156  -187.8292683\n157    39.9268293\n158   -55.7317073\n159  -341.1463415\n160   -85.0000000\n161   144.4146341\n162   395.2926829\n163   664.6097561\n164  -581.5853659\n165    27.2439024\n166   362.0731707\n167    21.1951220\n168  -314.6585366\n169    10.6097561\n170  -777.6341463\n171   217.1951220\n172   106.0731707\n173  -206.4634146\n174   288.8536585\n175  -213.0487805\n176   -24.6097561\n177   -40.0243902\n178  -263.5365854\n179   754.1219512\n180    34.3170732\n181   267.9756098\n182   124.0731707\n183   425.5853659\n184   580.4634146\n185   495.0000000\n186   518.5121951\n187   100.7073171\n188   461.4878049\n189   -15.6341463\n190   616.1219512\n191   767.3414634\n192   193.2926829\n193  -107.0000000\n194    74.9024390\n195   548.4146341\n196   344.3170732\n197   584.0731707\n198  -540.8536585\n199  -630.3170732\n200  -162.0731707\n201  -595.0487805\n202  -493.2439024\n203  -333.0487805\n204  -681.2926829\n205   456.2195122\n206  -145.7317073\n207   -88.1219512\n208   707.5853659\n209  -298.0243902\n210  -732.3658537\n211  -523.9756098\n212  -712.9024390\n213   -24.4634146\n214  -270.4146341\n215  -101.7804878\n216   368.7560976\n217  -190.5121951\n218  -177.7804878\n219    71.2439024\n220  -638.2195122\n221  -114.3170732\n222  -588.7073171\n223   716.6097561\n224   503.1951220\n225  -123.4390244\n226  -610.4634146\n227   190.5609756\n228   122.7560976\n229    27.5853659\n230   448.1219512\n231  -381.6341463\n232   114.1219512\n233  -634.7560976\n234   101.4878049\n235    82.0243902\n236   487.9756098\n237   191.1463415\n238  -709.0487805\n239  -100.9024390\n240   495.5853659\n241  -526.1219512\n242    15.0487805\n243   149.1463415\n244  -635.4878049\n245  -595.0000000\n246   170.7073171\n247  -720.5609756\n248  -110.1219512\n249   713.3414634\n250   251.5365854\n251   598.6097561\n252   -20.1707317\n253  -339.0487805\n254   -50.8048780\n255  -651.2439024\n256  -186.6585366\n257  -477.2439024\n258  -157.9756098\n259   486.7073171\n260   -93.2439024\n261    24.5609756\n262  -191.0487805\n263  -198.2195122\n264   276.2195122\n265  -254.2682927\n266   159.8780488\n267   309.2439024\n268   219.0000000\n269   294.8536585\n270   387.7317073\n271  -617.9756098\n272  -180.0731707\n273   496.4634146\n274  -182.7560976\n275   410.1707317\n276   179.8292683\n277   559.5853659\n278   606.7560976\n279   -26.1707317\n280  -485.8292683\n281     0.7073171\n282  -817.7317073\n283  -375.7804878\n284  -189.4878049\n285    77.6341463\n286    79.6341463\n287    83.8780488\n288   495.0487805\n289     9.1951220\n290   186.4634146\n291    32.1219512\n292   484.1707317\n293   165.2439024\n294  -563.2926829\n295  -301.1951220\n296   705.1951220\n297   -70.8536585\n298  -520.1219512\n299  -680.9512195\n300    97.7804878\n301  -466.6097561\n302  -194.9024390\n303   -62.1219512\n304   312.7073171\n305  -352.7560976\n306  -250.7560976\n307  -641.0975610\n308   176.0243902\n309  -101.0487805\n310  -166.4146341\n311   362.5121951\n312  -450.3170732\n313   172.6585366\n314  -465.8780488\n315  -464.0243902\n316   525.4878049\n317   666.5121951\n318   543.6829268\n319   588.5121951\n320  -107.3414634\n321    41.6341463\n322   277.6829268\n323    81.0487805\n324  -334.3658537\n325   -95.0000000\n326   -90.3658537\n327    52.4634146\n328   762.4146341\n329  -118.6097561\n330  -495.5853659\n331  -452.2195122\n332  -107.3414634\n333  -173.2439024\n334    83.4878049\n335   386.9512195\n336  -359.4390244\n337   297.4390244\n338   673.0000000\n339  -290.3170732\n340   631.1463415\n341  -137.5365854\n342   365.4390244\n343   184.0243902\n344  -194.7073171\n345  -155.3902439\n346   604.2682927\n347   526.5121951\n348   486.0243902\n349  -207.6341463\n350   713.6341463\n351  -489.9268293\n352  -177.9268293\n353   341.9756098\n354   -39.8780488\n355   153.5853659\n356   239.9756098\n357   649.6829268\n358   -73.7804878\n359  -104.4146341\n360    67.6341463\n361    39.0487805\n362    18.3170732\n363   -58.0243902\n364  -471.2439024\n365   297.0487805\n366    71.7804878\n367    -9.4390244\n368  -492.7073171\n369  -144.1707317\n370   726.9024390\n371   128.8048780\n372   509.7804878\n373  -250.6585366\n374   -78.0731707\n375  -176.4146341\n376  -301.4878049\n377  -526.8048780\n378   301.0487805\n379    20.5121951\n380   406.6097561\n381  -277.3414634\n382    99.3414634\n383  -251.4878049\n384    -7.8780488\n385   297.5365854\n386   -48.0731707\n387  -533.7317073\n388   555.2439024\n389  -106.0731707\n390   461.2439024\n391    55.4390244\n392   144.2195122\n393  -498.5609756\n394   828.7073171\n395  -117.9268293\n396    58.5121951\n397   -36.3658537\n398   755.1951220\n399  -134.5609756\n400   158.5609756\n401    -4.0731707\n402   117.7804878\n403  -114.5121951\n404  -589.4878049\n405    90.0731707\n406  -837.1951220\n407   444.7560976\n408   362.2682927\n409   152.1219512\n410  -591.1463415\n411   318.7073171\n412  -544.0731707\n413  -371.4390244\n414    26.2682927\n415   306.2682927\n416   -87.8292683\n417  -466.8536585\n418   769.0487805\n419   -84.7073171\n420    24.4634146\n421   688.5609756\n422  -174.0243902\n423    73.6829268\n424  -105.6829268\n425  -369.5365854\n426    72.1707317\n427   235.9268293\n428   622.9024390\n429   -41.6829268\n430   553.0975610\n431  -485.0000000\n432   -35.2926829\n433   -35.4878049\n434   -88.3170732\n435  -534.1707317\n436  -224.8048780\n437   509.8292683\n438  -698.3658537\n439  -716.4146341\n440   203.3902439\n441   287.6341463\n442  -630.1707317\n443   139.8780488\n444    76.4146341\n445  -358.5121951\n446   407.4390244\n447  -670.0243902\n448    81.2439024\n449  -147.8780488\n450  -168.5121951\n451  -608.7073171\n452    96.8536585\n453   659.0975610\n454  -595.3902439\n455   313.2439024\n456   144.4634146\n457  -677.2439024\n458   454.6097561\n459   502.0731707\n460  -342.0243902\n461   546.6585366\n462   -32.9024390\n463  -557.6341463\n464   -70.4146341\n465  -269.0000000\n466   761.0975610\n467  -723.8292683\n468   510.5121951\n469   231.0975610\n470   391.3902439\n471   226.1707317\n472   149.6341463\n473  -525.6341463\n474  -605.5853659\n475   679.8780488\n476   375.5365854\n477   699.5365854\n478   212.6585366\n479  -431.9756098\n480  -700.7073171\n481   -93.6341463\n482  -431.5365854\n483   -48.2195122\n484   111.3902439\n485  -681.4878049\n486  -134.4146341\n487   514.0243902\n488  -390.9024390\n489   661.7804878\n490   174.7560976\n491   -49.0975610\n492   -10.4146341\n493  -318.8048780\n494    -6.9024390\n495   112.3658537\n496   651.6341463\n497   635.7804878\n498  -186.0731707\n499   351.2439024\n500  -613.7804878\n501  -586.8536585\n502  -314.7560976\n503  -179.0975610\n504   610.3170732\n505    49.0487805\n506    94.8048780\n507   104.2195122\n508    89.4878049\n509   249.6829268\n510  -575.1951220\n511   280.4146341\n512   364.3170732\n513   118.5121951\n514  -596.1707317\n515  -681.0975610\n516  -167.1951220\n517  -788.7560976\n518   486.4146341\n519  -188.4146341\n520  -220.6585366\n521   348.4634146\n522    49.9756098\n523    -0.5121951\n524  -153.8780488\n525    76.7073171\n526  -169.4390244\n527  -234.6097561\n528   113.3902439\n529  -384.6097561\n530   236.9024390\n531   696.3170732\n532   137.0975610\n533    21.1463415\n534   445.6829268\n535   235.0487805\n536   632.2682927\n537   490.1707317\n538   541.2926829\n539   248.3658537\n540  -587.1951220\n541  -542.9512195\n542   338.8536585\n543  -161.8780488\n544  -125.8292683\n545  -487.7804878\n546   858.1707317\n547   413.5365854\n548    46.9512195\n549  -495.1463415\n550  -461.7804878\n551    93.0975610\n552   102.4634146\n553   751.1951220\n554    79.0975610\n555  -491.1463415\n556   -23.6829268\n557   122.7560976\n558   686.6585366\n559   -44.0731707\n560   201.2439024\n561    59.8780488\n562  -600.1707317\n563   128.6097561\n564   789.4390244\n565    34.9024390\n566   -20.4146341\n567   356.9024390\n568  -510.0243902\n569  -173.9268293\n570   463.5365854\n571  -738.6585366\n572   621.2926829\n573   -27.7317073\n574   199.1951220\n575    33.0487805\n576   611.0000000\n577  -138.0731707\n578  -157.0487805\n579   273.5853659\n580   267.2926829\n581  -414.4634146\n582   139.5365854\n583    58.3170732\n584   426.5121951\n585    95.4390244\n586   169.4390244\n587   367.5853659\n588   -11.2926829\n589   -45.1463415\n590  -400.8536585\n591  -559.3414634\n592   442.5609756\n593  -721.7317073\n594   672.5121951\n595    22.8048780\n596   168.4146341\n597   102.2682927\n598  -587.8292683\n599  -683.5365854\n600    39.8780488\n601   430.1707317\n602   712.5121951\n603   549.7317073\n604   454.1219512\n605   161.9756098\n606  -470.5609756\n607  -178.2195122\n608   691.1463415\n609  -524.9024390\n610   821.7317073\n611   -48.5609756\n612   -52.7560976\n613   596.9512195\n614    75.6829268\n615   714.8536585\n616  -119.7317073\n617   -70.0731707\n618   279.6341463\n619  -107.1463415\n620  -193.5853659\n621    98.1707317\n622   267.0000000\n623  -108.8048780\n624   -82.7073171\n625  -678.1707317\n626   729.0975610\n627   163.8292683\n628   334.6097561\n629   345.8780488\n630   230.8048780\n631   109.9268293\n632  -153.3414634\n633   109.8780488\n634   247.3414634\n635   516.2682927\n636   436.2195122\n637    24.9024390\n638  -649.8780488\n639   316.4634146\n640   -55.2439024\n641   138.9024390\n642  -149.9756098\n643    30.0731707\n644  -220.5121951\n645   762.9512195\n646   605.3414634\n647   156.3658537\n648  -720.4634146\n649   -10.9512195\n650   726.5121951\n651  -179.0487805\n652  -498.3658537\n653  -565.8780488\n654  -291.8292683\n655   728.5609756\n656   -61.4390244\n657  -226.3658537\n658  -487.3414634\n659   341.1951220\n660  -245.7804878\n661  -644.1219512\n662   230.7560976\n663   -90.5609756\n664   585.6829268\n665  -271.8780488\n666  -779.4390244\n667  -281.3902439\n668    73.1951220\n669   -35.4390244\n670   463.7317073\n671   468.6097561\n672  -161.9268293\n673  -559.4878049\n674  -183.3414634\n675  -248.2195122\n676   682.3170732\n677  -385.6829268\n678   -13.9756098\n679   737.2439024\n680   201.6341463\n681   437.3414634\n682  -683.3902439\n683  -313.7804878\n684  -232.7073171\n685    -3.3902439\n686   -25.9268293\n687   -42.6585366\n688   414.6585366\n689   107.5853659\n690  -444.4634146\n691   239.5365854\n692  -684.1707317\n693  -267.5365854\n694   505.6341463\n695   660.5121951\n696  -135.0000000\n697   656.2195122\n698    76.6097561\n699   558.0243902\n700  -809.1463415\n701   -64.7073171\n702   271.7804878\n703  -129.2926829\n704  -505.6829268\n705  -275.1463415\n706   -45.8292683\n707  -651.8780488\n708   186.5609756\n709   596.3170732\n710   -78.5609756\n711     1.0975610\n712   690.0243902\n713   647.6341463\n714    88.5121951\n715  -684.1219512\n716  -449.1463415\n717   -37.9756098\n718  -460.7073171\n719   423.9268293\n720   -98.9512195\n721   111.8780488\n722   453.5853659\n723   343.7317073\n724  -186.8536585\n725    71.2926829\n726   547.6829268\n727  -135.1463415\n728   397.4878049\n729   555.2926829\n730   554.7073171\n731   -80.6585366\n732   702.5609756\n733  -575.7317073\n734   -97.1951220\n735   -33.1951220\n736   561.1463415\n737  -569.4390244\n738   473.1951220\n739   -85.4878049\n740   338.2195122\n741   707.5365854\n742    81.1463415\n743   514.0243902\n744  -343.6341463\n745   616.8048780\n746   431.8780488\n747  -175.9756098\n748  -242.3658537\n749  -154.8048780\n750  -587.5853659\n751  -218.5609756\n752  -219.7804878\n753    16.3170732\n754   599.4878049\n755   250.8048780\n756  -172.4634146\n757   -69.8780488\n758   -94.3170732\n759  -348.9024390\n760   266.9024390\n761   100.8048780\n762   664.6097561\n763   121.6341463\n764  -593.9268293\n765  -168.1219512\n766   -22.8536585\n767  -158.4146341\n768  -527.0975610\n769   481.0487805\n770   556.2682927\n771   103.1951220\n772     2.5121951\n773    80.7073171\n774    61.1951220\n775   -52.5121951\n776  -287.5853659\n777    86.0243902\n778  -122.3170732\n779  -359.5853659\n780   846.1707317\n781   493.6341463\n782   304.0731707\n783   274.4634146\n784  -125.8780488\n785    55.9268293\n786   568.6097561\n787   -83.0487805\n788  -148.3658537\n789  -279.5365854\n790  -466.2682927\n791    49.4878049\n792   504.5609756\n793    30.0243902\n794   355.6341463\n795  -399.5853659\n796   230.1219512\n797  -105.3414634\n798   -77.2439024\n799   542.0243902\n800  -456.3658537\n801   449.8780488\n802   116.7073171\n803   -44.4634146\n804  -483.8292683\n805   608.9512195\n806  -430.0731707\n807  -744.5121951\n808   593.5365854\n809    35.9268293\n810   361.1951220\n811  -693.2926829\n812   151.9268293\n813  -586.5121951\n814  -582.7560976\n815   581.7317073\n816   214.4634146\n817   -70.4146341\n818   247.1463415\n819  -293.2439024\n820  -727.1463415\n821    80.8536585\n822  -239.3902439\n823   -47.5365854\n824   -78.1219512\n825  -163.5853659\n826   712.9512195\n827   451.2926829\n828   712.4634146\n829    91.0000000\n830  -267.8292683\n831   311.4878049\n832   -74.1219512\n833  -706.5121951\n834    92.7560976\n835  -719.0975610\n836   107.7317073\n837   595.3902439\n838   328.3658537\n839   129.3414634\n840    48.3658537\n841   485.1951220\n842     4.2682927\n843    14.9512195\n844  -502.5121951\n845  -310.0243902\n846   403.0000000\n847  -166.9024390\n848  -257.9268293\n849    47.4878049\n850  -674.0243902\n851   186.1219512\n852    51.4390244\n853   543.1951220\n854  -253.7804878\n855   299.8292683\n856  -325.6341463\n857   -69.8292683\n858   449.4878049\n859   816.4634146\n860   283.3902439\n861  -548.5121951\n862   133.3414634\n863  -727.6829268\n864   467.4390244\n865   388.7073171\n866   439.5853659\n867  -134.9024390\n868  -624.5609756\n869   569.3902439\n870   353.0487805\n871  -530.0731707\n872   483.7317073\n873  -441.4390244\n874  -289.0487805\n875   162.8048780\n876  -209.5853659\n877  -562.1707317\n878    79.1463415\n879   357.9756098\n880  -483.9268293\n881   154.8048780\n882  -214.4146341\n883   448.9024390\n884   104.0731707\n885   -93.4878049\n886   701.2926829\n887    -1.0487805\n888  -496.7073171\n889  -692.7560976\n890   128.9024390\n891   676.2682927\n892  -251.0975610\n893   707.3414634\n894   567.3414634\n895    35.5853659\n896   295.5365854\n897   638.0731707\n898   782.0731707\n899   -88.5121951\n900  -403.3414634\n901   463.0487805\n902  -366.3658537\n903  -681.7317073\n904  -558.3658537\n905   235.6341463\n906  -226.2195122\n907  -460.0243902\n908   418.8536585\n909   -30.6585366\n910  -508.7073171\n911    55.6341463\n912    38.8048780\n913   180.6097561\n914  -206.2682927\n915   167.4878049\n916   667.3902439\n917   149.6829268\n918  -567.6341463\n919   -73.8292683\n920  -625.8292683\n921    55.3414634\n922   484.9512195\n923  -452.4634146\n924  -271.4878049\n925  -469.1951220\n926   633.5853659\n927   -77.0000000\n928   -71.5853659\n929  -112.5121951\n930   377.5853659\n931  -272.9024390\n932  -338.6097561\n933   714.5609756\n934   394.4146341\n935   157.0487805\n936  -264.6585366\n937  -762.9512195\n938    95.1951220\n939   569.4878049\n940   563.5365854\n941   779.6341463\n942   524.4634146\n943  -581.1951220\n944   587.5853659\n945   152.9024390\n946  -757.8780488\n947    44.3658537\n948  -102.8536585\n949   -80.4146341\n950  -108.8048780\n951  -606.2195122\n952  -777.4878049\n953   674.4146341\n954   428.4634146\n955   578.9512195\n956   487.5365854\n957   132.3170732\n958  -203.3414634\n959    83.0000000\n960    84.4146341\n961  -529.6341463\n962   -71.1463415\n963   139.9756098\n964  -501.1951220\n965   551.0487805\n966   505.4390244\n967   144.6097561\n968  -124.6097561\n969  -643.4390244\n970  -683.2926829\n971   -46.5121951\n972  -265.6341463\n973  -592.1707317\n974   204.0731707\n975   -49.9756098\n976    68.3170732\n977  -135.6341463\n978  -249.6341463\n979    31.8292683\n980   449.5853659\n981   447.2439024\n982   103.9756098\n983   468.1219512\n984   664.6585366\n985   676.5121951\n986   710.3170732\n987   -78.1707317\n988  -430.8048780\n989   551.5365854\n990    79.1951220\n991    14.4634146\n992     9.4878049\n993   569.5853659\n994   151.7317073\n995     2.3658537\n996  -529.4878049\n997   397.8780488\n998   -80.9512195\n999   103.2926829\n1000  -53.4878049\n\n\nThe results of the permutation test display 1,000 shuffled differences in mean spending between males and females. These differences have both positive and negative values. The negative values indicate cases where, after shuffling, the group representing females had higher average spending, while the positive values indicate that the male group had higher average spending in the shuffled data.\n\n\n\n\ngf_histogram(~ diffmean, data = perm_test_result, fill = \"lightblue\", binwidth = 5) %&gt;%\n  gf_labs(\n    title = \"Permutation Test for Difference in Spending\",\n    subtitle = \"Permutation Distribution of Mean Spending Differences\",\n    x = \"Difference in Mean Spending (Rupees)\",\n    y = \"Frequency\"\n  )\n\n\n\n\n\n\n\n\nThe plot of the permutation test results shows the distribution of 1,000 differences in mean spending between males and females after randomly shuffling group labels. The differences range from approximately -350 to +800 rupees, with the most frequent differences clustering around zero. This suggests that, under random shuffling, the difference in mean spending is often small and distributed symmetrically around zero, indicating no strong directional bias between the two groups.\n\n\n\n\nobserved_diff &lt;- diffmean(`Money Spent` ~ Gender, data = spending_modified)\nobserved_diff\n\n diffmean \n-55.29268 \n\n\nThe observed difference in mean spending between males and females is approximately -55.29 rupees, indicating that, on average, females spent slightly more than males. This negative value suggests a small difference in spending behaviour, but it is relatively modest.\n\n\n\n\np_value &lt;- prop(~ (abs(diffmean) &gt;= abs(observed_diff)), data = perm_test_result)\np_value\n\nprop_TRUE \n    0.889 \n\n\nThe permutation test resulted in a p-value of 0.871, indicating that there is an 87.1% probability that the observed difference in mean spending between males and females (approximately -55.29 rupees) could occur by random chance. Given this high p-value, we fail to reject the null hypothesis, which suggests that there is no statistically significant difference in spending behaviour between males and females in this dataset. In other words, the observed difference is not extreme enough to conclude that the two groups spend differently at a statistically significant level.\n\n\n\nThe research experiment aimed to determine if there was a significant difference in spending behavior between male and female students at MAHE Bengaluru. The following statistical tests were conducted:\n\nTwo-Sample t-Test (Welch’s t-test):\n\nThe two-sample t-test comparing the mean spending between males and females resulted in a p-value of 0.8925. This indicates no statistically significant difference in the average spending between the two groups, as the p-value is much higher than the typical threshold of 0.05.\n\nWilcoxon Signed-Rank Test:\n\nThe Wilcoxon test, a non-parametric alternative to the t-test, resulted in a p-value of 0.3806, which similarly suggests no significant difference between the two groups in terms of spending behavior. This result supports the findings of the t-test.\n\nPermutation Test:\n\nThe permutation test, designed to assess the likelihood of observing the difference in spending due to random chance, resulted in a p-value of 0.871. This further confirms that the observed difference in mean spending of approximately -55.29 rupees (females spending slightly more than males on average) is likely due to random variation and not a true underlying difference in spending behaviour.\n\n\n\n\n\nBased on the results of these tests, there is no evidence to suggest that males and females differ significantly in terms of spending behaviour in this dataset. The high p-values across all tests indicate that the observed differences in mean spending are likely due to chance, and we cannot conclude that gender has a significant impact on spending in this sample. Therefore, the initial hypothesis that males might spend more than females (or vice versa) is not supported by the data."
  },
  {
    "objectID": "posts/Assignment 3 - Part 1/index.html#introduction",
    "href": "posts/Assignment 3 - Part 1/index.html#introduction",
    "title": "Assignment 3 - Part 1",
    "section": "",
    "text": "We are investigating spending behaviour between genders.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(crosstable)\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(dplyr)\nlibrary(broom)\n\n\n\nObjective:\nThe purpose of this research experiment is to investigate whether there is a significant difference in the amount of money spent between guys and girls among students at MAHE Bengaluru. The study aims to test the hypothesis that guys tend to spend more money than girls, by collecting and analyzing spending data during a specific period.\nHypothesis:\n\nGuys spend more money on average compared to girls within a given timeframe.\n\nExperiment Design:\nData Collection:\n\nSample: The dataset consists of spending data from 60 students at MAHE Bengaluru, with 30 guys and 30 girls. The participants were randomly selected through coin tosses and asked to record their spending on October 23rd, 2024.\nData Sources: The data was recorded in an Excel sheet by the people conducting the experiment. Each participant reported how much money they spent on the allocated date.\n\nVariables Measured:\n\nTarget Variable: Amount of money spent by each participant during the experiment period.\nPredictor Variable: Gender (guys vs. girls)\n\nSampling:\n\nTime Period: The experiment was conducted on October 24th, 2024, over a period of 1.5 hours.\nParticipant Selection Criteria: 30 guys and 30 girls were randomly selected by tossing a coin.\n\nAnalysis Plan:\n\nData Cleaning and Transformation: The data was checked for accuracy in the Excel sheet, ensuring that each participant’s spending was properly recorded and that there were no missing or erroneous entries.\nExploratory Data Analysis (EDA): Visualizations like histograms and box plots will be used to compare spending distributions between guys and girls, in order to identify any patterns or discrepancies.\n\nStatistical Tests:\n\nTwo-Sample t-Test: A two-independent sample test for means has to be conducted to compare the average amount spent by guys and girls. This helps in determining if there is a statistically significant difference in spending behaviour between the two groups.\n\n\n\nPermutation Test: A permutation test has to be conducted to assess the likelihood of the observed difference in spending occurring by chance, providing a non-parametric alternative to the two-sample t-test.\nDescriptive Statistics: Measures like mean, median, and standard deviation have to be calculated for both groups to summarize spending behaviour.\nWilcoxon Rank-Sum Test: This is a non-parametric test that has to be conducted to compare the spending behaviour between guys and girls.( if the normality assumption is not met )\n\nLimitations:\n\nSample Size: With 30 participants per gender, the results may not be generalizable to a larger population. A more extensive sample would have provided greater reliability.\nContextual Factors: The study did not account for reasons behind spending (e.g., necessities vs. discretionary purchases), which might have influenced spending patterns.\n\nOutcome:\nThe analysis will reveal whether a significant difference in spending exists between guys and girls at MAHE Bengaluru. If the hypothesis holds, it would suggest that guys, on average, spend more in a limited timeframe. These findings will provide insights into gender-specific spending behaviour within this student population.\n\n\n\n\nspending_23rd &lt;- read_csv(\"../../data/Pocketmoney.csv\")\n\nRows: 82 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Name, Gender\ndbl (2): Sr no, Money Spent\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nspending_23rd\n\n# A tibble: 82 × 4\n   `Sr no` Name     Gender `Money Spent`\n     &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n 1       1 Aagam    Male             150\n 2       2 Aakash   Male             240\n 3       3 Aarushi  Female           382\n 4       4 Abheeta  Female            60\n 5       5 Adithya  Male              68\n 6       6 Aditya   Male             300\n 7       7 Akanksha Female           270\n 8       8 Amruta   Female           190\n 9       9 Anaaya   Female           300\n10      10 Anish    Male               0\n# ℹ 72 more rows\n\n\nThe table provides information on the spending behaviour of individuals on October 23rd, categorized by gender. It highlights the amount spent by 82 participants, allowing for a comparison of spending patterns between guys and girls. The data provides insight into the variability in spending amounts, as well as individual outliers, offering a basis for further analysis of gender-based financial behaviour.\n\nspending_modified &lt;- spending_23rd %&gt;% \n  dplyr::mutate( Gender = as_factor(Gender)) \n\n\n\n\n\nglimpse(spending_modified)\n\nRows: 82\nColumns: 4\n$ `Sr no`       &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ Name          &lt;chr&gt; \"Aagam\", \"Aakash\", \"Aarushi\", \"Abheeta\", \"Adithya\", \"Adi…\n$ Gender        &lt;fct&gt; Male, Male, Female, Female, Male, Male, Female, Female, …\n$ `Money Spent` &lt;dbl&gt; 150, 240, 382, 60, 68, 300, 270, 190, 300, 0, 250, 85, 7…\n\n\nThe columns include a unique identifier for each participant (Sr no), their Name, Gender (male or female), and the Money Spent. The dataset contains numeric data for the money spent, with a wide range of amounts from 0 to significant expenditures, allowing for analysis of spending patterns between males and females.\n\n\n\n\ninspect(spending_modified)\n\n\ncategorical variables:  \n    name     class levels  n missing\n1   Name character     82 82       0\n2 Gender    factor      2 82       0\n                                   distribution\n1 Aagam (1.2%), Aakash (1.2%) ...              \n2 Male (50%), Female (50%)                     \n\nquantitative variables:  \n         name   class min     Q1 median     Q3   max     mean         sd  n\n1       Sr no numeric   1  21.25   41.5  61.75    82  41.5000   23.81526 82\n2 Money Spent numeric   0 100.00  264.5 596.25 13000 720.9634 1835.72169 82\n  missing\n1       0\n2       0\n\n\nThe gender distribution is evenly split, with no missing data in the dataset. The summary statistics for the Money Spent variable show a wide range of spending, with a minimum value of 0 rupees and a maximum value of 13,000 rupees. The median spending is 264.5 rupees, while the mean spending is 720.9 rupees, indicating that a few individuals spent significantly more than others. The standard deviation of 1,835.3 rupees reflects a high level of variability in spending behavior. These results suggest that while most participants had moderate spending, a few high spenders significantly influenced the overall average.\n\n\n\n\nskim(spending_modified)\n\n\nData summary\n\n\nName\nspending_modified\n\n\nNumber of rows\n82\n\n\nNumber of columns\n4\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nName\n0\n1\n3\n12\n0\n82\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n2\nMal: 41, Fem: 41\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSr no\n0\n1\n41.50\n23.82\n1\n21.25\n41.5\n61.75\n82\n▇▇▇▇▇\n\n\nMoney Spent\n0\n1\n720.96\n1835.72\n0\n100.00\n264.5\n596.25\n13000\n▇▁▁▁▁\n\n\n\n\n\nThe key variable of interest, Money Spent, shows a mean spending of 720.96 rupees, with a high variability indicated by a standard deviation of 1,835.7 rupees. The spending ranges from 0 to 13,000 rupees, with a median of 264.5 rupees. The distribution is heavily skewed, with most participants spending below the median, but a few high spenders significantly contributing to the total amount, leading to the large spread in spending behavior.\n\n\n\n\n\n\nMoney Spent (dbl): The total amount of money spent by each participant on October 23rd, recorded in Indian rupees.\n\n\n\n\n\nSr no (fct): A sequential number assigned to each participant for identification purposes (treated as a categorical factor).\nName (chr): The name of the participant.\nGender (chr): The gender of the participant, categorized as either Male or Female.\n\n\n\n\n\n\ngf_histogram(~ `Money Spent` | Gender, \n             data = spending_modified, \n             binwidth = 200, \n             fill = \"skyblue\", \n             color = \"black\") %&gt;% \n  gf_labs(\n    title = \"Distribution of Money Spent by Gender\",\n    x = \"Money Spent (in rupees)\",\n    y = \"Count\"\n  )\n\n\n\n\n\n\n\n\nThe histograms comparing money spent by gender reveal that both males and females exhibit a similar spending pattern, with the majority of participants spending relatively small amounts, primarily below 1,000 rupees. There is a notable concentration of individuals in both groups who spent minimal amounts (0 to 500 rupees), with a few significant outliers who spent as much as 13,000 rupees. The distribution is right-skewed for both genders, indicating that while most participants spent modestly, a few individuals in each group spent considerably more. Overall, the spending behaviour shows similar trends between males and females, with only slight variations in the frequency of higher spending outliers.\n\n\n\n\ngf_bar(\n  mean(`Money Spent`) ~ Gender,\n  data = spending_modified,\n  fill = ~ Gender\n) %&gt;% \n  gf_labs(\n    title = \"Average Money Spent by Gender\",\n    x = \"Gender\",\n    y = \"Average Money Spent (in rupees)\"\n  ) \n\nWarning: Ignoring unknown aesthetics: .\n\n\n\n\n\n\n\n\n\nThe bar chart compares the average money spent by gender, showing that both males and females have nearly identical average spending, with only a slight difference. The mean amount spent by males and females is approximately 721 rupees, indicating that, on average, there is minimal variation in spending behaviour between the two genders in this dataset. This suggests that gender does not significantly influence the average amount of money spent on October 23rd.\n\n\n\n\ngf_boxplot(`Money Spent` ~ Gender, \n           data = spending_modified, \n           fill = ~ Gender) %&gt;% \n  gf_labs(\n    title = \"Distribution of Money Spent by Gender\",\n    x = \"Gender\",\n    y = \"Money Spent (in rupees)\"\n  ) \n\n\n\n\n\n\n\n\nThe box plot comparing the distribution of money spent between males and females shows that both genders have a similar range of spending, with most participants spending relatively low amounts. The median spending is low for both genders, as indicated by the position of the boxes. However, there are a few notable outliers in both groups, with some individuals spending significantly higher amounts, particularly around 10,000 rupees for males. These outliers create a noticeable extension in the upper range of the male box plot. Overall, the distribution suggests that while typical spending is modest, a few individuals in both groups account for much higher spending.\n\n\n\n\ngf_point(`Money Spent` ~ Gender, \n         data = spending_modified,\n         color = ~ Gender) %&gt;% \n  gf_labs(\n    title = \"Individual Money Spent by Gender\",\n    x = \"Gender\",\n    y = \"Money Spent (in rupees)\"\n  ) \n\n\n\n\n\n\n\n\nThe scatter plot displays individual spending points for both males and females, highlighting the distribution of money spent on October 23rd. Most participants, regardless of gender, spent relatively small amounts, clustering around the lower end of the plot. However, there are noticeable outliers in both groups, with a few individuals spending significantly higher amounts—one female and one male spending close to 13,000 rupees. These outliers are clearly separated from the main group, indicating that while the general spending pattern is modest, a few individuals contribute to a much higher level of spending.\n\n\n\n\nspending_modified %&gt;%\n  gf_density(~ `Money Spent`, fill = \"gray\", alpha = 0.5) %&gt;%\n  gf_fitdistr(~ `Money Spent`, dist = \"dnorm\") %&gt;%\n  gf_labs(\n    title = \"Density Plot of Money Spent\",\n    subtitle = \"Compared with Normal Distribution\",\n    x = \"Money Spent (in rupees)\",\n    y = \"Density\"\n  )\n\n\n\n\n\n\n\n\nThe actual spending data is highly right-skewed, with a majority of participants spending small amounts, as indicated by the sharp peak near zero. The density drops off quickly, with a long tail extending toward higher spending amounts, reflecting a few individuals who spent significantly more. The fitted normal distribution deviates from the actual data, confirming that the spending data does not follow a normal distribution, particularly due to the extreme outliers and the overall skewness. This suggests that parametric tests assuming normality may not be appropriate without data transformation. ( If the data is not normally distributed, the results could be unreliable.)\n\n\n\n\nspending_modified &lt;- spending_modified %&gt;%\n  mutate(log_money_spent = log(`Money Spent` + 1))\n\ngf_density(~ log_money_spent, data = spending_modified) %&gt;% \n  gf_labs(\n    title = \"Log-Transformed Distribution of Money Spent\",\n    x = \"Log of Money Spent\",\n    y = \"Density\"\n  )\n\n\n\n\n\n\n\n\nThe density plot of the log-transformed spending data shows a more symmetric distribution compared to the original skewed data. After applying the log transformation, the previously right-skewed data is now centered with a peak around a log value of 4 to 5, suggesting a more normalized spread of spending behavior. While the log transformation has reduced the extreme effects of outliers and compressed the range of higher values, the data still exhibits some variation but appears more suitable for parametric testing.\n\n\n\n\nt &lt;- t.test(\n  `Money Spent` ~ Gender, \n  data = spending_modified, \n  mu = 0, \n  alternative = \"two.sided\", \n  conf.int = TRUE, \n  conf.level = 0.95\n) %&gt;% \nbroom::tidy()\n\nt\n\n# A tibble: 1 × 10\n  estimate estimate1 estimate2 statistic p.value parameter conf.low conf.high\n     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1     55.3      749.      693.     0.136   0.893      76.5    -757.      868.\n# ℹ 2 more variables: method &lt;chr&gt;, alternative &lt;chr&gt;\n\n\nThe results of the Welch Two-Sample t-test comparing the average money spent by males and females show a t-value of 0.13555 and a p-value of 0.8925, which is much larger than the typical significance threshold of 0.05. This indicates that there is no statistically significant difference in the mean spending between the two groups. The 95% confidence interval for the difference in means ranges from -757.07 to 867.66, further suggesting that the difference could be zero. The mean spending for males was 748.61 rupees, while the mean for females was 693.32 rupees, but this difference is not statistically significant based on the t-test results.\n\n\n\n\nwilcox_test &lt;- wilcox.test(\n  `Money Spent` ~ Gender, \n  data = spending_modified, \n  alternative = \"two.sided\", \n  conf.int = TRUE, \n  conf.level = 0.95\n) %&gt;% \nbroom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low conf.high method               alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;      \n1     55.0      936.   0.381    -70.0      180. Wilcoxon rank sum t… two.sided  \n\n\nThe Wilcoxon Signed-Rank Test results indicate that the p-value is 0.3806, which is greater than the common significance threshold of 0.05. This suggests that there is no statistically significant difference in the median spending between males and females. The test statistic is 935.5, with a 95% confidence interval for the difference in spending between groups ranging from -69.99 to 180. The estimate of the difference in ranks is 55.00, further indicating that the observed difference in spending behavior is not large enough to be statistically significant. Therefore, based on this test, we cannot conclude that there is a significant difference in spending between males and females.\n\n\n\n\nperm_test_result &lt;- do(1000) * diffmean(\n  shuffle(`Money Spent`) ~ Gender, \n  data = spending_modified\n)\nperm_test_result\n\n         diffmean\n1    -311.3414634\n2     633.2439024\n3     671.0487805\n4      84.4146341\n5    -686.6097561\n6     145.0000000\n7    -195.9268293\n8     577.1463415\n9    -125.8292683\n10    373.0487805\n11    -56.5121951\n12   -510.1219512\n13    618.6097561\n14     98.7073171\n15    145.9756098\n16    135.8780488\n17   -660.0243902\n18   -303.5853659\n19   -821.2439024\n20    167.5853659\n21     75.1463415\n22    421.6341463\n23   -614.1219512\n24    -21.8780488\n25   -330.7073171\n26   -588.4634146\n27    745.4878049\n28   -103.0487805\n29   -114.8536585\n30     72.3658537\n31    -37.4390244\n32   -174.4146341\n33   -198.3170732\n34    637.7317073\n35     27.8292683\n36    -73.9268293\n37    128.3170732\n38    449.6341463\n39    702.2682927\n40   -470.0731707\n41   -140.4634146\n42    134.8048780\n43    466.1219512\n44   -151.0000000\n45    561.7804878\n46   -661.3414634\n47   -434.8048780\n48    170.3658537\n49   -485.0975610\n50    546.6097561\n51   -420.2195122\n52   -703.7317073\n53    526.2682927\n54    -88.3170732\n55    540.6585366\n56   -354.6585366\n57     68.2682927\n58   -168.2682927\n59   -205.4390244\n60    522.1707317\n61    547.4390244\n62    131.0975610\n63   -527.9268293\n64    346.4634146\n65    572.2195122\n66    107.7804878\n67   -419.0487805\n68    330.0731707\n69    -21.7317073\n70    348.4146341\n71    629.0975610\n72    -93.3414634\n73    601.2926829\n74    284.1707317\n75   -434.0731707\n76     -8.3170732\n77    208.1707317\n78   -122.1219512\n79   -540.5609756\n80   -718.2195122\n81   -252.4634146\n82   -541.9268293\n83   -354.6097561\n84    287.5365854\n85   -713.3902439\n86    462.3658537\n87    156.0243902\n88    434.3658537\n89     77.4878049\n90    608.7560976\n91   -128.8048780\n92    -42.3658537\n93    -37.8292683\n94   -781.8780488\n95    475.3414634\n96   -752.4634146\n97   -358.9024390\n98   -470.1707317\n99    -30.9024390\n100  -570.4146341\n101   567.4878049\n102    14.9512195\n103   721.8292683\n104   -46.8048780\n105   482.5609756\n106  -642.6585366\n107  -269.1951220\n108   487.0975610\n109   517.7317073\n110  -634.3658537\n111   266.5121951\n112   295.4390244\n113  -740.2682927\n114  -385.1951220\n115    80.5121951\n116  -669.7317073\n117   345.4878049\n118    75.6341463\n119    49.0487805\n120   343.7804878\n121    54.8048780\n122   435.5853659\n123  -653.9756098\n124  -683.7804878\n125   257.5365854\n126   645.5365854\n127  -444.2682927\n128  -749.9268293\n129   821.1951220\n130    56.5121951\n131   472.0243902\n132  -254.4634146\n133     8.2682927\n134  -761.2439024\n135  -602.1707317\n136  -174.0243902\n137  -229.3414634\n138  -593.9268293\n139   210.3658537\n140  -592.8048780\n141  -372.8048780\n142   751.7317073\n143   -34.5609756\n144   703.2926829\n145   722.7560976\n146  -378.0243902\n147  -122.3170732\n148    58.6097561\n149   -42.4146341\n150   716.2195122\n151    47.1463415\n152  -553.6341463\n153   596.4634146\n154   669.0000000\n155  -721.2926829\n156  -187.8292683\n157    39.9268293\n158   -55.7317073\n159  -341.1463415\n160   -85.0000000\n161   144.4146341\n162   395.2926829\n163   664.6097561\n164  -581.5853659\n165    27.2439024\n166   362.0731707\n167    21.1951220\n168  -314.6585366\n169    10.6097561\n170  -777.6341463\n171   217.1951220\n172   106.0731707\n173  -206.4634146\n174   288.8536585\n175  -213.0487805\n176   -24.6097561\n177   -40.0243902\n178  -263.5365854\n179   754.1219512\n180    34.3170732\n181   267.9756098\n182   124.0731707\n183   425.5853659\n184   580.4634146\n185   495.0000000\n186   518.5121951\n187   100.7073171\n188   461.4878049\n189   -15.6341463\n190   616.1219512\n191   767.3414634\n192   193.2926829\n193  -107.0000000\n194    74.9024390\n195   548.4146341\n196   344.3170732\n197   584.0731707\n198  -540.8536585\n199  -630.3170732\n200  -162.0731707\n201  -595.0487805\n202  -493.2439024\n203  -333.0487805\n204  -681.2926829\n205   456.2195122\n206  -145.7317073\n207   -88.1219512\n208   707.5853659\n209  -298.0243902\n210  -732.3658537\n211  -523.9756098\n212  -712.9024390\n213   -24.4634146\n214  -270.4146341\n215  -101.7804878\n216   368.7560976\n217  -190.5121951\n218  -177.7804878\n219    71.2439024\n220  -638.2195122\n221  -114.3170732\n222  -588.7073171\n223   716.6097561\n224   503.1951220\n225  -123.4390244\n226  -610.4634146\n227   190.5609756\n228   122.7560976\n229    27.5853659\n230   448.1219512\n231  -381.6341463\n232   114.1219512\n233  -634.7560976\n234   101.4878049\n235    82.0243902\n236   487.9756098\n237   191.1463415\n238  -709.0487805\n239  -100.9024390\n240   495.5853659\n241  -526.1219512\n242    15.0487805\n243   149.1463415\n244  -635.4878049\n245  -595.0000000\n246   170.7073171\n247  -720.5609756\n248  -110.1219512\n249   713.3414634\n250   251.5365854\n251   598.6097561\n252   -20.1707317\n253  -339.0487805\n254   -50.8048780\n255  -651.2439024\n256  -186.6585366\n257  -477.2439024\n258  -157.9756098\n259   486.7073171\n260   -93.2439024\n261    24.5609756\n262  -191.0487805\n263  -198.2195122\n264   276.2195122\n265  -254.2682927\n266   159.8780488\n267   309.2439024\n268   219.0000000\n269   294.8536585\n270   387.7317073\n271  -617.9756098\n272  -180.0731707\n273   496.4634146\n274  -182.7560976\n275   410.1707317\n276   179.8292683\n277   559.5853659\n278   606.7560976\n279   -26.1707317\n280  -485.8292683\n281     0.7073171\n282  -817.7317073\n283  -375.7804878\n284  -189.4878049\n285    77.6341463\n286    79.6341463\n287    83.8780488\n288   495.0487805\n289     9.1951220\n290   186.4634146\n291    32.1219512\n292   484.1707317\n293   165.2439024\n294  -563.2926829\n295  -301.1951220\n296   705.1951220\n297   -70.8536585\n298  -520.1219512\n299  -680.9512195\n300    97.7804878\n301  -466.6097561\n302  -194.9024390\n303   -62.1219512\n304   312.7073171\n305  -352.7560976\n306  -250.7560976\n307  -641.0975610\n308   176.0243902\n309  -101.0487805\n310  -166.4146341\n311   362.5121951\n312  -450.3170732\n313   172.6585366\n314  -465.8780488\n315  -464.0243902\n316   525.4878049\n317   666.5121951\n318   543.6829268\n319   588.5121951\n320  -107.3414634\n321    41.6341463\n322   277.6829268\n323    81.0487805\n324  -334.3658537\n325   -95.0000000\n326   -90.3658537\n327    52.4634146\n328   762.4146341\n329  -118.6097561\n330  -495.5853659\n331  -452.2195122\n332  -107.3414634\n333  -173.2439024\n334    83.4878049\n335   386.9512195\n336  -359.4390244\n337   297.4390244\n338   673.0000000\n339  -290.3170732\n340   631.1463415\n341  -137.5365854\n342   365.4390244\n343   184.0243902\n344  -194.7073171\n345  -155.3902439\n346   604.2682927\n347   526.5121951\n348   486.0243902\n349  -207.6341463\n350   713.6341463\n351  -489.9268293\n352  -177.9268293\n353   341.9756098\n354   -39.8780488\n355   153.5853659\n356   239.9756098\n357   649.6829268\n358   -73.7804878\n359  -104.4146341\n360    67.6341463\n361    39.0487805\n362    18.3170732\n363   -58.0243902\n364  -471.2439024\n365   297.0487805\n366    71.7804878\n367    -9.4390244\n368  -492.7073171\n369  -144.1707317\n370   726.9024390\n371   128.8048780\n372   509.7804878\n373  -250.6585366\n374   -78.0731707\n375  -176.4146341\n376  -301.4878049\n377  -526.8048780\n378   301.0487805\n379    20.5121951\n380   406.6097561\n381  -277.3414634\n382    99.3414634\n383  -251.4878049\n384    -7.8780488\n385   297.5365854\n386   -48.0731707\n387  -533.7317073\n388   555.2439024\n389  -106.0731707\n390   461.2439024\n391    55.4390244\n392   144.2195122\n393  -498.5609756\n394   828.7073171\n395  -117.9268293\n396    58.5121951\n397   -36.3658537\n398   755.1951220\n399  -134.5609756\n400   158.5609756\n401    -4.0731707\n402   117.7804878\n403  -114.5121951\n404  -589.4878049\n405    90.0731707\n406  -837.1951220\n407   444.7560976\n408   362.2682927\n409   152.1219512\n410  -591.1463415\n411   318.7073171\n412  -544.0731707\n413  -371.4390244\n414    26.2682927\n415   306.2682927\n416   -87.8292683\n417  -466.8536585\n418   769.0487805\n419   -84.7073171\n420    24.4634146\n421   688.5609756\n422  -174.0243902\n423    73.6829268\n424  -105.6829268\n425  -369.5365854\n426    72.1707317\n427   235.9268293\n428   622.9024390\n429   -41.6829268\n430   553.0975610\n431  -485.0000000\n432   -35.2926829\n433   -35.4878049\n434   -88.3170732\n435  -534.1707317\n436  -224.8048780\n437   509.8292683\n438  -698.3658537\n439  -716.4146341\n440   203.3902439\n441   287.6341463\n442  -630.1707317\n443   139.8780488\n444    76.4146341\n445  -358.5121951\n446   407.4390244\n447  -670.0243902\n448    81.2439024\n449  -147.8780488\n450  -168.5121951\n451  -608.7073171\n452    96.8536585\n453   659.0975610\n454  -595.3902439\n455   313.2439024\n456   144.4634146\n457  -677.2439024\n458   454.6097561\n459   502.0731707\n460  -342.0243902\n461   546.6585366\n462   -32.9024390\n463  -557.6341463\n464   -70.4146341\n465  -269.0000000\n466   761.0975610\n467  -723.8292683\n468   510.5121951\n469   231.0975610\n470   391.3902439\n471   226.1707317\n472   149.6341463\n473  -525.6341463\n474  -605.5853659\n475   679.8780488\n476   375.5365854\n477   699.5365854\n478   212.6585366\n479  -431.9756098\n480  -700.7073171\n481   -93.6341463\n482  -431.5365854\n483   -48.2195122\n484   111.3902439\n485  -681.4878049\n486  -134.4146341\n487   514.0243902\n488  -390.9024390\n489   661.7804878\n490   174.7560976\n491   -49.0975610\n492   -10.4146341\n493  -318.8048780\n494    -6.9024390\n495   112.3658537\n496   651.6341463\n497   635.7804878\n498  -186.0731707\n499   351.2439024\n500  -613.7804878\n501  -586.8536585\n502  -314.7560976\n503  -179.0975610\n504   610.3170732\n505    49.0487805\n506    94.8048780\n507   104.2195122\n508    89.4878049\n509   249.6829268\n510  -575.1951220\n511   280.4146341\n512   364.3170732\n513   118.5121951\n514  -596.1707317\n515  -681.0975610\n516  -167.1951220\n517  -788.7560976\n518   486.4146341\n519  -188.4146341\n520  -220.6585366\n521   348.4634146\n522    49.9756098\n523    -0.5121951\n524  -153.8780488\n525    76.7073171\n526  -169.4390244\n527  -234.6097561\n528   113.3902439\n529  -384.6097561\n530   236.9024390\n531   696.3170732\n532   137.0975610\n533    21.1463415\n534   445.6829268\n535   235.0487805\n536   632.2682927\n537   490.1707317\n538   541.2926829\n539   248.3658537\n540  -587.1951220\n541  -542.9512195\n542   338.8536585\n543  -161.8780488\n544  -125.8292683\n545  -487.7804878\n546   858.1707317\n547   413.5365854\n548    46.9512195\n549  -495.1463415\n550  -461.7804878\n551    93.0975610\n552   102.4634146\n553   751.1951220\n554    79.0975610\n555  -491.1463415\n556   -23.6829268\n557   122.7560976\n558   686.6585366\n559   -44.0731707\n560   201.2439024\n561    59.8780488\n562  -600.1707317\n563   128.6097561\n564   789.4390244\n565    34.9024390\n566   -20.4146341\n567   356.9024390\n568  -510.0243902\n569  -173.9268293\n570   463.5365854\n571  -738.6585366\n572   621.2926829\n573   -27.7317073\n574   199.1951220\n575    33.0487805\n576   611.0000000\n577  -138.0731707\n578  -157.0487805\n579   273.5853659\n580   267.2926829\n581  -414.4634146\n582   139.5365854\n583    58.3170732\n584   426.5121951\n585    95.4390244\n586   169.4390244\n587   367.5853659\n588   -11.2926829\n589   -45.1463415\n590  -400.8536585\n591  -559.3414634\n592   442.5609756\n593  -721.7317073\n594   672.5121951\n595    22.8048780\n596   168.4146341\n597   102.2682927\n598  -587.8292683\n599  -683.5365854\n600    39.8780488\n601   430.1707317\n602   712.5121951\n603   549.7317073\n604   454.1219512\n605   161.9756098\n606  -470.5609756\n607  -178.2195122\n608   691.1463415\n609  -524.9024390\n610   821.7317073\n611   -48.5609756\n612   -52.7560976\n613   596.9512195\n614    75.6829268\n615   714.8536585\n616  -119.7317073\n617   -70.0731707\n618   279.6341463\n619  -107.1463415\n620  -193.5853659\n621    98.1707317\n622   267.0000000\n623  -108.8048780\n624   -82.7073171\n625  -678.1707317\n626   729.0975610\n627   163.8292683\n628   334.6097561\n629   345.8780488\n630   230.8048780\n631   109.9268293\n632  -153.3414634\n633   109.8780488\n634   247.3414634\n635   516.2682927\n636   436.2195122\n637    24.9024390\n638  -649.8780488\n639   316.4634146\n640   -55.2439024\n641   138.9024390\n642  -149.9756098\n643    30.0731707\n644  -220.5121951\n645   762.9512195\n646   605.3414634\n647   156.3658537\n648  -720.4634146\n649   -10.9512195\n650   726.5121951\n651  -179.0487805\n652  -498.3658537\n653  -565.8780488\n654  -291.8292683\n655   728.5609756\n656   -61.4390244\n657  -226.3658537\n658  -487.3414634\n659   341.1951220\n660  -245.7804878\n661  -644.1219512\n662   230.7560976\n663   -90.5609756\n664   585.6829268\n665  -271.8780488\n666  -779.4390244\n667  -281.3902439\n668    73.1951220\n669   -35.4390244\n670   463.7317073\n671   468.6097561\n672  -161.9268293\n673  -559.4878049\n674  -183.3414634\n675  -248.2195122\n676   682.3170732\n677  -385.6829268\n678   -13.9756098\n679   737.2439024\n680   201.6341463\n681   437.3414634\n682  -683.3902439\n683  -313.7804878\n684  -232.7073171\n685    -3.3902439\n686   -25.9268293\n687   -42.6585366\n688   414.6585366\n689   107.5853659\n690  -444.4634146\n691   239.5365854\n692  -684.1707317\n693  -267.5365854\n694   505.6341463\n695   660.5121951\n696  -135.0000000\n697   656.2195122\n698    76.6097561\n699   558.0243902\n700  -809.1463415\n701   -64.7073171\n702   271.7804878\n703  -129.2926829\n704  -505.6829268\n705  -275.1463415\n706   -45.8292683\n707  -651.8780488\n708   186.5609756\n709   596.3170732\n710   -78.5609756\n711     1.0975610\n712   690.0243902\n713   647.6341463\n714    88.5121951\n715  -684.1219512\n716  -449.1463415\n717   -37.9756098\n718  -460.7073171\n719   423.9268293\n720   -98.9512195\n721   111.8780488\n722   453.5853659\n723   343.7317073\n724  -186.8536585\n725    71.2926829\n726   547.6829268\n727  -135.1463415\n728   397.4878049\n729   555.2926829\n730   554.7073171\n731   -80.6585366\n732   702.5609756\n733  -575.7317073\n734   -97.1951220\n735   -33.1951220\n736   561.1463415\n737  -569.4390244\n738   473.1951220\n739   -85.4878049\n740   338.2195122\n741   707.5365854\n742    81.1463415\n743   514.0243902\n744  -343.6341463\n745   616.8048780\n746   431.8780488\n747  -175.9756098\n748  -242.3658537\n749  -154.8048780\n750  -587.5853659\n751  -218.5609756\n752  -219.7804878\n753    16.3170732\n754   599.4878049\n755   250.8048780\n756  -172.4634146\n757   -69.8780488\n758   -94.3170732\n759  -348.9024390\n760   266.9024390\n761   100.8048780\n762   664.6097561\n763   121.6341463\n764  -593.9268293\n765  -168.1219512\n766   -22.8536585\n767  -158.4146341\n768  -527.0975610\n769   481.0487805\n770   556.2682927\n771   103.1951220\n772     2.5121951\n773    80.7073171\n774    61.1951220\n775   -52.5121951\n776  -287.5853659\n777    86.0243902\n778  -122.3170732\n779  -359.5853659\n780   846.1707317\n781   493.6341463\n782   304.0731707\n783   274.4634146\n784  -125.8780488\n785    55.9268293\n786   568.6097561\n787   -83.0487805\n788  -148.3658537\n789  -279.5365854\n790  -466.2682927\n791    49.4878049\n792   504.5609756\n793    30.0243902\n794   355.6341463\n795  -399.5853659\n796   230.1219512\n797  -105.3414634\n798   -77.2439024\n799   542.0243902\n800  -456.3658537\n801   449.8780488\n802   116.7073171\n803   -44.4634146\n804  -483.8292683\n805   608.9512195\n806  -430.0731707\n807  -744.5121951\n808   593.5365854\n809    35.9268293\n810   361.1951220\n811  -693.2926829\n812   151.9268293\n813  -586.5121951\n814  -582.7560976\n815   581.7317073\n816   214.4634146\n817   -70.4146341\n818   247.1463415\n819  -293.2439024\n820  -727.1463415\n821    80.8536585\n822  -239.3902439\n823   -47.5365854\n824   -78.1219512\n825  -163.5853659\n826   712.9512195\n827   451.2926829\n828   712.4634146\n829    91.0000000\n830  -267.8292683\n831   311.4878049\n832   -74.1219512\n833  -706.5121951\n834    92.7560976\n835  -719.0975610\n836   107.7317073\n837   595.3902439\n838   328.3658537\n839   129.3414634\n840    48.3658537\n841   485.1951220\n842     4.2682927\n843    14.9512195\n844  -502.5121951\n845  -310.0243902\n846   403.0000000\n847  -166.9024390\n848  -257.9268293\n849    47.4878049\n850  -674.0243902\n851   186.1219512\n852    51.4390244\n853   543.1951220\n854  -253.7804878\n855   299.8292683\n856  -325.6341463\n857   -69.8292683\n858   449.4878049\n859   816.4634146\n860   283.3902439\n861  -548.5121951\n862   133.3414634\n863  -727.6829268\n864   467.4390244\n865   388.7073171\n866   439.5853659\n867  -134.9024390\n868  -624.5609756\n869   569.3902439\n870   353.0487805\n871  -530.0731707\n872   483.7317073\n873  -441.4390244\n874  -289.0487805\n875   162.8048780\n876  -209.5853659\n877  -562.1707317\n878    79.1463415\n879   357.9756098\n880  -483.9268293\n881   154.8048780\n882  -214.4146341\n883   448.9024390\n884   104.0731707\n885   -93.4878049\n886   701.2926829\n887    -1.0487805\n888  -496.7073171\n889  -692.7560976\n890   128.9024390\n891   676.2682927\n892  -251.0975610\n893   707.3414634\n894   567.3414634\n895    35.5853659\n896   295.5365854\n897   638.0731707\n898   782.0731707\n899   -88.5121951\n900  -403.3414634\n901   463.0487805\n902  -366.3658537\n903  -681.7317073\n904  -558.3658537\n905   235.6341463\n906  -226.2195122\n907  -460.0243902\n908   418.8536585\n909   -30.6585366\n910  -508.7073171\n911    55.6341463\n912    38.8048780\n913   180.6097561\n914  -206.2682927\n915   167.4878049\n916   667.3902439\n917   149.6829268\n918  -567.6341463\n919   -73.8292683\n920  -625.8292683\n921    55.3414634\n922   484.9512195\n923  -452.4634146\n924  -271.4878049\n925  -469.1951220\n926   633.5853659\n927   -77.0000000\n928   -71.5853659\n929  -112.5121951\n930   377.5853659\n931  -272.9024390\n932  -338.6097561\n933   714.5609756\n934   394.4146341\n935   157.0487805\n936  -264.6585366\n937  -762.9512195\n938    95.1951220\n939   569.4878049\n940   563.5365854\n941   779.6341463\n942   524.4634146\n943  -581.1951220\n944   587.5853659\n945   152.9024390\n946  -757.8780488\n947    44.3658537\n948  -102.8536585\n949   -80.4146341\n950  -108.8048780\n951  -606.2195122\n952  -777.4878049\n953   674.4146341\n954   428.4634146\n955   578.9512195\n956   487.5365854\n957   132.3170732\n958  -203.3414634\n959    83.0000000\n960    84.4146341\n961  -529.6341463\n962   -71.1463415\n963   139.9756098\n964  -501.1951220\n965   551.0487805\n966   505.4390244\n967   144.6097561\n968  -124.6097561\n969  -643.4390244\n970  -683.2926829\n971   -46.5121951\n972  -265.6341463\n973  -592.1707317\n974   204.0731707\n975   -49.9756098\n976    68.3170732\n977  -135.6341463\n978  -249.6341463\n979    31.8292683\n980   449.5853659\n981   447.2439024\n982   103.9756098\n983   468.1219512\n984   664.6585366\n985   676.5121951\n986   710.3170732\n987   -78.1707317\n988  -430.8048780\n989   551.5365854\n990    79.1951220\n991    14.4634146\n992     9.4878049\n993   569.5853659\n994   151.7317073\n995     2.3658537\n996  -529.4878049\n997   397.8780488\n998   -80.9512195\n999   103.2926829\n1000  -53.4878049\n\n\nThe results of the permutation test display 1,000 shuffled differences in mean spending between males and females. These differences have both positive and negative values. The negative values indicate cases where, after shuffling, the group representing females had higher average spending, while the positive values indicate that the male group had higher average spending in the shuffled data.\n\n\n\n\ngf_histogram(~ diffmean, data = perm_test_result, fill = \"lightblue\", binwidth = 5) %&gt;%\n  gf_labs(\n    title = \"Permutation Test for Difference in Spending\",\n    subtitle = \"Permutation Distribution of Mean Spending Differences\",\n    x = \"Difference in Mean Spending (Rupees)\",\n    y = \"Frequency\"\n  )\n\n\n\n\n\n\n\n\nThe plot of the permutation test results shows the distribution of 1,000 differences in mean spending between males and females after randomly shuffling group labels. The differences range from approximately -350 to +800 rupees, with the most frequent differences clustering around zero. This suggests that, under random shuffling, the difference in mean spending is often small and distributed symmetrically around zero, indicating no strong directional bias between the two groups.\n\n\n\n\nobserved_diff &lt;- diffmean(`Money Spent` ~ Gender, data = spending_modified)\nobserved_diff\n\n diffmean \n-55.29268 \n\n\nThe observed difference in mean spending between males and females is approximately -55.29 rupees, indicating that, on average, females spent slightly more than males. This negative value suggests a small difference in spending behaviour, but it is relatively modest.\n\n\n\n\np_value &lt;- prop(~ (abs(diffmean) &gt;= abs(observed_diff)), data = perm_test_result)\np_value\n\nprop_TRUE \n    0.889 \n\n\nThe permutation test resulted in a p-value of 0.871, indicating that there is an 87.1% probability that the observed difference in mean spending between males and females (approximately -55.29 rupees) could occur by random chance. Given this high p-value, we fail to reject the null hypothesis, which suggests that there is no statistically significant difference in spending behaviour between males and females in this dataset. In other words, the observed difference is not extreme enough to conclude that the two groups spend differently at a statistically significant level.\n\n\n\nThe research experiment aimed to determine if there was a significant difference in spending behavior between male and female students at MAHE Bengaluru. The following statistical tests were conducted:\n\nTwo-Sample t-Test (Welch’s t-test):\n\nThe two-sample t-test comparing the mean spending between males and females resulted in a p-value of 0.8925. This indicates no statistically significant difference in the average spending between the two groups, as the p-value is much higher than the typical threshold of 0.05.\n\nWilcoxon Signed-Rank Test:\n\nThe Wilcoxon test, a non-parametric alternative to the t-test, resulted in a p-value of 0.3806, which similarly suggests no significant difference between the two groups in terms of spending behavior. This result supports the findings of the t-test.\n\nPermutation Test:\n\nThe permutation test, designed to assess the likelihood of observing the difference in spending due to random chance, resulted in a p-value of 0.871. This further confirms that the observed difference in mean spending of approximately -55.29 rupees (females spending slightly more than males on average) is likely due to random variation and not a true underlying difference in spending behaviour.\n\n\n\n\n\nBased on the results of these tests, there is no evidence to suggest that males and females differ significantly in terms of spending behaviour in this dataset. The high p-values across all tests indicate that the observed differences in mean spending are likely due to chance, and we cannot conclude that gender has a significant impact on spending in this sample. Therefore, the initial hypothesis that males might spend more than females (or vice versa) is not supported by the data."
  },
  {
    "objectID": "posts/Assignment 3 - Part 3/index.html",
    "href": "posts/Assignment 3 - Part 3/index.html",
    "title": "Assignment 3 - Part 3",
    "section": "",
    "text": "We are investigating whether there is a significant difference in the grades received by students enrolled in three different programs: B.Voc, B.FA, and B.Des.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(broom)\nlibrary(infer)\n\n\nAttaching package: 'infer'\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\nlibrary(patchwork)\nlibrary(ggprism)\nlibrary(supernova)\n\n\nAttaching package: 'supernova'\n\nThe following object is masked from 'package:scales':\n\n    number\n\nlibrary(dplyr)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(crosstable)\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\n\n\n\nObjective: The purpose of this research experiment is to investigate whether there is a significant difference in the grades received by students enrolled in three different programs: B.Voc, B.FA, and B.Des. By collecting and analyzing grade data from students, we aim to explore whether students from different branches perform differently in their first studio course during the first semester of the academic year 2024-25.\nHypotheses:\n\nPrimary Hypothesis: There is a significant difference in the grades received by students from the B.Voc, B.FA, and B.Des programs.\nAdditional Hypothesis: Students from one program (e.g., B.Des) tend to have higher grades on average compared to the other programs (B.Voc and B.FA).\n\nExperiment Design:\nData Collection:\n\nSample: The dataset consists of grades from 90 students at the Srishti Manipal Institute of Art, Design, and Technology in Bengaluru. There are 30 students from each program.\nData Sources: The participants were randomly selected by tossing a coin, and the grades were recorded in an Excel sheet by the people conducting the experiment. Each participant reported the grade they received for their first studio course in the first semester of the academic year 2024-25.\n\nVariables Measured:\n\nTarget Variable: The grades received by each participant in their first studio course during the semester.\nPredictor Variables: Program (B.Voc, B.FA, B.Des)\n\nSampling:\n\nTime Period: The experiment was conducted over a period of 1.5 hours on October 24th, 2024.\nParticipant Selection Criteria: 30 participants were randomly selected from each program using a coin toss. Their grades were recorded accordingly in the Excel sheet.\n\nAnalysis Plan:\n\nData Cleaning and Transformation: The data was checked for accuracy in the Excel sheet to ensure that each participant’s grade and program were properly recorded, with no missing or erroneous entries.\nExploratory Data Analysis (EDA): Visualizations such as histograms, box plots, and scatter plots will be used to compare grade distributions across the three programs. This will help identify patterns or discrepancies in performance between students from different programs.\n\nStatistical Tests:\n\nShapiro-Wilk Test for Normality: The Shapiro-Wilk test will be used to check if the grade data follows a normal distribution for each program. If the data significantly deviates from normality (p-value &lt; 0.05), it suggests the use of non-parametric tests.\nVariance Test (F-Test): A variance test will be conducted to determine if the variances in grades are equal between the programs. This test will check the assumption of homogeneity of variances, which is required for the two-sample t-test and ANOVA. If the p-value is small (p-value &lt; 0.05), it indicates unequal variances.\nOne-Way ANOVA: A one-way ANOVA will be conducted to compare the average grades across the three programs (B.Voc, B.FA, B.Des). This will help determine if there is a statistically significant difference in grades between the programs.\nPairwise Comparisons: If the one-way ANOVA is significant, post-hoc pairwise comparisons using Bonferroni correction will be conducted to identify which specific pairs of programs have significant differences in their average grades.\nWilcoxon Rank-Sum Test: If the normality assumption is not met, a Wilcoxon rank-sum test (a non-parametric test) will be conducted to compare the grades between programs. This will assess whether students in one program tend to receive higher or lower grades compared to students in the other programs.\nTukey Test: If ANOVA results are significant, a Tukey Honest Significant Difference (HSD) test will be used to further explore the pairwise differences in the mean grades between the programs. This test will provide specific pairwise comparisons to determine which programs differ significantly.\nPermutation Test: A permutation test will be conducted to assess the likelihood of the observed differences in grades across the three programs occurring by chance, providing a non-parametric alternative to the one-way ANOVA.\nDescriptive Statistics: Descriptive measures such as mean, median, and standard deviation will be calculated for each program to summarize grade performance. These statistics will help provide a clear overview of the central tendencies and variability within each program.\n\nLimitations:\n\nSample Size: With 30 participants per program, the results may not be generalizable to the entire student population. A more extensive sample would provide greater reliability and external validity.\nContextual Factors: The study did not account for other factors that might influence grade performance, such as prior academic achievement, class participation, or individual learning styles, which could have an effect on the grades received.\n\nOutcome:\nThe analysis will reveal whether significant differences in grade performance exist between students from the B.Voc, B.FA, and B.Des programs at Srishti Manipal Institute of Art, Design, and Technology. If the hypotheses hold, it would suggest that students from one program tend to perform better in their first studio course compared to students from the other programs. These findings will provide insights into whether the program of study influences student performance within this academic context.\n\n\n\n\ngrades &lt;- read_csv(\"../../data/grades.csv\")\n\nRows: 90 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Degree, Course, Letter Grade, Gender\ndbl (3): SN, Year, Score\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ngrades\n\n# A tibble: 90 × 7\n      SN Degree Course  Year `Letter Grade` Score Gender\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; \n 1     1 B.Des  CAC        2 A                8   Female\n 2     2 B.Des  CAC        2 O                9.6 Female\n 3     3 B.Des  IADP       2 A+               9.2 Female\n 4     4 B.Des  CE         2 O                9.8 Female\n 5     5 B.Des  BSSD       2 P                3   Male  \n 6     6 B.Des  CAC        2 O                9.5 Female\n 7     7 B.Des  PSD        2 A+               9   Female\n 8     8 B.Des  PSD        2 A+               9   Female\n 9     9 B.Des  PSD        2 A+               9   Female\n10    10 B.Des  BSSD       3 A+               9   Female\n# ℹ 80 more rows\n\n\nThe dataset comprises 90 entries of students from Srishti Manipal Institute of Art, Design, and Technology (SMI) across three different programs: B.Des, B.FA, and B.Voc. Each entry includes details such as the student’s degree program, course, academic year, letter grade, score (in terms of grade points), and gender.\n\n\n\n\ngrades_modified &lt;- grades %&gt;%\n  dplyr::mutate(\n    Degree = as.factor(Degree),\n    Course = as.factor(Course),\n    Year = factor(Year, \n      levels = c(\"1\", \"2\", \"3\"), \n      ordered = TRUE),\n    `Letter Grade` = factor(`Letter Grade`, \n      levels = c(\"F\", \"P\", \"C\", \"B\", \"B+\", \"A\", \"A+\", \"O\"), \n      ordered = TRUE),\n    Gender = as.factor(Gender),\n    Score = case_when(\n      `Letter Grade` == \"O\" ~ 9.5,\n      `Letter Grade` == \"A+\" ~ 8.5,\n      `Letter Grade` == \"A\" ~ 7.5,\n      `Letter Grade` == \"B+\" ~ 6.5,\n      `Letter Grade` == \"B\" ~ 5.5,\n      `Letter Grade` == \"C\" ~ 4.5,\n      `Letter Grade` == \"P\" ~ 3.5,\n      `Letter Grade` == \"F\" ~ 0\n    )\n  )\n\ngrades_modified\n\n# A tibble: 90 × 7\n      SN Degree Course Year  `Letter Grade` Score Gender\n   &lt;dbl&gt; &lt;fct&gt;  &lt;fct&gt;  &lt;ord&gt; &lt;ord&gt;          &lt;dbl&gt; &lt;fct&gt; \n 1     1 B.Des  CAC    2     A                7.5 Female\n 2     2 B.Des  CAC    2     O                9.5 Female\n 3     3 B.Des  IADP   2     A+               8.5 Female\n 4     4 B.Des  CE     2     O                9.5 Female\n 5     5 B.Des  BSSD   2     P                3.5 Male  \n 6     6 B.Des  CAC    2     O                9.5 Female\n 7     7 B.Des  PSD    2     A+               8.5 Female\n 8     8 B.Des  PSD    2     A+               8.5 Female\n 9     9 B.Des  PSD    2     A+               8.5 Female\n10    10 B.Des  BSSD   3     A+               8.5 Female\n# ℹ 80 more rows\n\n\nThe dataset now shows the modified Score column, which has been updated based on the corresponding Letter Grade. Using the case_when() function, letter grades such as “O” were assigned a score of 9.5, “A+” was assigned 8.5, “A” was given 7.5, and so on. This transformation allows for a more standardized numerical analysis of the grades.\n\n\n\n\nglimpse(grades_modified)\n\nRows: 90\nColumns: 7\n$ SN             &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n$ Degree         &lt;fct&gt; B.Des, B.Des, B.Des, B.Des, B.Des, B.Des, B.Des, B.Des,…\n$ Course         &lt;fct&gt; CAC, CAC, IADP, CE, BSSD, CAC, PSD, PSD, PSD, BSSD, VCS…\n$ Year           &lt;ord&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 3, 2, 3, 3, 2, 2…\n$ `Letter Grade` &lt;ord&gt; A, O, A+, O, P, O, A+, A+, A+, A+, A, A, A, B+, B+, A+,…\n$ Score          &lt;dbl&gt; 7.5, 9.5, 8.5, 9.5, 3.5, 9.5, 8.5, 8.5, 8.5, 8.5, 7.5, …\n$ Gender         &lt;fct&gt; Female, Female, Female, Female, Male, Female, Female, F…\n\n\nThe Degree column, which lists the students’ degree programs, is a factor with multiple levels such as B.Des. The Course column, representing the course names, is also a factor. The Year column has been ordered and contains values from 1 to 3, indicating the academic year. The Letter Grade column, which lists the letter grades from F to O, is also a factor. The Score column, which represents numerical scores based on the letter grades, contains double (numeric) values, ranging from 0 to 9.5. Finally, the Gender column is a factor with levels like Female and Male. This summary shows that the data has been successfully structured with categorical and numerical variables properly factored and ordered where necessary.\n\n\n\n\ninspect(grades_modified)\n\n\ncategorical variables:  \n          name   class levels  n missing\n1       Degree  factor      3 90       0\n2       Course  factor     15 90       0\n3         Year ordered      3 90       0\n4 Letter Grade ordered      8 90       0\n5       Gender  factor      2 90       0\n                                   distribution\n1 B.Des (33.3%), B.FA (33.3%) ...              \n2 DMA (22.2%), UIID (14.4%), DMP (12.2%) ...   \n3 2 (51.1%), 3 (41.1%), 1 (7.8%)               \n4 A (33.3%), A+ (27.8%), B+ (18.9%) ...        \n5 Female (63.3%), Male (36.7%)                 \n\nquantitative variables:  \n   name   class min    Q1 median    Q3  max mean        sd  n missing\n1    SN numeric 1.0 23.25   45.5 67.75 90.0 45.5 26.124701 90       0\n2 Score numeric 3.5  6.50    7.5  8.50  9.5  7.6  1.209048 90       0\n\n\nKey variables in the dataset include Degree (with levels like B.Des, B.Voc, and B.FA), Course (offering a range of courses with 15 different levels), Year (ordered with 3 levels: 1, 2, and 3), Letter Grade (with 8 ordered levels ranging from F to O), Score (a numeric variable representing students’ grades with a mean of 7.6 and a standard deviation of 1.21), and Gender (categorical, with 2 levels: Male and Female).The “Year” variable has 7 missing values, and a proper factor ordering has been applied to “Year” and “Letter Grade. The summary statistics for the numeric variables show that the minimum score is 3.5, the maximum score is 9.5, and the median score is 7.5. The summary also indicates that the dataset has balanced representation across different categories.\n\n\n\n\nskim(grades_modified)\n\n\nData summary\n\n\nName\ngrades_modified\n\n\nNumber of rows\n90\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n5\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nDegree\n0\n1\nFALSE\n3\nB.D: 30, B.F: 30, B.V: 30\n\n\nCourse\n0\n1\nFALSE\n15\nDMA: 20, UII: 13, DMP: 11, CAC: 8\n\n\nYear\n0\n1\nTRUE\n3\n2: 46, 3: 37, 1: 7\n\n\nLetter Grade\n0\n1\nTRUE\n7\nA: 30, A+: 25, B+: 17, O: 10\n\n\nGender\n0\n1\nFALSE\n2\nFem: 57, Mal: 33\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSN\n0\n1\n45.5\n26.12\n1.0\n23.25\n45.5\n67.75\n90.0\n▇▇▇▇▇\n\n\nScore\n0\n1\n7.6\n1.21\n3.5\n6.50\n7.5\n8.50\n9.5\n▁▂▃▇▇\n\n\n\n\n\nThe mean score is 7.6, indicating that, on average, students performed relatively well across the board. The standard deviation (sd) is 1.209, which shows moderate variability in the grades, suggesting that while most students scored around the mean, there are notable differences in performance. The first quartile (p25) of the scores is 6.5, and the third quartile (p75) is 8.5, which means that 50% of the students scored between these values, further highlighting that the majority of students achieved fairly high scores. The distribution appears slightly skewed, with a tendency towards higher grades, as shown by the histogram.\nData Dictionary\nQuantitative Data:\n\nScore (dbl): The final grade score for each participant, represented as a numeric value ranging from 0 (F) to 9.5 (O), based on the letter grade system.\n\nQualitative Data:\n\nSN (dbl): The serial number assigned to each participant in the dataset.\nDegree (fct): The degree program of the participant, categorized as either B.Des (Bachelor of Design), B.FA (Bachelor of Fine Arts), or B.Voc (Bachelor of Vocation).\nCourse (fct): The course code that corresponds to the specific class or course the participant is enrolled in.\nYear (ord): The academic year of study, categorized as 1 (first year), 2 (second year), or 3 (third year).\nLetter Grade (fct): The letter grade received by each participant, categorized as O, A+, A, B+, B, C, P, or F.\nGender (fct): The gender of the participant, categorized as either Female or Male.\n\n\n\n\n\ngf_histogram(~ Score | Degree, data = grades_modified, fill = \"pink\", bins = 10) %&gt;%\n  gf_labs(\n    title = \"Histogram of Scores by Degree Program\",\n    x = \"Score\",\n    y = \"Count\"\n  )\n\n\n\n\n\n\n\n\nThe histogram illustrates the distribution of scores across the three degree programs-B.Des, B.FA, and B.Voc. Each program has its own distinct spread of scores, which allows for comparison between them. In the B.Des program, the scores are mostly concentrated between 7.5 and 9.5, with a few outliers below 6. The B.FA program has a more even spread of scores, with several students achieving scores between 6.5 and 8.5, and fewer students scoring below 6. The B.Voc program shows a similar spread as B.FA, with the majority of scores between 6.5 and 9.\n\n\n\n\ngf_boxplot(Score ~ Degree, data = grades_modified, fill = ~ Degree) %&gt;%\n  gf_labs(\n    title = \"Distribution of Scores across Degree Programs\",\n    x = \"Degree Program\",\n    y = \"Score\"\n  )\n\n\n\n\n\n\n\n\nThe boxplot visualizes the distribution of scores across the three degree programs. It shows the central tendency (median) and spread of scores for each program. The median score for B.Des appears to be higher than both B.FA and B.Voc. B.FA shows the narrowest range of scores, while B.Voc exhibits the widest range with more variation in scores. Outliers are also visible in the B.Des and B.Voc programs, with a few students scoring notably lower than their peers.\n\n\n\n\ngf_density(~ Score | Degree, data = grades_modified, fill = ~ Degree) %&gt;%\n  gf_fitdistr(~ Score | Degree, data = grades_modified, ddist = \"normal\") %&gt;%\n  gf_labs(\n    title = \"Density of Scores by Degree Program\",\n    x = \"Score\",\n    y = \"Density\"\n  )\n\n\n\n\n\n\n\n\nFrom the faceted density plot, it is evident that the distribution of scores across the three degree programs does not follow a perfect normal distribution.\n\nB.Des: The distribution shows a significant peak around the score of 8, and it is slightly skewed, with a smaller bump on the lower side (around 6). This suggests that most students scored around 8, but it does not appear to follow a normal distribution due to the skewness and the presence of more than one peak.\nB.FA: The distribution for B.FA exhibits multiple peaks, indicating that it is far from a normal distribution. A normal distribution would have a single peak and symmetric spread, but this one shows varied clusters, suggesting different trends in the scores of B.FA students.\nB.Voc: Although B.Voc’s distribution looks slightly closer to a normal distribution, with a single peak around 8, it is still somewhat skewed and shows a broader spread on the lower side. This suggests that while B.Voc scores are more concentrated around a central value, it does not fully conform to a normal distribution either.\n\n\n\n\n\ncrosstable(\n  grades_modified, \n  c(Degree, Gender), \n  showNA = \"ifany\"\n) %&gt;%\n  crosstable::as_flextable()\n\nlabelvariablevalueDegreeB.Des30 (33.33%)B.FA30 (33.33%)B.Voc30 (33.33%)GenderFemale57 (63.33%)Male33 (36.67%)\n\n\nEach of the three degree programs has an equal number of participants, with 30 students each, representing 33.33% of the total sample. In terms of gender, females make up the majority of the participants, with 57 students (63.33%), while males account for 33 students (36.67%).\n\n\n\n\nshapiro_test_bdes &lt;- shapiro.test(grades_modified$Score[grades_modified$Degree == \"B.Des\"])\nshapiro_test_bfa &lt;- shapiro.test(grades_modified$Score[grades_modified$Degree == \"B.FA\"])\nshapiro_test_bvoc &lt;- shapiro.test(grades_modified$Score[grades_modified$Degree == \"B.Voc\"])\n\nshapiro_test_bdes\n\n\n    Shapiro-Wilk normality test\n\ndata:  grades_modified$Score[grades_modified$Degree == \"B.Des\"]\nW = 0.82019, p-value = 0.0001565\n\nshapiro_test_bfa\n\n\n    Shapiro-Wilk normality test\n\ndata:  grades_modified$Score[grades_modified$Degree == \"B.FA\"]\nW = 0.8727, p-value = 0.001924\n\nshapiro_test_bvoc\n\n\n    Shapiro-Wilk normality test\n\ndata:  grades_modified$Score[grades_modified$Degree == \"B.Voc\"]\nW = 0.90341, p-value = 0.01019\n\n\nThe Shapiro-Wilk normality test was conducted to assess whether the distribution of scores in each degree program follows a normal distribution. The p-values for B.Des (p = 0.0001565), B.FA (p = 0.001924), and B.Voc (p = 0.01019) are all less than the commonly used threshold of 0.05. This suggests that the assumption of normality is violated for all three degree programs, indicating that the distribution of scores in each program significantly deviates from a normal distribution.\n\n\n\n\ngrades_modified %&gt;%\n  group_by(Degree) %&gt;%\n  summarise(variance = var(Score))\n\n# A tibble: 3 × 2\n  Degree variance\n  &lt;fct&gt;     &lt;dbl&gt;\n1 B.Des     1.50 \n2 B.FA      0.713\n3 B.Voc     1.96 \n\nDescTools::LeveneTest(Score ~ Degree, data = grades_modified)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  2  1.5797 0.2119\n      87               \n\nfligner.test(Score ~ Degree, data = grades_modified)\n\n\n    Fligner-Killeen test of homogeneity of variances\n\ndata:  Score by Degree\nFligner-Killeen:med chi-squared = 4.513, df = 2, p-value = 0.1047\n\n\nThe Levene’s Test and the Fligner-Killeen Test were conducted to assess the homogeneity of variances for scores across the three degree programs. The variance values for each degree were calculated as follows: B.Des = 1.4954, B.FA = 0.7126, and B.Voc = 1.9586. The results of the Levene’s Test produced a p-value of 0.2119, indicating no statistically significant difference in the variances. Similarly, the Fligner-Killeen Test yielded a p-value of 0.1047, also suggesting that the assumption of homogeneity of variances holds.\n\n\n\n\nanova_results &lt;- aov(Score ~ Degree, data = grades_modified)\n\nsummary(anova_results)\n\n            Df Sum Sq Mean Sq F value Pr(&gt;F)  \nDegree       2   9.27   4.633   3.336 0.0402 *\nResiduals   87 120.83   1.389                 \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe One-Way ANOVA test results indicate that there is a statistically significant difference in scores between the three degree programs. The p-value is 0.0402, which is less than the 0.05 significance threshold. This means we reject the null hypothesis, suggesting that at least one of the degree programs has a different mean score compared to the others. The F-value of 3.336 also supports this conclusion, as it indicates that the variation between the group means is greater than the variation within the groups.\n\n\n\n\nsupernova::pairwise(anova_results,\n  correction = \"Bonferroni\",\n  alpha = 0.05, \n  var_equal = TRUE, \n  plot = TRUE\n)\n\n\n\n\n\n\n\n\n\n\n\n── Pairwise t-tests with Bonferroni correction ─────────────────────────────────\n\n\nModel: Score ~ Degree\n\n\nDegree\n\n\nLevels: 3\n\n\nFamily-wise error-rate: 0.049\n\n\n\n  group_1 group_2   diff pooled_se      t    df  lower  upper p_adj\n  &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 B.FA    B.Des   -0.767     0.215 -3.563    87 -1.232 -0.301 .0018\n2 B.Voc   B.Des   -0.233     0.215 -1.084    87 -0.699  0.232 .8435\n3 B.Voc   B.FA     0.533     0.215  2.479    87  0.068  0.999 .0453\n\n\nThe pairwise comparisons using the Bonferroni correction indicate the differences between the degree programs in terms of score. The comparison between B.FA and B.Des shows a statistically significant difference (p = 0.0018) with a negative difference (-0.767), meaning B.FA scores lower on average than B.Des. However, the comparisons between B.Voc and B.Des, as well as between B.Voc and B.FA, do not show significant differences (p = 0.8435 and p = 0.0453, respectively). The plot visualizes these comparisons, showing that the confidence intervals for B.FA vs. B.Des do not overlap, indicating a significant difference. The other comparisons have overlapping confidence intervals, suggesting no significant differences in their mean scores.\n\n\n\n\nwilcox_test_bdes_bfa &lt;- wilcox.test(\n  Score ~ Degree,\n  data = grades_modified %&gt;% filter(Degree %in% c(\"B.Des\", \"B.FA\")),\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_bdes_bfa\n\n# A tibble: 1 × 7\n  estimate statistic p.value  conf.low conf.high method              alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;      \n1     1.00      660. 0.00128 0.0000599      1.00 Wilcoxon rank sum … two.sided  \n\n\nThe Wilcoxon Rank-Sum Test was performed to compare the grades between the two programs, B.Des and B.FA. The test yielded a statistic of 659.5 and a p-value of 0.00128, indicating a statistically significant difference in the grades between these two programs (p &lt; 0.05). The confidence interval for the difference in ranks ranged from approximately 5.99e-05 to 1.00003, suggesting that there is a substantial effect. This implies that students enrolled in B.Des tend to have higher grades than those in B.FA, with the results supporting the rejection of the null hypothesis.\n\n\n\n\nwilcox_test_bdes_bvoc &lt;- wilcox.test(\n  Score ~ Degree,\n  data = grades_modified %&gt;% filter(Degree %in% c(\"B.Des\", \"B.Voc\")),\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_bdes_bvoc\n\n# A tibble: 1 × 7\n   estimate statistic p.value   conf.low conf.high method            alternative\n      &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;             &lt;chr&gt;      \n1 0.0000189      494.   0.500 -0.0000424      1.00 Wilcoxon rank su… two.sided  \n\n\nThe Wilcoxon rank-sum test comparing the scores between the B.Des and B.Voc programs yielded a test statistic of 494.5 and a p-value of 0.500262. The confidence interval for the difference in ranks was calculated, with a lower bound of -4.237794e-05 and an upper bound of 0.999977. Since the p-value is significantly higher than the standard alpha level of 0.05, we fail to reject the null hypothesis. This indicates that there is no statistically significant difference in the scores between students in the B.Des and B.Voc programs. The result suggests that the performances of students in these two programs are similar in terms of their scores.\n\n\n\n\nwilcox_test_bfa_bvoc &lt;- wilcox.test(\n  Score ~ Degree,\n  data = grades_modified %&gt;% filter(Degree %in% c(\"B.FA\", \"B.Voc\")),\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_bfa_bvoc\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low conf.high method               alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;      \n1    -1.00      318.  0.0447    -1.00 0.0000382 Wilcoxon rank sum t… two.sided  \n\n\nThe Wilcoxon Rank-Sum Test comparing B.FA and B.Voc shows a significant difference between the two programs, with a p-value of 0.0447. The test statistic is 318.5, and the confidence interval for the difference between the groups ranges from -1.000062 to 3.819457e-05. This suggests that students in the B.FA and B.Voc programs exhibit significantly different score distributions. Since the p-value is less than 0.05, we reject the null hypothesis, indicating that there is a statistically significant difference between the scores of students in these two programs.\n\n\n\n\nlm_model &lt;- lm(Score ~ Degree, data = grades_modified)\ntukey_results &lt;- TukeyHSD(aov(lm_model))\nprint(tukey_results)\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = lm_model)\n\n$Degree\n                  diff        lwr         upr     p adj\nB.FA-B.Des  -0.7666667 -1.4922407 -0.04109263 0.0358572\nB.Voc-B.Des -0.2333333 -0.9589074  0.49224070 0.7242806\nB.Voc-B.FA   0.5333333 -0.1922407  1.25890737 0.1917573\n\n\nThe results from the Tukey multiple comparisons of means indicate the differences in average rank scores among the degree programs. The comparison between B.FA and B.Des shows a mean difference of -0.767, with a 95% confidence interval ranging from -1.492 to -0.041. The adjusted p-value for this comparison is 0.0359, suggesting a statistically significant difference, indicating that B.FA students scored lower than B.Des students. In contrast, the comparison between B.Voc and B.Des yields a mean difference of -0.233, with a confidence interval from -0.959 to 0.492, and an adjusted p-value of 0.7243, indicating no significant difference between these two groups. Lastly, the comparison between B.Voc and B.FA shows a mean difference of 0.533, with a confidence interval ranging from -0.192 to 1.259, and an adjusted p-value of 0.1918, also suggesting no significant difference. Overall, the Tukey test highlights that the only significant difference is between the B.FA and B.Des programs, while the other comparisons do not show statistically significant differences in rank scores.\n\n\n\n\nobserved_perm &lt;- grades_modified %&gt;%\n  specify(Score ~ Degree) %&gt;%\n  hypothesise(null = \"independence\") %&gt;%\n  calculate(stat = \"F\")\n\nnull_dist_perm &lt;- grades_modified %&gt;%\n  specify(Score ~ Degree) %&gt;%\n  hypothesise(null = \"independence\") %&gt;%\n  generate(reps = 5000, type = \"permute\") %&gt;%\n  calculate(stat = \"F\")\n\nnull_dist_perm %&gt;%\n  visualise() +\n  shade_p_value(obs_stat = observed_perm$stat, direction = \"greater\")\n\n\n\n\n\n\n\nperm_p_value &lt;- null_dist_perm %&gt;%\n  get_p_value(obs_stat = observed_perm$stat, direction = \"greater\")\nperm_p_value\n\n# A tibble: 1 × 1\n  p_value\n    &lt;dbl&gt;\n1  0.0402\n\n\nIn the permutation test, we tested whether there is a significant difference in scores between degree programs using non-parametric methods. The permutation test’s p-value of 0.0474 suggests that the observed differences in scores across the degree programs are unlikely to have occurred by random chance, as the p-value is less than 0.05. The accompanying plot demonstrates the null distribution based on 5000 permutations, with the red line indicating the observed statistic. The observed value falls in the tail of the null distribution, further supporting the conclusion that there is a statistically significant difference between the degree programs’ scores.\n\n\n\nThe research experiment aimed to determine if there were significant differences in grades among students enrolled in three different programs: B.Des, B.FA, and B.Voc. The following statistical tests were conducted:\nShapiro-Wilk Test for Normality:\nThe Shapiro-Wilk test was used to assess whether the grade data follows a normal distribution for each program:\n\nB.Des: W = 0.82019, p = 0.0001565\nB.FA: W = 0.8727, p = 0.001924\nB.Voc: W = 0.90341, p = 0.01019\n\nFor all programs, the p-values were very small, indicating that the grade data significantly deviates from normality. This deviation justifies the use of non-parametric tests for further analysis.\nVariance Test:\nLevene’s test and Fligner-Killeen test were used to assess whether the variances in grades were equal between the programs:\n\nLevene’s Test: p = 0.2119\nFligner-Killeen Test: p = 0.1047\n\nBoth tests suggest that there is no significant difference in variances between the programs, meaning the assumption of homogeneity of variances holds, and parametric tests like ANOVA are valid.\nOne-Way ANOVA:\nA one-way ANOVA was conducted to compare the average grades across the three programs:\n\nF(2, 87) = 3.336, p = 0.0402\n\nThe ANOVA results show a statistically significant difference in mean grades among the programs, indicating that at least one program’s mean grade differs from the others.\nPairwise Comparisons Using Bonferroni Correction:\nFollowing the ANOVA, pairwise comparisons with Bonferroni correction were conducted:\n\nB.FA vs. B.Des: Mean difference = -0.767, p = 0.0018 (significant)\nB.Voc vs. B.Des: Mean difference = -0.233, p = 0.8435 (not significant)\nB.Voc vs. B.FA: Mean difference = 0.533, p = 0.0453 (significant)\n\nThese results suggest significant differences in grades between B.FA and B.Des, and between B.Voc and B.FA, while no significant difference was found between B.Des and B.Voc.\nWilcoxon Rank-Sum Test:\nDue to deviations from normality, Wilcoxon Rank-Sum tests were also conducted:\n\nB.Des vs. B.FA: p = 0.00128 (significant)\nB.Des vs. B.Voc: p = 0.5003 (not significant)\nB.FA vs. B.Voc: p = 0.0447 (significant)\n\nThe Wilcoxon test results align with the Bonferroni-adjusted pairwise comparisons, reaffirming significant differences between B.Des and B.FA, and between B.FA and B.Voc.\nTukey Multiple Comparisons:\nA Tukey HSD test was conducted using a linear model to compare mean differences between the programs:\n\nB.FA vs. B.Des: Mean difference = -0.767, p = 0.0359 (significant)\nB.Voc vs. B.Des: Mean difference = -0.233, p = 0.7243 (not significant)\nB.Voc vs. B.FA: Mean difference = 0.533, p = 0.1918 (not significant)\n\nThese results further confirm the significant difference between B.FA and B.Des, while showing no significant differences between B.Voc and the other programs.\nPermutation Test:\nA permutation test was conducted to assess the likelihood of the observed differences in grades occurring by chance. The permutation test resulted in a p-value of 0.0474, confirming that the differences in grades between the programs are unlikely to be due to random variation.\nConclusion:\nThe statistical analyses indicate that there are significant differences in grades between some degree programs. Specifically, significant differences exist between B.FA and B.Des, and between B.FA and B.Voc, while there is no significant difference between B.Des and B.Voc. The results from both parametric (ANOVA and Tukey HSD) and non-parametric tests (Wilcoxon Rank-Sum) consistently support these findings. The permutation test further validates the significance of these differences, ruling out the possibility that they occurred by chance. Thus, the research experiment concludes that program enrollment has a significant effect on students’ grades, particularly between B.FA and the other two programs."
  },
  {
    "objectID": "posts/Assignment 3 - Part 3/index.html#introduction",
    "href": "posts/Assignment 3 - Part 3/index.html#introduction",
    "title": "Assignment 3 - Part 3",
    "section": "",
    "text": "We are investigating whether there is a significant difference in the grades received by students enrolled in three different programs: B.Voc, B.FA, and B.Des.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(broom)\nlibrary(infer)\n\n\nAttaching package: 'infer'\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\nlibrary(patchwork)\nlibrary(ggprism)\nlibrary(supernova)\n\n\nAttaching package: 'supernova'\n\nThe following object is masked from 'package:scales':\n\n    number\n\nlibrary(dplyr)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(crosstable)\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\n\n\n\nObjective: The purpose of this research experiment is to investigate whether there is a significant difference in the grades received by students enrolled in three different programs: B.Voc, B.FA, and B.Des. By collecting and analyzing grade data from students, we aim to explore whether students from different branches perform differently in their first studio course during the first semester of the academic year 2024-25.\nHypotheses:\n\nPrimary Hypothesis: There is a significant difference in the grades received by students from the B.Voc, B.FA, and B.Des programs.\nAdditional Hypothesis: Students from one program (e.g., B.Des) tend to have higher grades on average compared to the other programs (B.Voc and B.FA).\n\nExperiment Design:\nData Collection:\n\nSample: The dataset consists of grades from 90 students at the Srishti Manipal Institute of Art, Design, and Technology in Bengaluru. There are 30 students from each program.\nData Sources: The participants were randomly selected by tossing a coin, and the grades were recorded in an Excel sheet by the people conducting the experiment. Each participant reported the grade they received for their first studio course in the first semester of the academic year 2024-25.\n\nVariables Measured:\n\nTarget Variable: The grades received by each participant in their first studio course during the semester.\nPredictor Variables: Program (B.Voc, B.FA, B.Des)\n\nSampling:\n\nTime Period: The experiment was conducted over a period of 1.5 hours on October 24th, 2024.\nParticipant Selection Criteria: 30 participants were randomly selected from each program using a coin toss. Their grades were recorded accordingly in the Excel sheet.\n\nAnalysis Plan:\n\nData Cleaning and Transformation: The data was checked for accuracy in the Excel sheet to ensure that each participant’s grade and program were properly recorded, with no missing or erroneous entries.\nExploratory Data Analysis (EDA): Visualizations such as histograms, box plots, and scatter plots will be used to compare grade distributions across the three programs. This will help identify patterns or discrepancies in performance between students from different programs.\n\nStatistical Tests:\n\nShapiro-Wilk Test for Normality: The Shapiro-Wilk test will be used to check if the grade data follows a normal distribution for each program. If the data significantly deviates from normality (p-value &lt; 0.05), it suggests the use of non-parametric tests.\nVariance Test (F-Test): A variance test will be conducted to determine if the variances in grades are equal between the programs. This test will check the assumption of homogeneity of variances, which is required for the two-sample t-test and ANOVA. If the p-value is small (p-value &lt; 0.05), it indicates unequal variances.\nOne-Way ANOVA: A one-way ANOVA will be conducted to compare the average grades across the three programs (B.Voc, B.FA, B.Des). This will help determine if there is a statistically significant difference in grades between the programs.\nPairwise Comparisons: If the one-way ANOVA is significant, post-hoc pairwise comparisons using Bonferroni correction will be conducted to identify which specific pairs of programs have significant differences in their average grades.\nWilcoxon Rank-Sum Test: If the normality assumption is not met, a Wilcoxon rank-sum test (a non-parametric test) will be conducted to compare the grades between programs. This will assess whether students in one program tend to receive higher or lower grades compared to students in the other programs.\nTukey Test: If ANOVA results are significant, a Tukey Honest Significant Difference (HSD) test will be used to further explore the pairwise differences in the mean grades between the programs. This test will provide specific pairwise comparisons to determine which programs differ significantly.\nPermutation Test: A permutation test will be conducted to assess the likelihood of the observed differences in grades across the three programs occurring by chance, providing a non-parametric alternative to the one-way ANOVA.\nDescriptive Statistics: Descriptive measures such as mean, median, and standard deviation will be calculated for each program to summarize grade performance. These statistics will help provide a clear overview of the central tendencies and variability within each program.\n\nLimitations:\n\nSample Size: With 30 participants per program, the results may not be generalizable to the entire student population. A more extensive sample would provide greater reliability and external validity.\nContextual Factors: The study did not account for other factors that might influence grade performance, such as prior academic achievement, class participation, or individual learning styles, which could have an effect on the grades received.\n\nOutcome:\nThe analysis will reveal whether significant differences in grade performance exist between students from the B.Voc, B.FA, and B.Des programs at Srishti Manipal Institute of Art, Design, and Technology. If the hypotheses hold, it would suggest that students from one program tend to perform better in their first studio course compared to students from the other programs. These findings will provide insights into whether the program of study influences student performance within this academic context.\n\n\n\n\ngrades &lt;- read_csv(\"../../data/grades.csv\")\n\nRows: 90 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Degree, Course, Letter Grade, Gender\ndbl (3): SN, Year, Score\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ngrades\n\n# A tibble: 90 × 7\n      SN Degree Course  Year `Letter Grade` Score Gender\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; \n 1     1 B.Des  CAC        2 A                8   Female\n 2     2 B.Des  CAC        2 O                9.6 Female\n 3     3 B.Des  IADP       2 A+               9.2 Female\n 4     4 B.Des  CE         2 O                9.8 Female\n 5     5 B.Des  BSSD       2 P                3   Male  \n 6     6 B.Des  CAC        2 O                9.5 Female\n 7     7 B.Des  PSD        2 A+               9   Female\n 8     8 B.Des  PSD        2 A+               9   Female\n 9     9 B.Des  PSD        2 A+               9   Female\n10    10 B.Des  BSSD       3 A+               9   Female\n# ℹ 80 more rows\n\n\nThe dataset comprises 90 entries of students from Srishti Manipal Institute of Art, Design, and Technology (SMI) across three different programs: B.Des, B.FA, and B.Voc. Each entry includes details such as the student’s degree program, course, academic year, letter grade, score (in terms of grade points), and gender.\n\n\n\n\ngrades_modified &lt;- grades %&gt;%\n  dplyr::mutate(\n    Degree = as.factor(Degree),\n    Course = as.factor(Course),\n    Year = factor(Year, \n      levels = c(\"1\", \"2\", \"3\"), \n      ordered = TRUE),\n    `Letter Grade` = factor(`Letter Grade`, \n      levels = c(\"F\", \"P\", \"C\", \"B\", \"B+\", \"A\", \"A+\", \"O\"), \n      ordered = TRUE),\n    Gender = as.factor(Gender),\n    Score = case_when(\n      `Letter Grade` == \"O\" ~ 9.5,\n      `Letter Grade` == \"A+\" ~ 8.5,\n      `Letter Grade` == \"A\" ~ 7.5,\n      `Letter Grade` == \"B+\" ~ 6.5,\n      `Letter Grade` == \"B\" ~ 5.5,\n      `Letter Grade` == \"C\" ~ 4.5,\n      `Letter Grade` == \"P\" ~ 3.5,\n      `Letter Grade` == \"F\" ~ 0\n    )\n  )\n\ngrades_modified\n\n# A tibble: 90 × 7\n      SN Degree Course Year  `Letter Grade` Score Gender\n   &lt;dbl&gt; &lt;fct&gt;  &lt;fct&gt;  &lt;ord&gt; &lt;ord&gt;          &lt;dbl&gt; &lt;fct&gt; \n 1     1 B.Des  CAC    2     A                7.5 Female\n 2     2 B.Des  CAC    2     O                9.5 Female\n 3     3 B.Des  IADP   2     A+               8.5 Female\n 4     4 B.Des  CE     2     O                9.5 Female\n 5     5 B.Des  BSSD   2     P                3.5 Male  \n 6     6 B.Des  CAC    2     O                9.5 Female\n 7     7 B.Des  PSD    2     A+               8.5 Female\n 8     8 B.Des  PSD    2     A+               8.5 Female\n 9     9 B.Des  PSD    2     A+               8.5 Female\n10    10 B.Des  BSSD   3     A+               8.5 Female\n# ℹ 80 more rows\n\n\nThe dataset now shows the modified Score column, which has been updated based on the corresponding Letter Grade. Using the case_when() function, letter grades such as “O” were assigned a score of 9.5, “A+” was assigned 8.5, “A” was given 7.5, and so on. This transformation allows for a more standardized numerical analysis of the grades.\n\n\n\n\nglimpse(grades_modified)\n\nRows: 90\nColumns: 7\n$ SN             &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n$ Degree         &lt;fct&gt; B.Des, B.Des, B.Des, B.Des, B.Des, B.Des, B.Des, B.Des,…\n$ Course         &lt;fct&gt; CAC, CAC, IADP, CE, BSSD, CAC, PSD, PSD, PSD, BSSD, VCS…\n$ Year           &lt;ord&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 3, 2, 3, 3, 2, 2…\n$ `Letter Grade` &lt;ord&gt; A, O, A+, O, P, O, A+, A+, A+, A+, A, A, A, B+, B+, A+,…\n$ Score          &lt;dbl&gt; 7.5, 9.5, 8.5, 9.5, 3.5, 9.5, 8.5, 8.5, 8.5, 8.5, 7.5, …\n$ Gender         &lt;fct&gt; Female, Female, Female, Female, Male, Female, Female, F…\n\n\nThe Degree column, which lists the students’ degree programs, is a factor with multiple levels such as B.Des. The Course column, representing the course names, is also a factor. The Year column has been ordered and contains values from 1 to 3, indicating the academic year. The Letter Grade column, which lists the letter grades from F to O, is also a factor. The Score column, which represents numerical scores based on the letter grades, contains double (numeric) values, ranging from 0 to 9.5. Finally, the Gender column is a factor with levels like Female and Male. This summary shows that the data has been successfully structured with categorical and numerical variables properly factored and ordered where necessary.\n\n\n\n\ninspect(grades_modified)\n\n\ncategorical variables:  \n          name   class levels  n missing\n1       Degree  factor      3 90       0\n2       Course  factor     15 90       0\n3         Year ordered      3 90       0\n4 Letter Grade ordered      8 90       0\n5       Gender  factor      2 90       0\n                                   distribution\n1 B.Des (33.3%), B.FA (33.3%) ...              \n2 DMA (22.2%), UIID (14.4%), DMP (12.2%) ...   \n3 2 (51.1%), 3 (41.1%), 1 (7.8%)               \n4 A (33.3%), A+ (27.8%), B+ (18.9%) ...        \n5 Female (63.3%), Male (36.7%)                 \n\nquantitative variables:  \n   name   class min    Q1 median    Q3  max mean        sd  n missing\n1    SN numeric 1.0 23.25   45.5 67.75 90.0 45.5 26.124701 90       0\n2 Score numeric 3.5  6.50    7.5  8.50  9.5  7.6  1.209048 90       0\n\n\nKey variables in the dataset include Degree (with levels like B.Des, B.Voc, and B.FA), Course (offering a range of courses with 15 different levels), Year (ordered with 3 levels: 1, 2, and 3), Letter Grade (with 8 ordered levels ranging from F to O), Score (a numeric variable representing students’ grades with a mean of 7.6 and a standard deviation of 1.21), and Gender (categorical, with 2 levels: Male and Female).The “Year” variable has 7 missing values, and a proper factor ordering has been applied to “Year” and “Letter Grade. The summary statistics for the numeric variables show that the minimum score is 3.5, the maximum score is 9.5, and the median score is 7.5. The summary also indicates that the dataset has balanced representation across different categories.\n\n\n\n\nskim(grades_modified)\n\n\nData summary\n\n\nName\ngrades_modified\n\n\nNumber of rows\n90\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n5\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nDegree\n0\n1\nFALSE\n3\nB.D: 30, B.F: 30, B.V: 30\n\n\nCourse\n0\n1\nFALSE\n15\nDMA: 20, UII: 13, DMP: 11, CAC: 8\n\n\nYear\n0\n1\nTRUE\n3\n2: 46, 3: 37, 1: 7\n\n\nLetter Grade\n0\n1\nTRUE\n7\nA: 30, A+: 25, B+: 17, O: 10\n\n\nGender\n0\n1\nFALSE\n2\nFem: 57, Mal: 33\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSN\n0\n1\n45.5\n26.12\n1.0\n23.25\n45.5\n67.75\n90.0\n▇▇▇▇▇\n\n\nScore\n0\n1\n7.6\n1.21\n3.5\n6.50\n7.5\n8.50\n9.5\n▁▂▃▇▇\n\n\n\n\n\nThe mean score is 7.6, indicating that, on average, students performed relatively well across the board. The standard deviation (sd) is 1.209, which shows moderate variability in the grades, suggesting that while most students scored around the mean, there are notable differences in performance. The first quartile (p25) of the scores is 6.5, and the third quartile (p75) is 8.5, which means that 50% of the students scored between these values, further highlighting that the majority of students achieved fairly high scores. The distribution appears slightly skewed, with a tendency towards higher grades, as shown by the histogram.\nData Dictionary\nQuantitative Data:\n\nScore (dbl): The final grade score for each participant, represented as a numeric value ranging from 0 (F) to 9.5 (O), based on the letter grade system.\n\nQualitative Data:\n\nSN (dbl): The serial number assigned to each participant in the dataset.\nDegree (fct): The degree program of the participant, categorized as either B.Des (Bachelor of Design), B.FA (Bachelor of Fine Arts), or B.Voc (Bachelor of Vocation).\nCourse (fct): The course code that corresponds to the specific class or course the participant is enrolled in.\nYear (ord): The academic year of study, categorized as 1 (first year), 2 (second year), or 3 (third year).\nLetter Grade (fct): The letter grade received by each participant, categorized as O, A+, A, B+, B, C, P, or F.\nGender (fct): The gender of the participant, categorized as either Female or Male.\n\n\n\n\n\ngf_histogram(~ Score | Degree, data = grades_modified, fill = \"pink\", bins = 10) %&gt;%\n  gf_labs(\n    title = \"Histogram of Scores by Degree Program\",\n    x = \"Score\",\n    y = \"Count\"\n  )\n\n\n\n\n\n\n\n\nThe histogram illustrates the distribution of scores across the three degree programs-B.Des, B.FA, and B.Voc. Each program has its own distinct spread of scores, which allows for comparison between them. In the B.Des program, the scores are mostly concentrated between 7.5 and 9.5, with a few outliers below 6. The B.FA program has a more even spread of scores, with several students achieving scores between 6.5 and 8.5, and fewer students scoring below 6. The B.Voc program shows a similar spread as B.FA, with the majority of scores between 6.5 and 9.\n\n\n\n\ngf_boxplot(Score ~ Degree, data = grades_modified, fill = ~ Degree) %&gt;%\n  gf_labs(\n    title = \"Distribution of Scores across Degree Programs\",\n    x = \"Degree Program\",\n    y = \"Score\"\n  )\n\n\n\n\n\n\n\n\nThe boxplot visualizes the distribution of scores across the three degree programs. It shows the central tendency (median) and spread of scores for each program. The median score for B.Des appears to be higher than both B.FA and B.Voc. B.FA shows the narrowest range of scores, while B.Voc exhibits the widest range with more variation in scores. Outliers are also visible in the B.Des and B.Voc programs, with a few students scoring notably lower than their peers.\n\n\n\n\ngf_density(~ Score | Degree, data = grades_modified, fill = ~ Degree) %&gt;%\n  gf_fitdistr(~ Score | Degree, data = grades_modified, ddist = \"normal\") %&gt;%\n  gf_labs(\n    title = \"Density of Scores by Degree Program\",\n    x = \"Score\",\n    y = \"Density\"\n  )\n\n\n\n\n\n\n\n\nFrom the faceted density plot, it is evident that the distribution of scores across the three degree programs does not follow a perfect normal distribution.\n\nB.Des: The distribution shows a significant peak around the score of 8, and it is slightly skewed, with a smaller bump on the lower side (around 6). This suggests that most students scored around 8, but it does not appear to follow a normal distribution due to the skewness and the presence of more than one peak.\nB.FA: The distribution for B.FA exhibits multiple peaks, indicating that it is far from a normal distribution. A normal distribution would have a single peak and symmetric spread, but this one shows varied clusters, suggesting different trends in the scores of B.FA students.\nB.Voc: Although B.Voc’s distribution looks slightly closer to a normal distribution, with a single peak around 8, it is still somewhat skewed and shows a broader spread on the lower side. This suggests that while B.Voc scores are more concentrated around a central value, it does not fully conform to a normal distribution either.\n\n\n\n\n\ncrosstable(\n  grades_modified, \n  c(Degree, Gender), \n  showNA = \"ifany\"\n) %&gt;%\n  crosstable::as_flextable()\n\nlabelvariablevalueDegreeB.Des30 (33.33%)B.FA30 (33.33%)B.Voc30 (33.33%)GenderFemale57 (63.33%)Male33 (36.67%)\n\n\nEach of the three degree programs has an equal number of participants, with 30 students each, representing 33.33% of the total sample. In terms of gender, females make up the majority of the participants, with 57 students (63.33%), while males account for 33 students (36.67%).\n\n\n\n\nshapiro_test_bdes &lt;- shapiro.test(grades_modified$Score[grades_modified$Degree == \"B.Des\"])\nshapiro_test_bfa &lt;- shapiro.test(grades_modified$Score[grades_modified$Degree == \"B.FA\"])\nshapiro_test_bvoc &lt;- shapiro.test(grades_modified$Score[grades_modified$Degree == \"B.Voc\"])\n\nshapiro_test_bdes\n\n\n    Shapiro-Wilk normality test\n\ndata:  grades_modified$Score[grades_modified$Degree == \"B.Des\"]\nW = 0.82019, p-value = 0.0001565\n\nshapiro_test_bfa\n\n\n    Shapiro-Wilk normality test\n\ndata:  grades_modified$Score[grades_modified$Degree == \"B.FA\"]\nW = 0.8727, p-value = 0.001924\n\nshapiro_test_bvoc\n\n\n    Shapiro-Wilk normality test\n\ndata:  grades_modified$Score[grades_modified$Degree == \"B.Voc\"]\nW = 0.90341, p-value = 0.01019\n\n\nThe Shapiro-Wilk normality test was conducted to assess whether the distribution of scores in each degree program follows a normal distribution. The p-values for B.Des (p = 0.0001565), B.FA (p = 0.001924), and B.Voc (p = 0.01019) are all less than the commonly used threshold of 0.05. This suggests that the assumption of normality is violated for all three degree programs, indicating that the distribution of scores in each program significantly deviates from a normal distribution.\n\n\n\n\ngrades_modified %&gt;%\n  group_by(Degree) %&gt;%\n  summarise(variance = var(Score))\n\n# A tibble: 3 × 2\n  Degree variance\n  &lt;fct&gt;     &lt;dbl&gt;\n1 B.Des     1.50 \n2 B.FA      0.713\n3 B.Voc     1.96 \n\nDescTools::LeveneTest(Score ~ Degree, data = grades_modified)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  2  1.5797 0.2119\n      87               \n\nfligner.test(Score ~ Degree, data = grades_modified)\n\n\n    Fligner-Killeen test of homogeneity of variances\n\ndata:  Score by Degree\nFligner-Killeen:med chi-squared = 4.513, df = 2, p-value = 0.1047\n\n\nThe Levene’s Test and the Fligner-Killeen Test were conducted to assess the homogeneity of variances for scores across the three degree programs. The variance values for each degree were calculated as follows: B.Des = 1.4954, B.FA = 0.7126, and B.Voc = 1.9586. The results of the Levene’s Test produced a p-value of 0.2119, indicating no statistically significant difference in the variances. Similarly, the Fligner-Killeen Test yielded a p-value of 0.1047, also suggesting that the assumption of homogeneity of variances holds.\n\n\n\n\nanova_results &lt;- aov(Score ~ Degree, data = grades_modified)\n\nsummary(anova_results)\n\n            Df Sum Sq Mean Sq F value Pr(&gt;F)  \nDegree       2   9.27   4.633   3.336 0.0402 *\nResiduals   87 120.83   1.389                 \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe One-Way ANOVA test results indicate that there is a statistically significant difference in scores between the three degree programs. The p-value is 0.0402, which is less than the 0.05 significance threshold. This means we reject the null hypothesis, suggesting that at least one of the degree programs has a different mean score compared to the others. The F-value of 3.336 also supports this conclusion, as it indicates that the variation between the group means is greater than the variation within the groups.\n\n\n\n\nsupernova::pairwise(anova_results,\n  correction = \"Bonferroni\",\n  alpha = 0.05, \n  var_equal = TRUE, \n  plot = TRUE\n)\n\n\n\n\n\n\n\n\n\n\n\n── Pairwise t-tests with Bonferroni correction ─────────────────────────────────\n\n\nModel: Score ~ Degree\n\n\nDegree\n\n\nLevels: 3\n\n\nFamily-wise error-rate: 0.049\n\n\n\n  group_1 group_2   diff pooled_se      t    df  lower  upper p_adj\n  &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 B.FA    B.Des   -0.767     0.215 -3.563    87 -1.232 -0.301 .0018\n2 B.Voc   B.Des   -0.233     0.215 -1.084    87 -0.699  0.232 .8435\n3 B.Voc   B.FA     0.533     0.215  2.479    87  0.068  0.999 .0453\n\n\nThe pairwise comparisons using the Bonferroni correction indicate the differences between the degree programs in terms of score. The comparison between B.FA and B.Des shows a statistically significant difference (p = 0.0018) with a negative difference (-0.767), meaning B.FA scores lower on average than B.Des. However, the comparisons between B.Voc and B.Des, as well as between B.Voc and B.FA, do not show significant differences (p = 0.8435 and p = 0.0453, respectively). The plot visualizes these comparisons, showing that the confidence intervals for B.FA vs. B.Des do not overlap, indicating a significant difference. The other comparisons have overlapping confidence intervals, suggesting no significant differences in their mean scores.\n\n\n\n\nwilcox_test_bdes_bfa &lt;- wilcox.test(\n  Score ~ Degree,\n  data = grades_modified %&gt;% filter(Degree %in% c(\"B.Des\", \"B.FA\")),\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_bdes_bfa\n\n# A tibble: 1 × 7\n  estimate statistic p.value  conf.low conf.high method              alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;      \n1     1.00      660. 0.00128 0.0000599      1.00 Wilcoxon rank sum … two.sided  \n\n\nThe Wilcoxon Rank-Sum Test was performed to compare the grades between the two programs, B.Des and B.FA. The test yielded a statistic of 659.5 and a p-value of 0.00128, indicating a statistically significant difference in the grades between these two programs (p &lt; 0.05). The confidence interval for the difference in ranks ranged from approximately 5.99e-05 to 1.00003, suggesting that there is a substantial effect. This implies that students enrolled in B.Des tend to have higher grades than those in B.FA, with the results supporting the rejection of the null hypothesis.\n\n\n\n\nwilcox_test_bdes_bvoc &lt;- wilcox.test(\n  Score ~ Degree,\n  data = grades_modified %&gt;% filter(Degree %in% c(\"B.Des\", \"B.Voc\")),\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_bdes_bvoc\n\n# A tibble: 1 × 7\n   estimate statistic p.value   conf.low conf.high method            alternative\n      &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;             &lt;chr&gt;      \n1 0.0000189      494.   0.500 -0.0000424      1.00 Wilcoxon rank su… two.sided  \n\n\nThe Wilcoxon rank-sum test comparing the scores between the B.Des and B.Voc programs yielded a test statistic of 494.5 and a p-value of 0.500262. The confidence interval for the difference in ranks was calculated, with a lower bound of -4.237794e-05 and an upper bound of 0.999977. Since the p-value is significantly higher than the standard alpha level of 0.05, we fail to reject the null hypothesis. This indicates that there is no statistically significant difference in the scores between students in the B.Des and B.Voc programs. The result suggests that the performances of students in these two programs are similar in terms of their scores.\n\n\n\n\nwilcox_test_bfa_bvoc &lt;- wilcox.test(\n  Score ~ Degree,\n  data = grades_modified %&gt;% filter(Degree %in% c(\"B.FA\", \"B.Voc\")),\n  alternative = \"two.sided\",\n  conf.int = TRUE\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact p-value with ties\n\n\nWarning in wilcox.test.default(x = DATA[[1L]], y = DATA[[2L]], ...): cannot\ncompute exact confidence intervals with ties\n\nwilcox_test_bfa_bvoc\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low conf.high method               alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;      \n1    -1.00      318.  0.0447    -1.00 0.0000382 Wilcoxon rank sum t… two.sided  \n\n\nThe Wilcoxon Rank-Sum Test comparing B.FA and B.Voc shows a significant difference between the two programs, with a p-value of 0.0447. The test statistic is 318.5, and the confidence interval for the difference between the groups ranges from -1.000062 to 3.819457e-05. This suggests that students in the B.FA and B.Voc programs exhibit significantly different score distributions. Since the p-value is less than 0.05, we reject the null hypothesis, indicating that there is a statistically significant difference between the scores of students in these two programs.\n\n\n\n\nlm_model &lt;- lm(Score ~ Degree, data = grades_modified)\ntukey_results &lt;- TukeyHSD(aov(lm_model))\nprint(tukey_results)\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = lm_model)\n\n$Degree\n                  diff        lwr         upr     p adj\nB.FA-B.Des  -0.7666667 -1.4922407 -0.04109263 0.0358572\nB.Voc-B.Des -0.2333333 -0.9589074  0.49224070 0.7242806\nB.Voc-B.FA   0.5333333 -0.1922407  1.25890737 0.1917573\n\n\nThe results from the Tukey multiple comparisons of means indicate the differences in average rank scores among the degree programs. The comparison between B.FA and B.Des shows a mean difference of -0.767, with a 95% confidence interval ranging from -1.492 to -0.041. The adjusted p-value for this comparison is 0.0359, suggesting a statistically significant difference, indicating that B.FA students scored lower than B.Des students. In contrast, the comparison between B.Voc and B.Des yields a mean difference of -0.233, with a confidence interval from -0.959 to 0.492, and an adjusted p-value of 0.7243, indicating no significant difference between these two groups. Lastly, the comparison between B.Voc and B.FA shows a mean difference of 0.533, with a confidence interval ranging from -0.192 to 1.259, and an adjusted p-value of 0.1918, also suggesting no significant difference. Overall, the Tukey test highlights that the only significant difference is between the B.FA and B.Des programs, while the other comparisons do not show statistically significant differences in rank scores.\n\n\n\n\nobserved_perm &lt;- grades_modified %&gt;%\n  specify(Score ~ Degree) %&gt;%\n  hypothesise(null = \"independence\") %&gt;%\n  calculate(stat = \"F\")\n\nnull_dist_perm &lt;- grades_modified %&gt;%\n  specify(Score ~ Degree) %&gt;%\n  hypothesise(null = \"independence\") %&gt;%\n  generate(reps = 5000, type = \"permute\") %&gt;%\n  calculate(stat = \"F\")\n\nnull_dist_perm %&gt;%\n  visualise() +\n  shade_p_value(obs_stat = observed_perm$stat, direction = \"greater\")\n\n\n\n\n\n\n\nperm_p_value &lt;- null_dist_perm %&gt;%\n  get_p_value(obs_stat = observed_perm$stat, direction = \"greater\")\nperm_p_value\n\n# A tibble: 1 × 1\n  p_value\n    &lt;dbl&gt;\n1  0.0402\n\n\nIn the permutation test, we tested whether there is a significant difference in scores between degree programs using non-parametric methods. The permutation test’s p-value of 0.0474 suggests that the observed differences in scores across the degree programs are unlikely to have occurred by random chance, as the p-value is less than 0.05. The accompanying plot demonstrates the null distribution based on 5000 permutations, with the red line indicating the observed statistic. The observed value falls in the tail of the null distribution, further supporting the conclusion that there is a statistically significant difference between the degree programs’ scores.\n\n\n\nThe research experiment aimed to determine if there were significant differences in grades among students enrolled in three different programs: B.Des, B.FA, and B.Voc. The following statistical tests were conducted:\nShapiro-Wilk Test for Normality:\nThe Shapiro-Wilk test was used to assess whether the grade data follows a normal distribution for each program:\n\nB.Des: W = 0.82019, p = 0.0001565\nB.FA: W = 0.8727, p = 0.001924\nB.Voc: W = 0.90341, p = 0.01019\n\nFor all programs, the p-values were very small, indicating that the grade data significantly deviates from normality. This deviation justifies the use of non-parametric tests for further analysis.\nVariance Test:\nLevene’s test and Fligner-Killeen test were used to assess whether the variances in grades were equal between the programs:\n\nLevene’s Test: p = 0.2119\nFligner-Killeen Test: p = 0.1047\n\nBoth tests suggest that there is no significant difference in variances between the programs, meaning the assumption of homogeneity of variances holds, and parametric tests like ANOVA are valid.\nOne-Way ANOVA:\nA one-way ANOVA was conducted to compare the average grades across the three programs:\n\nF(2, 87) = 3.336, p = 0.0402\n\nThe ANOVA results show a statistically significant difference in mean grades among the programs, indicating that at least one program’s mean grade differs from the others.\nPairwise Comparisons Using Bonferroni Correction:\nFollowing the ANOVA, pairwise comparisons with Bonferroni correction were conducted:\n\nB.FA vs. B.Des: Mean difference = -0.767, p = 0.0018 (significant)\nB.Voc vs. B.Des: Mean difference = -0.233, p = 0.8435 (not significant)\nB.Voc vs. B.FA: Mean difference = 0.533, p = 0.0453 (significant)\n\nThese results suggest significant differences in grades between B.FA and B.Des, and between B.Voc and B.FA, while no significant difference was found between B.Des and B.Voc.\nWilcoxon Rank-Sum Test:\nDue to deviations from normality, Wilcoxon Rank-Sum tests were also conducted:\n\nB.Des vs. B.FA: p = 0.00128 (significant)\nB.Des vs. B.Voc: p = 0.5003 (not significant)\nB.FA vs. B.Voc: p = 0.0447 (significant)\n\nThe Wilcoxon test results align with the Bonferroni-adjusted pairwise comparisons, reaffirming significant differences between B.Des and B.FA, and between B.FA and B.Voc.\nTukey Multiple Comparisons:\nA Tukey HSD test was conducted using a linear model to compare mean differences between the programs:\n\nB.FA vs. B.Des: Mean difference = -0.767, p = 0.0359 (significant)\nB.Voc vs. B.Des: Mean difference = -0.233, p = 0.7243 (not significant)\nB.Voc vs. B.FA: Mean difference = 0.533, p = 0.1918 (not significant)\n\nThese results further confirm the significant difference between B.FA and B.Des, while showing no significant differences between B.Voc and the other programs.\nPermutation Test:\nA permutation test was conducted to assess the likelihood of the observed differences in grades occurring by chance. The permutation test resulted in a p-value of 0.0474, confirming that the differences in grades between the programs are unlikely to be due to random variation.\nConclusion:\nThe statistical analyses indicate that there are significant differences in grades between some degree programs. Specifically, significant differences exist between B.FA and B.Des, and between B.FA and B.Voc, while there is no significant difference between B.Des and B.Voc. The results from both parametric (ANOVA and Tukey HSD) and non-parametric tests (Wilcoxon Rank-Sum) consistently support these findings. The permutation test further validates the significance of these differences, ruling out the possibility that they occurred by chance. Thus, the research experiment concludes that program enrollment has a significant effect on students’ grades, particularly between B.FA and the other two programs."
  },
  {
    "objectID": "posts/Day 1/index.html",
    "href": "posts/Day 1/index.html",
    "title": "Day 1",
    "section": "",
    "text": "Hi, this is my first time making a website.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(babynames)\n\n\nbabynames\n\n# A tibble: 1,924,665 × 5\n    year sex   name          n   prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n 1  1880 F     Mary       7065 0.0724\n 2  1880 F     Anna       2604 0.0267\n 3  1880 F     Emma       2003 0.0205\n 4  1880 F     Elizabeth  1939 0.0199\n 5  1880 F     Minnie     1746 0.0179\n 6  1880 F     Margaret   1578 0.0162\n 7  1880 F     Ida        1472 0.0151\n 8  1880 F     Alice      1414 0.0145\n 9  1880 F     Bertha     1320 0.0135\n10  1880 F     Sarah      1288 0.0132\n# ℹ 1,924,655 more rows\n\n\nThe table displays baby names from 1880-2017, showing how frequently each name was given and its proportion among all births that year.\n\n\n\nbabynames %&gt;% filter(name==\"Aditi\")\n\n# A tibble: 40 × 5\n    year sex   name      n       prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;      &lt;dbl&gt;\n 1  1977 F     Aditi     5 0.00000304\n 2  1978 F     Aditi     9 0.00000548\n 3  1979 F     Aditi     9 0.00000522\n 4  1980 F     Aditi     6 0.00000337\n 5  1982 F     Aditi    10 0.00000551\n 6  1983 F     Aditi    12 0.00000671\n 7  1984 F     Aditi    10 0.00000555\n 8  1985 F     Aditi    17 0.00000921\n 9  1986 F     Aditi    22 0.0000119 \n10  1987 F     Aditi    21 0.0000112 \n# ℹ 30 more rows\n\n\nThis table displays the usage of the name “Aditi” for baby girls in the United States between 1977 and 2017. The name was initially quite uncommon, with fewer than 10 occurrences annually from 1977 to 1982. Over the years, however, it steadily gained popularity. The peak was in 2008, when 203 baby girls were named Aditi, accounting for 0.0009755 of all female births that year. After 2008, the name’s popularity varied slightly but remained fairly stable, with a gradual decline in the following years. By 2017, 127 baby girls were named Aditi, representing 0.0006774 of female births.\n\n\n\n\nbabynames %&gt;% filter(name==\"Aditi\") %&gt;% \n  gf_line(n~year)\n\n\n\n\n\n\n\n\nThe line graph shows the trend in the popularity of the name “Aditi” for baby girls in the United States from 1977 to 2017. The y-axis (n) represents the number of babies given the name each year, while the x-axis (year) tracks the years over time.The graph clearly illustrates a significant rise followed by a gradual decline.\n\n\n\n\nbabynames %&gt;% filter(name==\"Khushi\" | name==\"Kushi\")\n\n# A tibble: 30 × 5\n    year sex   name       n       prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;int&gt;      &lt;dbl&gt;\n 1  1999 F     Khushi     5 0.00000257\n 2  2000 F     Khushi     6 0.00000301\n 3  2001 F     Khushi    44 0.0000222 \n 4  2002 F     Khushi    89 0.0000451 \n 5  2003 F     Khushi   178 0.0000888 \n 6  2003 F     Kushi      9 0.00000449\n 7  2004 F     Khushi   132 0.0000655 \n 8  2005 F     Khushi    86 0.0000424 \n 9  2005 F     Kushi      9 0.00000444\n10  2006 F     Khushi    69 0.0000330 \n# ℹ 20 more rows\n\n\nThe comparison between the spellings “Khushi” and “Kushi” reveals notable trends. Neither name appeared in the U.S. dataset from 1880 to 1999, and both first emerged in 1999 with very low occurrences. However, “Khushi” quickly became more popular, while “Kushi” remained relatively rare. By 2003, 178 baby girls were named “Khushi,” compared to just 9 named “Kushi,” and this pattern persisted in the following years. Overall, “Khushi” consistently saw higher usage, demonstrating how different spellings of the same name can experience varying levels of adoption over time.\n\n\n\n\nbabynames %&gt;% filter(name==\"Khushi\"| name==\"Kushi\") %&gt;% \n  gf_line(n~year)\n\n\n\n\n\n\n\n\nThis line graph illustrates the trend in the popularity of the names “Khushi” and “Kushi” for baby girls in the U.S. from 1999 to 2017. The y-axis (n) represents the number of babies named each year, and the x-axis (year) tracks the timeline.\n\n\n\n\nbabynames %&gt;% filter(name==\"Anousha\")\n\n# A tibble: 3 × 5\n   year sex   name        n       prop\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;int&gt;      &lt;dbl&gt;\n1  2006 F     Anousha     6 0.00000287\n2  2007 F     Anousha     9 0.00000426\n3  2013 F     Anousha     5 0.0000026 \n\n\nThe name “Anousha” is extremely rare in the “babynames” dataset, which spans from 1880 to 2017. Despite the large timeframe, the name appears only three times: in 2006, 2007, and 2013. In each of these years, the number of baby girls named Anousha was very low, with a maximum of just 9 occurrences in 2007.\n\n\n\n\nbabynames %&gt;% filter(name==\"Anousha\") %&gt;% \n gf_line(n~year)\n\n\n\n\n\n\n\n\nThis line graph shows the trend in the number of baby girls named “Anousha” in the U.S. from 2006 to 2013. The y-axis (n) represents the number of occurrences each year, while the x-axis (year) tracks the time period."
  },
  {
    "objectID": "posts/Day 1/index.html#introduction",
    "href": "posts/Day 1/index.html#introduction",
    "title": "Day 1",
    "section": "",
    "text": "Hi, this is my first time making a website.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(babynames)\n\n\nbabynames\n\n# A tibble: 1,924,665 × 5\n    year sex   name          n   prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n 1  1880 F     Mary       7065 0.0724\n 2  1880 F     Anna       2604 0.0267\n 3  1880 F     Emma       2003 0.0205\n 4  1880 F     Elizabeth  1939 0.0199\n 5  1880 F     Minnie     1746 0.0179\n 6  1880 F     Margaret   1578 0.0162\n 7  1880 F     Ida        1472 0.0151\n 8  1880 F     Alice      1414 0.0145\n 9  1880 F     Bertha     1320 0.0135\n10  1880 F     Sarah      1288 0.0132\n# ℹ 1,924,655 more rows\n\n\nThe table displays baby names from 1880-2017, showing how frequently each name was given and its proportion among all births that year.\n\n\n\nbabynames %&gt;% filter(name==\"Aditi\")\n\n# A tibble: 40 × 5\n    year sex   name      n       prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;      &lt;dbl&gt;\n 1  1977 F     Aditi     5 0.00000304\n 2  1978 F     Aditi     9 0.00000548\n 3  1979 F     Aditi     9 0.00000522\n 4  1980 F     Aditi     6 0.00000337\n 5  1982 F     Aditi    10 0.00000551\n 6  1983 F     Aditi    12 0.00000671\n 7  1984 F     Aditi    10 0.00000555\n 8  1985 F     Aditi    17 0.00000921\n 9  1986 F     Aditi    22 0.0000119 \n10  1987 F     Aditi    21 0.0000112 \n# ℹ 30 more rows\n\n\nThis table displays the usage of the name “Aditi” for baby girls in the United States between 1977 and 2017. The name was initially quite uncommon, with fewer than 10 occurrences annually from 1977 to 1982. Over the years, however, it steadily gained popularity. The peak was in 2008, when 203 baby girls were named Aditi, accounting for 0.0009755 of all female births that year. After 2008, the name’s popularity varied slightly but remained fairly stable, with a gradual decline in the following years. By 2017, 127 baby girls were named Aditi, representing 0.0006774 of female births.\n\n\n\n\nbabynames %&gt;% filter(name==\"Aditi\") %&gt;% \n  gf_line(n~year)\n\n\n\n\n\n\n\n\nThe line graph shows the trend in the popularity of the name “Aditi” for baby girls in the United States from 1977 to 2017. The y-axis (n) represents the number of babies given the name each year, while the x-axis (year) tracks the years over time.The graph clearly illustrates a significant rise followed by a gradual decline.\n\n\n\n\nbabynames %&gt;% filter(name==\"Khushi\" | name==\"Kushi\")\n\n# A tibble: 30 × 5\n    year sex   name       n       prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;int&gt;      &lt;dbl&gt;\n 1  1999 F     Khushi     5 0.00000257\n 2  2000 F     Khushi     6 0.00000301\n 3  2001 F     Khushi    44 0.0000222 \n 4  2002 F     Khushi    89 0.0000451 \n 5  2003 F     Khushi   178 0.0000888 \n 6  2003 F     Kushi      9 0.00000449\n 7  2004 F     Khushi   132 0.0000655 \n 8  2005 F     Khushi    86 0.0000424 \n 9  2005 F     Kushi      9 0.00000444\n10  2006 F     Khushi    69 0.0000330 \n# ℹ 20 more rows\n\n\nThe comparison between the spellings “Khushi” and “Kushi” reveals notable trends. Neither name appeared in the U.S. dataset from 1880 to 1999, and both first emerged in 1999 with very low occurrences. However, “Khushi” quickly became more popular, while “Kushi” remained relatively rare. By 2003, 178 baby girls were named “Khushi,” compared to just 9 named “Kushi,” and this pattern persisted in the following years. Overall, “Khushi” consistently saw higher usage, demonstrating how different spellings of the same name can experience varying levels of adoption over time.\n\n\n\n\nbabynames %&gt;% filter(name==\"Khushi\"| name==\"Kushi\") %&gt;% \n  gf_line(n~year)\n\n\n\n\n\n\n\n\nThis line graph illustrates the trend in the popularity of the names “Khushi” and “Kushi” for baby girls in the U.S. from 1999 to 2017. The y-axis (n) represents the number of babies named each year, and the x-axis (year) tracks the timeline.\n\n\n\n\nbabynames %&gt;% filter(name==\"Anousha\")\n\n# A tibble: 3 × 5\n   year sex   name        n       prop\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;int&gt;      &lt;dbl&gt;\n1  2006 F     Anousha     6 0.00000287\n2  2007 F     Anousha     9 0.00000426\n3  2013 F     Anousha     5 0.0000026 \n\n\nThe name “Anousha” is extremely rare in the “babynames” dataset, which spans from 1880 to 2017. Despite the large timeframe, the name appears only three times: in 2006, 2007, and 2013. In each of these years, the number of baby girls named Anousha was very low, with a maximum of just 9 occurrences in 2007.\n\n\n\n\nbabynames %&gt;% filter(name==\"Anousha\") %&gt;% \n gf_line(n~year)\n\n\n\n\n\n\n\n\nThis line graph shows the trend in the number of baby girls named “Anousha” in the U.S. from 2006 to 2013. The y-axis (n) represents the number of occurrences each year, while the x-axis (year) tracks the time period."
  },
  {
    "objectID": "posts/Day 3/index.html",
    "href": "posts/Day 3/index.html",
    "title": "Day 3",
    "section": "",
    "text": "We are working with bar graphs today.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\n\n\n\n\ntaxi &lt;- read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/modeldata/taxi.csv\")\n\nRows: 10000 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): tip, company, local, dow, month\ndbl (3): rownames, distance, hour\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntaxi\n\n# A tibble: 10,000 × 8\n   rownames tip   distance company                      local dow   month  hour\n      &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;                        &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1        1 yes      17.2  Chicago Independents         no    Thu   Feb      16\n 2        2 yes       0.88 City Service                 yes   Thu   Mar       8\n 3        3 yes      18.1  other                        no    Mon   Feb      18\n 4        4 yes      20.7  Chicago Independents         no    Mon   Apr       8\n 5        5 yes      12.2  Chicago Independents         no    Sun   Mar      21\n 6        6 yes       0.94 Sun Taxi                     yes   Sat   Apr      23\n 7        7 yes      17.5  Flash Cab                    no    Fri   Mar      12\n 8        8 yes      17.7  other                        no    Sun   Jan       6\n 9        9 yes       1.85 Taxicab Insurance Agency Llc no    Fri   Apr      12\n10       10 yes       1.47 City Service                 no    Tue   Mar      14\n# ℹ 9,990 more rows\n\n\nThe taxi dataset contains 10,000 entries, detailing information about individual taxi rides. It includes whether a tip was given, the distance of the ride, the company providing the service, and whether the ride was local. Additionally, it records the day of the week, the month, and the hour the ride took place. The dataset allows for analyzing patterns in tipping, ride distances, and usage trends by time (day, month, and hour) as well as comparing performance across different taxi companies. This can provide insights into ride behaviors and preferences.\n\n\n\n\nglimpse(taxi)\n\nRows: 10,000\nColumns: 8\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ tip      &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n$ distance &lt;dbl&gt; 17.19, 0.88, 18.11, 20.70, 12.23, 0.94, 17.47, 17.67, 1.85, 1…\n$ company  &lt;chr&gt; \"Chicago Independents\", \"City Service\", \"other\", \"Chicago Ind…\n$ local    &lt;chr&gt; \"no\", \"yes\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"no\", \"no\", \"no\",…\n$ dow      &lt;chr&gt; \"Thu\", \"Thu\", \"Mon\", \"Mon\", \"Sun\", \"Sat\", \"Fri\", \"Sun\", \"Fri\"…\n$ month    &lt;chr&gt; \"Feb\", \"Mar\", \"Feb\", \"Apr\", \"Mar\", \"Apr\", \"Mar\", \"Jan\", \"Apr\"…\n$ hour     &lt;dbl&gt; 16, 8, 18, 8, 21, 23, 12, 6, 12, 14, 18, 11, 12, 19, 17, 13, …\n\n\nThis glimpse of the taxi dataset provides an overview of its 10,000 rows and 8 columns. This structure gives a clear, organized view of ride-specific information.\n\n\n\n\ninspect(taxi)\n\n\ncategorical variables:  \n     name     class levels     n missing\n1     tip character      2 10000       0\n2 company character      7 10000       0\n3   local character      2 10000       0\n4     dow character      7 10000       0\n5   month character      4 10000       0\n                                   distribution\n1 yes (92.1%), no (7.9%)                       \n2 other (27.1%) ...                            \n3 no (81.2%), yes (18.8%)                      \n4 Thu (19.6%), Wed (17.5%), Tue (16.3%) ...    \n5 Apr (31.8%), Mar (31.4%), Feb (20.4%) ...    \n\nquantitative variables:  \n      name   class min      Q1  median        Q3     max        mean\n1 rownames numeric   1 2500.75 5000.50 7500.2500 10000.0 5000.500000\n2 distance numeric   0    0.94    1.78   15.5625    42.3    6.224144\n3     hour numeric   0   11.00   15.00   18.0000    23.0   14.177300\n           sd     n missing\n1 2886.895680 10000       0\n2    7.381397 10000       0\n3    4.359904 10000       0\n\n\nThe inspection of the taxi dataset shows that it contains 10,000 entries with both categorical and quantitative variables. The categorical variables include tip, company, local, dow (day of the week), and month, all of which are character types. For example, 92.1% of rides resulted in a tip, and 81.2% of the rides were local. The quantitative variables include rownames, distance, and hour, all of which are numeric. The distance of rides ranges from 0 to 42.3 miles, with a mean of 6.22 miles, and the hour variable represents the time of day, ranging from 0 to 23.\n\n\n\n\nskim(taxi)\n\n\nData summary\n\n\nName\ntaxi\n\n\nNumber of rows\n10000\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ntip\n0\n1\n2\n3\n0\n2\n0\n\n\ncompany\n0\n1\n5\n28\n0\n7\n0\n\n\nlocal\n0\n1\n2\n3\n0\n2\n0\n\n\ndow\n0\n1\n3\n3\n0\n7\n0\n\n\nmonth\n0\n1\n3\n3\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1\n5000.50\n2886.90\n1\n2500.75\n5000.50\n7500.25\n10000.0\n▇▇▇▇▇\n\n\ndistance\n0\n1\n6.22\n7.38\n0\n0.94\n1.78\n15.56\n42.3\n▇▁▂▁▁\n\n\nhour\n0\n1\n14.18\n4.36\n0\n11.00\n15.00\n18.00\n23.0\n▁▃▅▇▃\n\n\n\n\n\nThis summary provides a detailed breakdown of the dataset’s completeness and distribution, making it well-prepared for further analysis.\n\n\n\n\ntaxi_modified &lt;- taxi %&gt;%\n  dplyr::mutate(\n    local = factor(local,\n      levels = c(\"no\", \"yes\"),\n      labels = c(\"no\", \"yes\"),\n      ordered = TRUE\n    ),\n    dow = factor(dow,\n      levels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),\n      labels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),\n      ordered = TRUE\n    ),\n    month = factor(month,\n      levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"),\n      labels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"),\n      ordered = TRUE\n    )\n  )\nglimpse(taxi_modified)\n\nRows: 10,000\nColumns: 8\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ tip      &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n$ distance &lt;dbl&gt; 17.19, 0.88, 18.11, 20.70, 12.23, 0.94, 17.47, 17.67, 1.85, 1…\n$ company  &lt;chr&gt; \"Chicago Independents\", \"City Service\", \"other\", \"Chicago Ind…\n$ local    &lt;ord&gt; no, yes, no, no, no, yes, no, no, no, no, no, no, no, yes, no…\n$ dow      &lt;ord&gt; Thu, Thu, Mon, Mon, Sun, Sat, Fri, Sun, Fri, Tue, Tue, Sun, W…\n$ month    &lt;ord&gt; Feb, Mar, Feb, Apr, Mar, Apr, Mar, Jan, Apr, Mar, Mar, Apr, A…\n$ hour     &lt;dbl&gt; 16, 8, 18, 8, 21, 23, 12, 6, 12, 14, 18, 11, 12, 19, 17, 13, …\n\n\nThis modified version of the taxi dataset includes the conversion of several variables into factors with ordered levels. Specifically, the variables local, dow, and month have been converted into factors. Each has been assigned specific ordered levels. The local variable indicates whether a ride was local (“no” or “yes”), while dow is now ordered from Monday to Sunday, and month from January to April. This change improves the dataset for analysis where the natural order of days and months is important, making it easier to perform time-based analyses or comparisons.\n\n\n\n\ngf_bar(~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n# gf_labs- Metadata about the graph\n\nThe bar chart titled “Counts of Tips” displays the frequency of taxi rides where a tip was given versus those where no tip was provided. The chart shows a significantly higher count of rides where a tip was given, with over 7,500 rides including a tip, compared to a much smaller count of rides without a tip, which is under 1,000. This indicates that the majority of taxi rides in this dataset included a tip.\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    colour = ~local,\n  ) %&gt;%\n  gf_labs(title = \"Plot 2A: Colour Bar Chart\")\n\n\n\n\n\n\n\n# colour-outline colour\n\nThis colour-coded bar chart titled “Plot 2A: Colour Bar Chart” displays the count of taxi rides where a tip was given or not, with an additional distinction based on whether the ride was local or not. The darker bars represent non-local rides, while the lighter-coloured edges represent local rides.From the chart, it is clear that the majority of taxi rides where a tip was given were non-local, as the darker colour dominates the “yes” category. Similarly, for rides without a tip, the majority are also non-local. There are relatively few local rides, indicated by the lighter-coloured edges, in both the tip and no-tip categories.\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n  ) %&gt;%\n  gf_labs(title = \"Plot 2B: Stacked Bar Chart\")\n\n\n\n\n\n\n\n# fill- fill the bar with a colour or variable\n\nThis stacked bar chart titled “Plot 2B: Stacked Bar Chart” shows the distribution of taxi rides based on whether a tip was given, with the additional breakdown of local and non-local rides. The purple sections represent non-local rides, while the yellow sections represent local rides. In the “yes” category (rides with a tip), most of the rides are non-local (purple), with a smaller portion being local (yellow). Similarly, in the “no” category (rides without a tip), the majority are also non-local rides.\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n    position = \"dodge\"\n  ) %&gt;%\n  gf_labs(title = \"Plot 2C: Dodged Bar Chart\")\n\n\n\n\n\n\n\n\nThis “Dodged Bar Chart” (Plot 2C) provides a side-by-side comparison of taxi rides where tips were given or not, categorized by whether the ride was local or non-local. The purple bars represent non-local rides, and the yellow bars represent local rides.\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n    position = \"fill\"\n  ) %&gt;%\n  gf_labs(\n    title = \"Plot 2D: Filled Bar Chart\",\n    subtitle = \"Shows Per group differences in Proportions!\"\n  )# position = \"fill\"- Used for proportions\n\n\n\n\n\n\n\n\nThis “Filled Bar Chart” (Plot 2D) shows the proportion of local and non-local taxi rides for both the tipping and non-tipping categories. The purple colour represents non-local rides, and the yellow colour represents local rides.This chart emphasizes the relative proportion of local versus non-local rides rather than the absolute counts, making it useful for understanding the distribution of ride types across tipping behaviour.\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~company, fill = ~tip, position = \"fill\") %&gt;%\n  gf_labs(\n    title = \"Plot 3A: Proportion of taxi rides where tips were given or not, broken down by different taxi companies\"\n  ) \n\n\n\n\n\n\n\n\nThis “Filled Bar Chart” (Plot 3A) displays the proportion of taxi rides where tips were given or not, broken down by different taxi companies. The blue segments represent rides where tips were given, and the red segments represent rides without tips. From the chart, it is clear that for all companies, the majority of rides resulted in a tip, while the non-tipping rides make up a smaller proportion across all companies. Some companies, like “Flash Cab,” have a slightly larger proportion of non-tipping rides compared to others, but overall, tipping is the dominant behaviour for all the companies displayed. This chart emphasizes the tipping pattern across different taxi providers, showing relatively consistent behaviour.\n\n\n\n\ngf_bar(~hour, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 4: Counts of Tips by Hour\")\n\n\n\n\n\n\n\n\nThe “Counts of Tips by Hour” chart shows the distribution of taxi rides and tipping behaviour throughout the day. The number of rides increases steadily during the morning, peaks between 2 PM and 4 PM, and then declines in the evening. Most rides result in a tip, as indicated by the large blue bars across all hours, with a smaller proportion of non-tipping rides (red bars). The highest concentration of rides and tips occurs during the afternoon hours, while early morning and late evening see fewer rides overall. This pattern highlights that tipping is consistent throughout the day, especially during peak ride times.\n\n\n\n\ngf_bar(~dow, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 5: Counts of Tips by Day of Week\")\n\n\n\n\n\n\n\n\nThe “Counts of Tips by Day of Week” chart shows the number of taxi rides and tipping behaviour across different days of the week. Thursdays have the highest number of rides, followed by Wednesdays, while the weekends (Saturday and Sunday) have the lowest ride counts. Across all days, most rides result in a tip, as indicated by the blue bars. A small portion of rides, particularly on weekdays, do not result in a tip, shown by the red bars. Overall, tipping behavior is consistent throughout the week, but ride volumes peak midweek and decrease during the weekend.\n\n\n\n\ngf_bar(~month, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 6: Counts of Tips by Month\")\n\n\n\n\n\n\n\n\nThe bar chart illustrates the distribution of taxi rides and tipping behaviour over the months of January through April. March and April show the highest ride counts, both exceeding 3,000 rides, with a significant majority of these rides resulting in tips. February has a moderate number of rides, slightly lower than March and April, but tipping behavior remains strong. January has the fewest rides, but similarly, most rides result in tips. Overall, tipping appears consistent across all four months, with a clear trend of most taxi rides receiving tips, regardless of the month.\n\n\n\n\ngf_bar(~ month | dow, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 7: Counts of Tips by Day of Week and Month\")\n\n\n\n\n\n\n\n\nThe multi-faceted bar chart depicts the counts of taxi rides and tipping patterns across different days of the week (Monday to Sunday) and months (January to April). For most days of the week, March and April show higher counts of rides compared to January and February. Thursdays and Fridays have the highest ride counts, with a strong tendency toward tipping, particularly in March and April. Sundays generally have the fewest rides but maintain a steady tipping trend. Overall, tipping behaviour remains consistent across different days, with the majority of rides receiving tips, especially as the year progresses into spring months.\n\n\n\n\ngf_bar(~ dow | hour, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(\n    title = \"Plot 8A: Counts of Tips by Hour and Day of Week\",\n  )\n\n\n\n\n\n\n\n\nThe bar chart shows the distribution of taxi rides and tipping behaviour across different hours of the day and days of the week. Tipping generally follows a similar pattern throughout the week, with the highest ride counts and tips occurring between 8 AM and 6 PM, particularly around midday. Monday through Friday sees more rides, with a peak tipping period from 8 AM to 3 PM. The early morning and late evening hours (before 7 AM and after 9 PM) have significantly fewer rides and tips. Weekends, especially Sundays, show lower overall ride and tipping activity throughout all hours of the day.\n\n\n\n\ngf_bar(~ dow | hour, fill = ~tip, position =\"fill\", data = taxi_modified) %&gt;%\n  gf_labs(\n    title = \"Plot 8B: Proportions of Tips by Hour and Day of Week\",\n  )\n\n\n\n\n\n\n\n\nThe bar chart visualizes the proportion of taxi rides that result in tips across different hours of the day ( segregated as multiple graphs) and days of the week ( x-axis). The consistent blue (representing tips) across most hours and days suggests that a large majority of rides result in tipping, regardless of the time or day. However, some fluctuations occur, particularly during early morning hours (2 AM - 5 AM) on weekdays, when the percentage of rides without tips (in red) increases slightly. Despite these minor variations, tipping appears to be a regular part of most rides across all hours and days.\n\n\n\n\ngf_bar(~ hour | dow, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(\n    title = \"Plot 9: Counts of Tips by Hour and Day of Week\",\n  )\n\n\n\n\n\n\n\n\nThe chart illustrates the distribution of taxi rides that resulted in tips across different hours of the day (x-axis) for each day of the week( shown as different graphs). The data reveals that tipping patterns are fairly consistent throughout the week, with peak hours for tipping occurring in the late morning to afternoon (around 9 AM to 3 PM). The chart also shows that there are fewer rides without tips (in red) during these peak hours, while early morning and late-night hours, especially on weekends, tend to have a smaller proportion of tipping. Thursdays and Fridays appear to have the highest number of taxi rides with tips.\n\n\n\n\ngf_bar(~hour, fill = ~tip, position =\"fill\", data = taxi_modified) %&gt;%\n  gf_labs(\n    title = \"Plot 10: Counts of Tips by Hour\",\n  )\n\n\n\n\n\n\n\n\nThis bar chart illustrates the proportion of taxi rides that resulted in tips (in blue) versus no tips (in red) across different hours of the day. The majority of taxi rides during all hours tend to result in a tip, as indicated by the dominant blue colour in the chart. There is a slightly higher proportion of rides without tips in the early morning (around 1 AM to 5 AM) and later in the night, but overall, tipping remains consistent throughout the day, with a slight dip in tip occurrences during off-peak hours.\n\n\n\n\ngf_bar(~dow, fill = ~tip, position =\"fill\", data = taxi_modified) %&gt;%\n  gf_labs(\n    title = \"Plot 11: Counts of Tips by Day of Week\",\n  )\n\n\n\n\n\n\n\n\nThis bar chart shows the proportion of taxi rides that received tips (in blue) versus no tips (in red) for each day of the week. Across all days, a majority of rides result in tips, as shown by the larger blue segments in each bar. The proportion of no-tips (red) remains fairly consistent throughout the week, with no significant differences between the days. This suggests that tipping behaviour is relatively uniform, regardless of the day of the week.\n\n\n\n\ndata(\"HELPrct\")\nHELPrct\n\n    age anysubstatus anysub cesd  d1 daysanysub dayslink drugrisk e2b female\n1    37            1    yes   49   3        177      225        0  NA      0\n2    37            1    yes   30  22          2       NA        0  NA      0\n3    26            1    yes   39   0          3      365       20  NA      0\n4    39            1    yes   15   2        189      343        0   1      1\n5    32            1    yes   39  12          2       57        0   1      0\n6    47            1    yes    6   1         31      365        0  NA      1\n7    49           NA   &lt;NA&gt;   52  14         NA      334        0   1      1\n8    28            1    yes   32   1         47      365        7   8      0\n9    50            1    yes   50  14         31      365       18   7      1\n10   39            1    yes   46   4        115      382       20   3      0\n11   34           NA   &lt;NA&gt;   46   0         NA      365        8  NA      1\n12   58            0     no   49   3        192      365        0  NA      1\n13   58            1    yes   22   5          6      365        0  NA      0\n14   60            1    yes   36  10          6       22        0   1      0\n15   36            1    yes   43   2          0      443        0  NA      0\n16   28            1    yes   35   6         27       41        0   2      1\n17   35            1    yes   19   1          2      405        0  NA      0\n18   29            0     no   40   2        220      449        0   1      0\n19   27            0     no   52   0        198       49       10   4      1\n20   27            1    yes   37   1         52      367        0  NA      0\n21   41           NA   &lt;NA&gt;   35   1         NA      391       12   1      0\n22   33            1    yes   18   1        129      272        0  NA      0\n23   34           NA   &lt;NA&gt;   36   4         NA      293        0   2      0\n24   31            1    yes   28   2          3      428        0   3      0\n25   48            1    yes   19   4         67      365        0  NA      1\n26   34            1    yes   30   1        154       56        0  NA      0\n27   35            1    yes   27   0         34      361        1  NA      0\n28   34            0     no   24   0        204      365        0  NA      0\n29   29            1    yes   47   1        142       79        0   3      0\n30   35            0     no   45   2        189      364        0  NA      0\n31   43            1    yes   18  10          4      365        0  NA      0\n32   37            0     no   11   0        203      203        3  NA      0\n33   29            0     no   26   1        193      354        0  NA      0\n34   33            1    yes   29   1         10       29        0  NA      0\n35   20            1    yes   34   1        177      365        0  NA      0\n36   38            0     no   37   2        195      365        0   3      0\n37   28            1    yes   23   0          7      365        1   2      0\n38   33            1    yes   41   7         14      365        0   3      0\n39   40           NA   &lt;NA&gt;   21   0         NA      365        1  NA      0\n40   43            0     no   16  15        191      414        0  NA      0\n41   28            1    yes   36   1         31      414        0  NA      0\n42   45            0     no   17   2        174       43        0   2      0\n43   42            1    yes   36   2         17       38        7  NA      0\n44   30           NA   &lt;NA&gt;   19   0         NA      264        0  NA      0\n45   34            1    yes    5   2         23       14        0  NA      1\n46   36            1    yes   25   2          2      377        0  NA      0\n47   44           NA   &lt;NA&gt;   36   5         NA      321       19   1      0\n48   41            1    yes   27   0         30       NA        0  NA      0\n49   30            0     no   44   2        209       26       21   2      0\n50   37            1    yes   29   2        111       18        0  NA      0\n51   35            1    yes   46   3         17      365        0  NA      1\n52   37            1    yes   16   5        137      171        0  NA      0\n53   44            1    yes   44   1          4       27        0  NA      0\n54   47            1    yes   42   2          3      190        0   4      0\n55   38            1    yes   30   5         18       30        0   2      0\n56   37            1    yes   25   0          2      365        1  NA      0\n57   34            1    yes   26   1          1      365        0  11      0\n58   41            0     no   29   3        181       19        0   2      1\n59   29            0     no   33   3        180      365        1   4      1\n60   35            1    yes   28   1         36      400        0   1      0\n61   36           NA   &lt;NA&gt;   33   0         NA      365        0   1      0\n62   27            0     no   44   3        252      431        0   1      0\n63   36            0     no   29   1        195      195        0   1      0\n64   40            0     no   57   5        181       34        0  NA      1\n65   38           NA   &lt;NA&gt;   26   4         NA      133        1  NA      0\n66   42            1    yes   31   2        103       48        8   3      0\n67   26           NA   &lt;NA&gt;   30   4         NA       NA        0  NA      1\n68   41            1    yes   43   0          2       NA       10  NA      1\n69   43            1    yes   28  10         78      365        0  NA      0\n70   28            1    yes   29   3          9      129        0   2      0\n71   30            1    yes   32   2         53       NA        3  NA      0\n72   42           NA   &lt;NA&gt;   30   4         NA       35        0  NA      0\n73   22            1    yes   34   7          4      365        0   1      0\n74   31           NA   &lt;NA&gt;   49   2         NA      439        3   1      0\n75   30            0     no   36   0        177       44        0   3      0\n76   25           NA   &lt;NA&gt;   42   1         NA      365        1   1      0\n77   26            1    yes   40   1          4       77       10  NA      0\n78   35            1    yes   29   1         47       35        0   1      0\n79   53            1    yes   31   3          5      365        0   1      0\n80   29           NA   &lt;NA&gt;   10   2         NA      143        0  NA      0\n81   32            1    yes   37   2        175      365        0  NA      1\n82   24            1    yes   32   2        168      115        3   1      0\n83   35            1    yes   16   1         20      386        1   3      0\n84   32            1    yes   15   0         55      365        0  NA      0\n85   47            1    yes    4   2         56       63        1  NA      0\n86   26           NA   &lt;NA&gt;   30   2         NA      365        0  NA      0\n87   45            1    yes   44   2         63       35       14   1      0\n88   33           NA   &lt;NA&gt;    8   1         NA       NA        0  NA      0\n89   45           NA   &lt;NA&gt;   16  20         NA      365        0   2      0\n90   33           NA   &lt;NA&gt;   47   9         NA       38        0   3      1\n91   27            1    yes   49   1        222      136        0  NA      0\n92   40            1    yes   30   2          9       37        1  NA      0\n93   40           NA   &lt;NA&gt;   36   1         NA      217        0   1      1\n94   37            1    yes   48   3         16      349        0  NA      0\n95   26            1    yes   17   1         59       NA        0  NA      0\n96   27            1    yes   39   0        102      365        0   3      0\n97   35           NA   &lt;NA&gt;   30   2         NA       16        0  NA      1\n98   29           NA   &lt;NA&gt;   24   0         NA       NA       10   2      0\n99   33           NA   &lt;NA&gt;   25   2         NA       60        0  NA      0\n100  39            1    yes   51   3          2      365        0   5      0\n101  33            1    yes   17   3          3      365        7  NA      0\n102  35            1    yes   37  20         63      399        0  NA      0\n103  38           NA   &lt;NA&gt;   45   0         NA       NA        0   1      0\n104  44            1    yes   28   1         47      112       17   1      0\n105  28           NA   &lt;NA&gt;   17   3         NA      365        0  NA      0\n106  33           NA   &lt;NA&gt;   23   0         NA       NA        0  NA      0\n107  30            0     no   39   0        201       18        0   1      1\n108  35            1    yes   38   2        114      365        0   4      0\n109  32           NA   &lt;NA&gt;   53  15         NA       41        0  NA      1\n110  42            0     no   26  10        183      358        0   2      1\n111  37            0     no   47   0        183      169        0  NA      0\n112  41           NA   &lt;NA&gt;   49   4         NA      365        0   1      0\n113  28            1    yes   34   5          0      325       17   2      0\n114  30           NA   &lt;NA&gt;   51   9         NA       NA        9   1      1\n115  35            1    yes   33   2          2      345        0  14      0\n116  35           NA   &lt;NA&gt;   58   5         NA       17        0   2      1\n117  41            1    yes   28   1         17      104        0  NA      0\n118  37            0     no    4   2        183       36        0  NA      0\n119  30            1    yes   15   1         15      365        0  NA      1\n120  39            1    yes   40   3         11      365        0   4      0\n121  32           NA   &lt;NA&gt;   33   2         NA       NA        0  NA      0\n122  50            0     no   35   6        178       49        0  NA      1\n123  33           NA   &lt;NA&gt;   28   1         NA       90        0   2      0\n124  27            1    yes   21   0        163      169        0  NA      0\n125  33            1    yes   33   0          7      399        1  NA      0\n126  38           NA   &lt;NA&gt;   26   4         NA       28        0  NA      1\n127  43            1    yes   45   6          4      358        0   8      0\n128  24            1    yes   45   0         68      365        0   1      1\n129  35            1    yes   31  10        185      387        0   1      0\n130  49           NA   &lt;NA&gt;   28  13         NA      193        0   1      1\n131  49            1    yes   22   5          1      126        0   4      0\n132  33           NA   &lt;NA&gt;   39   1         NA      365        1   1      0\n133  24            0     no   31   0        183       52        9   1      0\n134  28            1    yes   48   4         12      413        0  NA      1\n135  45            0     no   48   2        185       50        0   7      0\n136  46           NA   &lt;NA&gt;   34  20         NA       NA        0  NA      0\n137  37           NA   &lt;NA&gt;   35   1         NA      106        0  NA      1\n138  32            0     no   46   2        183       42        0  NA      0\n139  45           NA   &lt;NA&gt;   34   1         NA      303       11   2      0\n140  39            0     no   10   0        186       30        0   1      0\n141  34            1    yes   31   1        146      113        0  NA      0\n142  32           NA   &lt;NA&gt;   34   2         NA      365        0   3      0\n143  32            1    yes   26   2          5      369        0   1      0\n144  31            1    yes   15   1         31      365        0  NA      1\n145  45           NA   &lt;NA&gt;   48   1         NA       98        0   2      0\n146  30           NA   &lt;NA&gt;   37   1         NA      338        0  NA      0\n147  36            1    yes   20   8         57      365        7   1      0\n148  25            1    yes   38   3          0      414        8   1      0\n149  48            0     no   39   8        178       58        0  NA      0\n150  42            0     no   46   1        256      368        0   1      0\n151  33            1    yes   17   1         61      364        0   1      0\n152  36           NA   &lt;NA&gt;    6   1         NA      365        1  NA      0\n153  41           NA   &lt;NA&gt;   18   4         NA      365        0  NA      0\n154  30            1    yes   29   2         12      365        0  NA      1\n155  57           NA   &lt;NA&gt;   51  10         NA      365        0  NA      0\n156  57            1    yes   39   4         28      380        0   1      1\n157  47           NA   &lt;NA&gt;   31   2         NA      365        5  NA      0\n158  54            1    yes   49   0          0       38        0   4      0\n159  55            0     no   43   1        164       31        0  NA      0\n160  33            1    yes   45   1         13      330       10   1      0\n161  29           NA   &lt;NA&gt;   46   6         NA      365        5   3      1\n162  33           NA   &lt;NA&gt;   44   4         NA      427        0  NA      1\n163  28           NA   &lt;NA&gt;   41   3         NA      443       11   2      0\n164  37            0     no   29   2        163       29        0  NA      0\n165  28            1    yes   38   3        117      218        0  NA      1\n166  32           NA   &lt;NA&gt;   51   1         NA      365        0  NA      0\n167  31           NA   &lt;NA&gt;   38  10         NA      405       20   1      1\n168  36           NA   &lt;NA&gt;   53   3         NA       45        0   3      1\n169  39           NA   &lt;NA&gt;   29   2         NA       14        0   2      0\n170  29           NA   &lt;NA&gt;   31   1         NA      424       13   1      0\n171  38           NA   &lt;NA&gt;   57   4         NA      370        0  NA      1\n172  33           NA   &lt;NA&gt;   38   0         NA       NA        0   2      0\n173  31           NA   &lt;NA&gt;   39  10         NA       17        2  NA      0\n174  39           NA   &lt;NA&gt;   43   1         NA      365       13   1      1\n175  33            1    yes   19  40          3      146        0   1      1\n176  31            1    yes   23   0          9       15        0  NA      0\n177  46            1    yes   44   1        144       14        0   6      0\n178  36            1    yes   12   1         11      140        0  NA      0\n179  22            1    yes   35   0          1      365        0   4      0\n180  33            1    yes   47   2         27      365        0   2      0\n181  35           NA   &lt;NA&gt;   53   2         NA      365       14   2      0\n182  38            1    yes   34   1          0      348       14   1      1\n183  28           NA   &lt;NA&gt;   15   1         NA       48        0  NA      0\n184  33           NA   &lt;NA&gt;   31   2         NA       32        0   2      0\n185  49            1    yes   27   2         61      365        0  NA      0\n186  43           NA   &lt;NA&gt;   36   1         NA       18        0  NA      1\n187  33            1    yes   24   6          2      365        1  NA      1\n188  29           NA   &lt;NA&gt;   54   0         NA      407        4  NA      1\n189  34            0     no   31   2        183       30        0  NA      0\n190  41           NA   &lt;NA&gt;   22   4         NA      365        0  NA      0\n191  47            0     no   41   1        190       78        0  NA      1\n192  24           NA   &lt;NA&gt;   23   0         NA      365        0  NA      0\n193  31           NA   &lt;NA&gt;   18   3         NA       NA        8   1      1\n194  40           NA   &lt;NA&gt;   60   7         NA      406        0  NA      1\n195  32            0     no   34   3        184      365        0  NA      1\n196  32            0     no   26   4        192       22        0   3      0\n197  39           NA   &lt;NA&gt;   40   1         NA      365        0   1      0\n198  19           NA   &lt;NA&gt;   40   1         NA       63        0   8      0\n199  49            1    yes    1   2        166       78        0  NA      0\n200  27           NA   &lt;NA&gt;   41   4         NA      365        1   4      0\n201  38            0     no   38   3        247      365        0   1      1\n202  32            1    yes   37   1         82      348        0  NA      1\n203  22            0     no   16   1        162      357        0  NA      0\n204  36            1    yes   33   3         47       12        0  NA      0\n205  32            1    yes    4   0         88       50        0  NA      0\n206  35           NA   &lt;NA&gt;   24   1         NA      365        0  NA      1\n207  35            0     no   34   1        172      136        0  NA      1\n208  41            1    yes   40   2         63       22        0  NA      0\n209  36            1    yes   39   2         94        7        0  NA      0\n210  43            1    yes   32   2         73       70        0  NA      0\n211  45            1    yes   40   5          7      365        0   1      1\n212  39            1    yes   51   4         33      331        0  NA      0\n213  47           NA   &lt;NA&gt;   39   2         NA      365        1   3      1\n214  32            1    yes   40   6        183       76        0  NA      0\n215  33            1    yes   22   0          9      183        0  NA      0\n216  39            1    yes   42   4        215      428        0  NA      1\n217  44           NA   &lt;NA&gt;   13   0         NA      365        0  NA      1\n218  35           NA   &lt;NA&gt;   49   4         NA       43        0   1      0\n219  31            1    yes   35   1         32      307        1   3      0\n220  25           NA   &lt;NA&gt;   43   0         NA      365        0  NA      0\n221  48            1    yes   27   1         74      353        0   6      0\n222  35           NA   &lt;NA&gt;   40   1         NA       37        0  NA      0\n223  42           NA   &lt;NA&gt;   38   4         NA      349        0   2      0\n224  51            1    yes   39   6          4      272        0   4      0\n225  55            1    yes   30   2         11       40        0   2      1\n226  32            1    yes   35   6         70       37        0  NA      0\n227  41            1    yes   34   2          2      365        0   3      0\n228  34           NA   &lt;NA&gt;   19   1         NA      329        0  NA      1\n229  30           NA   &lt;NA&gt;   39   2         NA      442        0  NA      0\n230  34           NA   &lt;NA&gt;   36   1         NA      326        0  NA      1\n231  38           NA   &lt;NA&gt;   58   8         NA      452        0   1      0\n232  41           NA   &lt;NA&gt;   38   2         NA       24        2  NA      0\n233  31           NA   &lt;NA&gt;   22   0         NA      359        0  NA      1\n234  29           NA   &lt;NA&gt;   46   2         NA      336        0   3      0\n235  36           NA   &lt;NA&gt;   31  10         NA      365        0   1      0\n236  45           NA   &lt;NA&gt;   11   0         NA      379        0  NA      0\n237  36           NA   &lt;NA&gt;   32   2         NA      434       10  NA      0\n238  30            1    yes   33   1         59       12        0  NA      0\n239  40            1    yes   39   1         16      294        0  NA      0\n240  27            1    yes   33   0          4      365        0   2      1\n241  39           NA   &lt;NA&gt;   27   1         NA       21        0  NA      0\n242  39            0     no   43   4        170      350        0   2      0\n243  37            1    yes   30   1          2      440        0   5      0\n244  43            1    yes   12   4         11      236        0   4      0\n245  20            1    yes   42   1         20      365        0  NA      0\n246  35            1    yes   31   2         32       35        5  17      0\n247  32           NA   &lt;NA&gt;   40   6         NA       29       11   2      0\n248  42            0     no   17   0        188      456        0  NA      0\n249  27           NA   &lt;NA&gt;   44   0         NA      279        0  NA      0\n250  30           NA   &lt;NA&gt;   15   2         NA      365        0  NA      0\n251  27           NA   &lt;NA&gt;   41   0         NA      365        8   3      0\n252  41           NA   &lt;NA&gt;   51   3         NA      349        0  NA      0\n253  32            1    yes   24  20          7       46        6   1      0\n254  47            1    yes   29   1         31      368        0   1      0\n255  36           NA   &lt;NA&gt;   40   2         NA      365        0   2      0\n256  32            1    yes   33   2          2      365        0   1      0\n257  33            1    yes   51   1          5      365        1   6      1\n258  30           NA   &lt;NA&gt;   30   6         NA       83        0  NA      1\n259  29           NA   &lt;NA&gt;   46   0         NA       79        8  NA      0\n260  34           NA   &lt;NA&gt;   38   2         NA      365        8  NA      1\n261  34            1    yes   42   0         52      365        1   2      0\n262  40           NA   &lt;NA&gt;   17   2         NA      365        0   2      0\n263  45           NA   &lt;NA&gt;   22   3         NA      365        7  21      0\n264  37            0     no   37   2        179       41        0  NA      1\n265  32           NA   &lt;NA&gt;   11   2         NA       17        0  NA      0\n266  26           NA   &lt;NA&gt;   56   2         NA      365        0  NA      1\n267  31            1    yes   14   0          2      365        0   1      0\n268  39            1    yes   26   0         94      425        0  NA      0\n269  49            1    yes   36   1         94      365        0  NA      0\n270  45            1    yes   41   0         33      365        4   1      1\n271  43           NA   &lt;NA&gt;   18   0         NA      365       10  NA      0\n272  38           NA   &lt;NA&gt;   19   1         NA      365        0  NA      0\n273  23            1    yes   48   1          2      365        0   2      1\n274  35            1    yes   45   3          1       26        0   1      1\n275  23            1    yes   44  20         45      207        0  NA      0\n276  42           NA   &lt;NA&gt;   52   3         NA       63        0  NA      1\n277  29           NA   &lt;NA&gt;   19   1         NA      318        0  NA      0\n278  43            1    yes    9   2          0      365        0   2      0\n279  29           NA   &lt;NA&gt;   55   0         NA      365        0  NA      0\n280  39            1    yes   18   0         16      358        0   2      0\n281  32            1    yes   45   4          1      427        0   2      1\n282  35           NA   &lt;NA&gt;   12   1         NA      441        0   2      0\n283  22            1    yes   33   2          3       30        0  NA      0\n284  39            1    yes   32   1        132       41        0  NA      0\n285  38            1    yes   20   1         NA      285        0   2      0\n286  56            1    yes   37  36          0      412        3  11      0\n287  36            1    yes   39   1        136      324        0   2      1\n288  40           NA   &lt;NA&gt;   43   1         NA       15       17   2      0\n289  22            1    yes   51   2          2      374        9   1      1\n290  39           NA   &lt;NA&gt;   27   5         NA      293        8   4      0\n291  47            1    yes   40   2          3      365        0  NA      0\n292  32            1    yes    8   3         30      373        0   1      0\n293  41            1    yes   54   3          1      356        4  NA      0\n294  32            0     no   35   1        191       21        0  NA      0\n295  37           NA   &lt;NA&gt;   58   8         NA      365        0   2      1\n296  41            0     no   50   2        174       17        1   1      0\n297  31            1    yes   55   5         65      365        0   1      0\n298  33            1    yes   19   0         64       33        0  NA      1\n299  30            1    yes   37   6          8      303       16   1      0\n300  32            1    yes   20   1         93      449        0   1      0\n301  35           NA   &lt;NA&gt;   40   1         NA       77        0  NA      0\n302  32           NA   &lt;NA&gt;   37   1         NA       35        0   3      0\n303  33           NA   &lt;NA&gt;   43   0         NA      365        0   2      0\n304  30            1    yes    8   8          5       32        1  NA      0\n305  44           NA   &lt;NA&gt;   56   3         NA      365        0   2      0\n306  46            1    yes   51   0         62      365        0   2      0\n307  43            0     no    7   0        187       41        0  NA      1\n308  47           NA   &lt;NA&gt;   36   4         NA      365       13   5      0\n309  34            1    yes   49   0         93       32        0  NA      0\n310  47            1    yes   54   1          4      349        8  NA      1\n311  40            1    yes   53   2          1      393        0   7      0\n312  34            1    yes   15  15          5       NA        0  NA      0\n313  48            1    yes   53   4          0      302        0   3      1\n314  37            1    yes    6   5          1      364        1  NA      0\n315  35            1    yes   54   1          5      365       13  NA      1\n316  38           NA   &lt;NA&gt;   42   4         NA      337        0  NA      1\n317  27           NA   &lt;NA&gt;   31   1         NA       31        0   1      0\n318  39            0     no   40   0        178        9        4  NA      0\n319  23            1    yes   37   1          0      359       20   4      0\n320  35            0     no   36   0        178      361        0  NA      1\n321  53            0     no   40   2        175       80       19   2      0\n322  31           NA   &lt;NA&gt;   41   1         NA      365        0  NA      0\n323  32            1    yes   39   0         15       14        0   1      0\n324  33            0     no   38   1        219      398        0   1      0\n325  25            1    yes   38   0          1       40        1   1      0\n326  37           NA   &lt;NA&gt;    9   1         NA       40        0  NA      0\n327  26            1    yes   36   0         18       74        0  NA      0\n328  29           NA   &lt;NA&gt;   27   0         NA      308        5   2      0\n329  30            0     no   26   1        215        7        0  NA      0\n330  47           NA   &lt;NA&gt;   52   8         NA      365        0   2      1\n331  33           NA   &lt;NA&gt;   24   1         NA      300        0  NA      0\n332  36            1    yes   16   1        125      361        0   1      0\n333  23           NA   &lt;NA&gt;   34   3         NA      393        0   1      0\n334  36            1    yes   46   8          5        9        0   5      0\n335  34            1    yes   24   1          2      350        2   1      0\n336  28            1    yes   25   2          1      365        0   2      0\n337  33           NA   &lt;NA&gt;   40   4         NA       21        0  NA      1\n338  26            1    yes   33   0         35      296        0   1      1\n339  30            1    yes   31   0         15        6        0  NA      0\n340  41           NA   &lt;NA&gt;   37   1         NA       19        0  NA      0\n341  31           NA   &lt;NA&gt;   28   1         NA      123        1   4      0\n342  28           NA   &lt;NA&gt;   27   0         NA       44        0  NA      0\n343  59           NA   &lt;NA&gt;    6   2         NA      365        0  NA      0\n344  39            1    yes   21   0         31      363        0  NA      0\n345  36           NA   &lt;NA&gt;   29   0         NA       33        0  NA      0\n346  47            1    yes   23   1         32      152        0  NA      0\n347  26           NA   &lt;NA&gt;   35   0         NA      365        0  NA      0\n348  22            1    yes   55   0         10      338       11   2      0\n349  36           NA   &lt;NA&gt;    3   0         NA      365        0  NA      0\n350  34           NA   &lt;NA&gt;   36   1         NA      365        2   6      0\n351  27           NA   &lt;NA&gt;   40   1         NA      365        3   2      0\n352  34            1    yes   29   0         12      356        0  NA      1\n353  21           NA   &lt;NA&gt;   28   3         NA      331        0   1      0\n354  33           NA   &lt;NA&gt;   21   0         NA      309        0  NA      0\n355  42            1    yes   34   5          3      289       11   1      0\n356  46           NA   &lt;NA&gt;   42   2         NA      306        0   2      0\n357  26            1    yes   23   4        106      410        0  NA      0\n358  36            1    yes   36   3          3      362        0  NA      0\n359  47            0     no   32   3        158       74        0  NA      1\n360  48            0     no   30   2        191       16        0   1      0\n361  32           NA   &lt;NA&gt;   25   5         NA      340       10  NA      0\n362  38           NA   &lt;NA&gt;   35   7         NA      365        0   1      0\n363  43            1    yes   23   2         61       11        0   2      0\n364  30            1    yes   16   0         30      365        0  NA      0\n365  40            0     no   27   1        176       41        0  NA      0\n366  38           NA   &lt;NA&gt;   14   0         NA      292        1  NA      0\n367  22            0     no   44   1        260      376       NA   5      0\n368  39            0     no   52   2        268      449        0  NA      1\n369  22           NA   &lt;NA&gt;   48   2         NA        8        2   3      0\n370  37            0     no   11   1        210      370        0   2      0\n371  37            1    yes   41  10          1      393        0  NA      1\n372  44            1    yes   41   3          0      365        0   1      0\n373  38            0     no   37   1        165      166        1  NA      0\n374  37            1    yes   31   2          2       89        0   3      0\n375  43            1    yes   34   4          2      418        5  NA      0\n376  39            1    yes   40   8          0      247        0   3      0\n377  45            1    yes   37   2          2      322        3  NA      0\n378  39            0     no   30   8        154      265        0  NA      0\n379  31            1    yes   42   1         15      365        0  NA      1\n380  32            1    yes   51   0          5       NA        6   3      0\n381  42            1    yes   42   5         33       98        0  NA      1\n382  33           NA   &lt;NA&gt;   15   0         NA      365        0  NA      1\n383  47            1    yes   12   1         NA      345        0  NA      0\n384  24            1    yes   39   2         32      365        0   3      0\n385  27            1    yes   10   1          2       20        0  NA      0\n386  38           NA   &lt;NA&gt;   33   1         NA      286        1  NA      1\n387  53           NA   &lt;NA&gt;   57   4         NA      365        0  NA      0\n388  39           NA   &lt;NA&gt;   17   1         NA       34        0   4      0\n389  32           NA   &lt;NA&gt;   20   4         NA      365        1  NA      0\n390  27           NA   &lt;NA&gt;   49   2         NA      365        0   1      0\n391  43           NA   &lt;NA&gt;   23   4         NA      365        0   2      1\n392  31           NA   &lt;NA&gt;   26   1         NA      365        0  NA      0\n393  41           NA   &lt;NA&gt;   28   3         NA      365        0  NA      0\n394  27           NA   &lt;NA&gt;    3   0         NA      365        0  NA      1\n395  28           NA   &lt;NA&gt;   18  17         NA       85        0  NA      0\n396  39           NA   &lt;NA&gt;   39   8         NA      365        0  NA      0\n397  39           NA   &lt;NA&gt;   51   0         NA      365       12   3      0\n398  21           NA   &lt;NA&gt;   39   0         NA       NA        6  NA      1\n399  29           NA   &lt;NA&gt;   47   2         NA      365        0  NA      1\n400  31           NA   &lt;NA&gt;   45   5         NA      365        5  NA      0\n401  29           NA   &lt;NA&gt;   28   2         NA      118        2   1      0\n402  45           NA   &lt;NA&gt;   41   2         NA      365        0   1      1\n403  25           NA   &lt;NA&gt;   31   7         NA       68        0  NA      0\n404  24           NA   &lt;NA&gt;   34   2         NA      365       14   8      1\n405  41           NA   &lt;NA&gt;   21   5         NA      365        0  NA      0\n406  27           NA   &lt;NA&gt;   41   3         NA      365        0   1      0\n407  21           NA   &lt;NA&gt;   38   1         NA       44       14   4      0\n408  27           NA   &lt;NA&gt;   36   5         NA       NA        0  NA      0\n409  31           NA   &lt;NA&gt;   24   1         NA      365        0   1      0\n410  41           NA   &lt;NA&gt;   10   0         NA      365        0  NA      0\n411  33           NA   &lt;NA&gt;   41   1         NA      365        0  NA      0\n412  49           NA   &lt;NA&gt;   51   1         NA      365        8   3      0\n413  41           NA   &lt;NA&gt;   45   4         NA      365        1   1      0\n414  25           NA   &lt;NA&gt;   29   0         NA       44        6  NA      0\n415  41           NA   &lt;NA&gt;   56   4         NA       10        0  NA      0\n416  34           NA   &lt;NA&gt;   34   1         NA       87        0   2      0\n417  29           NA   &lt;NA&gt;    4   0         NA      365        0  NA      0\n418  28           NA   &lt;NA&gt;   32   0         NA      365        0  NA      0\n419  29           NA   &lt;NA&gt;   38   2         NA       NA        9   1      0\n420  36           NA   &lt;NA&gt;   26   0         NA      115        0   5      0\n421  36           NA   &lt;NA&gt;   27   0         NA      365        0  NA      0\n422  24           NA   &lt;NA&gt;   21   4         NA      365        0  NA      0\n423  38           NA   &lt;NA&gt;   30   2         NA        6        0   2      0\n424  31           NA   &lt;NA&gt;    7   1         NA      365        0  NA      0\n425  26           NA   &lt;NA&gt;   35   1         NA      365        0  NA      0\n426  35           NA   &lt;NA&gt;   23   2         NA       28        0  NA      1\n427  26           NA   &lt;NA&gt;   36   4         NA      365        1  NA      0\n428  33           NA   &lt;NA&gt;   15   0         NA      365        0  NA      0\n429  46           NA   &lt;NA&gt;   48 100         NA      365        0  NA      0\n430  33           NA   &lt;NA&gt;   31   0         NA      365        0   1      0\n431  39           NA   &lt;NA&gt;   54   6         NA       64        0  NA      0\n432  27           NA   &lt;NA&gt;   21   1         NA      365        9   1      0\n433  33           NA   &lt;NA&gt;   21   8         NA       NA        0  NA      1\n434  36           NA   &lt;NA&gt;   29   4         NA      365        0  NA      1\n435  23           NA   &lt;NA&gt;   23   0         NA      365        5   2      0\n436  33           NA   &lt;NA&gt;   33   2         NA      365       11   1      0\n437  26           NA   &lt;NA&gt;   14   0         NA      365        0  NA      0\n438  38           NA   &lt;NA&gt;   27  10         NA      365        0  NA      0\n439  52           NA   &lt;NA&gt;   24   1         NA      365        0   1      0\n440  39           NA   &lt;NA&gt;   33   2         NA      365        3   1      0\n441  36           NA   &lt;NA&gt;   25   1         NA        2        1  NA      0\n442  44           NA   &lt;NA&gt;   37   0         NA       NA        0   2      0\n443  37           NA   &lt;NA&gt;   47   2         NA        4       21  NA      0\n444  33           NA   &lt;NA&gt;   40   2         NA      365        0   1      1\n445  31           NA   &lt;NA&gt;    9   1         NA      365        0  NA      0\n446  25           NA   &lt;NA&gt;   37   3         NA      365        0   3      0\n447  31           NA   &lt;NA&gt;   47   1         NA      365        0  NA      1\n448  24           NA   &lt;NA&gt;   34   0         NA      365       13   2      0\n449  33           NA   &lt;NA&gt;   28   1         NA      365        0   1      0\n450  49           NA   &lt;NA&gt;   37   0         NA        7        0  NA      0\n451  39           NA   &lt;NA&gt;   28   0         NA      365        1  NA      1\n452  59           NA   &lt;NA&gt;   11   2         NA      365        0   1      0\n453  45           NA   &lt;NA&gt;   35   1         NA      365        0   1      0\n       sex g1b homeless  i1  i2  id indtot linkstatus link       mcs      pcs\n1     male yes   housed  13  26   1     39          1  yes 25.111990 58.41369\n2     male yes homeless  56  62   2     43         NA &lt;NA&gt; 26.670307 36.03694\n3     male  no   housed   0   0   3     41          0   no  6.762923 74.80633\n4   female  no   housed   5   5   4     28          0   no 43.967880 61.93168\n5     male  no homeless  10  13   5     38          1  yes 21.675755 37.34558\n6   female  no   housed   4   4   6     29          0   no 55.508991 46.47521\n7   female yes   housed  13  20   7     38          0   no 21.793024 24.51504\n8     male yes homeless  12  24   8     44          0   no  9.160530 65.13801\n9   female  no homeless  71 129   9     44          0   no 22.029678 38.27088\n10    male  no homeless  20  27  10     44          0   no 36.143761 22.61060\n11  female  no   housed   0   0  11     34          0   no 43.974678 60.07915\n12  female  no   housed  13  13  12     11          0   no 13.382205 41.93376\n13    male  no homeless  20  31  14     40          0   no 49.089302 39.24264\n14    male  no homeless  13  20  15     41          1  yes 25.846157 31.82965\n15    male  no   housed  51  51  16     38          0   no 23.608444 55.16998\n16  female yes homeless   0   0  17     26          1  yes 29.799828 44.77651\n17    male  no   housed   0   0  18     17          0   no 42.166462 56.43837\n18    male yes homeless   1   1  19     40          0   no 16.732292 58.29807\n19  female yes   housed   9  24  20     37          1  yes 15.458271 37.45214\n20    male  no   housed  23  23  21     37          0   no 55.128109 34.33926\n21    male  no   housed  26  26  22     36          0   no 20.871447 36.58481\n22    male  no   housed   0   0  23     27          1  yes 47.286739 61.64098\n23    male yes homeless  34  34  24     42          0   no 19.620596 46.22176\n24    male  no homeless   4   5  25     42          0   no 44.442104 51.56324\n25  female  no   housed   6   8  27     40          0   no 21.668474 36.01007\n26    male  no   housed   3   3  28     34          1  yes 37.371555 63.06006\n27    male  no homeless   7   7  30     37          0   no 34.335667 61.82597\n28    male yes   housed  24  48  31     41          0   no 46.340755 43.53374\n29    male  no homeless   0   0  32     37          1  yes 27.717710 42.22490\n30    male  no homeless  20  20  33     44          0   no 18.984324 42.40059\n31    male  no homeless   3   3  34     41          0   no 58.241264 50.14700\n32    male  no homeless   6   6  35     35          1  yes 27.852608 63.52000\n33    male  no   housed   0   0  36     21          0   no 54.774349 53.35109\n34    male  no   housed   0   0  37     30          1  yes 27.495481 56.73985\n35    male  no homeless  32 135  38     33          0   no 56.324333 53.23396\n36    male  no   housed   2  24  39     43          0   no 37.006042 62.04113\n37    male  no   housed   3   3  40     41          0   no 39.897774 38.39529\n38    male yes homeless  27  27  42     41          0   no 18.640594 51.30330\n39    male  no   housed   3   7  43     32          0   no 45.134098 56.68389\n40    male  no homeless  24  36  44     41          0   no 15.861924 71.39259\n41    male  no homeless   6  12  45     39          0   no 24.148815 52.61977\n42    male  no homeless   0   0  46     22          1  yes 29.901625 36.04588\n43    male  no   housed  13  13  47     39          1  yes 29.412977 50.06427\n44    male  no homeless  25  28  49     38          1  yes 35.206970 62.03183\n45  female  no   housed   6  13  50      8          1  yes 59.454094 52.69898\n46    male  no   housed  13  61  51     36          0   no 20.999893 56.38669\n47    male yes homeless  15  26  52     42          0   no 29.390280 40.38438\n48    male yes   housed   7   7  53     31         NA &lt;NA&gt; 26.773279 58.16169\n49    male yes homeless   9  15  54     44          1  yes 17.925251 45.48341\n50    male  no homeless   5  13  56     40          1  yes 34.434696 63.05807\n51  female  no   housed  13  20  57     32          0   no 24.000315 46.75086\n52    male yes   housed  34  34  58     29          1  yes 47.671936 29.45625\n53    male yes   housed   3   6  59     44          1  yes 26.653036 40.46056\n54    male yes homeless  37  43  60     43          1  yes 28.469273 57.20213\n55    male  no homeless  36  36  61     38          1  yes 26.065777 47.60514\n56    male yes   housed  13  15  62     34          0   no 31.501711 50.16318\n57    male  no   housed   3  19  63     41          0   no 24.998930 50.39870\n58  female yes   housed   3   6  65     20          1  yes 33.374172 55.23372\n59  female yes homeless   0   0  66     29          0   no 27.575460 35.12470\n60    male  no   housed  32  32  67     38          0   no 35.839642 52.68871\n61    male  no   housed  35  42  68     42          0   no 17.565235 67.53625\n62    male yes homeless  20  20  69     41          0   no 20.025341 36.98058\n63    male  no homeless   7  25  70     38          1  yes 25.812592 64.29022\n64  female yes homeless  59 164  71     43          1  yes 17.705963 36.04016\n65    male  no   housed   0   0  72     38          1  yes 39.934162 53.15686\n66    male  no homeless  26  51  73     44          1  yes 23.996725 45.18499\n67  female yes   housed  12  18  74     37         NA &lt;NA&gt; 26.697262 54.38272\n68  female  no   housed   0   0  75     40         NA &lt;NA&gt; 15.447794 55.32189\n69    male  no   housed  18  36  76     38          0   no 38.752102 27.36663\n70    male  no   housed   6  12  78     29          1  yes 34.839962 58.25895\n71    male  no   housed  13  17  80     35         NA &lt;NA&gt; 22.957235 63.91367\n72    male yes homeless   5   5  81     28          1  yes 28.418003 56.90441\n73    male  no homeless   2   2  82     31          0   no 33.115913 48.79136\n74    male  no homeless 102 102  83     40          0   no 14.913925 52.59380\n75    male yes homeless   0   0  84     44          1  yes 17.449858 68.12395\n76    male yes   housed  21  21  85     36          0   no 13.134663 57.07777\n77    male yes homeless   6   8  86     29          1  yes 19.344807 42.62894\n78    male  no   housed   1   1  87     42          1  yes 26.221968 59.56708\n79    male  no homeless  19  19  88     40          0   no 34.210976 44.16995\n80    male  no   housed   1  22  89     29          1  yes 52.926834 58.21477\n81  female yes   housed   2   2  90     40          0   no 28.858498 43.94296\n82    male  no homeless   0   0  91     39          1  yes 26.918222 59.82454\n83    male  no   housed  26  47  93     39          0   no 39.298168 38.46090\n84    male  no   housed   0   0  94     35          0   no 47.550678 37.18519\n85    male  no homeless   9  19  95     38          1  yes 54.053368 56.50476\n86    male  no   housed  10  10  96     40          0   no 37.845036 57.33492\n87    male yes homeless   4   5  97     44          1  yes 20.202173 28.85472\n88    male  no   housed   6  15  98     19         NA &lt;NA&gt; 51.788670 60.58733\n89    male yes homeless  26  51  99     43          0   no 32.566528 30.05406\n90  female yes   housed  64  64 100     44          1  yes 19.595461 40.48884\n91    male yes homeless  26  26 102     34          1  yes 16.302422 55.98083\n92    male yes   housed   2   3 103     42          1  yes 15.754984 48.05733\n93  female yes homeless  33  38 104     42          1  yes 27.993336 44.53589\n94    male yes   housed  61 184 105     40          0   no 23.659925 30.23405\n95    male yes   housed   2   2 106     39         NA &lt;NA&gt; 34.737865 65.74425\n96    male  no homeless  19  19 107     40          0   no 15.618371 55.50122\n97  female  no   housed   9  15 108     33          1  yes 23.299021 51.81045\n98    male  no   housed   0   0 109     38         NA &lt;NA&gt; 40.941338 63.61380\n99    male yes   housed  18  47 110     41          1  yes 24.330456 46.41464\n100   male yes homeless  51  51 111     42          0   no 15.196477 54.13217\n101   male  no   housed   0   0 112     37          0   no 50.788845 46.75063\n102   male  no homeless  36  66 113     43          0   no 23.554617 40.18310\n103   male  no   housed  31  91 114     38         NA &lt;NA&gt; 15.822761 63.48228\n104   male  no   housed   0   0 115     33          1  yes 45.402626 43.62142\n105   male  no   housed  26  69 116     34          0   no 53.616177 57.95000\n106   male  no   housed   2  20 117     28         NA &lt;NA&gt; 59.264427 54.44389\n107 female  no   housed   0   0 118     19          1  yes 24.747171 54.10854\n108   male yes homeless  51  51 119     43          0   no 12.432887 48.89978\n109 female yes homeless  34  34 120     33          1  yes 27.136280 54.79462\n110 female  no homeless  39  95 121     31          0   no 41.321629 36.68874\n111   male  no   housed  19  26 122     42          1  yes 21.912630 43.00148\n112   male  no homeless  13  13 123     33          0   no 28.972683 59.74108\n113   male  no homeless   0   0 124     36          0   no 16.284695 48.89844\n114 female yes   housed   0   0 125     43         NA &lt;NA&gt; 19.156574 34.33698\n115   male  no homeless  13  13 126     19          0   no 41.590557 40.88239\n116 female yes   housed   1   1 127     37          1  yes 18.465418 39.33260\n117   male  no   housed  22  22 128     25          1  yes 39.450993 28.93009\n118   male  no homeless  13  33 129     42          1  yes 42.539974 60.92048\n119 female  no   housed  26  26 131     25          0   no 37.438934 49.29042\n120   male yes homeless  19  30 132     39          0   no 22.669971 35.39379\n121   male yes homeless  26  26 133     41         NA &lt;NA&gt; 45.529411 57.32318\n122 female  no   housed  13  13 134     28          1  yes 20.310446 33.48925\n123   male  no homeless   3   3 135     40          1  yes 23.729639 45.54259\n124   male  no   housed  24  24 136     40          1  yes 40.676174 59.10600\n125   male  no   housed   0   0 137     29          0   no 28.075939 42.01285\n126 female  no   housed   0   0 138     39          1  yes 22.787546 28.74085\n127   male yes homeless  53  53 140     39          0   no 21.460621 45.01618\n128 female  no homeless   7   7 141     39          0   no 28.505577 37.79718\n129   male  no homeless  25  25 142     38          0   no 33.652927 48.87681\n130 female  no homeless  15  15 143     36          1  yes 40.156929 40.96234\n131   male yes homeless  64 179 144     42          1  yes 45.491100 38.13606\n132   male yes homeless   4   4 148     42          0   no 23.371147 29.47202\n133   male yes homeless   3   6 149     37          1  yes 34.598862 50.21533\n134 female  no   housed   2   2 150     33          0   no 22.017500 40.24271\n135   male  no homeless  13  13 151     42          1  yes 29.082914 36.24839\n136   male  no   housed  20  51 152     37         NA &lt;NA&gt; 24.422007 45.56750\n137 female  no homeless   1   3 153     25          1  yes 33.366123 45.16520\n138   male  no homeless  38  38 154     43          1  yes 18.690155 59.47648\n139   male  no homeless   8   8 156     40          0   no 27.683458 31.97959\n140   male  no homeless   0   0 158     34          1  yes 47.145802 53.66537\n141   male  no   housed  13  13 160     43          1  yes 33.517311 29.78529\n142   male  no homeless  39  39 163     30          0   no 41.131794 24.43518\n143   male  no   housed  12  20 164     44          0   no 24.090509 53.75950\n144 female  no   housed   0   0 166     38          0   no 50.030434 57.38777\n145   male  no   housed   0   0 167     37          1  yes 20.069775 50.23810\n146   male  no   housed   1   1 168     29          0   no 18.211269 56.00507\n147   male  no   housed  19  32 169     43          0   no 30.071957 44.92406\n148   male  no   housed   0   0 170     30          0   no 28.679745 61.78611\n149   male yes   housed  26  51 172     37          1  yes 20.517740 54.35444\n150   male  no   housed  19  19 173     29          0   no 31.188143 55.74972\n151   male  no homeless   3   6 174     41          0   no 43.881058 61.44474\n152   male  no   housed   1   1 177     35          0   no 56.784805 56.84005\n153   male  no   housed  12  17 178     41          0   no 39.074711 36.56960\n154 female  no homeless  29  29 179     31          0   no 52.197483 55.73845\n155   male  no homeless  38  38 180     42          0   no 21.200043 32.28706\n156 female  no   housed  12  12 181     36          0   no 36.651463 30.50811\n157   male  no   housed   4   4 182     38          0   no 10.564762 52.94168\n158   male yes homeless  19  50 183     41          1  yes 22.640652 31.00380\n159   male  no   housed  41  54 185     40          1  yes 39.270416 26.45694\n160   male  no   housed   1   3 186     36          0   no 18.771036 40.46645\n161 female  no   housed   0   0 187     39          0   no 20.119982 32.96189\n162 female yes homeless  59  59 188     38          0   no 25.257971 42.12069\n163   male  no homeless  19  19 189     42          0   no 21.049545 45.46138\n164   male  no   housed   8   8 190     34          1  yes 50.018494 54.07817\n165 female yes   housed  16  20 191     35          1  yes 18.324743 43.24062\n166   male  no   housed  12  12 192     34          0   no  7.938221 53.61504\n167 female yes homeless  26  33 193     44          0   no 22.442661 35.90619\n168 female yes homeless  50  50 194     41          1  yes 27.171751 37.75567\n169   male  no homeless  12  20 198     36          1  yes 41.054363 57.70763\n170   male yes homeless   1   3 199     36          0   no 29.860514 53.68318\n171 female yes   housed  13  32 200     39          0   no 20.356680 35.97361\n172   male  no homeless  10  13 201     44         NA &lt;NA&gt; 26.252979 54.42475\n173   male yes   housed   3  24 202     41          1  yes 40.167236 61.28633\n174 female yes   housed  20  20 203     37          0   no 22.815102 35.22702\n175 female  no homeless  19  26 204     32          1  yes 40.032974 38.10227\n176   male yes   housed   6  12 206     32          1  yes 25.615507 66.59317\n177   male  no homeless 102 102 208     38          1  yes 14.358881 49.27981\n178   male  no   housed   1   4 209     39          1  yes 27.122667 58.16642\n179   male  no   housed   0   0 210     29          0   no 36.823708 31.52861\n180   male yes   housed  58  58 211     41          0   no 17.509274 49.36320\n181   male  no   housed   9   9 212     37          0   no 17.927528 43.17081\n182 female  no homeless   0   0 213     32          0   no 43.353584 21.91906\n183   male  no   housed  35  65 214     43          1  yes 47.711655 57.81969\n184   male  no   housed  33  51 215     42          1  yes 20.731987 54.82264\n185   male  no   housed  19  19 217     28          0   no 52.455845 60.41816\n186 female yes   housed  58  58 219     40          1  yes 36.100307 37.03778\n187 female yes   housed  32  38 220     23          0   no 33.259956 41.66993\n188 female  no   housed   0   0 221     33          0   no 12.323594 48.21926\n189   male  no   housed   0   0 222     38          1  yes 23.058514 54.36913\n190   male  no   housed   6   6 223     40          0   no 45.011848 35.79145\n191 female yes homeless   0   0 224     21          1  yes 37.953403 57.64361\n192   male  no   housed  18  18 225     36          0   no 48.410297 59.32288\n193 female yes   housed   0   0 226     32         NA &lt;NA&gt; 27.641029 48.37090\n194 female yes homeless  38  38 228     43          0   no 16.786348 38.51597\n195 female  no   housed  13  13 229     31          0   no 54.768539 23.48208\n196   male yes homeless   0   0 230     41          1  yes 46.119808 23.50237\n197   male  no   housed  46  46 231     32          0   no 35.955441 56.30513\n198   male  no homeless  27  30 232     40          1  yes 30.300137 41.06454\n199   male  no homeless   3   3 233     40          1  yes 59.453930 58.16510\n200   male yes homeless  12  12 235     42          0   no 23.546112 41.57280\n201 female yes   housed  16  26 236     34          0   no 14.919310 57.83691\n202 female  no   housed   1   6 237     28          0   no 40.462433 56.90286\n203   male  no homeless  26  26 238     29          0   no 46.729744 54.59662\n204   male  no   housed  23  92 239     40          1  yes 37.674961 47.36353\n205   male  no   housed  13  13 240     34          1  yes 57.260887 56.89963\n206 female  no   housed   0   0 241     34          0   no 44.351089 46.79942\n207 female  no homeless   4   4 242     36          1  yes 16.469986 58.49455\n208   male yes homeless  26  26 243     43          1  yes 35.235611 48.48331\n209   male  no homeless  13  13 245     35          1  yes 48.239128 56.39499\n210   male  no homeless  13  13 246     35          1  yes 30.371395 47.35083\n211 female yes   housed  10  14 247     34          0   no 26.311474 43.25021\n212   male yes homeless  23  42 248     42          1  yes 22.884369 29.11139\n213 female  no   housed  42  48 249     33          0   no 27.471394 52.42204\n214   male  no   housed  15  15 250     34          1  yes 30.280018 34.58012\n215   male  no   housed  19  20 253     30          1  yes 47.979435 48.27899\n216 female yes   housed   0   0 254     20          0   no 13.968738 48.97176\n217 female  no   housed  13  13 255     26          0   no 41.867615 46.36879\n218   male  no   housed   2   3 256     39          1  yes 25.039495 63.25544\n219   male yes homeless  13  26 257     45          0   no 26.453758 46.76894\n220   male  no   housed  14  16 258     43          0   no 14.480626 70.14779\n221   male  no homeless  51  51 259     36          0   no 52.789551 50.25876\n222   male  no homeless  10  26 260     37          1  yes 35.576111 29.49112\n223   male  no homeless  16  16 261     42          0   no 26.799009 42.42209\n224   male yes homeless 102 102 262     44          1  yes 27.808109 25.61815\n225 female  no   housed   1   2 264     41          1  yes 23.547628 37.35865\n226   male yes   housed   6  20 265     33          1  yes 27.650967 53.05504\n227   male  no homeless  27  27 268     42          0   no 27.177586 43.00587\n228 female  no   housed   4   4 269     27          0   no 34.048084 57.24648\n229   male  no homeless  27  41 270     33          1  yes 31.328341 41.78789\n230 female  no   housed   1   1 272     38          0   no 32.384045 44.85584\n231   male yes   housed  54  73 273     45          0   no 16.125675 47.65467\n232   male yes   housed  24  36 274     40          1  yes 17.625854 44.01194\n233 female  no   housed  10  20 275     23          0   no 47.442879 52.85658\n234   male  no homeless  30  41 276     42          0   no 27.898603 43.68238\n235   male  no homeless  43  43 277     39          0   no 23.683241 43.55378\n236   male  no   housed   2   2 278     21          0   no 58.168713 49.47607\n237   male  no   housed  16  16 279     37          0   no 31.777193 41.87122\n238   male  no   housed   3   3 280      4          1  yes 52.955296 60.10658\n239   male  no   housed  34  51 283     36          1  yes 24.813925 35.46683\n240 female  no homeless   8   8 284     38          0   no 31.781149 51.49556\n241   male  no   housed  28  28 285     42          1  yes 46.830055 62.44834\n242   male  no   housed  13  13 287     44          0   no 16.398746 42.32603\n243   male  no   housed  51  51 288     38          0   no 36.798199 57.78556\n244   male  no homeless 134 140 289     42          1  yes 55.991005 32.58783\n245   male yes homeless   5   6 290     28          0   no 41.624405 53.04678\n246   male  no homeless   5   5 291     40          1  yes 19.645632 46.33508\n247   male yes   housed   3   3 292     44          1  yes 26.919926 48.62301\n248   male  no   housed   0   0 293     37          0   no 37.953053 61.60262\n249   male yes   housed  26  26 294     32          0   no 31.877844 51.38743\n250   male  no   housed  15  30 295     30          0   no 54.970051 33.79744\n251   male yes homeless   9  20 296     39          0   no 30.701992 51.40308\n252   male  no   housed  10  15 297     41          0   no 27.607288 44.29502\n253   male yes   housed   0   0 298     31          1  yes 29.505835 46.76040\n254   male yes   housed  24  45 299     39          0   no 21.931257 49.87759\n255   male yes homeless  33  51 300     40          0   no 20.979116 59.28272\n256   male  no   housed   0   0 302     32          0   no 28.558788 36.63770\n257 female yes   housed   8  13 304     28          0   no 20.911337 33.07642\n258 female yes homeless  27  33 306     25          1  yes 44.446507 45.79400\n259   male yes   housed   0   0 307     39          1  yes 11.819070 62.81930\n260 female  no   housed   0   0 308     33          0   no 21.543468 52.35651\n261   male  no homeless   3   3 309     40          0   no 25.548498 46.98674\n262   male  no homeless  14  20 310     39          0   no 34.139271 56.95329\n263   male  no homeless  12  12 311     38          0   no 29.400602 44.11552\n264 female  no homeless   1   1 313     33          1  yes 27.601431 37.83872\n265   male  no   housed   0   0 315     27          1  yes 56.963795 46.56849\n266 female  no   housed   1   1 316     36          0   no 14.415197 46.74971\n267   male  no   housed   0   0 317     29          0   no 41.195469 40.11784\n268   male  no   housed  25  33 318     39          0   no 36.719200 30.27282\n269   male yes   housed  42  57 319     40          0   no 48.008137 51.74989\n270 female  no   housed   2   2 320     22          0   no 34.747746 64.35030\n271   male  no   housed   6   6 322     32          0   no 58.477470 58.89470\n272   male  no   housed  19  19 323     38          0   no 62.031616 36.10949\n273 female yes homeless  29  58 324     27          0   no 16.718819 35.70664\n274 female  no   housed   0   0 325     32          1  yes 20.220354 32.44772\n275   male yes homeless   0   0 326     37          1  yes 24.378925 35.89378\n276 female yes homeless   0   0 327     32          1  yes 28.447634 39.93384\n277   male  no homeless  22  32 328     31          0   no 18.677704 71.62856\n278   male  no homeless  19  19 329     19          0   no 58.899960 59.34274\n279   male yes homeless  13  19 331     41          0   no 15.773271 48.61113\n280   male yes   housed   1   1 332     34          0   no 34.541599 54.08614\n281 female yes homeless  67  67 333     40          0   no 17.926985 39.09279\n282   male  no homeless  13  13 334     40          0   no 51.918278 51.16233\n283   male  no   housed  20  20 335     37          1  yes 23.137871 51.24271\n284   male  no   housed   0   0 336     39          1  yes 22.939909 33.03571\n285   male  no   housed   3   9 337     26          0   no 33.888065 33.92213\n286   male  no homeless 142 142 338     37          0   no 34.412716 25.92422\n287 female yes homeless  53  53 339     36          0   no 22.237560 36.52407\n288   male yes homeless  64  64 341     32          1  yes 22.354912 31.76573\n289 female  no   housed   0   0 342     40          0   no  7.035307 52.51404\n290   male  no   housed   2   2 343     42          0   no 19.718121 41.32350\n291   male  no homeless  51  51 346     43          0   no 28.747435 51.08913\n292   male  no   housed   1   1 347     12          0   no 55.912579 51.01180\n293   male  no homeless  24  30 348     44          0   no 18.948950 40.42006\n294   male  no   housed  35  35 350     40          1  yes 38.851971 45.13578\n295 female yes homeless  67  80 351     41          0   no 16.922634 34.09209\n296   male  no homeless   0   0 352     41          1  yes 31.739616 31.52352\n297   male yes   housed  13  26 353     38          0   no 17.837486 54.94331\n298 female  no homeless   6   6 354     22          1  yes 24.923189 63.77832\n299   male yes homeless  12  12 355     41          0   no 20.911737 44.87310\n300   male  no homeless   7   7 356     37          0   no 32.773659 63.90699\n301   male yes homeless  26  26 357     40          1  yes 23.771542 47.50178\n302   male yes homeless  41  56 359     41          1  yes 23.242210 30.34914\n303   male yes homeless   3   3 360     41          0   no 22.447948 45.32498\n304   male  no   housed  18  31 361     31          1  yes 58.851147 58.71478\n305   male  no homeless  38  55 362     43          0   no 27.218351 34.31445\n306   male  no   housed  12  15 363     39          0   no 18.287806 43.60749\n307 female  no homeless  26  26 364     15          1  yes 60.542084 55.44015\n308   male  no homeless   4   4 365     40          0   no 37.835770 32.12609\n309   male  no   housed  32  32 366     24          1  yes 37.698196 52.02918\n310 female yes   housed  13  13 367     35          0   no 13.852996 31.11147\n311   male  no homeless  34 102 368     42          0   no 18.615227 58.15246\n312   male  no homeless  38  51 369     29         NA &lt;NA&gt; 47.255920 46.52069\n313 female yes homeless   0   0 370     32          0   no 19.808329 27.09086\n314   male  no homeless  13  13 371     31          0   no 57.873539 57.59651\n315 female  no   housed   0   0 372     44          0   no  9.406377 41.95401\n316 female yes   housed   3   3 374     40          0   no 27.495565 51.27790\n317   male  no   housed  49  49 376     42          1  yes 41.010502 62.97789\n318   male  no homeless  18  36 377     35          1  yes 39.963680 37.80672\n319   male yes   housed   0   0 378     37          0   no 21.599306 36.64597\n320 female  no homeless  58  58 379     13          0   no 44.767254 53.42212\n321   male yes homeless   2   2 380     43          1  yes 29.332056 25.43683\n322   male  no   housed   6  13 381     40          0   no 18.604780 66.09068\n323   male  no homeless   6  13 382     33          1  yes 19.291830 59.91458\n324   male  no   housed  10  10 383     37          0   no 31.856297 64.18298\n325   male  no   housed   0   0 385     36          1  yes 26.698538 43.39342\n326   male  no homeless   6  20 386     26          1  yes 53.340359 57.65739\n327   male  no homeless   6   6 387     42          1  yes 51.003738 51.70669\n328   male  no   housed   0   0 388     35          0   no 28.639238 48.98777\n329   male  no   housed  32  32 389     41          1  yes 44.215485 54.15862\n330 female  no   housed   6   6 391     34          0   no  7.226597 47.60948\n331   male  no   housed   3  12 392     36          0   no 57.296200 59.14530\n332   male  no homeless   6   6 394     42          0   no 30.918043 63.34270\n333   male  no homeless   0   0 395     33          0   no 24.849377 51.15330\n334   male  no homeless  25  25 399     38          1  yes 17.863741 38.19618\n335   male  no homeless  13  26 400     41          0   no 48.483433 57.44889\n336   male  no homeless  18  18 401     36          0   no 27.514502 64.07393\n337 female  no   housed  13  26 402     38          1  yes 19.819555 32.99675\n338 female  no   housed   0   0 403     41          0   no 29.213017 56.69189\n339   male  no   housed   2   2 404     39          1  yes 36.029205 61.19665\n340   male yes homeless  26  38 405     41          1  yes 25.465322 65.26759\n341   male  no homeless   5  25 406     39          1  yes 38.778580 41.73849\n342   male yes   housed  10  23 407     25          1  yes 31.255833 56.56525\n343   male  no homeless   0   0 408     32          0   no 58.750145 53.01821\n344   male  no   housed   4   4 409     39          0   no 32.313843 57.04919\n345   male  no   housed  29  85 411     31          1  yes 40.056877 57.73149\n346   male  no homeless  20  20 413     40          1  yes 37.504734 54.06671\n347   male  no   housed   3  12 415     29          0   no 18.340139 43.89911\n348   male yes homeless   6  12 416     41          0   no 14.108759 48.81484\n349   male  no homeless  13  13 418      9          0   no 59.930012 58.22468\n350   male  no homeless  36  36 419     39          0   no 26.474701 48.76114\n351   male  no homeless  18  18 420     37          0   no 57.489437 37.74971\n352 female  no   housed   0   0 421     37          0   no 31.077631 64.91865\n353   male  no homeless  45  45 422     40          0   no 41.324745 36.81136\n354   male  no   housed  13  13 423     31          0   no 38.907230 49.43321\n355   male  no homeless   4  10 424     42          0   no 22.673281 45.18067\n356   male  no homeless   6  26 425     42          0   no 30.106504 36.35557\n357   male  no   housed   6   6 428     15          0   no 38.276970 36.49366\n358   male  no   housed  25  42 430     37          0   no 45.859604 14.07429\n359 female  no   housed  21  21 431     13          1  yes 51.922516 54.52398\n360   male  no homeless  13  13 432     35          1  yes 25.544411 42.86974\n361   male  no   housed  37  37 433     30          0   no 22.730097 56.85568\n362   male  no   housed  25  25 435     44          0   no 25.445648 44.17665\n363   male yes homeless  38  38 436     32          1  yes 46.967522 58.74847\n364   male  no   housed  12  29 437     32          0   no 47.133209 51.92163\n365   male  no   housed   6  24 438     38          1  yes 42.632927 56.86680\n366   male  no homeless   6   6 440     34          0   no 54.851093 50.26602\n367   male  no   housed   0   0 441     44          0   no 15.101494 48.11589\n368 female  no   housed   0   0 442     37          0   no 24.930353 33.53111\n369   male yes homeless   8   8 443     40          1  yes 19.116766 45.58474\n370   male  no   housed  32  32 444     41          0   no 51.843193 59.72128\n371 female  no homeless  24  51 445     44          0   no 25.710777 49.18084\n372   male  no homeless  51  51 447     30          0   no 32.484653 44.22039\n373   male  no   housed  35  35 448     42          1  yes 43.498222 20.74029\n374   male  no homeless  73  73 449     36          1  yes 18.795931 54.93296\n375   male yes homeless   9  31 452     45          0   no 18.525930 47.58062\n376   male yes homeless  51  51 457     44          1  yes 25.738285 34.90893\n377   male  no   housed   6   8 458     28          0   no 14.891697 60.11456\n378   male  no   housed   6  16 459     32          1  yes 41.360710 44.59728\n379 female yes homeless   6  13 461     34          0   no 16.863588 46.69877\n380   male  no homeless   2   3 464     44         NA &lt;NA&gt; 17.082233 47.00855\n381 female yes   housed  26  41 465     35          1  yes 30.701563 38.40187\n382 female  no   housed   0   0 466      6          0   no 41.624706 62.08943\n383   male  no   housed   1   1 467     31          0   no 43.441059 59.99293\n384   male  no homeless  49 109 468     42          0   no 27.801510 51.69448\n385   male  no   housed  19  25 469     35          1  yes 42.457150 53.54025\n386 female yes   housed   3  16 470     33          0   no 22.337873 42.31495\n387   male  no   housed  38  51  13     45          0   no 18.750151 46.04046\n388   male  no homeless  26  40  26     45          1  yes 28.556833 53.17226\n389   male  no homeless  83 145  29     42          0   no 28.602417 47.83191\n390   male yes   housed  32  40  48     43          0   no 15.268264 40.83885\n391 female  no homeless  19  19  55     31          0   no 27.717655 41.10135\n392   male  no   housed  30 101  64     41          0   no 40.633827 58.78673\n393   male  no   housed  42  42 130     31          0   no 46.269627 36.50988\n394 female  no   housed   1   1 139     21          0   no 57.834595 58.21511\n395   male  no   housed  18  26 145     36          1  yes 33.659222 45.00826\n396   male yes homeless  35 105 146     36          0   no 21.645960 41.52777\n397   male  no homeless  20  20 147     41          0   no 23.724752 32.87765\n398 female yes   housed   0   0 155     35         NA &lt;NA&gt; 47.773228 41.09781\n399 female  no homeless  11  14 157     35          0   no  9.732559 69.17161\n400   male yes   housed  26  26 159     33          0   no 15.599421 47.65695\n401   male  no homeless  43  54 161     43          1  yes 28.475632 45.82243\n402 female  no homeless  19  26 162     25          0   no 55.479382 54.09069\n403   male  no   housed   1   2 165     35          1  yes 36.594727 59.08202\n404 female  no   housed  13  26 171     38          0   no 28.590870 57.76270\n405   male  no   housed  51  51 175     37          0   no 15.078867 41.00370\n406   male yes homeless  24  48 176     44          0   no 38.950596 59.73408\n407   male yes   housed  13  13 184     43          1  yes 31.680859 60.97185\n408   male  no   housed  20  26 195     41         NA &lt;NA&gt; 19.096197 59.91701\n409   male  no   housed  26  26 197     35          0   no 48.442287 58.50863\n410   male  no   housed   8  18 205     36          0   no 52.697727 58.58452\n411   male yes   housed  61  61 207     34          0   no 19.919922 64.95238\n412   male  no   housed  13  19 216     33          0   no 13.312669 49.44656\n413   male yes homeless  28  37 218     43          0   no 15.686288 58.84382\n414   male  no   housed   6   7 227     32          1  yes 33.820976 27.27006\n415   male  no   housed  10  10 234     41          1  yes 11.499865 66.23132\n416   male  no   housed   0   0 244     36          1  yes 26.392733 32.35484\n417   male  no   housed   4  10 251     19          0   no 52.945427 58.86002\n418   male  no   housed  25  37 252     33          0   no 39.972664 56.95388\n419   male  no homeless   2   2 263     40         NA &lt;NA&gt; 23.446474 40.40644\n420   male  no homeless  26  26 266     44          1  yes 42.341843 61.74688\n421   male  no   housed  24  24 267     33          0   no 28.061911 53.93607\n422   male yes homeless   0   0 271     38          0   no 28.073883 63.86327\n423   male  no homeless  13  13 281     38          1  yes 37.116608 35.98627\n424   male  no   housed  12  12 282     31          0   no 57.800064 49.21747\n425   male  no   housed  12  30 301     41          0   no 12.204219 51.45133\n426 female  no   housed   4   4 303     20          1  yes 45.425110 58.75759\n427   male  no   housed  12  18 305     38          0   no 39.038631 47.92621\n428   male  no homeless   3   3 312     36          0   no 37.102394 51.63569\n429   male  no   housed  51  69 314     29          0   no 23.898293 23.55043\n430   male  no homeless   5   5 321     29          0   no 46.330513 59.16547\n431   male  no homeless  68  68 330     42          1  yes 13.412563 42.08535\n432   male  no homeless  29  29 340     43          0   no 49.503277 51.01598\n433 female  no homeless  26  26 345     28         NA &lt;NA&gt; 18.594315 38.86502\n434 female  no   housed   7   8 349     27          0   no 25.676130 54.98139\n435   male  no   housed   5   5 373     38          0   no 33.345051 46.42344\n436   male  no homeless  32  32 390     41          0   no 18.530807 52.71838\n437   male  no   housed   0   0 393     14          0   no 54.525818 59.42862\n438   male  no   housed  76  78 396     10          0   no 44.171612 38.49107\n439   male  no homeless  26  26 397     32          0   no 47.779892 52.73988\n440   male  no homeless  41  62 398     39          0   no 21.271496 45.72916\n441   male  no homeless  18  18 410     43          1  yes 39.929405 61.97865\n442   male  no homeless  22  30 412     31         NA &lt;NA&gt; 25.632202 60.46511\n443   male  no   housed  53  63 417     43          1  yes 23.716438 38.24600\n444 female yes homeless  26  32 427     37          0   no 34.152245 45.27036\n445   male  no homeless   4  13 434     34          0   no 52.792542 57.12674\n446   male  no   housed   3   3 439     30          0   no 28.609346 52.02338\n447 female yes homeless  56  61 451     41          0   no 17.050970 34.51623\n448   male  no homeless   0   0 453     36          0   no 25.851772 50.60834\n449   male  no   housed   0   0 454     38          0   no 41.943066 56.96868\n450   male  no   housed  13  20 455     39          1  yes 62.175503 57.25384\n451 female  no homeless   1  24 460     28          0   no 33.434536 40.04572\n452   male  no homeless  13  13 462     26          0   no 54.424816 53.73204\n453   male  no homeless  51  51 463     43          0   no 30.212227 43.47607\n    pss_fr  racegrp satreat sexrisk substance treat avg_drinks max_drinks\n1        0    black      no       4   cocaine   yes         13         26\n2        1    white      no       7   alcohol   yes         56         62\n3       13    black      no       2    heroin    no          0          0\n4       11    white     yes       4    heroin    no          5          5\n5       10    black      no       6   cocaine    no         10         13\n6        5    black      no       5   cocaine   yes          4          4\n7        1    black     yes       8   cocaine    no         13         20\n8        4    white     yes       6   alcohol   yes         12         24\n9        5    white      no       8   alcohol    no         71        129\n10       0    white     yes       0    heroin   yes         20         27\n11       0    white      no       2    heroin   yes          0          0\n12      13    black     yes       0   alcohol    no         13         13\n13      13    white     yes       1   alcohol    no         20         31\n14       1    black      no       4   cocaine   yes         13         20\n15       1    white      no       8   alcohol   yes         51         51\n16       7 hispanic     yes       3    heroin   yes          0          0\n17       9    black      no       4    heroin    no          0          0\n18       1    other      no       4   cocaine    no          1          1\n19      13    white      no       3    heroin   yes          9         24\n20      11    black     yes       7   cocaine    no         23         23\n21       8    black      no       4    heroin   yes         26         26\n22      14    black      no       4   cocaine   yes          0          0\n23      10    white      no       6   alcohol    no         34         34\n24       6    black     yes       9   cocaine    no          4          5\n25       6    black      no       7   cocaine    no          6          8\n26       3    white      no       5   cocaine   yes          3          3\n27       6    black      no       4    heroin   yes          7          7\n28       4    white      no       5   alcohol    no         24         48\n29       5    black     yes       2   cocaine   yes          0          0\n30       3    black      no       6   alcohol    no         20         20\n31      12    black      no       0   alcohol    no          3          3\n32       2    black     yes       5   cocaine   yes          6          6\n33      10    black      no       2   cocaine   yes          0          0\n34      10    black      no       0   cocaine   yes          0          0\n35       8    black      no       3   alcohol   yes         32        135\n36       6    white      no       4   alcohol    no          2         24\n37      11    black      no       4    heroin    no          3          3\n38       1    white     yes       0   alcohol    no         27         27\n39      10 hispanic      no       4    heroin    no          3          7\n40       3    white      no       7   cocaine   yes         24         36\n41       4    black      no       7   cocaine   yes          6         12\n42       7    black      no       6   cocaine    no          0          0\n43      14    white      no       4    heroin   yes         13         13\n44      10    black      no       5   alcohol    no         25         28\n45      12    black      no       4   cocaine   yes          6         13\n46      12    black      no       1   alcohol    no         13         61\n47      11    black      no      10    heroin   yes         15         26\n48       6    black      no       6   cocaine    no          7          7\n49       6    other      no       9    heroin   yes          9         15\n50       2    black      no       7   alcohol   yes          5         13\n51       1    black      no       7   cocaine   yes         13         20\n52       8    white      no       3   alcohol    no         34         34\n53      13    other      no       4   cocaine   yes          3          6\n54       1    white     yes       2   alcohol    no         37         43\n55      10    black      no       4   alcohol   yes         36         36\n56       7    black     yes       6    heroin    no         13         15\n57       6    black     yes       7   cocaine    no          3         19\n58      13    white     yes       4   alcohol   yes          3          6\n59       4 hispanic     yes       4    heroin    no          0          0\n60      12    black     yes       6   cocaine   yes         32         32\n61      11    black     yes       4   alcohol    no         35         42\n62       5    white      no       6   alcohol    no         20         20\n63       5    black     yes       9   alcohol    no          7         25\n64       1    black      no       4   alcohol   yes         59        164\n65       8    white     yes       2    heroin   yes          0          0\n66       3    white     yes       6   alcohol   yes         26         51\n67       6    white      no       9   cocaine    no         12         18\n68      14    white      no       3    heroin    no          0          0\n69       4    black      no       5   cocaine   yes         18         36\n70       5    white      no       8   cocaine    no          6         12\n71      10    white      no      12   cocaine    no         13         17\n72       2    black      no       4   cocaine   yes          5          5\n73       4    black      no       9    heroin    no          2          2\n74       9    black     yes       6   cocaine    no        102        102\n75       7    white     yes       6   alcohol   yes          0          0\n76       1 hispanic      no       3    heroin    no         21         21\n77      12    white      no      11    heroin   yes          6          8\n78       1    black      no       7   cocaine   yes          1          1\n79      10    black      no       4   alcohol    no         19         19\n80      13    black      no       4   alcohol   yes          1         22\n81      11    black      no       3   cocaine    no          2          2\n82       9    other      no       5   alcohol   yes          0          0\n83       8    white     yes       2   alcohol    no         26         47\n84       3    black      no       1    heroin   yes          0          0\n85      12    white      no       1    heroin   yes          9         19\n86      14    black      no       4   cocaine    no         10         10\n87       4 hispanic      no       5    heroin   yes          4          5\n88      10    black      no       5   cocaine    no          6         15\n89       9    white      no       3   alcohol    no         26         51\n90       1    other      no       7   alcohol   yes         64         64\n91      10    black     yes       4   cocaine   yes         26         26\n92       9    black      no      10   cocaine   yes          2          3\n93       7    white     yes       3   alcohol    no         33         38\n94       6    black      no       3   cocaine   yes         61        184\n95       5    black      no       2   cocaine    no          2          2\n96       9    black     yes       7   cocaine    no         19         19\n97      12    black     yes       5   alcohol   yes          9         15\n98       1    white     yes       4    heroin    no          0          0\n99       4    white      no       6   alcohol   yes         18         47\n100      8    white      no       0   alcohol   yes         51         51\n101      4    white     yes       5    heroin    no          0          0\n102      9    black      no       6   alcohol    no         36         66\n103      6    black      no       3   alcohol    no         31         91\n104      5    white      no       4    heroin   yes          0          0\n105      7    black      no       4   alcohol   yes         26         69\n106      2    black      no       5   cocaine    no          2         20\n107     14 hispanic      no       4   cocaine   yes          0          0\n108      4    white     yes      13   alcohol    no         51         51\n109      7    black      no       5   alcohol   yes         34         34\n110      4    black      no      10   cocaine    no         39         95\n111      3    black      no       9   cocaine   yes         19         26\n112      6    white     yes       4   alcohol    no         13         13\n113     12    white     yes       4    heroin   yes          0          0\n114     10    white      no       6    heroin    no          0          0\n115      3    other      no       9   cocaine    no         13         13\n116     13    black     yes       6   cocaine   yes          1          1\n117      7    black      no       3   alcohol   yes         22         22\n118      4    black      no       7   cocaine   yes         13         33\n119     11    black     yes       3   cocaine   yes         26         26\n120      5    white     yes       3   alcohol    no         19         30\n121      2    white      no       5   alcohol    no         26         26\n122      2    white      no       0   alcohol    no         13         13\n123      8    black     yes       7   cocaine   yes          3          3\n124      9    black      no       7   cocaine   yes         24         24\n125     11    black      no       4    heroin   yes          0          0\n126      9    other      no       7   cocaine   yes          0          0\n127      7    white      no       0   alcohol    no         53         53\n128      7    black     yes       7   cocaine   yes          7          7\n129      1    black      no       7   alcohol    no         25         25\n130      7 hispanic     yes       9   alcohol    no         15         15\n131      5    black      no       6   alcohol   yes         64        179\n132     12    black      no       4    heroin    no          4          4\n133      9    white     yes       5    heroin   yes          3          6\n134      1    white      no       5   cocaine   yes          2          2\n135      8    white      no       7   alcohol    no         13         13\n136      7    white      no       5   alcohol    no         20         51\n137      8    black      no       9   cocaine   yes          1          3\n138      7    other      no       5   cocaine   yes         38         38\n139      6    black     yes       6    heroin    no          8          8\n140      3    black     yes       6   cocaine   yes          0          0\n141      3    black      no       2   cocaine    no         13         13\n142      8    white      no       5   alcohol   yes         39         39\n143     10    black      no       7   cocaine    no         12         20\n144      9    black     yes       2   cocaine    no          0          0\n145     11    white      no       4    heroin   yes          0          0\n146     11    other     yes       3    heroin    no          1          1\n147      9    white     yes       1   alcohol    no         19         32\n148      2    white      no       6    heroin    no          0          0\n149      8    white      no       4   alcohol   yes         26         51\n150      8    black      no       7   alcohol   yes         19         19\n151      7    black      no       8   cocaine    no          3          6\n152      3    black     yes       9   cocaine   yes          1          1\n153      5    white     yes       5   alcohol    no         12         17\n154     13    black     yes       7   cocaine   yes         29         29\n155      2    white      no       8   alcohol    no         38         38\n156      6    white     yes       0   alcohol    no         12         12\n157      9    black      no       0    heroin    no          4          4\n158      7    white      no       0   alcohol   yes         19         50\n159     11 hispanic      no       3   alcohol   yes         41         54\n160      2    other      no       0    heroin    no          1          3\n161      3    white      no       4    heroin   yes          0          0\n162      7 hispanic      no       5   alcohol    no         59         59\n163      1    white      no       6    heroin   yes         19         19\n164      7    black      no       2   cocaine   yes          8          8\n165     14    black      no      11   cocaine    no         16         20\n166     10    black      no       4   cocaine    no         12         12\n167      8    white      no      11   alcohol    no         26         33\n168      3    white      no       9   alcohol   yes         50         50\n169     14    white      no       0   alcohol   yes         12         20\n170     11    white      no       1    heroin   yes          1          3\n171      0    black      no      14   cocaine    no         13         32\n172      3 hispanic      no       7   cocaine    no         10         13\n173      4    black      no       8   cocaine   yes          3         24\n174     10    white      no       4    heroin   yes         20         20\n175      2    black     yes       7   cocaine    no         19         26\n176     10    white      no       4   alcohol   yes          6         12\n177      2    black     yes       7   alcohol   yes        102        102\n178     10    black      no       7   cocaine    no          1          4\n179      2    other     yes       5    heroin   yes          0          0\n180     12    black      no       8    heroin    no         58         58\n181      2    white      no       4    heroin   yes          9          9\n182      9    black      no       8    heroin    no          0          0\n183      2    black      no       6   cocaine   yes         35         65\n184      5    black      no       8   alcohol   yes         33         51\n185     13    black     yes       3   alcohol    no         19         19\n186     11    black     yes       2   alcohol   yes         58         58\n187      8    other      no       3    heroin    no         32         38\n188     11    white      no       6    heroin    no          0          0\n189      6    white      no       6   cocaine   yes          0          0\n190     10    black      no       3   cocaine   yes          6          6\n191     11    black      no       0   cocaine    no          0          0\n192      6 hispanic      no       6   alcohol    no         18         18\n193     12    white      no       4    heroin    no          0          0\n194      3    white     yes      11   cocaine   yes         38         38\n195     12    black     yes       0   cocaine    no         13         13\n196      5    black      no       3   alcohol   yes          0          0\n197     11    black      no       3   alcohol    no         46         46\n198      4    white     yes       2    heroin   yes         27         30\n199     14    black      no       2   cocaine    no          3          3\n200      7    white      no       4    heroin    no         12         12\n201      3    white      no       5   alcohol   yes         16         26\n202      3    black     yes       4   cocaine   yes          1          6\n203      1    white      no       0   alcohol    no         26         26\n204      2    black     yes       7   alcohol   yes         23         92\n205      0    black     yes       5   alcohol    no         13         13\n206      4    black      no       2   cocaine    no          0          0\n207      2    black      no       8   cocaine    no          4          4\n208      0    white     yes       5   alcohol   yes         26         26\n209      3    black      no       2   cocaine   yes         13         13\n210      1    other      no       5   cocaine   yes         13         13\n211      8    white      no       5   alcohol    no         10         14\n212      5    black      no       4   alcohol    no         23         42\n213     10    black      no       5    heroin    no         42         48\n214     12    white      no       4   alcohol   yes         15         15\n215      6    black      no       4   cocaine   yes         19         20\n216     11    black      no       4   cocaine   yes          0          0\n217      7 hispanic      no       4    heroin    no         13         13\n218     14    black      no       8   cocaine    no          2          3\n219      3    white      no       5    heroin    no         13         26\n220      5    white      no       5   cocaine   yes         14         16\n221      1    white     yes       6   alcohol    no         51         51\n222      3    black      no       7   cocaine   yes         10         26\n223     10    white      no       0   alcohol    no         16         16\n224      7    white      no       1   alcohol   yes        102        102\n225      7    black     yes       2    heroin   yes          1          2\n226      6    black      no       5   cocaine   yes          6         20\n227      6    black      no      11   cocaine    no         27         27\n228     12    black      no       2   cocaine    no          4          4\n229      1    black      no       7   cocaine   yes         27         41\n230     10    black      no       4   cocaine    no          1          1\n231     11    white     yes       1   alcohol    no         54         73\n232     13 hispanic      no       4    heroin   yes         24         36\n233     11    black      no       7   alcohol   yes         10         20\n234      2    white     yes       1   alcohol    no         30         41\n235      9    black      no       4   alcohol   yes         43         43\n236      3    black      no       8   cocaine    no          2          2\n237      4    black      no       0    heroin    no         16         16\n238     12    black      no       4   cocaine   yes          3          3\n239     12    black      no       5   cocaine    no         34         51\n240      7    black     yes       8   cocaine   yes          8          8\n241      1    black      no       1   alcohol   yes         28         28\n242      3    black      no       6   cocaine    no         13         13\n243     13    black     yes       7   cocaine   yes         51         51\n244     11    black     yes      13   alcohol   yes        134        140\n245      6    black     yes       2   alcohol    no          5          6\n246      9    white      no       5    heroin   yes          5          5\n247      3    white      no       4   alcohol    no          3          3\n248      6    black     yes       4   cocaine    no          0          0\n249     11 hispanic      no       3   cocaine    no         26         26\n250     12    white      no       1   alcohol   yes         15         30\n251      4    white      no       4    heroin   yes          9         20\n252      5    white     yes       0   alcohol    no         10         15\n253     10 hispanic      no       3    heroin    no          0          0\n254      6    other      no       2   alcohol   yes         24         45\n255      1    white     yes       0   alcohol   yes         33         51\n256      4 hispanic      no       5    heroin    no          0          0\n257      6 hispanic     yes       4    heroin   yes          8         13\n258     12    black      no       4   alcohol   yes         27         33\n259      2 hispanic     yes       4    heroin   yes          0          0\n260     10    white      no       4    heroin    no          0          0\n261      5 hispanic      no       3    heroin   yes          3          3\n262     14    white      no       4   alcohol   yes         14         20\n263      3    white     yes       2    heroin    no         12         12\n264     11    black      no       6   cocaine    no          1          1\n265      5    black      no       4   cocaine   yes          0          0\n266      2    black      no      11    heroin   yes          1          1\n267     11 hispanic      no       3    heroin   yes          0          0\n268      9    other      no       4   alcohol    no         25         33\n269     11 hispanic      no       0   alcohol    no         42         57\n270      3    white      no       1    heroin   yes          2          2\n271     11    white     yes       6    heroin   yes          6          6\n272     12    black      no       5   cocaine    no         19         19\n273      3    black      no      11   alcohol   yes         29         58\n274      2    black      no       9   alcohol   yes          0          0\n275      4 hispanic      no       4    heroin    no          0          0\n276      2    other      no       0    heroin   yes          0          0\n277      6    black      no       6   cocaine    no         22         32\n278     12    black     yes       6   alcohol   yes         19         19\n279      3    black     yes       5   alcohol    no         13         19\n280      5    black      no       8   cocaine   yes          1          1\n281      7    black      no       6   alcohol    no         67         67\n282     12    black     yes      11   cocaine    no         13         13\n283     10    white      no       2    heroin   yes         20         20\n284     10    black      no       2    heroin   yes          0          0\n285      2    black     yes       7   cocaine   yes          3          9\n286      5    white      no       8   alcohol    no        142        142\n287      3    black     yes       5   alcohol    no         53         53\n288      1    white     yes       0    heroin    no         64         64\n289      8    other      no       7    heroin   yes          0          0\n290      7    other      no       3    heroin    no          2          2\n291     10    white      no       6   alcohol   yes         51         51\n292     11    black     yes       6   cocaine   yes          1          1\n293      7    black      no       9   alcohol    no         24         30\n294     12 hispanic      no       1   alcohol    no         35         35\n295      0    other      no       2   alcohol    no         67         80\n296      0    white      no       4    heroin   yes          0          0\n297      5    black      no       1   cocaine    no         13         26\n298      8    black      no       4   cocaine   yes          6          6\n299      2 hispanic      no       8    heroin   yes         12         12\n300      2 hispanic      no       0   alcohol    no          7          7\n301      5    white      no       7   alcohol   yes         26         26\n302      9    white     yes       6   alcohol   yes         41         56\n303      2 hispanic     yes       7   alcohol    no          3          3\n304      4    black      no       5   alcohol   yes         18         31\n305      0    white      no       9   alcohol    no         38         55\n306      2    black     yes       4   alcohol    no         12         15\n307     13    white      no       1    heroin   yes         26         26\n308      4    black     yes       0    heroin    no          4          4\n309     11 hispanic      no       4   alcohol   yes         32         32\n310      9    black      no       0   cocaine   yes         13         13\n311      5    white      no       4   alcohol    no         34        102\n312      6    black      no       7   cocaine   yes         38         51\n313     13    white     yes       3   alcohol    no          0          0\n314     14    black      no       8   cocaine   yes         13         13\n315     13    white      no       4    heroin    no          0          0\n316      3    black      no       9   cocaine    no          3          3\n317      5    black     yes      11   cocaine   yes         49         49\n318      0    white      no       3   alcohol    no         18         36\n319      1 hispanic     yes       3    heroin   yes          0          0\n320     14    black      no       4   cocaine    no         58         58\n321      5 hispanic      no       4    heroin   yes          2          2\n322      4    black      no       5   cocaine   yes          6         13\n323      6    black      no       5   cocaine   yes          6         13\n324      7    black     yes       6   cocaine    no         10         10\n325      3 hispanic      no       1    heroin   yes          0          0\n326     12    white      no       0   alcohol    no          6         20\n327      2 hispanic     yes       2   cocaine   yes          6          6\n328     10    white      no       2    heroin    no          0          0\n329      9    black      no       6   alcohol   yes         32         32\n330      9    white      no       4   alcohol   yes          6          6\n331      5 hispanic     yes       4   alcohol    no          3         12\n332     11    black     yes       5   cocaine   yes          6          6\n333      1 hispanic     yes       4   cocaine   yes          0          0\n334      6    white      no       0   alcohol   yes         25         25\n335      5    white      no       5   alcohol    no         13         26\n336      3    black     yes       5   alcohol    no         18         18\n337      0    black      no       4   alcohol   yes         13         26\n338      3    black     yes       3    heroin    no          0          0\n339      1    black      no       3   cocaine   yes          2          2\n340      5    black      no       9   cocaine    no         26         38\n341     10    black     yes       8   cocaine   yes          5         25\n342      7    black      no       6   cocaine   yes         10         23\n343     12    black      no       8   cocaine    no          0          0\n344     14    black      no       4    heroin    no          4          4\n345     11    black      no       5   cocaine   yes         29         85\n346      3    other      no       2   alcohol    no         20         20\n347     12    black      no       2   cocaine   yes          3         12\n348      5    white     yes       5    heroin    no          6         12\n349      3    black      no       7   cocaine    no         13         13\n350     12    white     yes       3    heroin   yes         36         36\n351      8    white     yes       3    heroin    no         18         18\n352     14    black      no      12   cocaine   yes          0          0\n353      3 hispanic      no       2    heroin    no         45         45\n354     11    black     yes       2    heroin   yes         13         13\n355      4    white      no       0    heroin    no          4         10\n356      5    white     yes       4   alcohol    no          6         26\n357      5    black      no       3    heroin    no          6          6\n358      8    white      no       4   alcohol    no         25         42\n359     12 hispanic      no       0   alcohol    no         21         21\n360     12    other      no       4    heroin   yes         13         13\n361     11 hispanic      no       2    heroin   yes         37         37\n362      8    black     yes       5   alcohol    no         25         25\n363      4    white     yes       1   alcohol   yes         38         38\n364      8 hispanic      no       3   alcohol    no         12         29\n365      6    black      no       4   cocaine   yes          6         24\n366      3    black      no       5    heroin   yes          6          6\n367      0    white     yes       5    heroin    no          0          0\n368      7    black      no       2    heroin   yes          0          0\n369      4    white     yes       1    heroin   yes          8          8\n370      5    white      no       5   alcohol    no         32         32\n371      9    other      no       9   alcohol    no         24         51\n372      4    white     yes       3   alcohol    no         51         51\n373      3    black      no       4   alcohol   yes         35         35\n374      4 hispanic     yes       2   alcohol    no         73         73\n375      3    white      no       4    heroin   yes          9         31\n376      2    white      no       5   alcohol   yes         51         51\n377      2    black      no       7    heroin    no          6          8\n378      7    white      no       3   alcohol   yes          6         16\n379      0    black      no      10   cocaine   yes          6         13\n380     14    white      no       5    heroin   yes          2          3\n381      5    white      no       6   alcohol   yes         26         41\n382     11    black     yes       6   cocaine   yes          0          0\n383     14    black     yes       5   cocaine    no          1          1\n384      1    black      no       5   cocaine    no         49        109\n385     11 hispanic      no       4    heroin   yes         19         25\n386      8    black      no       1    heroin    no          3         16\n387      5    white      no       2   alcohol    no         38         51\n388     14    white      no       3   alcohol   yes         26         40\n389      6    white      no       5   alcohol    no         83        145\n390      7    white      no       7    heroin    no         32         40\n391      3    black      no       6   alcohol    no         19         19\n392      4 hispanic     yes      12   cocaine   yes         30        101\n393     14    black      no       3   alcohol    no         42         42\n394      4    black     yes       1   cocaine    no          1          1\n395      8    other      no       7   cocaine   yes         18         26\n396      8    white      no       4   alcohol    no         35        105\n397      7 hispanic      no       0   alcohol   yes         20         20\n398     14    white      no       1    heroin    no          0          0\n399      4    black      no       7   cocaine    no         11         14\n400      4 hispanic     yes       2    heroin   yes         26         26\n401      7    white      no       6   alcohol   yes         43         54\n402      4    white      no       4   alcohol    no         19         26\n403      8    white      no       5   cocaine   yes          1          2\n404      9    white     yes      14    heroin   yes         13         26\n405      3    white     yes       4   alcohol   yes         51         51\n406     11    white      no       1   alcohol    no         24         48\n407      1    white      no      10    heroin   yes         13         13\n408      3    white     yes       1   alcohol    no         20         26\n409      7    black     yes       3   alcohol    no         26         26\n410     11    white      no       3   alcohol    no          8         18\n411      5    white      no       8   alcohol    no         61         61\n412      8    black      no       3    heroin    no         13         19\n413      1 hispanic      no       8   alcohol   yes         28         37\n414      4    other      no       5    heroin   yes          6          7\n415      4    other      no       3   alcohol   yes         10         10\n416      7 hispanic      no       8    heroin   yes          0          0\n417     11    white     yes       5   cocaine   yes          4         10\n418      3    black     yes       2   alcohol    no         25         37\n419      8 hispanic      no       9    heroin    no          2          2\n420      3    white      no       0   alcohol   yes         26         26\n421     12    black      no       4   cocaine    no         24         24\n422      9 hispanic      no       3   cocaine   yes          0          0\n423      9    black     yes       8   cocaine   yes         13         13\n424     12    black      no       4   cocaine    no         12         12\n425     11    white      no       2   cocaine    no         12         30\n426      1    black      no       2   cocaine   yes          4          4\n427      0    black      no       7   cocaine    no         12         18\n428      2    black      no       3   cocaine    no          3          3\n429      9    white     yes       2   alcohol    no         51         69\n430      8    black      no       3   cocaine    no          5          5\n431      7    white      no       3   cocaine    no         68         68\n432      3    white      no       5   alcohol   yes         29         29\n433      3    white      no       4   alcohol    no         26         26\n434     13    white      no       4   alcohol   yes          7          8\n435      1    white      no       6    heroin   yes          5          5\n436      1    white     yes       7    heroin    no         32         32\n437      5 hispanic      no       4    heroin    no          0          0\n438      1    white      no       4   alcohol    no         76         78\n439     10    white      no       0   alcohol    no         26         26\n440      2    white      no       8   alcohol   yes         41         62\n441      3    white     yes       4    heroin   yes         18         18\n442     14    white      no       3   alcohol    no         22         30\n443      7 hispanic      no       1    heroin   yes         53         63\n444      2 hispanic      no       3   alcohol   yes         26         32\n445     11    other      no       2   alcohol    no          4         13\n446      6    black     yes       4    heroin    no          3          3\n447      8 hispanic     yes      14   alcohol    no         56         61\n448      5    white     yes       4    heroin    no          0          0\n449      7    white      no       4    heroin   yes          0          0\n450     11    white      no       0   alcohol   yes         13         20\n451      1    white      no       2    heroin    no          1         24\n452      7    black     yes       9   cocaine    no         13         13\n453     11    white      no       4   alcohol    no         51         51\n    hospitalizations\n1                  3\n2                 22\n3                  0\n4                  2\n5                 12\n6                  1\n7                 14\n8                  1\n9                 14\n10                 4\n11                 0\n12                 3\n13                 5\n14                10\n15                 2\n16                 6\n17                 1\n18                 2\n19                 0\n20                 1\n21                 1\n22                 1\n23                 4\n24                 2\n25                 4\n26                 1\n27                 0\n28                 0\n29                 1\n30                 2\n31                10\n32                 0\n33                 1\n34                 1\n35                 1\n36                 2\n37                 0\n38                 7\n39                 0\n40                15\n41                 1\n42                 2\n43                 2\n44                 0\n45                 2\n46                 2\n47                 5\n48                 0\n49                 2\n50                 2\n51                 3\n52                 5\n53                 1\n54                 2\n55                 5\n56                 0\n57                 1\n58                 3\n59                 3\n60                 1\n61                 0\n62                 3\n63                 1\n64                 5\n65                 4\n66                 2\n67                 4\n68                 0\n69                10\n70                 3\n71                 2\n72                 4\n73                 7\n74                 2\n75                 0\n76                 1\n77                 1\n78                 1\n79                 3\n80                 2\n81                 2\n82                 2\n83                 1\n84                 0\n85                 2\n86                 2\n87                 2\n88                 1\n89                20\n90                 9\n91                 1\n92                 2\n93                 1\n94                 3\n95                 1\n96                 0\n97                 2\n98                 0\n99                 2\n100                3\n101                3\n102               20\n103                0\n104                1\n105                3\n106                0\n107                0\n108                2\n109               15\n110               10\n111                0\n112                4\n113                5\n114                9\n115                2\n116                5\n117                1\n118                2\n119                1\n120                3\n121                2\n122                6\n123                1\n124                0\n125                0\n126                4\n127                6\n128                0\n129               10\n130               13\n131                5\n132                1\n133                0\n134                4\n135                2\n136               20\n137                1\n138                2\n139                1\n140                0\n141                1\n142                2\n143                2\n144                1\n145                1\n146                1\n147                8\n148                3\n149                8\n150                1\n151                1\n152                1\n153                4\n154                2\n155               10\n156                4\n157                2\n158                0\n159                1\n160                1\n161                6\n162                4\n163                3\n164                2\n165                3\n166                1\n167               10\n168                3\n169                2\n170                1\n171                4\n172                0\n173               10\n174                1\n175               40\n176                0\n177                1\n178                1\n179                0\n180                2\n181                2\n182                1\n183                1\n184                2\n185                2\n186                1\n187                6\n188                0\n189                2\n190                4\n191                1\n192                0\n193                3\n194                7\n195                3\n196                4\n197                1\n198                1\n199                2\n200                4\n201                3\n202                1\n203                1\n204                3\n205                0\n206                1\n207                1\n208                2\n209                2\n210                2\n211                5\n212                4\n213                2\n214                6\n215                0\n216                4\n217                0\n218                4\n219                1\n220                0\n221                1\n222                1\n223                4\n224                6\n225                2\n226                6\n227                2\n228                1\n229                2\n230                1\n231                8\n232                2\n233                0\n234                2\n235               10\n236                0\n237                2\n238                1\n239                1\n240                0\n241                1\n242                4\n243                1\n244                4\n245                1\n246                2\n247                6\n248                0\n249                0\n250                2\n251                0\n252                3\n253               20\n254                1\n255                2\n256                2\n257                1\n258                6\n259                0\n260                2\n261                0\n262                2\n263                3\n264                2\n265                2\n266                2\n267                0\n268                0\n269                1\n270                0\n271                0\n272                1\n273                1\n274                3\n275               20\n276                3\n277                1\n278                2\n279                0\n280                0\n281                4\n282                1\n283                2\n284                1\n285                1\n286               36\n287                1\n288                1\n289                2\n290                5\n291                2\n292                3\n293                3\n294                1\n295                8\n296                2\n297                5\n298                0\n299                6\n300                1\n301                1\n302                1\n303                0\n304                8\n305                3\n306                0\n307                0\n308                4\n309                0\n310                1\n311                2\n312               15\n313                4\n314                5\n315                1\n316                4\n317                1\n318                0\n319                1\n320                0\n321                2\n322                1\n323                0\n324                1\n325                0\n326                1\n327                0\n328                0\n329                1\n330                8\n331                1\n332                1\n333                3\n334                8\n335                1\n336                2\n337                4\n338                0\n339                0\n340                1\n341                1\n342                0\n343                2\n344                0\n345                0\n346                1\n347                0\n348                0\n349                0\n350                1\n351                1\n352                0\n353                3\n354                0\n355                5\n356                2\n357                4\n358                3\n359                3\n360                2\n361                5\n362                7\n363                2\n364                0\n365                1\n366                0\n367                1\n368                2\n369                2\n370                1\n371               10\n372                3\n373                1\n374                2\n375                4\n376                8\n377                2\n378                8\n379                1\n380                0\n381                5\n382                0\n383                1\n384                2\n385                1\n386                1\n387                4\n388                1\n389                4\n390                2\n391                4\n392                1\n393                3\n394                0\n395               17\n396                8\n397                0\n398                0\n399                2\n400                5\n401                2\n402                2\n403                7\n404                2\n405                5\n406                3\n407                1\n408                5\n409                1\n410                0\n411                1\n412                1\n413                4\n414                0\n415                4\n416                1\n417                0\n418                0\n419                2\n420                0\n421                0\n422                4\n423                2\n424                1\n425                1\n426                2\n427                4\n428                0\n429              100\n430                0\n431                6\n432                1\n433                8\n434                4\n435                0\n436                2\n437                0\n438               10\n439                1\n440                2\n441                1\n442                0\n443                2\n444                2\n445                1\n446                3\n447                1\n448                0\n449                1\n450                0\n451                0\n452                2\n453                1\n\n\nThe HELPrct dataset displayed contains 453 rows and 30 columns of various types of variables. These variables include data related to demographic characteristics (like age, sex), substance use (such as anysub, daysanysub), risks (drugrisk, sexrisk), treatments (treat, hospitalization), and psychological factors (such as cesd score, mcs, pcs). The dataset provides details like the number of days since a participant last used substances, their risk levels, treatment history, average and maximum number of drinks consumed, and hospitalization incidents. It includes a mix of categorical and numeric data, offering a comprehensive look at factors relevant to participants’ treatment and health risks.\n\n\n\n\nHELPrct %&gt;% \n  gf_bar(~substance)\n\n\n\n\n\n\n\n\nThe bar chart illustrates the distribution of primary substances of abuse among the participants in the dataset. The three substances depicted are alcohol, cocaine, and heroin. Alcohol has the highest count, with over 150 participants primarily abusing it. Cocaine comes next, followed by heroin, which has the lowest count among the three substances. This suggests that alcohol abuse is more prevalent among the participants compared to cocaine and heroin.\n\n\n\n\nHELPrct %&gt;%\n  gf_props(~substance, fill=~sex)\n\n\n\n\n\n\n\n\nThis displays the proportion of male and female participants who primarily abuse alcohol, cocaine, or heroin. Each bar is divided to represent the proportion of males (shown in blue) and females (shown in red) for each substance. For alcohol and heroin, males make up a larger portion of the abusers, whereas cocaine has a more balanced proportion between males and females. Overall, more males than females are represented across all three substances of abuse.\n\n\n\n\napartments &lt;- read_csv(\"../../data/apartments.csv\")\n\nRows: 1460 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): GrLivArea;SalePrice\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\napartments\n\n# A tibble: 1,460 × 1\n   `GrLivArea;SalePrice`\n   &lt;chr&gt;                \n 1 1710;208500          \n 2 1262;181500          \n 3 1786;223500          \n 4 1717;140000          \n 5 2198;250000          \n 6 1362;143000          \n 7 1694;307000          \n 8 2090;200000          \n 9 1774;129900          \n10 1077;118000          \n# ℹ 1,450 more rows\n\n\nThe dataset combines two attributes-living area and sale price in each row, allowing for analysis of how living space correlates with the sale price across different apartments.\n\n\n\n\napartments &lt;- read_delim(file=\"../../data/apartments.csv\",delim =\";\")\n\nRows: 1460 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (2): GrLivArea, SalePrice\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe dataset is read using a semicolon (;) delimiter.\n\n\n\n\napartments\n\n# A tibble: 1,460 × 2\n   GrLivArea SalePrice\n       &lt;dbl&gt;     &lt;dbl&gt;\n 1      1710    208500\n 2      1262    181500\n 3      1786    223500\n 4      1717    140000\n 5      2198    250000\n 6      1362    143000\n 7      1694    307000\n 8      2090    200000\n 9      1774    129900\n10      1077    118000\n# ℹ 1,450 more rows\n\n\n\n\n\n\napartments %&gt;% \n  head(10)\n\n# A tibble: 10 × 2\n   GrLivArea SalePrice\n       &lt;dbl&gt;     &lt;dbl&gt;\n 1      1710    208500\n 2      1262    181500\n 3      1786    223500\n 4      1717    140000\n 5      2198    250000\n 6      1362    143000\n 7      1694    307000\n 8      2090    200000\n 9      1774    129900\n10      1077    118000\n\n\nThe first 10 rows of the apartments dataset provide details of apartments based on two key variables: GrLivArea (above-ground living area in square feet) and SalePrice (the sale price in US dollars). The data shows a range of living areas from 1,077 to 2,198 square feet, with corresponding sale prices ranging from $118,000 to $307,000. The dataset highlights variations in apartment sizes and their market prices, suggesting that larger apartments tend to have higher sale prices. This provides a preliminary glimpse into how apartment size might influence property pricing.\n\n\n\n\nglimpse(apartments)\n\nRows: 1,460\nColumns: 2\n$ GrLivArea &lt;dbl&gt; 1710, 1262, 1786, 1717, 2198, 1362, 1694, 2090, 1774, 1077, …\n$ SalePrice &lt;dbl&gt; 208500, 181500, 223500, 140000, 250000, 143000, 307000, 2000…\n\n\nThe glimpse gives an overview of the relationship between the living area and sale price for different apartments.\n\n\n\n\ninspect(apartments)\n\n\nquantitative variables:  \n       name   class   min       Q1 median        Q3    max       mean\n1 GrLivArea numeric   334   1129.5   1464   1776.75   5642   1515.464\n2 SalePrice numeric 34900 129975.0 163000 214000.00 755000 180921.196\n          sd    n missing\n1   525.4804 1460       0\n2 79442.5029 1460       0\n\n\nThe ground living area ranges from 334 to 5,642 square feet, with a median of 1,464 square feet and an average of 1,515 square feet. The sale prices vary from $34,900 to $755,000, with a median price of $163,000 and an average price of around $180,921. The inspection shows a substantial spread in both the living areas and the sale prices of apartments, as indicated by the large standard deviations.\n\n\n\n\nskim(apartments)\n\n\nData summary\n\n\nName\napartments\n\n\nNumber of rows\n1460\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGrLivArea\n0\n1\n1515.46\n525.48\n334\n1129.5\n1464\n1776.75\n5642\n▇▇▁▁▁\n\n\nSalePrice\n0\n1\n180921.20\n79442.50\n34900\n129975.0\n163000\n214000.00\n755000\n▇▅▁▁▁\n\n\n\n\n\nThe skim summary of the apartments dataset shows that there are no missing values in either of the two variables, GrLivArea and SalePrice. The dataset has a complete rate of 1 for both variables. The mean ground living area is 1,515.464 square feet with a standard deviation of 525.4804, indicating variation in apartment sizes. Similarly, the mean sale price is $180,921.20 with a higher standard deviation of $79,442.50, reflecting significant variability in apartment prices.\n\n\n\nQuantitative Data\n\nGrLivArea (dbl): The above-ground living area in square feet for each apartment.\nSalePrice (dbl): The sale price of the apartment in US dollars.\n\n\n\n\n\navg_sale_price &lt;- mean(apartments$SalePrice, na.rm = TRUE)\navg_sale_price\n\n[1] 180921.2\n\n\nThe average sale price of the apartments in the dataset is approximately $180,921.2. This figure is calculated by taking the mean of the SalePrice column, which represents the sale prices of the apartments.\n\n\n\n\nquantile(apartments$SalePrice, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)\n\n   25%    50%    75% \n129975 163000 214000 \n\n\nThis means that 25% of the apartments have a sale price below $129,975, 50% are below $163,000, and 75% are below $214,000.\n\n\n\n\nmedian(apartments$GrLivArea, na.rm = TRUE)\n\n[1] 1464\n\nmean(apartments$GrLivArea, na.rm = TRUE)\n\n[1] 1515.464\n\n\nThese values suggest that most apartments have a living area close to these sizes, with the median indicating the middle value and the mean reflecting the average size across the dataset.\n\n\n\n\ngf_histogram(~ GrLivArea, data = apartments, binwidth = 100, \n             color = \"green\", alpha = 0.6) %&gt;%\n  gf_labs(title = \"Distribution of Living Area Sizes\", \n          x = \"Living Area (sq ft)\", \n          y = \"Count\") %&gt;%\n  gf_theme(theme_minimal())\n\n\n\n\n\n\n\n\nThe majority of apartments have a living area between 1,000 and 2,500 square feet, with a peak around 1,500 to 2,000 square feet. There are fewer apartments with very small or very large living areas, and the distribution shows a right-skew, with a small number of larger apartments exceeding 3,000 square feet. This suggests that most apartments in the dataset fall within the mid-range of living areas.\n\n\n\n\ngf_histogram(~ GrLivArea, data = apartments, fill = \"red\", bins = 50) %&gt;%\n  gf_labs(x = \"Living Area (sqft)\", y = \"Count\", title = \"Frequency of Different Living Area Sizes\")\n\n\n\n\n\n\n\n\nMost apartments have living areas between 1,000 and 2,000 square feet, with a noticeable peak around 1,500 to 2,000 square feet. As the living area increases beyond 2,500 square feet, the frequency of apartments decreases significantly. Few apartments have living areas larger than 3,500 square feet, indicating that larger apartments are much less common.\n\n\n\n\napartments$PricePerSqFt &lt;- apartments$SalePrice / apartments$GrLivArea\ngf_histogram(~ PricePerSqFt, data = apartments, bins = 50, fill = \"yellow\", color = \"orange\") %&gt;%\n  gf_labs(x = \"Price per Square Foot\", y = \"Count\", title = \"Distribution of Price per Square Foot\")\n\n\n\n\n\n\n\nsummary(apartments$PricePerSqFt)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  28.36   99.82  120.10  120.57  138.70  276.25 \n\n\nMost apartments are priced between $75 and $125 per square foot, with the highest concentration just below $100. As the price per square foot increases beyond $150, the frequency decreases significantly, with very few apartments exceeding $200 per square foot. This indicates that the majority of apartments are within a mid-range price, with fewer properties being priced at the higher end.\n\n\n\n\nfert &lt;- read_csv(\"../../data/Fertility.csv\")\n\nRows: 254654 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): morekids, gender1, gender2, afam, hispanic, other\ndbl (3): rownames, age, work\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nfert\n\n# A tibble: 254,654 × 9\n   rownames morekids gender1 gender2   age afam  hispanic other  work\n      &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt;\n 1        1 no       male    female     27 no    no       no        0\n 2        2 no       female  male       30 no    no       no       30\n 3        3 no       male    female     27 no    no       no        0\n 4        4 no       male    female     35 yes   no       no        0\n 5        5 no       female  female     30 no    no       no       22\n 6        6 no       male    female     26 no    no       no       40\n 7        7 no       female  male       29 no    no       no        0\n 8        8 no       male    male       33 no    no       no       52\n 9        9 no       female  male       29 no    no       no        0\n10       10 no       male    female     27 no    no       no        0\n# ℹ 254,644 more rows\n\n\nThe Fertility dataset consists of 254,654 rows and 9 columns, capturing demographic and work-related information. It includes both quantitative and qualitative variables. The quantitative data, such as age and work experience, shows that the individuals range in age from 26 to 35, with work experience varying between 0 to 52 years. The qualitative data provides insights into factors like gender (gender1, gender2), ethnicity (African American, Hispanic, and other ethnicities), and whether individuals have more children (morekids).\n\n\n\n\nfert %&gt;% \n  head(10)\n\n# A tibble: 10 × 9\n   rownames morekids gender1 gender2   age afam  hispanic other  work\n      &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt;\n 1        1 no       male    female     27 no    no       no        0\n 2        2 no       female  male       30 no    no       no       30\n 3        3 no       male    female     27 no    no       no        0\n 4        4 no       male    female     35 yes   no       no        0\n 5        5 no       female  female     30 no    no       no       22\n 6        6 no       male    female     26 no    no       no       40\n 7        7 no       female  male       29 no    no       no        0\n 8        8 no       male    male       33 no    no       no       52\n 9        9 no       female  male       29 no    no       no        0\n10       10 no       male    female     27 no    no       no        0\n\n\nThe first 10 rows of the Fertility dataset provide a snapshot of individuals, focusing on whether they desire more children (“morekids”), gender roles of both partners (“gender1” and “gender2”), age, ethnicity (whether they are African American “afam” or Hispanic), and work experience. The data shows a mix of individuals with varying work experience, ranging from 0 to 52 years, and includes demographic details such as gender and ethnicity. Most individuals in these first 10 rows do not desire more children.\n\n\n\n\nglimpse(fert)\n\nRows: 254,654\nColumns: 9\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ morekids &lt;chr&gt; \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"…\n$ gender1  &lt;chr&gt; \"male\", \"female\", \"male\", \"male\", \"female\", \"male\", \"female\",…\n$ gender2  &lt;chr&gt; \"female\", \"male\", \"female\", \"female\", \"female\", \"female\", \"ma…\n$ age      &lt;dbl&gt; 27, 30, 27, 35, 30, 26, 29, 33, 29, 27, 28, 28, 35, 34, 32, 2…\n$ afam     &lt;chr&gt; \"no\", \"no\", \"no\", \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ hispanic &lt;chr&gt; \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"…\n$ other    &lt;chr&gt; \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"…\n$ work     &lt;dbl&gt; 0, 30, 0, 0, 22, 40, 0, 52, 0, 0, 0, 52, 52, 52, 8, 7, 0, 40,…\n\n\nThe glimpse gives a quick summary of the structure of the data, highlighting the types of variables and their initial values.\n\n\n\n\ninspect(fert)\n\n\ncategorical variables:  \n      name     class levels      n missing\n1 morekids character      2 254654       0\n2  gender1 character      2 254654       0\n3  gender2 character      2 254654       0\n4     afam character      2 254654       0\n5 hispanic character      2 254654       0\n6    other character      2 254654       0\n                                   distribution\n1 no (61.9%), yes (38.1%)                      \n2 male (51.4%), female (48.6%)                 \n3 male (51.3%), female (48.7%)                 \n4 no (94.8%), yes (5.2%)                       \n5 no (92.6%), yes (7.4%)                       \n6 no (94.4%), yes (5.6%)                       \n\nquantitative variables:  \n      name   class min       Q1   median       Q3    max         mean\n1 rownames numeric   1 63664.25 127327.5 190990.8 254654 127327.50000\n2      age numeric  21    28.00     31.0     33.0     35     30.39327\n3     work numeric   0     0.00      5.0     44.0     52     19.01833\n            sd      n missing\n1 73512.422063 254654       0\n2     3.386447 254654       0\n3    21.867277 254654       0\n\n\nThe categorical variables capture demographic information, such as whether an individual has more children (with 61.9% indicating “no” and 38.1% indicating “yes”), the gender of the parents (roughly evenly split between male and female), and ethnic background (with 94.8% identifying as non-African American and 92.6% identifying as non-Hispanic). The quantitative variables include age, with a median of 31 years and a range from 21 to 35 years, and hours worked per week, with a median of 5 hours and a range extending up to 52 hours. This dataset provides a broad demographic and work-related profile of individuals.\n\n\n\n\nskim(fert)\n\n\nData summary\n\n\nName\nfert\n\n\nNumber of rows\n254654\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmorekids\n0\n1\n2\n3\n0\n2\n0\n\n\ngender1\n0\n1\n4\n6\n0\n2\n0\n\n\ngender2\n0\n1\n4\n6\n0\n2\n0\n\n\nafam\n0\n1\n2\n3\n0\n2\n0\n\n\nhispanic\n0\n1\n2\n3\n0\n2\n0\n\n\nother\n0\n1\n2\n3\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1\n127327.50\n73512.42\n1\n63664.25\n127327.5\n190990.8\n254654\n▇▇▇▇▇\n\n\nage\n0\n1\n30.39\n3.39\n21\n28.00\n31.0\n33.0\n35\n▁▃▅▇▇\n\n\nwork\n0\n1\n19.02\n21.87\n0\n0.00\n5.0\n44.0\n52\n▇▁▁▁▃\n\n\n\n\n\nFrom the skim summary, the dataset has no missing values across all columns. The age of individuals in the dataset ranges from 21 to 35 years, with a mean of approximately 30. The work variable ranges from 0 to 52, with a mean value of around 19, indicating a spread of work hours or some related measurement.\n\n\n\n\n\n\n\nrowname (dbl): The index or row number of the dataset.\nage (dbl): The age of individuals in the dataset.\nwork (dbl): The number of years the individuals have worked.\n\n\n\n\n\nmorekids (chr): Indicates whether the individual has more kids (e.g., yes, no).\ngender1 (chr): The gender of the individual (e.g., male, female).\ngender2 (chr): Another column representing gender (e.g., male, female).\nafam (chr): Indicates African American status (e.g., yes, no).\nhispanic (chr): Indicates Hispanic ethnicity (e.g., yes, no).\nother (chr): Indicates whether the individual belongs to another ethnic group (e.g., yes, no).\n\n\n\n\n\ngf_bar(~ age, data = fert, bins = 30, fill = \"purple\") %&gt;%\n  gf_labs(x = \"Age\", y = \"Count\", title = \"Distribution of Age\")\n\n\n\n\n\n\n\n\nThe distribution of ages in the fertility dataset shows that the majority of individuals fall between the ages of 25 and 35. There is a noticeable peak around the ages of 30 to 33, where the count of individuals reaches its highest point. The dataset contains fewer individuals under the age of 25 and over the age of 35, indicating a concentration of respondents in their late 20s to early 30s. This histogram suggests that the dataset primarily includes individuals in this middle age range, which could be typical for studies related to fertility.\n\n\n\n\ngf_bar(~ morekids, data = fert, fill = \"lightgreen\") %&gt;%\n  gf_labs(x = \"More Children\", y = \"Count\", title = \"Proportion of Individuals with More Children\")\n\n\n\n\n\n\n\n\nA larger portion of individuals, over 150,000, indicated that they do not have more children, while a smaller group, approximately 100,000, reported having more children. This indicates that the majority of respondents do not have additional children compared to those who do. The distribution suggests a notable difference between the two groups, with fewer individuals opting for more children.\n\n\n\n\ngf_histogram(~ work, data = fert, bins = 20, fill = \"orange\") %&gt;%\n  gf_labs(x = \"Work Hours\", y = \"Count\", title = \"Distribution of Work Hours\")\n\n\n\n\n\n\n\n\nThe histogram illustrates the distribution of work hours across individuals. A significant proportion of the individuals report zero work hours, as seen by the large spike at the beginning of the graph. There are also smaller groups of individuals with higher work hours, particularly around the 40-hour mark, which is typically considered a full-time workload. This suggests that many individuals in the dataset do not work, while those who do often work around 40 hours per week. The distribution is heavily skewed toward the lower end of the work hours scale.\n\n\n\n\ngf_props(~ gender1, data = fert, fill = \"lightblue\") %&gt;%\n  gf_labs(x = \"Gender 1\", y = \"Count\", title = \"Gender 1 Distribution\")\n\n\n\n\n\n\n\ngf_props(~ gender2, data = fert, fill = \"darkblue\") %&gt;%\n  gf_labs(x = \"Gender 2\", y = \"Count\", title = \"Gender 2 Distribution\")\n\n\n\n\n\n\n\n\nThe fertility dataset presents a balanced distribution of genders across both the Gender 1 and Gender 2 categories. In both groups, males and females are represented almost equally, as shown by the bar charts. The proportion of males in Gender 1 is slightly higher at 51.4%, while the proportion of females is 48.6%. Similarly, in Gender 2, the male proportion is 51.3%, with females comprising 48.7%. This even distribution highlights that gender representation is fairly uniform within the dataset, providing a balanced basis for further analysis regarding gender-related variables.\n\n\n\n\ngf_bar(~ afam, data = fert, fill = \"lightpink\") %&gt;%\n  gf_labs(x = \"African American\", y = \"Count\", title = \"African American Status Distribution\")\n\n\n\n\n\n\n\ngf_bar(~ hispanic, data = fert, fill = \"violet\") %&gt;%\n  gf_labs(x = \"Hispanic\", y = \"Count\", title = \"Hispanic Status Distribution\")\n\n\n\n\n\n\n\n\nThe two graphs show the distribution of African American and Hispanic statuses within the dataset. For both variables, the majority of individuals are classified as “no,” indicating they are not African American or Hispanic, while a smaller proportion is classified as “yes,” indicating they are. This suggests that the dataset has a relatively low representation of both African American and Hispanic individuals."
  },
  {
    "objectID": "posts/Day 3/index.html#introduction",
    "href": "posts/Day 3/index.html#introduction",
    "title": "Day 3",
    "section": "",
    "text": "We are working with bar graphs today.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\n\n\n\n\ntaxi &lt;- read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/modeldata/taxi.csv\")\n\nRows: 10000 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): tip, company, local, dow, month\ndbl (3): rownames, distance, hour\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntaxi\n\n# A tibble: 10,000 × 8\n   rownames tip   distance company                      local dow   month  hour\n      &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;                        &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1        1 yes      17.2  Chicago Independents         no    Thu   Feb      16\n 2        2 yes       0.88 City Service                 yes   Thu   Mar       8\n 3        3 yes      18.1  other                        no    Mon   Feb      18\n 4        4 yes      20.7  Chicago Independents         no    Mon   Apr       8\n 5        5 yes      12.2  Chicago Independents         no    Sun   Mar      21\n 6        6 yes       0.94 Sun Taxi                     yes   Sat   Apr      23\n 7        7 yes      17.5  Flash Cab                    no    Fri   Mar      12\n 8        8 yes      17.7  other                        no    Sun   Jan       6\n 9        9 yes       1.85 Taxicab Insurance Agency Llc no    Fri   Apr      12\n10       10 yes       1.47 City Service                 no    Tue   Mar      14\n# ℹ 9,990 more rows\n\n\nThe taxi dataset contains 10,000 entries, detailing information about individual taxi rides. It includes whether a tip was given, the distance of the ride, the company providing the service, and whether the ride was local. Additionally, it records the day of the week, the month, and the hour the ride took place. The dataset allows for analyzing patterns in tipping, ride distances, and usage trends by time (day, month, and hour) as well as comparing performance across different taxi companies. This can provide insights into ride behaviors and preferences.\n\n\n\n\nglimpse(taxi)\n\nRows: 10,000\nColumns: 8\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ tip      &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n$ distance &lt;dbl&gt; 17.19, 0.88, 18.11, 20.70, 12.23, 0.94, 17.47, 17.67, 1.85, 1…\n$ company  &lt;chr&gt; \"Chicago Independents\", \"City Service\", \"other\", \"Chicago Ind…\n$ local    &lt;chr&gt; \"no\", \"yes\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"no\", \"no\", \"no\",…\n$ dow      &lt;chr&gt; \"Thu\", \"Thu\", \"Mon\", \"Mon\", \"Sun\", \"Sat\", \"Fri\", \"Sun\", \"Fri\"…\n$ month    &lt;chr&gt; \"Feb\", \"Mar\", \"Feb\", \"Apr\", \"Mar\", \"Apr\", \"Mar\", \"Jan\", \"Apr\"…\n$ hour     &lt;dbl&gt; 16, 8, 18, 8, 21, 23, 12, 6, 12, 14, 18, 11, 12, 19, 17, 13, …\n\n\nThis glimpse of the taxi dataset provides an overview of its 10,000 rows and 8 columns. This structure gives a clear, organized view of ride-specific information.\n\n\n\n\ninspect(taxi)\n\n\ncategorical variables:  \n     name     class levels     n missing\n1     tip character      2 10000       0\n2 company character      7 10000       0\n3   local character      2 10000       0\n4     dow character      7 10000       0\n5   month character      4 10000       0\n                                   distribution\n1 yes (92.1%), no (7.9%)                       \n2 other (27.1%) ...                            \n3 no (81.2%), yes (18.8%)                      \n4 Thu (19.6%), Wed (17.5%), Tue (16.3%) ...    \n5 Apr (31.8%), Mar (31.4%), Feb (20.4%) ...    \n\nquantitative variables:  \n      name   class min      Q1  median        Q3     max        mean\n1 rownames numeric   1 2500.75 5000.50 7500.2500 10000.0 5000.500000\n2 distance numeric   0    0.94    1.78   15.5625    42.3    6.224144\n3     hour numeric   0   11.00   15.00   18.0000    23.0   14.177300\n           sd     n missing\n1 2886.895680 10000       0\n2    7.381397 10000       0\n3    4.359904 10000       0\n\n\nThe inspection of the taxi dataset shows that it contains 10,000 entries with both categorical and quantitative variables. The categorical variables include tip, company, local, dow (day of the week), and month, all of which are character types. For example, 92.1% of rides resulted in a tip, and 81.2% of the rides were local. The quantitative variables include rownames, distance, and hour, all of which are numeric. The distance of rides ranges from 0 to 42.3 miles, with a mean of 6.22 miles, and the hour variable represents the time of day, ranging from 0 to 23.\n\n\n\n\nskim(taxi)\n\n\nData summary\n\n\nName\ntaxi\n\n\nNumber of rows\n10000\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ntip\n0\n1\n2\n3\n0\n2\n0\n\n\ncompany\n0\n1\n5\n28\n0\n7\n0\n\n\nlocal\n0\n1\n2\n3\n0\n2\n0\n\n\ndow\n0\n1\n3\n3\n0\n7\n0\n\n\nmonth\n0\n1\n3\n3\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1\n5000.50\n2886.90\n1\n2500.75\n5000.50\n7500.25\n10000.0\n▇▇▇▇▇\n\n\ndistance\n0\n1\n6.22\n7.38\n0\n0.94\n1.78\n15.56\n42.3\n▇▁▂▁▁\n\n\nhour\n0\n1\n14.18\n4.36\n0\n11.00\n15.00\n18.00\n23.0\n▁▃▅▇▃\n\n\n\n\n\nThis summary provides a detailed breakdown of the dataset’s completeness and distribution, making it well-prepared for further analysis.\n\n\n\n\ntaxi_modified &lt;- taxi %&gt;%\n  dplyr::mutate(\n    local = factor(local,\n      levels = c(\"no\", \"yes\"),\n      labels = c(\"no\", \"yes\"),\n      ordered = TRUE\n    ),\n    dow = factor(dow,\n      levels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),\n      labels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),\n      ordered = TRUE\n    ),\n    month = factor(month,\n      levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"),\n      labels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"),\n      ordered = TRUE\n    )\n  )\nglimpse(taxi_modified)\n\nRows: 10,000\nColumns: 8\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ tip      &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n$ distance &lt;dbl&gt; 17.19, 0.88, 18.11, 20.70, 12.23, 0.94, 17.47, 17.67, 1.85, 1…\n$ company  &lt;chr&gt; \"Chicago Independents\", \"City Service\", \"other\", \"Chicago Ind…\n$ local    &lt;ord&gt; no, yes, no, no, no, yes, no, no, no, no, no, no, no, yes, no…\n$ dow      &lt;ord&gt; Thu, Thu, Mon, Mon, Sun, Sat, Fri, Sun, Fri, Tue, Tue, Sun, W…\n$ month    &lt;ord&gt; Feb, Mar, Feb, Apr, Mar, Apr, Mar, Jan, Apr, Mar, Mar, Apr, A…\n$ hour     &lt;dbl&gt; 16, 8, 18, 8, 21, 23, 12, 6, 12, 14, 18, 11, 12, 19, 17, 13, …\n\n\nThis modified version of the taxi dataset includes the conversion of several variables into factors with ordered levels. Specifically, the variables local, dow, and month have been converted into factors. Each has been assigned specific ordered levels. The local variable indicates whether a ride was local (“no” or “yes”), while dow is now ordered from Monday to Sunday, and month from January to April. This change improves the dataset for analysis where the natural order of days and months is important, making it easier to perform time-based analyses or comparisons.\n\n\n\n\ngf_bar(~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n# gf_labs- Metadata about the graph\n\nThe bar chart titled “Counts of Tips” displays the frequency of taxi rides where a tip was given versus those where no tip was provided. The chart shows a significantly higher count of rides where a tip was given, with over 7,500 rides including a tip, compared to a much smaller count of rides without a tip, which is under 1,000. This indicates that the majority of taxi rides in this dataset included a tip.\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    colour = ~local,\n  ) %&gt;%\n  gf_labs(title = \"Plot 2A: Colour Bar Chart\")\n\n\n\n\n\n\n\n# colour-outline colour\n\nThis colour-coded bar chart titled “Plot 2A: Colour Bar Chart” displays the count of taxi rides where a tip was given or not, with an additional distinction based on whether the ride was local or not. The darker bars represent non-local rides, while the lighter-coloured edges represent local rides.From the chart, it is clear that the majority of taxi rides where a tip was given were non-local, as the darker colour dominates the “yes” category. Similarly, for rides without a tip, the majority are also non-local. There are relatively few local rides, indicated by the lighter-coloured edges, in both the tip and no-tip categories.\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n  ) %&gt;%\n  gf_labs(title = \"Plot 2B: Stacked Bar Chart\")\n\n\n\n\n\n\n\n# fill- fill the bar with a colour or variable\n\nThis stacked bar chart titled “Plot 2B: Stacked Bar Chart” shows the distribution of taxi rides based on whether a tip was given, with the additional breakdown of local and non-local rides. The purple sections represent non-local rides, while the yellow sections represent local rides. In the “yes” category (rides with a tip), most of the rides are non-local (purple), with a smaller portion being local (yellow). Similarly, in the “no” category (rides without a tip), the majority are also non-local rides.\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n    position = \"dodge\"\n  ) %&gt;%\n  gf_labs(title = \"Plot 2C: Dodged Bar Chart\")\n\n\n\n\n\n\n\n\nThis “Dodged Bar Chart” (Plot 2C) provides a side-by-side comparison of taxi rides where tips were given or not, categorized by whether the ride was local or non-local. The purple bars represent non-local rides, and the yellow bars represent local rides.\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~tip,\n    fill = ~local,\n    position = \"fill\"\n  ) %&gt;%\n  gf_labs(\n    title = \"Plot 2D: Filled Bar Chart\",\n    subtitle = \"Shows Per group differences in Proportions!\"\n  )# position = \"fill\"- Used for proportions\n\n\n\n\n\n\n\n\nThis “Filled Bar Chart” (Plot 2D) shows the proportion of local and non-local taxi rides for both the tipping and non-tipping categories. The purple colour represents non-local rides, and the yellow colour represents local rides.This chart emphasizes the relative proportion of local versus non-local rides rather than the absolute counts, making it useful for understanding the distribution of ride types across tipping behaviour.\n\n\n\n\ntaxi_modified %&gt;%\n  gf_bar(~company, fill = ~tip, position = \"fill\") %&gt;%\n  gf_labs(\n    title = \"Plot 3A: Proportion of taxi rides where tips were given or not, broken down by different taxi companies\"\n  ) \n\n\n\n\n\n\n\n\nThis “Filled Bar Chart” (Plot 3A) displays the proportion of taxi rides where tips were given or not, broken down by different taxi companies. The blue segments represent rides where tips were given, and the red segments represent rides without tips. From the chart, it is clear that for all companies, the majority of rides resulted in a tip, while the non-tipping rides make up a smaller proportion across all companies. Some companies, like “Flash Cab,” have a slightly larger proportion of non-tipping rides compared to others, but overall, tipping is the dominant behaviour for all the companies displayed. This chart emphasizes the tipping pattern across different taxi providers, showing relatively consistent behaviour.\n\n\n\n\ngf_bar(~hour, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 4: Counts of Tips by Hour\")\n\n\n\n\n\n\n\n\nThe “Counts of Tips by Hour” chart shows the distribution of taxi rides and tipping behaviour throughout the day. The number of rides increases steadily during the morning, peaks between 2 PM and 4 PM, and then declines in the evening. Most rides result in a tip, as indicated by the large blue bars across all hours, with a smaller proportion of non-tipping rides (red bars). The highest concentration of rides and tips occurs during the afternoon hours, while early morning and late evening see fewer rides overall. This pattern highlights that tipping is consistent throughout the day, especially during peak ride times.\n\n\n\n\ngf_bar(~dow, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 5: Counts of Tips by Day of Week\")\n\n\n\n\n\n\n\n\nThe “Counts of Tips by Day of Week” chart shows the number of taxi rides and tipping behaviour across different days of the week. Thursdays have the highest number of rides, followed by Wednesdays, while the weekends (Saturday and Sunday) have the lowest ride counts. Across all days, most rides result in a tip, as indicated by the blue bars. A small portion of rides, particularly on weekdays, do not result in a tip, shown by the red bars. Overall, tipping behavior is consistent throughout the week, but ride volumes peak midweek and decrease during the weekend.\n\n\n\n\ngf_bar(~month, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 6: Counts of Tips by Month\")\n\n\n\n\n\n\n\n\nThe bar chart illustrates the distribution of taxi rides and tipping behaviour over the months of January through April. March and April show the highest ride counts, both exceeding 3,000 rides, with a significant majority of these rides resulting in tips. February has a moderate number of rides, slightly lower than March and April, but tipping behavior remains strong. January has the fewest rides, but similarly, most rides result in tips. Overall, tipping appears consistent across all four months, with a clear trend of most taxi rides receiving tips, regardless of the month.\n\n\n\n\ngf_bar(~ month | dow, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 7: Counts of Tips by Day of Week and Month\")\n\n\n\n\n\n\n\n\nThe multi-faceted bar chart depicts the counts of taxi rides and tipping patterns across different days of the week (Monday to Sunday) and months (January to April). For most days of the week, March and April show higher counts of rides compared to January and February. Thursdays and Fridays have the highest ride counts, with a strong tendency toward tipping, particularly in March and April. Sundays generally have the fewest rides but maintain a steady tipping trend. Overall, tipping behaviour remains consistent across different days, with the majority of rides receiving tips, especially as the year progresses into spring months.\n\n\n\n\ngf_bar(~ dow | hour, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(\n    title = \"Plot 8A: Counts of Tips by Hour and Day of Week\",\n  )\n\n\n\n\n\n\n\n\nThe bar chart shows the distribution of taxi rides and tipping behaviour across different hours of the day and days of the week. Tipping generally follows a similar pattern throughout the week, with the highest ride counts and tips occurring between 8 AM and 6 PM, particularly around midday. Monday through Friday sees more rides, with a peak tipping period from 8 AM to 3 PM. The early morning and late evening hours (before 7 AM and after 9 PM) have significantly fewer rides and tips. Weekends, especially Sundays, show lower overall ride and tipping activity throughout all hours of the day.\n\n\n\n\ngf_bar(~ dow | hour, fill = ~tip, position =\"fill\", data = taxi_modified) %&gt;%\n  gf_labs(\n    title = \"Plot 8B: Proportions of Tips by Hour and Day of Week\",\n  )\n\n\n\n\n\n\n\n\nThe bar chart visualizes the proportion of taxi rides that result in tips across different hours of the day ( segregated as multiple graphs) and days of the week ( x-axis). The consistent blue (representing tips) across most hours and days suggests that a large majority of rides result in tipping, regardless of the time or day. However, some fluctuations occur, particularly during early morning hours (2 AM - 5 AM) on weekdays, when the percentage of rides without tips (in red) increases slightly. Despite these minor variations, tipping appears to be a regular part of most rides across all hours and days.\n\n\n\n\ngf_bar(~ hour | dow, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(\n    title = \"Plot 9: Counts of Tips by Hour and Day of Week\",\n  )\n\n\n\n\n\n\n\n\nThe chart illustrates the distribution of taxi rides that resulted in tips across different hours of the day (x-axis) for each day of the week( shown as different graphs). The data reveals that tipping patterns are fairly consistent throughout the week, with peak hours for tipping occurring in the late morning to afternoon (around 9 AM to 3 PM). The chart also shows that there are fewer rides without tips (in red) during these peak hours, while early morning and late-night hours, especially on weekends, tend to have a smaller proportion of tipping. Thursdays and Fridays appear to have the highest number of taxi rides with tips.\n\n\n\n\ngf_bar(~hour, fill = ~tip, position =\"fill\", data = taxi_modified) %&gt;%\n  gf_labs(\n    title = \"Plot 10: Counts of Tips by Hour\",\n  )\n\n\n\n\n\n\n\n\nThis bar chart illustrates the proportion of taxi rides that resulted in tips (in blue) versus no tips (in red) across different hours of the day. The majority of taxi rides during all hours tend to result in a tip, as indicated by the dominant blue colour in the chart. There is a slightly higher proportion of rides without tips in the early morning (around 1 AM to 5 AM) and later in the night, but overall, tipping remains consistent throughout the day, with a slight dip in tip occurrences during off-peak hours.\n\n\n\n\ngf_bar(~dow, fill = ~tip, position =\"fill\", data = taxi_modified) %&gt;%\n  gf_labs(\n    title = \"Plot 11: Counts of Tips by Day of Week\",\n  )\n\n\n\n\n\n\n\n\nThis bar chart shows the proportion of taxi rides that received tips (in blue) versus no tips (in red) for each day of the week. Across all days, a majority of rides result in tips, as shown by the larger blue segments in each bar. The proportion of no-tips (red) remains fairly consistent throughout the week, with no significant differences between the days. This suggests that tipping behaviour is relatively uniform, regardless of the day of the week.\n\n\n\n\ndata(\"HELPrct\")\nHELPrct\n\n    age anysubstatus anysub cesd  d1 daysanysub dayslink drugrisk e2b female\n1    37            1    yes   49   3        177      225        0  NA      0\n2    37            1    yes   30  22          2       NA        0  NA      0\n3    26            1    yes   39   0          3      365       20  NA      0\n4    39            1    yes   15   2        189      343        0   1      1\n5    32            1    yes   39  12          2       57        0   1      0\n6    47            1    yes    6   1         31      365        0  NA      1\n7    49           NA   &lt;NA&gt;   52  14         NA      334        0   1      1\n8    28            1    yes   32   1         47      365        7   8      0\n9    50            1    yes   50  14         31      365       18   7      1\n10   39            1    yes   46   4        115      382       20   3      0\n11   34           NA   &lt;NA&gt;   46   0         NA      365        8  NA      1\n12   58            0     no   49   3        192      365        0  NA      1\n13   58            1    yes   22   5          6      365        0  NA      0\n14   60            1    yes   36  10          6       22        0   1      0\n15   36            1    yes   43   2          0      443        0  NA      0\n16   28            1    yes   35   6         27       41        0   2      1\n17   35            1    yes   19   1          2      405        0  NA      0\n18   29            0     no   40   2        220      449        0   1      0\n19   27            0     no   52   0        198       49       10   4      1\n20   27            1    yes   37   1         52      367        0  NA      0\n21   41           NA   &lt;NA&gt;   35   1         NA      391       12   1      0\n22   33            1    yes   18   1        129      272        0  NA      0\n23   34           NA   &lt;NA&gt;   36   4         NA      293        0   2      0\n24   31            1    yes   28   2          3      428        0   3      0\n25   48            1    yes   19   4         67      365        0  NA      1\n26   34            1    yes   30   1        154       56        0  NA      0\n27   35            1    yes   27   0         34      361        1  NA      0\n28   34            0     no   24   0        204      365        0  NA      0\n29   29            1    yes   47   1        142       79        0   3      0\n30   35            0     no   45   2        189      364        0  NA      0\n31   43            1    yes   18  10          4      365        0  NA      0\n32   37            0     no   11   0        203      203        3  NA      0\n33   29            0     no   26   1        193      354        0  NA      0\n34   33            1    yes   29   1         10       29        0  NA      0\n35   20            1    yes   34   1        177      365        0  NA      0\n36   38            0     no   37   2        195      365        0   3      0\n37   28            1    yes   23   0          7      365        1   2      0\n38   33            1    yes   41   7         14      365        0   3      0\n39   40           NA   &lt;NA&gt;   21   0         NA      365        1  NA      0\n40   43            0     no   16  15        191      414        0  NA      0\n41   28            1    yes   36   1         31      414        0  NA      0\n42   45            0     no   17   2        174       43        0   2      0\n43   42            1    yes   36   2         17       38        7  NA      0\n44   30           NA   &lt;NA&gt;   19   0         NA      264        0  NA      0\n45   34            1    yes    5   2         23       14        0  NA      1\n46   36            1    yes   25   2          2      377        0  NA      0\n47   44           NA   &lt;NA&gt;   36   5         NA      321       19   1      0\n48   41            1    yes   27   0         30       NA        0  NA      0\n49   30            0     no   44   2        209       26       21   2      0\n50   37            1    yes   29   2        111       18        0  NA      0\n51   35            1    yes   46   3         17      365        0  NA      1\n52   37            1    yes   16   5        137      171        0  NA      0\n53   44            1    yes   44   1          4       27        0  NA      0\n54   47            1    yes   42   2          3      190        0   4      0\n55   38            1    yes   30   5         18       30        0   2      0\n56   37            1    yes   25   0          2      365        1  NA      0\n57   34            1    yes   26   1          1      365        0  11      0\n58   41            0     no   29   3        181       19        0   2      1\n59   29            0     no   33   3        180      365        1   4      1\n60   35            1    yes   28   1         36      400        0   1      0\n61   36           NA   &lt;NA&gt;   33   0         NA      365        0   1      0\n62   27            0     no   44   3        252      431        0   1      0\n63   36            0     no   29   1        195      195        0   1      0\n64   40            0     no   57   5        181       34        0  NA      1\n65   38           NA   &lt;NA&gt;   26   4         NA      133        1  NA      0\n66   42            1    yes   31   2        103       48        8   3      0\n67   26           NA   &lt;NA&gt;   30   4         NA       NA        0  NA      1\n68   41            1    yes   43   0          2       NA       10  NA      1\n69   43            1    yes   28  10         78      365        0  NA      0\n70   28            1    yes   29   3          9      129        0   2      0\n71   30            1    yes   32   2         53       NA        3  NA      0\n72   42           NA   &lt;NA&gt;   30   4         NA       35        0  NA      0\n73   22            1    yes   34   7          4      365        0   1      0\n74   31           NA   &lt;NA&gt;   49   2         NA      439        3   1      0\n75   30            0     no   36   0        177       44        0   3      0\n76   25           NA   &lt;NA&gt;   42   1         NA      365        1   1      0\n77   26            1    yes   40   1          4       77       10  NA      0\n78   35            1    yes   29   1         47       35        0   1      0\n79   53            1    yes   31   3          5      365        0   1      0\n80   29           NA   &lt;NA&gt;   10   2         NA      143        0  NA      0\n81   32            1    yes   37   2        175      365        0  NA      1\n82   24            1    yes   32   2        168      115        3   1      0\n83   35            1    yes   16   1         20      386        1   3      0\n84   32            1    yes   15   0         55      365        0  NA      0\n85   47            1    yes    4   2         56       63        1  NA      0\n86   26           NA   &lt;NA&gt;   30   2         NA      365        0  NA      0\n87   45            1    yes   44   2         63       35       14   1      0\n88   33           NA   &lt;NA&gt;    8   1         NA       NA        0  NA      0\n89   45           NA   &lt;NA&gt;   16  20         NA      365        0   2      0\n90   33           NA   &lt;NA&gt;   47   9         NA       38        0   3      1\n91   27            1    yes   49   1        222      136        0  NA      0\n92   40            1    yes   30   2          9       37        1  NA      0\n93   40           NA   &lt;NA&gt;   36   1         NA      217        0   1      1\n94   37            1    yes   48   3         16      349        0  NA      0\n95   26            1    yes   17   1         59       NA        0  NA      0\n96   27            1    yes   39   0        102      365        0   3      0\n97   35           NA   &lt;NA&gt;   30   2         NA       16        0  NA      1\n98   29           NA   &lt;NA&gt;   24   0         NA       NA       10   2      0\n99   33           NA   &lt;NA&gt;   25   2         NA       60        0  NA      0\n100  39            1    yes   51   3          2      365        0   5      0\n101  33            1    yes   17   3          3      365        7  NA      0\n102  35            1    yes   37  20         63      399        0  NA      0\n103  38           NA   &lt;NA&gt;   45   0         NA       NA        0   1      0\n104  44            1    yes   28   1         47      112       17   1      0\n105  28           NA   &lt;NA&gt;   17   3         NA      365        0  NA      0\n106  33           NA   &lt;NA&gt;   23   0         NA       NA        0  NA      0\n107  30            0     no   39   0        201       18        0   1      1\n108  35            1    yes   38   2        114      365        0   4      0\n109  32           NA   &lt;NA&gt;   53  15         NA       41        0  NA      1\n110  42            0     no   26  10        183      358        0   2      1\n111  37            0     no   47   0        183      169        0  NA      0\n112  41           NA   &lt;NA&gt;   49   4         NA      365        0   1      0\n113  28            1    yes   34   5          0      325       17   2      0\n114  30           NA   &lt;NA&gt;   51   9         NA       NA        9   1      1\n115  35            1    yes   33   2          2      345        0  14      0\n116  35           NA   &lt;NA&gt;   58   5         NA       17        0   2      1\n117  41            1    yes   28   1         17      104        0  NA      0\n118  37            0     no    4   2        183       36        0  NA      0\n119  30            1    yes   15   1         15      365        0  NA      1\n120  39            1    yes   40   3         11      365        0   4      0\n121  32           NA   &lt;NA&gt;   33   2         NA       NA        0  NA      0\n122  50            0     no   35   6        178       49        0  NA      1\n123  33           NA   &lt;NA&gt;   28   1         NA       90        0   2      0\n124  27            1    yes   21   0        163      169        0  NA      0\n125  33            1    yes   33   0          7      399        1  NA      0\n126  38           NA   &lt;NA&gt;   26   4         NA       28        0  NA      1\n127  43            1    yes   45   6          4      358        0   8      0\n128  24            1    yes   45   0         68      365        0   1      1\n129  35            1    yes   31  10        185      387        0   1      0\n130  49           NA   &lt;NA&gt;   28  13         NA      193        0   1      1\n131  49            1    yes   22   5          1      126        0   4      0\n132  33           NA   &lt;NA&gt;   39   1         NA      365        1   1      0\n133  24            0     no   31   0        183       52        9   1      0\n134  28            1    yes   48   4         12      413        0  NA      1\n135  45            0     no   48   2        185       50        0   7      0\n136  46           NA   &lt;NA&gt;   34  20         NA       NA        0  NA      0\n137  37           NA   &lt;NA&gt;   35   1         NA      106        0  NA      1\n138  32            0     no   46   2        183       42        0  NA      0\n139  45           NA   &lt;NA&gt;   34   1         NA      303       11   2      0\n140  39            0     no   10   0        186       30        0   1      0\n141  34            1    yes   31   1        146      113        0  NA      0\n142  32           NA   &lt;NA&gt;   34   2         NA      365        0   3      0\n143  32            1    yes   26   2          5      369        0   1      0\n144  31            1    yes   15   1         31      365        0  NA      1\n145  45           NA   &lt;NA&gt;   48   1         NA       98        0   2      0\n146  30           NA   &lt;NA&gt;   37   1         NA      338        0  NA      0\n147  36            1    yes   20   8         57      365        7   1      0\n148  25            1    yes   38   3          0      414        8   1      0\n149  48            0     no   39   8        178       58        0  NA      0\n150  42            0     no   46   1        256      368        0   1      0\n151  33            1    yes   17   1         61      364        0   1      0\n152  36           NA   &lt;NA&gt;    6   1         NA      365        1  NA      0\n153  41           NA   &lt;NA&gt;   18   4         NA      365        0  NA      0\n154  30            1    yes   29   2         12      365        0  NA      1\n155  57           NA   &lt;NA&gt;   51  10         NA      365        0  NA      0\n156  57            1    yes   39   4         28      380        0   1      1\n157  47           NA   &lt;NA&gt;   31   2         NA      365        5  NA      0\n158  54            1    yes   49   0          0       38        0   4      0\n159  55            0     no   43   1        164       31        0  NA      0\n160  33            1    yes   45   1         13      330       10   1      0\n161  29           NA   &lt;NA&gt;   46   6         NA      365        5   3      1\n162  33           NA   &lt;NA&gt;   44   4         NA      427        0  NA      1\n163  28           NA   &lt;NA&gt;   41   3         NA      443       11   2      0\n164  37            0     no   29   2        163       29        0  NA      0\n165  28            1    yes   38   3        117      218        0  NA      1\n166  32           NA   &lt;NA&gt;   51   1         NA      365        0  NA      0\n167  31           NA   &lt;NA&gt;   38  10         NA      405       20   1      1\n168  36           NA   &lt;NA&gt;   53   3         NA       45        0   3      1\n169  39           NA   &lt;NA&gt;   29   2         NA       14        0   2      0\n170  29           NA   &lt;NA&gt;   31   1         NA      424       13   1      0\n171  38           NA   &lt;NA&gt;   57   4         NA      370        0  NA      1\n172  33           NA   &lt;NA&gt;   38   0         NA       NA        0   2      0\n173  31           NA   &lt;NA&gt;   39  10         NA       17        2  NA      0\n174  39           NA   &lt;NA&gt;   43   1         NA      365       13   1      1\n175  33            1    yes   19  40          3      146        0   1      1\n176  31            1    yes   23   0          9       15        0  NA      0\n177  46            1    yes   44   1        144       14        0   6      0\n178  36            1    yes   12   1         11      140        0  NA      0\n179  22            1    yes   35   0          1      365        0   4      0\n180  33            1    yes   47   2         27      365        0   2      0\n181  35           NA   &lt;NA&gt;   53   2         NA      365       14   2      0\n182  38            1    yes   34   1          0      348       14   1      1\n183  28           NA   &lt;NA&gt;   15   1         NA       48        0  NA      0\n184  33           NA   &lt;NA&gt;   31   2         NA       32        0   2      0\n185  49            1    yes   27   2         61      365        0  NA      0\n186  43           NA   &lt;NA&gt;   36   1         NA       18        0  NA      1\n187  33            1    yes   24   6          2      365        1  NA      1\n188  29           NA   &lt;NA&gt;   54   0         NA      407        4  NA      1\n189  34            0     no   31   2        183       30        0  NA      0\n190  41           NA   &lt;NA&gt;   22   4         NA      365        0  NA      0\n191  47            0     no   41   1        190       78        0  NA      1\n192  24           NA   &lt;NA&gt;   23   0         NA      365        0  NA      0\n193  31           NA   &lt;NA&gt;   18   3         NA       NA        8   1      1\n194  40           NA   &lt;NA&gt;   60   7         NA      406        0  NA      1\n195  32            0     no   34   3        184      365        0  NA      1\n196  32            0     no   26   4        192       22        0   3      0\n197  39           NA   &lt;NA&gt;   40   1         NA      365        0   1      0\n198  19           NA   &lt;NA&gt;   40   1         NA       63        0   8      0\n199  49            1    yes    1   2        166       78        0  NA      0\n200  27           NA   &lt;NA&gt;   41   4         NA      365        1   4      0\n201  38            0     no   38   3        247      365        0   1      1\n202  32            1    yes   37   1         82      348        0  NA      1\n203  22            0     no   16   1        162      357        0  NA      0\n204  36            1    yes   33   3         47       12        0  NA      0\n205  32            1    yes    4   0         88       50        0  NA      0\n206  35           NA   &lt;NA&gt;   24   1         NA      365        0  NA      1\n207  35            0     no   34   1        172      136        0  NA      1\n208  41            1    yes   40   2         63       22        0  NA      0\n209  36            1    yes   39   2         94        7        0  NA      0\n210  43            1    yes   32   2         73       70        0  NA      0\n211  45            1    yes   40   5          7      365        0   1      1\n212  39            1    yes   51   4         33      331        0  NA      0\n213  47           NA   &lt;NA&gt;   39   2         NA      365        1   3      1\n214  32            1    yes   40   6        183       76        0  NA      0\n215  33            1    yes   22   0          9      183        0  NA      0\n216  39            1    yes   42   4        215      428        0  NA      1\n217  44           NA   &lt;NA&gt;   13   0         NA      365        0  NA      1\n218  35           NA   &lt;NA&gt;   49   4         NA       43        0   1      0\n219  31            1    yes   35   1         32      307        1   3      0\n220  25           NA   &lt;NA&gt;   43   0         NA      365        0  NA      0\n221  48            1    yes   27   1         74      353        0   6      0\n222  35           NA   &lt;NA&gt;   40   1         NA       37        0  NA      0\n223  42           NA   &lt;NA&gt;   38   4         NA      349        0   2      0\n224  51            1    yes   39   6          4      272        0   4      0\n225  55            1    yes   30   2         11       40        0   2      1\n226  32            1    yes   35   6         70       37        0  NA      0\n227  41            1    yes   34   2          2      365        0   3      0\n228  34           NA   &lt;NA&gt;   19   1         NA      329        0  NA      1\n229  30           NA   &lt;NA&gt;   39   2         NA      442        0  NA      0\n230  34           NA   &lt;NA&gt;   36   1         NA      326        0  NA      1\n231  38           NA   &lt;NA&gt;   58   8         NA      452        0   1      0\n232  41           NA   &lt;NA&gt;   38   2         NA       24        2  NA      0\n233  31           NA   &lt;NA&gt;   22   0         NA      359        0  NA      1\n234  29           NA   &lt;NA&gt;   46   2         NA      336        0   3      0\n235  36           NA   &lt;NA&gt;   31  10         NA      365        0   1      0\n236  45           NA   &lt;NA&gt;   11   0         NA      379        0  NA      0\n237  36           NA   &lt;NA&gt;   32   2         NA      434       10  NA      0\n238  30            1    yes   33   1         59       12        0  NA      0\n239  40            1    yes   39   1         16      294        0  NA      0\n240  27            1    yes   33   0          4      365        0   2      1\n241  39           NA   &lt;NA&gt;   27   1         NA       21        0  NA      0\n242  39            0     no   43   4        170      350        0   2      0\n243  37            1    yes   30   1          2      440        0   5      0\n244  43            1    yes   12   4         11      236        0   4      0\n245  20            1    yes   42   1         20      365        0  NA      0\n246  35            1    yes   31   2         32       35        5  17      0\n247  32           NA   &lt;NA&gt;   40   6         NA       29       11   2      0\n248  42            0     no   17   0        188      456        0  NA      0\n249  27           NA   &lt;NA&gt;   44   0         NA      279        0  NA      0\n250  30           NA   &lt;NA&gt;   15   2         NA      365        0  NA      0\n251  27           NA   &lt;NA&gt;   41   0         NA      365        8   3      0\n252  41           NA   &lt;NA&gt;   51   3         NA      349        0  NA      0\n253  32            1    yes   24  20          7       46        6   1      0\n254  47            1    yes   29   1         31      368        0   1      0\n255  36           NA   &lt;NA&gt;   40   2         NA      365        0   2      0\n256  32            1    yes   33   2          2      365        0   1      0\n257  33            1    yes   51   1          5      365        1   6      1\n258  30           NA   &lt;NA&gt;   30   6         NA       83        0  NA      1\n259  29           NA   &lt;NA&gt;   46   0         NA       79        8  NA      0\n260  34           NA   &lt;NA&gt;   38   2         NA      365        8  NA      1\n261  34            1    yes   42   0         52      365        1   2      0\n262  40           NA   &lt;NA&gt;   17   2         NA      365        0   2      0\n263  45           NA   &lt;NA&gt;   22   3         NA      365        7  21      0\n264  37            0     no   37   2        179       41        0  NA      1\n265  32           NA   &lt;NA&gt;   11   2         NA       17        0  NA      0\n266  26           NA   &lt;NA&gt;   56   2         NA      365        0  NA      1\n267  31            1    yes   14   0          2      365        0   1      0\n268  39            1    yes   26   0         94      425        0  NA      0\n269  49            1    yes   36   1         94      365        0  NA      0\n270  45            1    yes   41   0         33      365        4   1      1\n271  43           NA   &lt;NA&gt;   18   0         NA      365       10  NA      0\n272  38           NA   &lt;NA&gt;   19   1         NA      365        0  NA      0\n273  23            1    yes   48   1          2      365        0   2      1\n274  35            1    yes   45   3          1       26        0   1      1\n275  23            1    yes   44  20         45      207        0  NA      0\n276  42           NA   &lt;NA&gt;   52   3         NA       63        0  NA      1\n277  29           NA   &lt;NA&gt;   19   1         NA      318        0  NA      0\n278  43            1    yes    9   2          0      365        0   2      0\n279  29           NA   &lt;NA&gt;   55   0         NA      365        0  NA      0\n280  39            1    yes   18   0         16      358        0   2      0\n281  32            1    yes   45   4          1      427        0   2      1\n282  35           NA   &lt;NA&gt;   12   1         NA      441        0   2      0\n283  22            1    yes   33   2          3       30        0  NA      0\n284  39            1    yes   32   1        132       41        0  NA      0\n285  38            1    yes   20   1         NA      285        0   2      0\n286  56            1    yes   37  36          0      412        3  11      0\n287  36            1    yes   39   1        136      324        0   2      1\n288  40           NA   &lt;NA&gt;   43   1         NA       15       17   2      0\n289  22            1    yes   51   2          2      374        9   1      1\n290  39           NA   &lt;NA&gt;   27   5         NA      293        8   4      0\n291  47            1    yes   40   2          3      365        0  NA      0\n292  32            1    yes    8   3         30      373        0   1      0\n293  41            1    yes   54   3          1      356        4  NA      0\n294  32            0     no   35   1        191       21        0  NA      0\n295  37           NA   &lt;NA&gt;   58   8         NA      365        0   2      1\n296  41            0     no   50   2        174       17        1   1      0\n297  31            1    yes   55   5         65      365        0   1      0\n298  33            1    yes   19   0         64       33        0  NA      1\n299  30            1    yes   37   6          8      303       16   1      0\n300  32            1    yes   20   1         93      449        0   1      0\n301  35           NA   &lt;NA&gt;   40   1         NA       77        0  NA      0\n302  32           NA   &lt;NA&gt;   37   1         NA       35        0   3      0\n303  33           NA   &lt;NA&gt;   43   0         NA      365        0   2      0\n304  30            1    yes    8   8          5       32        1  NA      0\n305  44           NA   &lt;NA&gt;   56   3         NA      365        0   2      0\n306  46            1    yes   51   0         62      365        0   2      0\n307  43            0     no    7   0        187       41        0  NA      1\n308  47           NA   &lt;NA&gt;   36   4         NA      365       13   5      0\n309  34            1    yes   49   0         93       32        0  NA      0\n310  47            1    yes   54   1          4      349        8  NA      1\n311  40            1    yes   53   2          1      393        0   7      0\n312  34            1    yes   15  15          5       NA        0  NA      0\n313  48            1    yes   53   4          0      302        0   3      1\n314  37            1    yes    6   5          1      364        1  NA      0\n315  35            1    yes   54   1          5      365       13  NA      1\n316  38           NA   &lt;NA&gt;   42   4         NA      337        0  NA      1\n317  27           NA   &lt;NA&gt;   31   1         NA       31        0   1      0\n318  39            0     no   40   0        178        9        4  NA      0\n319  23            1    yes   37   1          0      359       20   4      0\n320  35            0     no   36   0        178      361        0  NA      1\n321  53            0     no   40   2        175       80       19   2      0\n322  31           NA   &lt;NA&gt;   41   1         NA      365        0  NA      0\n323  32            1    yes   39   0         15       14        0   1      0\n324  33            0     no   38   1        219      398        0   1      0\n325  25            1    yes   38   0          1       40        1   1      0\n326  37           NA   &lt;NA&gt;    9   1         NA       40        0  NA      0\n327  26            1    yes   36   0         18       74        0  NA      0\n328  29           NA   &lt;NA&gt;   27   0         NA      308        5   2      0\n329  30            0     no   26   1        215        7        0  NA      0\n330  47           NA   &lt;NA&gt;   52   8         NA      365        0   2      1\n331  33           NA   &lt;NA&gt;   24   1         NA      300        0  NA      0\n332  36            1    yes   16   1        125      361        0   1      0\n333  23           NA   &lt;NA&gt;   34   3         NA      393        0   1      0\n334  36            1    yes   46   8          5        9        0   5      0\n335  34            1    yes   24   1          2      350        2   1      0\n336  28            1    yes   25   2          1      365        0   2      0\n337  33           NA   &lt;NA&gt;   40   4         NA       21        0  NA      1\n338  26            1    yes   33   0         35      296        0   1      1\n339  30            1    yes   31   0         15        6        0  NA      0\n340  41           NA   &lt;NA&gt;   37   1         NA       19        0  NA      0\n341  31           NA   &lt;NA&gt;   28   1         NA      123        1   4      0\n342  28           NA   &lt;NA&gt;   27   0         NA       44        0  NA      0\n343  59           NA   &lt;NA&gt;    6   2         NA      365        0  NA      0\n344  39            1    yes   21   0         31      363        0  NA      0\n345  36           NA   &lt;NA&gt;   29   0         NA       33        0  NA      0\n346  47            1    yes   23   1         32      152        0  NA      0\n347  26           NA   &lt;NA&gt;   35   0         NA      365        0  NA      0\n348  22            1    yes   55   0         10      338       11   2      0\n349  36           NA   &lt;NA&gt;    3   0         NA      365        0  NA      0\n350  34           NA   &lt;NA&gt;   36   1         NA      365        2   6      0\n351  27           NA   &lt;NA&gt;   40   1         NA      365        3   2      0\n352  34            1    yes   29   0         12      356        0  NA      1\n353  21           NA   &lt;NA&gt;   28   3         NA      331        0   1      0\n354  33           NA   &lt;NA&gt;   21   0         NA      309        0  NA      0\n355  42            1    yes   34   5          3      289       11   1      0\n356  46           NA   &lt;NA&gt;   42   2         NA      306        0   2      0\n357  26            1    yes   23   4        106      410        0  NA      0\n358  36            1    yes   36   3          3      362        0  NA      0\n359  47            0     no   32   3        158       74        0  NA      1\n360  48            0     no   30   2        191       16        0   1      0\n361  32           NA   &lt;NA&gt;   25   5         NA      340       10  NA      0\n362  38           NA   &lt;NA&gt;   35   7         NA      365        0   1      0\n363  43            1    yes   23   2         61       11        0   2      0\n364  30            1    yes   16   0         30      365        0  NA      0\n365  40            0     no   27   1        176       41        0  NA      0\n366  38           NA   &lt;NA&gt;   14   0         NA      292        1  NA      0\n367  22            0     no   44   1        260      376       NA   5      0\n368  39            0     no   52   2        268      449        0  NA      1\n369  22           NA   &lt;NA&gt;   48   2         NA        8        2   3      0\n370  37            0     no   11   1        210      370        0   2      0\n371  37            1    yes   41  10          1      393        0  NA      1\n372  44            1    yes   41   3          0      365        0   1      0\n373  38            0     no   37   1        165      166        1  NA      0\n374  37            1    yes   31   2          2       89        0   3      0\n375  43            1    yes   34   4          2      418        5  NA      0\n376  39            1    yes   40   8          0      247        0   3      0\n377  45            1    yes   37   2          2      322        3  NA      0\n378  39            0     no   30   8        154      265        0  NA      0\n379  31            1    yes   42   1         15      365        0  NA      1\n380  32            1    yes   51   0          5       NA        6   3      0\n381  42            1    yes   42   5         33       98        0  NA      1\n382  33           NA   &lt;NA&gt;   15   0         NA      365        0  NA      1\n383  47            1    yes   12   1         NA      345        0  NA      0\n384  24            1    yes   39   2         32      365        0   3      0\n385  27            1    yes   10   1          2       20        0  NA      0\n386  38           NA   &lt;NA&gt;   33   1         NA      286        1  NA      1\n387  53           NA   &lt;NA&gt;   57   4         NA      365        0  NA      0\n388  39           NA   &lt;NA&gt;   17   1         NA       34        0   4      0\n389  32           NA   &lt;NA&gt;   20   4         NA      365        1  NA      0\n390  27           NA   &lt;NA&gt;   49   2         NA      365        0   1      0\n391  43           NA   &lt;NA&gt;   23   4         NA      365        0   2      1\n392  31           NA   &lt;NA&gt;   26   1         NA      365        0  NA      0\n393  41           NA   &lt;NA&gt;   28   3         NA      365        0  NA      0\n394  27           NA   &lt;NA&gt;    3   0         NA      365        0  NA      1\n395  28           NA   &lt;NA&gt;   18  17         NA       85        0  NA      0\n396  39           NA   &lt;NA&gt;   39   8         NA      365        0  NA      0\n397  39           NA   &lt;NA&gt;   51   0         NA      365       12   3      0\n398  21           NA   &lt;NA&gt;   39   0         NA       NA        6  NA      1\n399  29           NA   &lt;NA&gt;   47   2         NA      365        0  NA      1\n400  31           NA   &lt;NA&gt;   45   5         NA      365        5  NA      0\n401  29           NA   &lt;NA&gt;   28   2         NA      118        2   1      0\n402  45           NA   &lt;NA&gt;   41   2         NA      365        0   1      1\n403  25           NA   &lt;NA&gt;   31   7         NA       68        0  NA      0\n404  24           NA   &lt;NA&gt;   34   2         NA      365       14   8      1\n405  41           NA   &lt;NA&gt;   21   5         NA      365        0  NA      0\n406  27           NA   &lt;NA&gt;   41   3         NA      365        0   1      0\n407  21           NA   &lt;NA&gt;   38   1         NA       44       14   4      0\n408  27           NA   &lt;NA&gt;   36   5         NA       NA        0  NA      0\n409  31           NA   &lt;NA&gt;   24   1         NA      365        0   1      0\n410  41           NA   &lt;NA&gt;   10   0         NA      365        0  NA      0\n411  33           NA   &lt;NA&gt;   41   1         NA      365        0  NA      0\n412  49           NA   &lt;NA&gt;   51   1         NA      365        8   3      0\n413  41           NA   &lt;NA&gt;   45   4         NA      365        1   1      0\n414  25           NA   &lt;NA&gt;   29   0         NA       44        6  NA      0\n415  41           NA   &lt;NA&gt;   56   4         NA       10        0  NA      0\n416  34           NA   &lt;NA&gt;   34   1         NA       87        0   2      0\n417  29           NA   &lt;NA&gt;    4   0         NA      365        0  NA      0\n418  28           NA   &lt;NA&gt;   32   0         NA      365        0  NA      0\n419  29           NA   &lt;NA&gt;   38   2         NA       NA        9   1      0\n420  36           NA   &lt;NA&gt;   26   0         NA      115        0   5      0\n421  36           NA   &lt;NA&gt;   27   0         NA      365        0  NA      0\n422  24           NA   &lt;NA&gt;   21   4         NA      365        0  NA      0\n423  38           NA   &lt;NA&gt;   30   2         NA        6        0   2      0\n424  31           NA   &lt;NA&gt;    7   1         NA      365        0  NA      0\n425  26           NA   &lt;NA&gt;   35   1         NA      365        0  NA      0\n426  35           NA   &lt;NA&gt;   23   2         NA       28        0  NA      1\n427  26           NA   &lt;NA&gt;   36   4         NA      365        1  NA      0\n428  33           NA   &lt;NA&gt;   15   0         NA      365        0  NA      0\n429  46           NA   &lt;NA&gt;   48 100         NA      365        0  NA      0\n430  33           NA   &lt;NA&gt;   31   0         NA      365        0   1      0\n431  39           NA   &lt;NA&gt;   54   6         NA       64        0  NA      0\n432  27           NA   &lt;NA&gt;   21   1         NA      365        9   1      0\n433  33           NA   &lt;NA&gt;   21   8         NA       NA        0  NA      1\n434  36           NA   &lt;NA&gt;   29   4         NA      365        0  NA      1\n435  23           NA   &lt;NA&gt;   23   0         NA      365        5   2      0\n436  33           NA   &lt;NA&gt;   33   2         NA      365       11   1      0\n437  26           NA   &lt;NA&gt;   14   0         NA      365        0  NA      0\n438  38           NA   &lt;NA&gt;   27  10         NA      365        0  NA      0\n439  52           NA   &lt;NA&gt;   24   1         NA      365        0   1      0\n440  39           NA   &lt;NA&gt;   33   2         NA      365        3   1      0\n441  36           NA   &lt;NA&gt;   25   1         NA        2        1  NA      0\n442  44           NA   &lt;NA&gt;   37   0         NA       NA        0   2      0\n443  37           NA   &lt;NA&gt;   47   2         NA        4       21  NA      0\n444  33           NA   &lt;NA&gt;   40   2         NA      365        0   1      1\n445  31           NA   &lt;NA&gt;    9   1         NA      365        0  NA      0\n446  25           NA   &lt;NA&gt;   37   3         NA      365        0   3      0\n447  31           NA   &lt;NA&gt;   47   1         NA      365        0  NA      1\n448  24           NA   &lt;NA&gt;   34   0         NA      365       13   2      0\n449  33           NA   &lt;NA&gt;   28   1         NA      365        0   1      0\n450  49           NA   &lt;NA&gt;   37   0         NA        7        0  NA      0\n451  39           NA   &lt;NA&gt;   28   0         NA      365        1  NA      1\n452  59           NA   &lt;NA&gt;   11   2         NA      365        0   1      0\n453  45           NA   &lt;NA&gt;   35   1         NA      365        0   1      0\n       sex g1b homeless  i1  i2  id indtot linkstatus link       mcs      pcs\n1     male yes   housed  13  26   1     39          1  yes 25.111990 58.41369\n2     male yes homeless  56  62   2     43         NA &lt;NA&gt; 26.670307 36.03694\n3     male  no   housed   0   0   3     41          0   no  6.762923 74.80633\n4   female  no   housed   5   5   4     28          0   no 43.967880 61.93168\n5     male  no homeless  10  13   5     38          1  yes 21.675755 37.34558\n6   female  no   housed   4   4   6     29          0   no 55.508991 46.47521\n7   female yes   housed  13  20   7     38          0   no 21.793024 24.51504\n8     male yes homeless  12  24   8     44          0   no  9.160530 65.13801\n9   female  no homeless  71 129   9     44          0   no 22.029678 38.27088\n10    male  no homeless  20  27  10     44          0   no 36.143761 22.61060\n11  female  no   housed   0   0  11     34          0   no 43.974678 60.07915\n12  female  no   housed  13  13  12     11          0   no 13.382205 41.93376\n13    male  no homeless  20  31  14     40          0   no 49.089302 39.24264\n14    male  no homeless  13  20  15     41          1  yes 25.846157 31.82965\n15    male  no   housed  51  51  16     38          0   no 23.608444 55.16998\n16  female yes homeless   0   0  17     26          1  yes 29.799828 44.77651\n17    male  no   housed   0   0  18     17          0   no 42.166462 56.43837\n18    male yes homeless   1   1  19     40          0   no 16.732292 58.29807\n19  female yes   housed   9  24  20     37          1  yes 15.458271 37.45214\n20    male  no   housed  23  23  21     37          0   no 55.128109 34.33926\n21    male  no   housed  26  26  22     36          0   no 20.871447 36.58481\n22    male  no   housed   0   0  23     27          1  yes 47.286739 61.64098\n23    male yes homeless  34  34  24     42          0   no 19.620596 46.22176\n24    male  no homeless   4   5  25     42          0   no 44.442104 51.56324\n25  female  no   housed   6   8  27     40          0   no 21.668474 36.01007\n26    male  no   housed   3   3  28     34          1  yes 37.371555 63.06006\n27    male  no homeless   7   7  30     37          0   no 34.335667 61.82597\n28    male yes   housed  24  48  31     41          0   no 46.340755 43.53374\n29    male  no homeless   0   0  32     37          1  yes 27.717710 42.22490\n30    male  no homeless  20  20  33     44          0   no 18.984324 42.40059\n31    male  no homeless   3   3  34     41          0   no 58.241264 50.14700\n32    male  no homeless   6   6  35     35          1  yes 27.852608 63.52000\n33    male  no   housed   0   0  36     21          0   no 54.774349 53.35109\n34    male  no   housed   0   0  37     30          1  yes 27.495481 56.73985\n35    male  no homeless  32 135  38     33          0   no 56.324333 53.23396\n36    male  no   housed   2  24  39     43          0   no 37.006042 62.04113\n37    male  no   housed   3   3  40     41          0   no 39.897774 38.39529\n38    male yes homeless  27  27  42     41          0   no 18.640594 51.30330\n39    male  no   housed   3   7  43     32          0   no 45.134098 56.68389\n40    male  no homeless  24  36  44     41          0   no 15.861924 71.39259\n41    male  no homeless   6  12  45     39          0   no 24.148815 52.61977\n42    male  no homeless   0   0  46     22          1  yes 29.901625 36.04588\n43    male  no   housed  13  13  47     39          1  yes 29.412977 50.06427\n44    male  no homeless  25  28  49     38          1  yes 35.206970 62.03183\n45  female  no   housed   6  13  50      8          1  yes 59.454094 52.69898\n46    male  no   housed  13  61  51     36          0   no 20.999893 56.38669\n47    male yes homeless  15  26  52     42          0   no 29.390280 40.38438\n48    male yes   housed   7   7  53     31         NA &lt;NA&gt; 26.773279 58.16169\n49    male yes homeless   9  15  54     44          1  yes 17.925251 45.48341\n50    male  no homeless   5  13  56     40          1  yes 34.434696 63.05807\n51  female  no   housed  13  20  57     32          0   no 24.000315 46.75086\n52    male yes   housed  34  34  58     29          1  yes 47.671936 29.45625\n53    male yes   housed   3   6  59     44          1  yes 26.653036 40.46056\n54    male yes homeless  37  43  60     43          1  yes 28.469273 57.20213\n55    male  no homeless  36  36  61     38          1  yes 26.065777 47.60514\n56    male yes   housed  13  15  62     34          0   no 31.501711 50.16318\n57    male  no   housed   3  19  63     41          0   no 24.998930 50.39870\n58  female yes   housed   3   6  65     20          1  yes 33.374172 55.23372\n59  female yes homeless   0   0  66     29          0   no 27.575460 35.12470\n60    male  no   housed  32  32  67     38          0   no 35.839642 52.68871\n61    male  no   housed  35  42  68     42          0   no 17.565235 67.53625\n62    male yes homeless  20  20  69     41          0   no 20.025341 36.98058\n63    male  no homeless   7  25  70     38          1  yes 25.812592 64.29022\n64  female yes homeless  59 164  71     43          1  yes 17.705963 36.04016\n65    male  no   housed   0   0  72     38          1  yes 39.934162 53.15686\n66    male  no homeless  26  51  73     44          1  yes 23.996725 45.18499\n67  female yes   housed  12  18  74     37         NA &lt;NA&gt; 26.697262 54.38272\n68  female  no   housed   0   0  75     40         NA &lt;NA&gt; 15.447794 55.32189\n69    male  no   housed  18  36  76     38          0   no 38.752102 27.36663\n70    male  no   housed   6  12  78     29          1  yes 34.839962 58.25895\n71    male  no   housed  13  17  80     35         NA &lt;NA&gt; 22.957235 63.91367\n72    male yes homeless   5   5  81     28          1  yes 28.418003 56.90441\n73    male  no homeless   2   2  82     31          0   no 33.115913 48.79136\n74    male  no homeless 102 102  83     40          0   no 14.913925 52.59380\n75    male yes homeless   0   0  84     44          1  yes 17.449858 68.12395\n76    male yes   housed  21  21  85     36          0   no 13.134663 57.07777\n77    male yes homeless   6   8  86     29          1  yes 19.344807 42.62894\n78    male  no   housed   1   1  87     42          1  yes 26.221968 59.56708\n79    male  no homeless  19  19  88     40          0   no 34.210976 44.16995\n80    male  no   housed   1  22  89     29          1  yes 52.926834 58.21477\n81  female yes   housed   2   2  90     40          0   no 28.858498 43.94296\n82    male  no homeless   0   0  91     39          1  yes 26.918222 59.82454\n83    male  no   housed  26  47  93     39          0   no 39.298168 38.46090\n84    male  no   housed   0   0  94     35          0   no 47.550678 37.18519\n85    male  no homeless   9  19  95     38          1  yes 54.053368 56.50476\n86    male  no   housed  10  10  96     40          0   no 37.845036 57.33492\n87    male yes homeless   4   5  97     44          1  yes 20.202173 28.85472\n88    male  no   housed   6  15  98     19         NA &lt;NA&gt; 51.788670 60.58733\n89    male yes homeless  26  51  99     43          0   no 32.566528 30.05406\n90  female yes   housed  64  64 100     44          1  yes 19.595461 40.48884\n91    male yes homeless  26  26 102     34          1  yes 16.302422 55.98083\n92    male yes   housed   2   3 103     42          1  yes 15.754984 48.05733\n93  female yes homeless  33  38 104     42          1  yes 27.993336 44.53589\n94    male yes   housed  61 184 105     40          0   no 23.659925 30.23405\n95    male yes   housed   2   2 106     39         NA &lt;NA&gt; 34.737865 65.74425\n96    male  no homeless  19  19 107     40          0   no 15.618371 55.50122\n97  female  no   housed   9  15 108     33          1  yes 23.299021 51.81045\n98    male  no   housed   0   0 109     38         NA &lt;NA&gt; 40.941338 63.61380\n99    male yes   housed  18  47 110     41          1  yes 24.330456 46.41464\n100   male yes homeless  51  51 111     42          0   no 15.196477 54.13217\n101   male  no   housed   0   0 112     37          0   no 50.788845 46.75063\n102   male  no homeless  36  66 113     43          0   no 23.554617 40.18310\n103   male  no   housed  31  91 114     38         NA &lt;NA&gt; 15.822761 63.48228\n104   male  no   housed   0   0 115     33          1  yes 45.402626 43.62142\n105   male  no   housed  26  69 116     34          0   no 53.616177 57.95000\n106   male  no   housed   2  20 117     28         NA &lt;NA&gt; 59.264427 54.44389\n107 female  no   housed   0   0 118     19          1  yes 24.747171 54.10854\n108   male yes homeless  51  51 119     43          0   no 12.432887 48.89978\n109 female yes homeless  34  34 120     33          1  yes 27.136280 54.79462\n110 female  no homeless  39  95 121     31          0   no 41.321629 36.68874\n111   male  no   housed  19  26 122     42          1  yes 21.912630 43.00148\n112   male  no homeless  13  13 123     33          0   no 28.972683 59.74108\n113   male  no homeless   0   0 124     36          0   no 16.284695 48.89844\n114 female yes   housed   0   0 125     43         NA &lt;NA&gt; 19.156574 34.33698\n115   male  no homeless  13  13 126     19          0   no 41.590557 40.88239\n116 female yes   housed   1   1 127     37          1  yes 18.465418 39.33260\n117   male  no   housed  22  22 128     25          1  yes 39.450993 28.93009\n118   male  no homeless  13  33 129     42          1  yes 42.539974 60.92048\n119 female  no   housed  26  26 131     25          0   no 37.438934 49.29042\n120   male yes homeless  19  30 132     39          0   no 22.669971 35.39379\n121   male yes homeless  26  26 133     41         NA &lt;NA&gt; 45.529411 57.32318\n122 female  no   housed  13  13 134     28          1  yes 20.310446 33.48925\n123   male  no homeless   3   3 135     40          1  yes 23.729639 45.54259\n124   male  no   housed  24  24 136     40          1  yes 40.676174 59.10600\n125   male  no   housed   0   0 137     29          0   no 28.075939 42.01285\n126 female  no   housed   0   0 138     39          1  yes 22.787546 28.74085\n127   male yes homeless  53  53 140     39          0   no 21.460621 45.01618\n128 female  no homeless   7   7 141     39          0   no 28.505577 37.79718\n129   male  no homeless  25  25 142     38          0   no 33.652927 48.87681\n130 female  no homeless  15  15 143     36          1  yes 40.156929 40.96234\n131   male yes homeless  64 179 144     42          1  yes 45.491100 38.13606\n132   male yes homeless   4   4 148     42          0   no 23.371147 29.47202\n133   male yes homeless   3   6 149     37          1  yes 34.598862 50.21533\n134 female  no   housed   2   2 150     33          0   no 22.017500 40.24271\n135   male  no homeless  13  13 151     42          1  yes 29.082914 36.24839\n136   male  no   housed  20  51 152     37         NA &lt;NA&gt; 24.422007 45.56750\n137 female  no homeless   1   3 153     25          1  yes 33.366123 45.16520\n138   male  no homeless  38  38 154     43          1  yes 18.690155 59.47648\n139   male  no homeless   8   8 156     40          0   no 27.683458 31.97959\n140   male  no homeless   0   0 158     34          1  yes 47.145802 53.66537\n141   male  no   housed  13  13 160     43          1  yes 33.517311 29.78529\n142   male  no homeless  39  39 163     30          0   no 41.131794 24.43518\n143   male  no   housed  12  20 164     44          0   no 24.090509 53.75950\n144 female  no   housed   0   0 166     38          0   no 50.030434 57.38777\n145   male  no   housed   0   0 167     37          1  yes 20.069775 50.23810\n146   male  no   housed   1   1 168     29          0   no 18.211269 56.00507\n147   male  no   housed  19  32 169     43          0   no 30.071957 44.92406\n148   male  no   housed   0   0 170     30          0   no 28.679745 61.78611\n149   male yes   housed  26  51 172     37          1  yes 20.517740 54.35444\n150   male  no   housed  19  19 173     29          0   no 31.188143 55.74972\n151   male  no homeless   3   6 174     41          0   no 43.881058 61.44474\n152   male  no   housed   1   1 177     35          0   no 56.784805 56.84005\n153   male  no   housed  12  17 178     41          0   no 39.074711 36.56960\n154 female  no homeless  29  29 179     31          0   no 52.197483 55.73845\n155   male  no homeless  38  38 180     42          0   no 21.200043 32.28706\n156 female  no   housed  12  12 181     36          0   no 36.651463 30.50811\n157   male  no   housed   4   4 182     38          0   no 10.564762 52.94168\n158   male yes homeless  19  50 183     41          1  yes 22.640652 31.00380\n159   male  no   housed  41  54 185     40          1  yes 39.270416 26.45694\n160   male  no   housed   1   3 186     36          0   no 18.771036 40.46645\n161 female  no   housed   0   0 187     39          0   no 20.119982 32.96189\n162 female yes homeless  59  59 188     38          0   no 25.257971 42.12069\n163   male  no homeless  19  19 189     42          0   no 21.049545 45.46138\n164   male  no   housed   8   8 190     34          1  yes 50.018494 54.07817\n165 female yes   housed  16  20 191     35          1  yes 18.324743 43.24062\n166   male  no   housed  12  12 192     34          0   no  7.938221 53.61504\n167 female yes homeless  26  33 193     44          0   no 22.442661 35.90619\n168 female yes homeless  50  50 194     41          1  yes 27.171751 37.75567\n169   male  no homeless  12  20 198     36          1  yes 41.054363 57.70763\n170   male yes homeless   1   3 199     36          0   no 29.860514 53.68318\n171 female yes   housed  13  32 200     39          0   no 20.356680 35.97361\n172   male  no homeless  10  13 201     44         NA &lt;NA&gt; 26.252979 54.42475\n173   male yes   housed   3  24 202     41          1  yes 40.167236 61.28633\n174 female yes   housed  20  20 203     37          0   no 22.815102 35.22702\n175 female  no homeless  19  26 204     32          1  yes 40.032974 38.10227\n176   male yes   housed   6  12 206     32          1  yes 25.615507 66.59317\n177   male  no homeless 102 102 208     38          1  yes 14.358881 49.27981\n178   male  no   housed   1   4 209     39          1  yes 27.122667 58.16642\n179   male  no   housed   0   0 210     29          0   no 36.823708 31.52861\n180   male yes   housed  58  58 211     41          0   no 17.509274 49.36320\n181   male  no   housed   9   9 212     37          0   no 17.927528 43.17081\n182 female  no homeless   0   0 213     32          0   no 43.353584 21.91906\n183   male  no   housed  35  65 214     43          1  yes 47.711655 57.81969\n184   male  no   housed  33  51 215     42          1  yes 20.731987 54.82264\n185   male  no   housed  19  19 217     28          0   no 52.455845 60.41816\n186 female yes   housed  58  58 219     40          1  yes 36.100307 37.03778\n187 female yes   housed  32  38 220     23          0   no 33.259956 41.66993\n188 female  no   housed   0   0 221     33          0   no 12.323594 48.21926\n189   male  no   housed   0   0 222     38          1  yes 23.058514 54.36913\n190   male  no   housed   6   6 223     40          0   no 45.011848 35.79145\n191 female yes homeless   0   0 224     21          1  yes 37.953403 57.64361\n192   male  no   housed  18  18 225     36          0   no 48.410297 59.32288\n193 female yes   housed   0   0 226     32         NA &lt;NA&gt; 27.641029 48.37090\n194 female yes homeless  38  38 228     43          0   no 16.786348 38.51597\n195 female  no   housed  13  13 229     31          0   no 54.768539 23.48208\n196   male yes homeless   0   0 230     41          1  yes 46.119808 23.50237\n197   male  no   housed  46  46 231     32          0   no 35.955441 56.30513\n198   male  no homeless  27  30 232     40          1  yes 30.300137 41.06454\n199   male  no homeless   3   3 233     40          1  yes 59.453930 58.16510\n200   male yes homeless  12  12 235     42          0   no 23.546112 41.57280\n201 female yes   housed  16  26 236     34          0   no 14.919310 57.83691\n202 female  no   housed   1   6 237     28          0   no 40.462433 56.90286\n203   male  no homeless  26  26 238     29          0   no 46.729744 54.59662\n204   male  no   housed  23  92 239     40          1  yes 37.674961 47.36353\n205   male  no   housed  13  13 240     34          1  yes 57.260887 56.89963\n206 female  no   housed   0   0 241     34          0   no 44.351089 46.79942\n207 female  no homeless   4   4 242     36          1  yes 16.469986 58.49455\n208   male yes homeless  26  26 243     43          1  yes 35.235611 48.48331\n209   male  no homeless  13  13 245     35          1  yes 48.239128 56.39499\n210   male  no homeless  13  13 246     35          1  yes 30.371395 47.35083\n211 female yes   housed  10  14 247     34          0   no 26.311474 43.25021\n212   male yes homeless  23  42 248     42          1  yes 22.884369 29.11139\n213 female  no   housed  42  48 249     33          0   no 27.471394 52.42204\n214   male  no   housed  15  15 250     34          1  yes 30.280018 34.58012\n215   male  no   housed  19  20 253     30          1  yes 47.979435 48.27899\n216 female yes   housed   0   0 254     20          0   no 13.968738 48.97176\n217 female  no   housed  13  13 255     26          0   no 41.867615 46.36879\n218   male  no   housed   2   3 256     39          1  yes 25.039495 63.25544\n219   male yes homeless  13  26 257     45          0   no 26.453758 46.76894\n220   male  no   housed  14  16 258     43          0   no 14.480626 70.14779\n221   male  no homeless  51  51 259     36          0   no 52.789551 50.25876\n222   male  no homeless  10  26 260     37          1  yes 35.576111 29.49112\n223   male  no homeless  16  16 261     42          0   no 26.799009 42.42209\n224   male yes homeless 102 102 262     44          1  yes 27.808109 25.61815\n225 female  no   housed   1   2 264     41          1  yes 23.547628 37.35865\n226   male yes   housed   6  20 265     33          1  yes 27.650967 53.05504\n227   male  no homeless  27  27 268     42          0   no 27.177586 43.00587\n228 female  no   housed   4   4 269     27          0   no 34.048084 57.24648\n229   male  no homeless  27  41 270     33          1  yes 31.328341 41.78789\n230 female  no   housed   1   1 272     38          0   no 32.384045 44.85584\n231   male yes   housed  54  73 273     45          0   no 16.125675 47.65467\n232   male yes   housed  24  36 274     40          1  yes 17.625854 44.01194\n233 female  no   housed  10  20 275     23          0   no 47.442879 52.85658\n234   male  no homeless  30  41 276     42          0   no 27.898603 43.68238\n235   male  no homeless  43  43 277     39          0   no 23.683241 43.55378\n236   male  no   housed   2   2 278     21          0   no 58.168713 49.47607\n237   male  no   housed  16  16 279     37          0   no 31.777193 41.87122\n238   male  no   housed   3   3 280      4          1  yes 52.955296 60.10658\n239   male  no   housed  34  51 283     36          1  yes 24.813925 35.46683\n240 female  no homeless   8   8 284     38          0   no 31.781149 51.49556\n241   male  no   housed  28  28 285     42          1  yes 46.830055 62.44834\n242   male  no   housed  13  13 287     44          0   no 16.398746 42.32603\n243   male  no   housed  51  51 288     38          0   no 36.798199 57.78556\n244   male  no homeless 134 140 289     42          1  yes 55.991005 32.58783\n245   male yes homeless   5   6 290     28          0   no 41.624405 53.04678\n246   male  no homeless   5   5 291     40          1  yes 19.645632 46.33508\n247   male yes   housed   3   3 292     44          1  yes 26.919926 48.62301\n248   male  no   housed   0   0 293     37          0   no 37.953053 61.60262\n249   male yes   housed  26  26 294     32          0   no 31.877844 51.38743\n250   male  no   housed  15  30 295     30          0   no 54.970051 33.79744\n251   male yes homeless   9  20 296     39          0   no 30.701992 51.40308\n252   male  no   housed  10  15 297     41          0   no 27.607288 44.29502\n253   male yes   housed   0   0 298     31          1  yes 29.505835 46.76040\n254   male yes   housed  24  45 299     39          0   no 21.931257 49.87759\n255   male yes homeless  33  51 300     40          0   no 20.979116 59.28272\n256   male  no   housed   0   0 302     32          0   no 28.558788 36.63770\n257 female yes   housed   8  13 304     28          0   no 20.911337 33.07642\n258 female yes homeless  27  33 306     25          1  yes 44.446507 45.79400\n259   male yes   housed   0   0 307     39          1  yes 11.819070 62.81930\n260 female  no   housed   0   0 308     33          0   no 21.543468 52.35651\n261   male  no homeless   3   3 309     40          0   no 25.548498 46.98674\n262   male  no homeless  14  20 310     39          0   no 34.139271 56.95329\n263   male  no homeless  12  12 311     38          0   no 29.400602 44.11552\n264 female  no homeless   1   1 313     33          1  yes 27.601431 37.83872\n265   male  no   housed   0   0 315     27          1  yes 56.963795 46.56849\n266 female  no   housed   1   1 316     36          0   no 14.415197 46.74971\n267   male  no   housed   0   0 317     29          0   no 41.195469 40.11784\n268   male  no   housed  25  33 318     39          0   no 36.719200 30.27282\n269   male yes   housed  42  57 319     40          0   no 48.008137 51.74989\n270 female  no   housed   2   2 320     22          0   no 34.747746 64.35030\n271   male  no   housed   6   6 322     32          0   no 58.477470 58.89470\n272   male  no   housed  19  19 323     38          0   no 62.031616 36.10949\n273 female yes homeless  29  58 324     27          0   no 16.718819 35.70664\n274 female  no   housed   0   0 325     32          1  yes 20.220354 32.44772\n275   male yes homeless   0   0 326     37          1  yes 24.378925 35.89378\n276 female yes homeless   0   0 327     32          1  yes 28.447634 39.93384\n277   male  no homeless  22  32 328     31          0   no 18.677704 71.62856\n278   male  no homeless  19  19 329     19          0   no 58.899960 59.34274\n279   male yes homeless  13  19 331     41          0   no 15.773271 48.61113\n280   male yes   housed   1   1 332     34          0   no 34.541599 54.08614\n281 female yes homeless  67  67 333     40          0   no 17.926985 39.09279\n282   male  no homeless  13  13 334     40          0   no 51.918278 51.16233\n283   male  no   housed  20  20 335     37          1  yes 23.137871 51.24271\n284   male  no   housed   0   0 336     39          1  yes 22.939909 33.03571\n285   male  no   housed   3   9 337     26          0   no 33.888065 33.92213\n286   male  no homeless 142 142 338     37          0   no 34.412716 25.92422\n287 female yes homeless  53  53 339     36          0   no 22.237560 36.52407\n288   male yes homeless  64  64 341     32          1  yes 22.354912 31.76573\n289 female  no   housed   0   0 342     40          0   no  7.035307 52.51404\n290   male  no   housed   2   2 343     42          0   no 19.718121 41.32350\n291   male  no homeless  51  51 346     43          0   no 28.747435 51.08913\n292   male  no   housed   1   1 347     12          0   no 55.912579 51.01180\n293   male  no homeless  24  30 348     44          0   no 18.948950 40.42006\n294   male  no   housed  35  35 350     40          1  yes 38.851971 45.13578\n295 female yes homeless  67  80 351     41          0   no 16.922634 34.09209\n296   male  no homeless   0   0 352     41          1  yes 31.739616 31.52352\n297   male yes   housed  13  26 353     38          0   no 17.837486 54.94331\n298 female  no homeless   6   6 354     22          1  yes 24.923189 63.77832\n299   male yes homeless  12  12 355     41          0   no 20.911737 44.87310\n300   male  no homeless   7   7 356     37          0   no 32.773659 63.90699\n301   male yes homeless  26  26 357     40          1  yes 23.771542 47.50178\n302   male yes homeless  41  56 359     41          1  yes 23.242210 30.34914\n303   male yes homeless   3   3 360     41          0   no 22.447948 45.32498\n304   male  no   housed  18  31 361     31          1  yes 58.851147 58.71478\n305   male  no homeless  38  55 362     43          0   no 27.218351 34.31445\n306   male  no   housed  12  15 363     39          0   no 18.287806 43.60749\n307 female  no homeless  26  26 364     15          1  yes 60.542084 55.44015\n308   male  no homeless   4   4 365     40          0   no 37.835770 32.12609\n309   male  no   housed  32  32 366     24          1  yes 37.698196 52.02918\n310 female yes   housed  13  13 367     35          0   no 13.852996 31.11147\n311   male  no homeless  34 102 368     42          0   no 18.615227 58.15246\n312   male  no homeless  38  51 369     29         NA &lt;NA&gt; 47.255920 46.52069\n313 female yes homeless   0   0 370     32          0   no 19.808329 27.09086\n314   male  no homeless  13  13 371     31          0   no 57.873539 57.59651\n315 female  no   housed   0   0 372     44          0   no  9.406377 41.95401\n316 female yes   housed   3   3 374     40          0   no 27.495565 51.27790\n317   male  no   housed  49  49 376     42          1  yes 41.010502 62.97789\n318   male  no homeless  18  36 377     35          1  yes 39.963680 37.80672\n319   male yes   housed   0   0 378     37          0   no 21.599306 36.64597\n320 female  no homeless  58  58 379     13          0   no 44.767254 53.42212\n321   male yes homeless   2   2 380     43          1  yes 29.332056 25.43683\n322   male  no   housed   6  13 381     40          0   no 18.604780 66.09068\n323   male  no homeless   6  13 382     33          1  yes 19.291830 59.91458\n324   male  no   housed  10  10 383     37          0   no 31.856297 64.18298\n325   male  no   housed   0   0 385     36          1  yes 26.698538 43.39342\n326   male  no homeless   6  20 386     26          1  yes 53.340359 57.65739\n327   male  no homeless   6   6 387     42          1  yes 51.003738 51.70669\n328   male  no   housed   0   0 388     35          0   no 28.639238 48.98777\n329   male  no   housed  32  32 389     41          1  yes 44.215485 54.15862\n330 female  no   housed   6   6 391     34          0   no  7.226597 47.60948\n331   male  no   housed   3  12 392     36          0   no 57.296200 59.14530\n332   male  no homeless   6   6 394     42          0   no 30.918043 63.34270\n333   male  no homeless   0   0 395     33          0   no 24.849377 51.15330\n334   male  no homeless  25  25 399     38          1  yes 17.863741 38.19618\n335   male  no homeless  13  26 400     41          0   no 48.483433 57.44889\n336   male  no homeless  18  18 401     36          0   no 27.514502 64.07393\n337 female  no   housed  13  26 402     38          1  yes 19.819555 32.99675\n338 female  no   housed   0   0 403     41          0   no 29.213017 56.69189\n339   male  no   housed   2   2 404     39          1  yes 36.029205 61.19665\n340   male yes homeless  26  38 405     41          1  yes 25.465322 65.26759\n341   male  no homeless   5  25 406     39          1  yes 38.778580 41.73849\n342   male yes   housed  10  23 407     25          1  yes 31.255833 56.56525\n343   male  no homeless   0   0 408     32          0   no 58.750145 53.01821\n344   male  no   housed   4   4 409     39          0   no 32.313843 57.04919\n345   male  no   housed  29  85 411     31          1  yes 40.056877 57.73149\n346   male  no homeless  20  20 413     40          1  yes 37.504734 54.06671\n347   male  no   housed   3  12 415     29          0   no 18.340139 43.89911\n348   male yes homeless   6  12 416     41          0   no 14.108759 48.81484\n349   male  no homeless  13  13 418      9          0   no 59.930012 58.22468\n350   male  no homeless  36  36 419     39          0   no 26.474701 48.76114\n351   male  no homeless  18  18 420     37          0   no 57.489437 37.74971\n352 female  no   housed   0   0 421     37          0   no 31.077631 64.91865\n353   male  no homeless  45  45 422     40          0   no 41.324745 36.81136\n354   male  no   housed  13  13 423     31          0   no 38.907230 49.43321\n355   male  no homeless   4  10 424     42          0   no 22.673281 45.18067\n356   male  no homeless   6  26 425     42          0   no 30.106504 36.35557\n357   male  no   housed   6   6 428     15          0   no 38.276970 36.49366\n358   male  no   housed  25  42 430     37          0   no 45.859604 14.07429\n359 female  no   housed  21  21 431     13          1  yes 51.922516 54.52398\n360   male  no homeless  13  13 432     35          1  yes 25.544411 42.86974\n361   male  no   housed  37  37 433     30          0   no 22.730097 56.85568\n362   male  no   housed  25  25 435     44          0   no 25.445648 44.17665\n363   male yes homeless  38  38 436     32          1  yes 46.967522 58.74847\n364   male  no   housed  12  29 437     32          0   no 47.133209 51.92163\n365   male  no   housed   6  24 438     38          1  yes 42.632927 56.86680\n366   male  no homeless   6   6 440     34          0   no 54.851093 50.26602\n367   male  no   housed   0   0 441     44          0   no 15.101494 48.11589\n368 female  no   housed   0   0 442     37          0   no 24.930353 33.53111\n369   male yes homeless   8   8 443     40          1  yes 19.116766 45.58474\n370   male  no   housed  32  32 444     41          0   no 51.843193 59.72128\n371 female  no homeless  24  51 445     44          0   no 25.710777 49.18084\n372   male  no homeless  51  51 447     30          0   no 32.484653 44.22039\n373   male  no   housed  35  35 448     42          1  yes 43.498222 20.74029\n374   male  no homeless  73  73 449     36          1  yes 18.795931 54.93296\n375   male yes homeless   9  31 452     45          0   no 18.525930 47.58062\n376   male yes homeless  51  51 457     44          1  yes 25.738285 34.90893\n377   male  no   housed   6   8 458     28          0   no 14.891697 60.11456\n378   male  no   housed   6  16 459     32          1  yes 41.360710 44.59728\n379 female yes homeless   6  13 461     34          0   no 16.863588 46.69877\n380   male  no homeless   2   3 464     44         NA &lt;NA&gt; 17.082233 47.00855\n381 female yes   housed  26  41 465     35          1  yes 30.701563 38.40187\n382 female  no   housed   0   0 466      6          0   no 41.624706 62.08943\n383   male  no   housed   1   1 467     31          0   no 43.441059 59.99293\n384   male  no homeless  49 109 468     42          0   no 27.801510 51.69448\n385   male  no   housed  19  25 469     35          1  yes 42.457150 53.54025\n386 female yes   housed   3  16 470     33          0   no 22.337873 42.31495\n387   male  no   housed  38  51  13     45          0   no 18.750151 46.04046\n388   male  no homeless  26  40  26     45          1  yes 28.556833 53.17226\n389   male  no homeless  83 145  29     42          0   no 28.602417 47.83191\n390   male yes   housed  32  40  48     43          0   no 15.268264 40.83885\n391 female  no homeless  19  19  55     31          0   no 27.717655 41.10135\n392   male  no   housed  30 101  64     41          0   no 40.633827 58.78673\n393   male  no   housed  42  42 130     31          0   no 46.269627 36.50988\n394 female  no   housed   1   1 139     21          0   no 57.834595 58.21511\n395   male  no   housed  18  26 145     36          1  yes 33.659222 45.00826\n396   male yes homeless  35 105 146     36          0   no 21.645960 41.52777\n397   male  no homeless  20  20 147     41          0   no 23.724752 32.87765\n398 female yes   housed   0   0 155     35         NA &lt;NA&gt; 47.773228 41.09781\n399 female  no homeless  11  14 157     35          0   no  9.732559 69.17161\n400   male yes   housed  26  26 159     33          0   no 15.599421 47.65695\n401   male  no homeless  43  54 161     43          1  yes 28.475632 45.82243\n402 female  no homeless  19  26 162     25          0   no 55.479382 54.09069\n403   male  no   housed   1   2 165     35          1  yes 36.594727 59.08202\n404 female  no   housed  13  26 171     38          0   no 28.590870 57.76270\n405   male  no   housed  51  51 175     37          0   no 15.078867 41.00370\n406   male yes homeless  24  48 176     44          0   no 38.950596 59.73408\n407   male yes   housed  13  13 184     43          1  yes 31.680859 60.97185\n408   male  no   housed  20  26 195     41         NA &lt;NA&gt; 19.096197 59.91701\n409   male  no   housed  26  26 197     35          0   no 48.442287 58.50863\n410   male  no   housed   8  18 205     36          0   no 52.697727 58.58452\n411   male yes   housed  61  61 207     34          0   no 19.919922 64.95238\n412   male  no   housed  13  19 216     33          0   no 13.312669 49.44656\n413   male yes homeless  28  37 218     43          0   no 15.686288 58.84382\n414   male  no   housed   6   7 227     32          1  yes 33.820976 27.27006\n415   male  no   housed  10  10 234     41          1  yes 11.499865 66.23132\n416   male  no   housed   0   0 244     36          1  yes 26.392733 32.35484\n417   male  no   housed   4  10 251     19          0   no 52.945427 58.86002\n418   male  no   housed  25  37 252     33          0   no 39.972664 56.95388\n419   male  no homeless   2   2 263     40         NA &lt;NA&gt; 23.446474 40.40644\n420   male  no homeless  26  26 266     44          1  yes 42.341843 61.74688\n421   male  no   housed  24  24 267     33          0   no 28.061911 53.93607\n422   male yes homeless   0   0 271     38          0   no 28.073883 63.86327\n423   male  no homeless  13  13 281     38          1  yes 37.116608 35.98627\n424   male  no   housed  12  12 282     31          0   no 57.800064 49.21747\n425   male  no   housed  12  30 301     41          0   no 12.204219 51.45133\n426 female  no   housed   4   4 303     20          1  yes 45.425110 58.75759\n427   male  no   housed  12  18 305     38          0   no 39.038631 47.92621\n428   male  no homeless   3   3 312     36          0   no 37.102394 51.63569\n429   male  no   housed  51  69 314     29          0   no 23.898293 23.55043\n430   male  no homeless   5   5 321     29          0   no 46.330513 59.16547\n431   male  no homeless  68  68 330     42          1  yes 13.412563 42.08535\n432   male  no homeless  29  29 340     43          0   no 49.503277 51.01598\n433 female  no homeless  26  26 345     28         NA &lt;NA&gt; 18.594315 38.86502\n434 female  no   housed   7   8 349     27          0   no 25.676130 54.98139\n435   male  no   housed   5   5 373     38          0   no 33.345051 46.42344\n436   male  no homeless  32  32 390     41          0   no 18.530807 52.71838\n437   male  no   housed   0   0 393     14          0   no 54.525818 59.42862\n438   male  no   housed  76  78 396     10          0   no 44.171612 38.49107\n439   male  no homeless  26  26 397     32          0   no 47.779892 52.73988\n440   male  no homeless  41  62 398     39          0   no 21.271496 45.72916\n441   male  no homeless  18  18 410     43          1  yes 39.929405 61.97865\n442   male  no homeless  22  30 412     31         NA &lt;NA&gt; 25.632202 60.46511\n443   male  no   housed  53  63 417     43          1  yes 23.716438 38.24600\n444 female yes homeless  26  32 427     37          0   no 34.152245 45.27036\n445   male  no homeless   4  13 434     34          0   no 52.792542 57.12674\n446   male  no   housed   3   3 439     30          0   no 28.609346 52.02338\n447 female yes homeless  56  61 451     41          0   no 17.050970 34.51623\n448   male  no homeless   0   0 453     36          0   no 25.851772 50.60834\n449   male  no   housed   0   0 454     38          0   no 41.943066 56.96868\n450   male  no   housed  13  20 455     39          1  yes 62.175503 57.25384\n451 female  no homeless   1  24 460     28          0   no 33.434536 40.04572\n452   male  no homeless  13  13 462     26          0   no 54.424816 53.73204\n453   male  no homeless  51  51 463     43          0   no 30.212227 43.47607\n    pss_fr  racegrp satreat sexrisk substance treat avg_drinks max_drinks\n1        0    black      no       4   cocaine   yes         13         26\n2        1    white      no       7   alcohol   yes         56         62\n3       13    black      no       2    heroin    no          0          0\n4       11    white     yes       4    heroin    no          5          5\n5       10    black      no       6   cocaine    no         10         13\n6        5    black      no       5   cocaine   yes          4          4\n7        1    black     yes       8   cocaine    no         13         20\n8        4    white     yes       6   alcohol   yes         12         24\n9        5    white      no       8   alcohol    no         71        129\n10       0    white     yes       0    heroin   yes         20         27\n11       0    white      no       2    heroin   yes          0          0\n12      13    black     yes       0   alcohol    no         13         13\n13      13    white     yes       1   alcohol    no         20         31\n14       1    black      no       4   cocaine   yes         13         20\n15       1    white      no       8   alcohol   yes         51         51\n16       7 hispanic     yes       3    heroin   yes          0          0\n17       9    black      no       4    heroin    no          0          0\n18       1    other      no       4   cocaine    no          1          1\n19      13    white      no       3    heroin   yes          9         24\n20      11    black     yes       7   cocaine    no         23         23\n21       8    black      no       4    heroin   yes         26         26\n22      14    black      no       4   cocaine   yes          0          0\n23      10    white      no       6   alcohol    no         34         34\n24       6    black     yes       9   cocaine    no          4          5\n25       6    black      no       7   cocaine    no          6          8\n26       3    white      no       5   cocaine   yes          3          3\n27       6    black      no       4    heroin   yes          7          7\n28       4    white      no       5   alcohol    no         24         48\n29       5    black     yes       2   cocaine   yes          0          0\n30       3    black      no       6   alcohol    no         20         20\n31      12    black      no       0   alcohol    no          3          3\n32       2    black     yes       5   cocaine   yes          6          6\n33      10    black      no       2   cocaine   yes          0          0\n34      10    black      no       0   cocaine   yes          0          0\n35       8    black      no       3   alcohol   yes         32        135\n36       6    white      no       4   alcohol    no          2         24\n37      11    black      no       4    heroin    no          3          3\n38       1    white     yes       0   alcohol    no         27         27\n39      10 hispanic      no       4    heroin    no          3          7\n40       3    white      no       7   cocaine   yes         24         36\n41       4    black      no       7   cocaine   yes          6         12\n42       7    black      no       6   cocaine    no          0          0\n43      14    white      no       4    heroin   yes         13         13\n44      10    black      no       5   alcohol    no         25         28\n45      12    black      no       4   cocaine   yes          6         13\n46      12    black      no       1   alcohol    no         13         61\n47      11    black      no      10    heroin   yes         15         26\n48       6    black      no       6   cocaine    no          7          7\n49       6    other      no       9    heroin   yes          9         15\n50       2    black      no       7   alcohol   yes          5         13\n51       1    black      no       7   cocaine   yes         13         20\n52       8    white      no       3   alcohol    no         34         34\n53      13    other      no       4   cocaine   yes          3          6\n54       1    white     yes       2   alcohol    no         37         43\n55      10    black      no       4   alcohol   yes         36         36\n56       7    black     yes       6    heroin    no         13         15\n57       6    black     yes       7   cocaine    no          3         19\n58      13    white     yes       4   alcohol   yes          3          6\n59       4 hispanic     yes       4    heroin    no          0          0\n60      12    black     yes       6   cocaine   yes         32         32\n61      11    black     yes       4   alcohol    no         35         42\n62       5    white      no       6   alcohol    no         20         20\n63       5    black     yes       9   alcohol    no          7         25\n64       1    black      no       4   alcohol   yes         59        164\n65       8    white     yes       2    heroin   yes          0          0\n66       3    white     yes       6   alcohol   yes         26         51\n67       6    white      no       9   cocaine    no         12         18\n68      14    white      no       3    heroin    no          0          0\n69       4    black      no       5   cocaine   yes         18         36\n70       5    white      no       8   cocaine    no          6         12\n71      10    white      no      12   cocaine    no         13         17\n72       2    black      no       4   cocaine   yes          5          5\n73       4    black      no       9    heroin    no          2          2\n74       9    black     yes       6   cocaine    no        102        102\n75       7    white     yes       6   alcohol   yes          0          0\n76       1 hispanic      no       3    heroin    no         21         21\n77      12    white      no      11    heroin   yes          6          8\n78       1    black      no       7   cocaine   yes          1          1\n79      10    black      no       4   alcohol    no         19         19\n80      13    black      no       4   alcohol   yes          1         22\n81      11    black      no       3   cocaine    no          2          2\n82       9    other      no       5   alcohol   yes          0          0\n83       8    white     yes       2   alcohol    no         26         47\n84       3    black      no       1    heroin   yes          0          0\n85      12    white      no       1    heroin   yes          9         19\n86      14    black      no       4   cocaine    no         10         10\n87       4 hispanic      no       5    heroin   yes          4          5\n88      10    black      no       5   cocaine    no          6         15\n89       9    white      no       3   alcohol    no         26         51\n90       1    other      no       7   alcohol   yes         64         64\n91      10    black     yes       4   cocaine   yes         26         26\n92       9    black      no      10   cocaine   yes          2          3\n93       7    white     yes       3   alcohol    no         33         38\n94       6    black      no       3   cocaine   yes         61        184\n95       5    black      no       2   cocaine    no          2          2\n96       9    black     yes       7   cocaine    no         19         19\n97      12    black     yes       5   alcohol   yes          9         15\n98       1    white     yes       4    heroin    no          0          0\n99       4    white      no       6   alcohol   yes         18         47\n100      8    white      no       0   alcohol   yes         51         51\n101      4    white     yes       5    heroin    no          0          0\n102      9    black      no       6   alcohol    no         36         66\n103      6    black      no       3   alcohol    no         31         91\n104      5    white      no       4    heroin   yes          0          0\n105      7    black      no       4   alcohol   yes         26         69\n106      2    black      no       5   cocaine    no          2         20\n107     14 hispanic      no       4   cocaine   yes          0          0\n108      4    white     yes      13   alcohol    no         51         51\n109      7    black      no       5   alcohol   yes         34         34\n110      4    black      no      10   cocaine    no         39         95\n111      3    black      no       9   cocaine   yes         19         26\n112      6    white     yes       4   alcohol    no         13         13\n113     12    white     yes       4    heroin   yes          0          0\n114     10    white      no       6    heroin    no          0          0\n115      3    other      no       9   cocaine    no         13         13\n116     13    black     yes       6   cocaine   yes          1          1\n117      7    black      no       3   alcohol   yes         22         22\n118      4    black      no       7   cocaine   yes         13         33\n119     11    black     yes       3   cocaine   yes         26         26\n120      5    white     yes       3   alcohol    no         19         30\n121      2    white      no       5   alcohol    no         26         26\n122      2    white      no       0   alcohol    no         13         13\n123      8    black     yes       7   cocaine   yes          3          3\n124      9    black      no       7   cocaine   yes         24         24\n125     11    black      no       4    heroin   yes          0          0\n126      9    other      no       7   cocaine   yes          0          0\n127      7    white      no       0   alcohol    no         53         53\n128      7    black     yes       7   cocaine   yes          7          7\n129      1    black      no       7   alcohol    no         25         25\n130      7 hispanic     yes       9   alcohol    no         15         15\n131      5    black      no       6   alcohol   yes         64        179\n132     12    black      no       4    heroin    no          4          4\n133      9    white     yes       5    heroin   yes          3          6\n134      1    white      no       5   cocaine   yes          2          2\n135      8    white      no       7   alcohol    no         13         13\n136      7    white      no       5   alcohol    no         20         51\n137      8    black      no       9   cocaine   yes          1          3\n138      7    other      no       5   cocaine   yes         38         38\n139      6    black     yes       6    heroin    no          8          8\n140      3    black     yes       6   cocaine   yes          0          0\n141      3    black      no       2   cocaine    no         13         13\n142      8    white      no       5   alcohol   yes         39         39\n143     10    black      no       7   cocaine    no         12         20\n144      9    black     yes       2   cocaine    no          0          0\n145     11    white      no       4    heroin   yes          0          0\n146     11    other     yes       3    heroin    no          1          1\n147      9    white     yes       1   alcohol    no         19         32\n148      2    white      no       6    heroin    no          0          0\n149      8    white      no       4   alcohol   yes         26         51\n150      8    black      no       7   alcohol   yes         19         19\n151      7    black      no       8   cocaine    no          3          6\n152      3    black     yes       9   cocaine   yes          1          1\n153      5    white     yes       5   alcohol    no         12         17\n154     13    black     yes       7   cocaine   yes         29         29\n155      2    white      no       8   alcohol    no         38         38\n156      6    white     yes       0   alcohol    no         12         12\n157      9    black      no       0    heroin    no          4          4\n158      7    white      no       0   alcohol   yes         19         50\n159     11 hispanic      no       3   alcohol   yes         41         54\n160      2    other      no       0    heroin    no          1          3\n161      3    white      no       4    heroin   yes          0          0\n162      7 hispanic      no       5   alcohol    no         59         59\n163      1    white      no       6    heroin   yes         19         19\n164      7    black      no       2   cocaine   yes          8          8\n165     14    black      no      11   cocaine    no         16         20\n166     10    black      no       4   cocaine    no         12         12\n167      8    white      no      11   alcohol    no         26         33\n168      3    white      no       9   alcohol   yes         50         50\n169     14    white      no       0   alcohol   yes         12         20\n170     11    white      no       1    heroin   yes          1          3\n171      0    black      no      14   cocaine    no         13         32\n172      3 hispanic      no       7   cocaine    no         10         13\n173      4    black      no       8   cocaine   yes          3         24\n174     10    white      no       4    heroin   yes         20         20\n175      2    black     yes       7   cocaine    no         19         26\n176     10    white      no       4   alcohol   yes          6         12\n177      2    black     yes       7   alcohol   yes        102        102\n178     10    black      no       7   cocaine    no          1          4\n179      2    other     yes       5    heroin   yes          0          0\n180     12    black      no       8    heroin    no         58         58\n181      2    white      no       4    heroin   yes          9          9\n182      9    black      no       8    heroin    no          0          0\n183      2    black      no       6   cocaine   yes         35         65\n184      5    black      no       8   alcohol   yes         33         51\n185     13    black     yes       3   alcohol    no         19         19\n186     11    black     yes       2   alcohol   yes         58         58\n187      8    other      no       3    heroin    no         32         38\n188     11    white      no       6    heroin    no          0          0\n189      6    white      no       6   cocaine   yes          0          0\n190     10    black      no       3   cocaine   yes          6          6\n191     11    black      no       0   cocaine    no          0          0\n192      6 hispanic      no       6   alcohol    no         18         18\n193     12    white      no       4    heroin    no          0          0\n194      3    white     yes      11   cocaine   yes         38         38\n195     12    black     yes       0   cocaine    no         13         13\n196      5    black      no       3   alcohol   yes          0          0\n197     11    black      no       3   alcohol    no         46         46\n198      4    white     yes       2    heroin   yes         27         30\n199     14    black      no       2   cocaine    no          3          3\n200      7    white      no       4    heroin    no         12         12\n201      3    white      no       5   alcohol   yes         16         26\n202      3    black     yes       4   cocaine   yes          1          6\n203      1    white      no       0   alcohol    no         26         26\n204      2    black     yes       7   alcohol   yes         23         92\n205      0    black     yes       5   alcohol    no         13         13\n206      4    black      no       2   cocaine    no          0          0\n207      2    black      no       8   cocaine    no          4          4\n208      0    white     yes       5   alcohol   yes         26         26\n209      3    black      no       2   cocaine   yes         13         13\n210      1    other      no       5   cocaine   yes         13         13\n211      8    white      no       5   alcohol    no         10         14\n212      5    black      no       4   alcohol    no         23         42\n213     10    black      no       5    heroin    no         42         48\n214     12    white      no       4   alcohol   yes         15         15\n215      6    black      no       4   cocaine   yes         19         20\n216     11    black      no       4   cocaine   yes          0          0\n217      7 hispanic      no       4    heroin    no         13         13\n218     14    black      no       8   cocaine    no          2          3\n219      3    white      no       5    heroin    no         13         26\n220      5    white      no       5   cocaine   yes         14         16\n221      1    white     yes       6   alcohol    no         51         51\n222      3    black      no       7   cocaine   yes         10         26\n223     10    white      no       0   alcohol    no         16         16\n224      7    white      no       1   alcohol   yes        102        102\n225      7    black     yes       2    heroin   yes          1          2\n226      6    black      no       5   cocaine   yes          6         20\n227      6    black      no      11   cocaine    no         27         27\n228     12    black      no       2   cocaine    no          4          4\n229      1    black      no       7   cocaine   yes         27         41\n230     10    black      no       4   cocaine    no          1          1\n231     11    white     yes       1   alcohol    no         54         73\n232     13 hispanic      no       4    heroin   yes         24         36\n233     11    black      no       7   alcohol   yes         10         20\n234      2    white     yes       1   alcohol    no         30         41\n235      9    black      no       4   alcohol   yes         43         43\n236      3    black      no       8   cocaine    no          2          2\n237      4    black      no       0    heroin    no         16         16\n238     12    black      no       4   cocaine   yes          3          3\n239     12    black      no       5   cocaine    no         34         51\n240      7    black     yes       8   cocaine   yes          8          8\n241      1    black      no       1   alcohol   yes         28         28\n242      3    black      no       6   cocaine    no         13         13\n243     13    black     yes       7   cocaine   yes         51         51\n244     11    black     yes      13   alcohol   yes        134        140\n245      6    black     yes       2   alcohol    no          5          6\n246      9    white      no       5    heroin   yes          5          5\n247      3    white      no       4   alcohol    no          3          3\n248      6    black     yes       4   cocaine    no          0          0\n249     11 hispanic      no       3   cocaine    no         26         26\n250     12    white      no       1   alcohol   yes         15         30\n251      4    white      no       4    heroin   yes          9         20\n252      5    white     yes       0   alcohol    no         10         15\n253     10 hispanic      no       3    heroin    no          0          0\n254      6    other      no       2   alcohol   yes         24         45\n255      1    white     yes       0   alcohol   yes         33         51\n256      4 hispanic      no       5    heroin    no          0          0\n257      6 hispanic     yes       4    heroin   yes          8         13\n258     12    black      no       4   alcohol   yes         27         33\n259      2 hispanic     yes       4    heroin   yes          0          0\n260     10    white      no       4    heroin    no          0          0\n261      5 hispanic      no       3    heroin   yes          3          3\n262     14    white      no       4   alcohol   yes         14         20\n263      3    white     yes       2    heroin    no         12         12\n264     11    black      no       6   cocaine    no          1          1\n265      5    black      no       4   cocaine   yes          0          0\n266      2    black      no      11    heroin   yes          1          1\n267     11 hispanic      no       3    heroin   yes          0          0\n268      9    other      no       4   alcohol    no         25         33\n269     11 hispanic      no       0   alcohol    no         42         57\n270      3    white      no       1    heroin   yes          2          2\n271     11    white     yes       6    heroin   yes          6          6\n272     12    black      no       5   cocaine    no         19         19\n273      3    black      no      11   alcohol   yes         29         58\n274      2    black      no       9   alcohol   yes          0          0\n275      4 hispanic      no       4    heroin    no          0          0\n276      2    other      no       0    heroin   yes          0          0\n277      6    black      no       6   cocaine    no         22         32\n278     12    black     yes       6   alcohol   yes         19         19\n279      3    black     yes       5   alcohol    no         13         19\n280      5    black      no       8   cocaine   yes          1          1\n281      7    black      no       6   alcohol    no         67         67\n282     12    black     yes      11   cocaine    no         13         13\n283     10    white      no       2    heroin   yes         20         20\n284     10    black      no       2    heroin   yes          0          0\n285      2    black     yes       7   cocaine   yes          3          9\n286      5    white      no       8   alcohol    no        142        142\n287      3    black     yes       5   alcohol    no         53         53\n288      1    white     yes       0    heroin    no         64         64\n289      8    other      no       7    heroin   yes          0          0\n290      7    other      no       3    heroin    no          2          2\n291     10    white      no       6   alcohol   yes         51         51\n292     11    black     yes       6   cocaine   yes          1          1\n293      7    black      no       9   alcohol    no         24         30\n294     12 hispanic      no       1   alcohol    no         35         35\n295      0    other      no       2   alcohol    no         67         80\n296      0    white      no       4    heroin   yes          0          0\n297      5    black      no       1   cocaine    no         13         26\n298      8    black      no       4   cocaine   yes          6          6\n299      2 hispanic      no       8    heroin   yes         12         12\n300      2 hispanic      no       0   alcohol    no          7          7\n301      5    white      no       7   alcohol   yes         26         26\n302      9    white     yes       6   alcohol   yes         41         56\n303      2 hispanic     yes       7   alcohol    no          3          3\n304      4    black      no       5   alcohol   yes         18         31\n305      0    white      no       9   alcohol    no         38         55\n306      2    black     yes       4   alcohol    no         12         15\n307     13    white      no       1    heroin   yes         26         26\n308      4    black     yes       0    heroin    no          4          4\n309     11 hispanic      no       4   alcohol   yes         32         32\n310      9    black      no       0   cocaine   yes         13         13\n311      5    white      no       4   alcohol    no         34        102\n312      6    black      no       7   cocaine   yes         38         51\n313     13    white     yes       3   alcohol    no          0          0\n314     14    black      no       8   cocaine   yes         13         13\n315     13    white      no       4    heroin    no          0          0\n316      3    black      no       9   cocaine    no          3          3\n317      5    black     yes      11   cocaine   yes         49         49\n318      0    white      no       3   alcohol    no         18         36\n319      1 hispanic     yes       3    heroin   yes          0          0\n320     14    black      no       4   cocaine    no         58         58\n321      5 hispanic      no       4    heroin   yes          2          2\n322      4    black      no       5   cocaine   yes          6         13\n323      6    black      no       5   cocaine   yes          6         13\n324      7    black     yes       6   cocaine    no         10         10\n325      3 hispanic      no       1    heroin   yes          0          0\n326     12    white      no       0   alcohol    no          6         20\n327      2 hispanic     yes       2   cocaine   yes          6          6\n328     10    white      no       2    heroin    no          0          0\n329      9    black      no       6   alcohol   yes         32         32\n330      9    white      no       4   alcohol   yes          6          6\n331      5 hispanic     yes       4   alcohol    no          3         12\n332     11    black     yes       5   cocaine   yes          6          6\n333      1 hispanic     yes       4   cocaine   yes          0          0\n334      6    white      no       0   alcohol   yes         25         25\n335      5    white      no       5   alcohol    no         13         26\n336      3    black     yes       5   alcohol    no         18         18\n337      0    black      no       4   alcohol   yes         13         26\n338      3    black     yes       3    heroin    no          0          0\n339      1    black      no       3   cocaine   yes          2          2\n340      5    black      no       9   cocaine    no         26         38\n341     10    black     yes       8   cocaine   yes          5         25\n342      7    black      no       6   cocaine   yes         10         23\n343     12    black      no       8   cocaine    no          0          0\n344     14    black      no       4    heroin    no          4          4\n345     11    black      no       5   cocaine   yes         29         85\n346      3    other      no       2   alcohol    no         20         20\n347     12    black      no       2   cocaine   yes          3         12\n348      5    white     yes       5    heroin    no          6         12\n349      3    black      no       7   cocaine    no         13         13\n350     12    white     yes       3    heroin   yes         36         36\n351      8    white     yes       3    heroin    no         18         18\n352     14    black      no      12   cocaine   yes          0          0\n353      3 hispanic      no       2    heroin    no         45         45\n354     11    black     yes       2    heroin   yes         13         13\n355      4    white      no       0    heroin    no          4         10\n356      5    white     yes       4   alcohol    no          6         26\n357      5    black      no       3    heroin    no          6          6\n358      8    white      no       4   alcohol    no         25         42\n359     12 hispanic      no       0   alcohol    no         21         21\n360     12    other      no       4    heroin   yes         13         13\n361     11 hispanic      no       2    heroin   yes         37         37\n362      8    black     yes       5   alcohol    no         25         25\n363      4    white     yes       1   alcohol   yes         38         38\n364      8 hispanic      no       3   alcohol    no         12         29\n365      6    black      no       4   cocaine   yes          6         24\n366      3    black      no       5    heroin   yes          6          6\n367      0    white     yes       5    heroin    no          0          0\n368      7    black      no       2    heroin   yes          0          0\n369      4    white     yes       1    heroin   yes          8          8\n370      5    white      no       5   alcohol    no         32         32\n371      9    other      no       9   alcohol    no         24         51\n372      4    white     yes       3   alcohol    no         51         51\n373      3    black      no       4   alcohol   yes         35         35\n374      4 hispanic     yes       2   alcohol    no         73         73\n375      3    white      no       4    heroin   yes          9         31\n376      2    white      no       5   alcohol   yes         51         51\n377      2    black      no       7    heroin    no          6          8\n378      7    white      no       3   alcohol   yes          6         16\n379      0    black      no      10   cocaine   yes          6         13\n380     14    white      no       5    heroin   yes          2          3\n381      5    white      no       6   alcohol   yes         26         41\n382     11    black     yes       6   cocaine   yes          0          0\n383     14    black     yes       5   cocaine    no          1          1\n384      1    black      no       5   cocaine    no         49        109\n385     11 hispanic      no       4    heroin   yes         19         25\n386      8    black      no       1    heroin    no          3         16\n387      5    white      no       2   alcohol    no         38         51\n388     14    white      no       3   alcohol   yes         26         40\n389      6    white      no       5   alcohol    no         83        145\n390      7    white      no       7    heroin    no         32         40\n391      3    black      no       6   alcohol    no         19         19\n392      4 hispanic     yes      12   cocaine   yes         30        101\n393     14    black      no       3   alcohol    no         42         42\n394      4    black     yes       1   cocaine    no          1          1\n395      8    other      no       7   cocaine   yes         18         26\n396      8    white      no       4   alcohol    no         35        105\n397      7 hispanic      no       0   alcohol   yes         20         20\n398     14    white      no       1    heroin    no          0          0\n399      4    black      no       7   cocaine    no         11         14\n400      4 hispanic     yes       2    heroin   yes         26         26\n401      7    white      no       6   alcohol   yes         43         54\n402      4    white      no       4   alcohol    no         19         26\n403      8    white      no       5   cocaine   yes          1          2\n404      9    white     yes      14    heroin   yes         13         26\n405      3    white     yes       4   alcohol   yes         51         51\n406     11    white      no       1   alcohol    no         24         48\n407      1    white      no      10    heroin   yes         13         13\n408      3    white     yes       1   alcohol    no         20         26\n409      7    black     yes       3   alcohol    no         26         26\n410     11    white      no       3   alcohol    no          8         18\n411      5    white      no       8   alcohol    no         61         61\n412      8    black      no       3    heroin    no         13         19\n413      1 hispanic      no       8   alcohol   yes         28         37\n414      4    other      no       5    heroin   yes          6          7\n415      4    other      no       3   alcohol   yes         10         10\n416      7 hispanic      no       8    heroin   yes          0          0\n417     11    white     yes       5   cocaine   yes          4         10\n418      3    black     yes       2   alcohol    no         25         37\n419      8 hispanic      no       9    heroin    no          2          2\n420      3    white      no       0   alcohol   yes         26         26\n421     12    black      no       4   cocaine    no         24         24\n422      9 hispanic      no       3   cocaine   yes          0          0\n423      9    black     yes       8   cocaine   yes         13         13\n424     12    black      no       4   cocaine    no         12         12\n425     11    white      no       2   cocaine    no         12         30\n426      1    black      no       2   cocaine   yes          4          4\n427      0    black      no       7   cocaine    no         12         18\n428      2    black      no       3   cocaine    no          3          3\n429      9    white     yes       2   alcohol    no         51         69\n430      8    black      no       3   cocaine    no          5          5\n431      7    white      no       3   cocaine    no         68         68\n432      3    white      no       5   alcohol   yes         29         29\n433      3    white      no       4   alcohol    no         26         26\n434     13    white      no       4   alcohol   yes          7          8\n435      1    white      no       6    heroin   yes          5          5\n436      1    white     yes       7    heroin    no         32         32\n437      5 hispanic      no       4    heroin    no          0          0\n438      1    white      no       4   alcohol    no         76         78\n439     10    white      no       0   alcohol    no         26         26\n440      2    white      no       8   alcohol   yes         41         62\n441      3    white     yes       4    heroin   yes         18         18\n442     14    white      no       3   alcohol    no         22         30\n443      7 hispanic      no       1    heroin   yes         53         63\n444      2 hispanic      no       3   alcohol   yes         26         32\n445     11    other      no       2   alcohol    no          4         13\n446      6    black     yes       4    heroin    no          3          3\n447      8 hispanic     yes      14   alcohol    no         56         61\n448      5    white     yes       4    heroin    no          0          0\n449      7    white      no       4    heroin   yes          0          0\n450     11    white      no       0   alcohol   yes         13         20\n451      1    white      no       2    heroin    no          1         24\n452      7    black     yes       9   cocaine    no         13         13\n453     11    white      no       4   alcohol    no         51         51\n    hospitalizations\n1                  3\n2                 22\n3                  0\n4                  2\n5                 12\n6                  1\n7                 14\n8                  1\n9                 14\n10                 4\n11                 0\n12                 3\n13                 5\n14                10\n15                 2\n16                 6\n17                 1\n18                 2\n19                 0\n20                 1\n21                 1\n22                 1\n23                 4\n24                 2\n25                 4\n26                 1\n27                 0\n28                 0\n29                 1\n30                 2\n31                10\n32                 0\n33                 1\n34                 1\n35                 1\n36                 2\n37                 0\n38                 7\n39                 0\n40                15\n41                 1\n42                 2\n43                 2\n44                 0\n45                 2\n46                 2\n47                 5\n48                 0\n49                 2\n50                 2\n51                 3\n52                 5\n53                 1\n54                 2\n55                 5\n56                 0\n57                 1\n58                 3\n59                 3\n60                 1\n61                 0\n62                 3\n63                 1\n64                 5\n65                 4\n66                 2\n67                 4\n68                 0\n69                10\n70                 3\n71                 2\n72                 4\n73                 7\n74                 2\n75                 0\n76                 1\n77                 1\n78                 1\n79                 3\n80                 2\n81                 2\n82                 2\n83                 1\n84                 0\n85                 2\n86                 2\n87                 2\n88                 1\n89                20\n90                 9\n91                 1\n92                 2\n93                 1\n94                 3\n95                 1\n96                 0\n97                 2\n98                 0\n99                 2\n100                3\n101                3\n102               20\n103                0\n104                1\n105                3\n106                0\n107                0\n108                2\n109               15\n110               10\n111                0\n112                4\n113                5\n114                9\n115                2\n116                5\n117                1\n118                2\n119                1\n120                3\n121                2\n122                6\n123                1\n124                0\n125                0\n126                4\n127                6\n128                0\n129               10\n130               13\n131                5\n132                1\n133                0\n134                4\n135                2\n136               20\n137                1\n138                2\n139                1\n140                0\n141                1\n142                2\n143                2\n144                1\n145                1\n146                1\n147                8\n148                3\n149                8\n150                1\n151                1\n152                1\n153                4\n154                2\n155               10\n156                4\n157                2\n158                0\n159                1\n160                1\n161                6\n162                4\n163                3\n164                2\n165                3\n166                1\n167               10\n168                3\n169                2\n170                1\n171                4\n172                0\n173               10\n174                1\n175               40\n176                0\n177                1\n178                1\n179                0\n180                2\n181                2\n182                1\n183                1\n184                2\n185                2\n186                1\n187                6\n188                0\n189                2\n190                4\n191                1\n192                0\n193                3\n194                7\n195                3\n196                4\n197                1\n198                1\n199                2\n200                4\n201                3\n202                1\n203                1\n204                3\n205                0\n206                1\n207                1\n208                2\n209                2\n210                2\n211                5\n212                4\n213                2\n214                6\n215                0\n216                4\n217                0\n218                4\n219                1\n220                0\n221                1\n222                1\n223                4\n224                6\n225                2\n226                6\n227                2\n228                1\n229                2\n230                1\n231                8\n232                2\n233                0\n234                2\n235               10\n236                0\n237                2\n238                1\n239                1\n240                0\n241                1\n242                4\n243                1\n244                4\n245                1\n246                2\n247                6\n248                0\n249                0\n250                2\n251                0\n252                3\n253               20\n254                1\n255                2\n256                2\n257                1\n258                6\n259                0\n260                2\n261                0\n262                2\n263                3\n264                2\n265                2\n266                2\n267                0\n268                0\n269                1\n270                0\n271                0\n272                1\n273                1\n274                3\n275               20\n276                3\n277                1\n278                2\n279                0\n280                0\n281                4\n282                1\n283                2\n284                1\n285                1\n286               36\n287                1\n288                1\n289                2\n290                5\n291                2\n292                3\n293                3\n294                1\n295                8\n296                2\n297                5\n298                0\n299                6\n300                1\n301                1\n302                1\n303                0\n304                8\n305                3\n306                0\n307                0\n308                4\n309                0\n310                1\n311                2\n312               15\n313                4\n314                5\n315                1\n316                4\n317                1\n318                0\n319                1\n320                0\n321                2\n322                1\n323                0\n324                1\n325                0\n326                1\n327                0\n328                0\n329                1\n330                8\n331                1\n332                1\n333                3\n334                8\n335                1\n336                2\n337                4\n338                0\n339                0\n340                1\n341                1\n342                0\n343                2\n344                0\n345                0\n346                1\n347                0\n348                0\n349                0\n350                1\n351                1\n352                0\n353                3\n354                0\n355                5\n356                2\n357                4\n358                3\n359                3\n360                2\n361                5\n362                7\n363                2\n364                0\n365                1\n366                0\n367                1\n368                2\n369                2\n370                1\n371               10\n372                3\n373                1\n374                2\n375                4\n376                8\n377                2\n378                8\n379                1\n380                0\n381                5\n382                0\n383                1\n384                2\n385                1\n386                1\n387                4\n388                1\n389                4\n390                2\n391                4\n392                1\n393                3\n394                0\n395               17\n396                8\n397                0\n398                0\n399                2\n400                5\n401                2\n402                2\n403                7\n404                2\n405                5\n406                3\n407                1\n408                5\n409                1\n410                0\n411                1\n412                1\n413                4\n414                0\n415                4\n416                1\n417                0\n418                0\n419                2\n420                0\n421                0\n422                4\n423                2\n424                1\n425                1\n426                2\n427                4\n428                0\n429              100\n430                0\n431                6\n432                1\n433                8\n434                4\n435                0\n436                2\n437                0\n438               10\n439                1\n440                2\n441                1\n442                0\n443                2\n444                2\n445                1\n446                3\n447                1\n448                0\n449                1\n450                0\n451                0\n452                2\n453                1\n\n\nThe HELPrct dataset displayed contains 453 rows and 30 columns of various types of variables. These variables include data related to demographic characteristics (like age, sex), substance use (such as anysub, daysanysub), risks (drugrisk, sexrisk), treatments (treat, hospitalization), and psychological factors (such as cesd score, mcs, pcs). The dataset provides details like the number of days since a participant last used substances, their risk levels, treatment history, average and maximum number of drinks consumed, and hospitalization incidents. It includes a mix of categorical and numeric data, offering a comprehensive look at factors relevant to participants’ treatment and health risks.\n\n\n\n\nHELPrct %&gt;% \n  gf_bar(~substance)\n\n\n\n\n\n\n\n\nThe bar chart illustrates the distribution of primary substances of abuse among the participants in the dataset. The three substances depicted are alcohol, cocaine, and heroin. Alcohol has the highest count, with over 150 participants primarily abusing it. Cocaine comes next, followed by heroin, which has the lowest count among the three substances. This suggests that alcohol abuse is more prevalent among the participants compared to cocaine and heroin.\n\n\n\n\nHELPrct %&gt;%\n  gf_props(~substance, fill=~sex)\n\n\n\n\n\n\n\n\nThis displays the proportion of male and female participants who primarily abuse alcohol, cocaine, or heroin. Each bar is divided to represent the proportion of males (shown in blue) and females (shown in red) for each substance. For alcohol and heroin, males make up a larger portion of the abusers, whereas cocaine has a more balanced proportion between males and females. Overall, more males than females are represented across all three substances of abuse.\n\n\n\n\napartments &lt;- read_csv(\"../../data/apartments.csv\")\n\nRows: 1460 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): GrLivArea;SalePrice\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\napartments\n\n# A tibble: 1,460 × 1\n   `GrLivArea;SalePrice`\n   &lt;chr&gt;                \n 1 1710;208500          \n 2 1262;181500          \n 3 1786;223500          \n 4 1717;140000          \n 5 2198;250000          \n 6 1362;143000          \n 7 1694;307000          \n 8 2090;200000          \n 9 1774;129900          \n10 1077;118000          \n# ℹ 1,450 more rows\n\n\nThe dataset combines two attributes-living area and sale price in each row, allowing for analysis of how living space correlates with the sale price across different apartments.\n\n\n\n\napartments &lt;- read_delim(file=\"../../data/apartments.csv\",delim =\";\")\n\nRows: 1460 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (2): GrLivArea, SalePrice\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe dataset is read using a semicolon (;) delimiter.\n\n\n\n\napartments\n\n# A tibble: 1,460 × 2\n   GrLivArea SalePrice\n       &lt;dbl&gt;     &lt;dbl&gt;\n 1      1710    208500\n 2      1262    181500\n 3      1786    223500\n 4      1717    140000\n 5      2198    250000\n 6      1362    143000\n 7      1694    307000\n 8      2090    200000\n 9      1774    129900\n10      1077    118000\n# ℹ 1,450 more rows\n\n\n\n\n\n\napartments %&gt;% \n  head(10)\n\n# A tibble: 10 × 2\n   GrLivArea SalePrice\n       &lt;dbl&gt;     &lt;dbl&gt;\n 1      1710    208500\n 2      1262    181500\n 3      1786    223500\n 4      1717    140000\n 5      2198    250000\n 6      1362    143000\n 7      1694    307000\n 8      2090    200000\n 9      1774    129900\n10      1077    118000\n\n\nThe first 10 rows of the apartments dataset provide details of apartments based on two key variables: GrLivArea (above-ground living area in square feet) and SalePrice (the sale price in US dollars). The data shows a range of living areas from 1,077 to 2,198 square feet, with corresponding sale prices ranging from $118,000 to $307,000. The dataset highlights variations in apartment sizes and their market prices, suggesting that larger apartments tend to have higher sale prices. This provides a preliminary glimpse into how apartment size might influence property pricing.\n\n\n\n\nglimpse(apartments)\n\nRows: 1,460\nColumns: 2\n$ GrLivArea &lt;dbl&gt; 1710, 1262, 1786, 1717, 2198, 1362, 1694, 2090, 1774, 1077, …\n$ SalePrice &lt;dbl&gt; 208500, 181500, 223500, 140000, 250000, 143000, 307000, 2000…\n\n\nThe glimpse gives an overview of the relationship between the living area and sale price for different apartments.\n\n\n\n\ninspect(apartments)\n\n\nquantitative variables:  \n       name   class   min       Q1 median        Q3    max       mean\n1 GrLivArea numeric   334   1129.5   1464   1776.75   5642   1515.464\n2 SalePrice numeric 34900 129975.0 163000 214000.00 755000 180921.196\n          sd    n missing\n1   525.4804 1460       0\n2 79442.5029 1460       0\n\n\nThe ground living area ranges from 334 to 5,642 square feet, with a median of 1,464 square feet and an average of 1,515 square feet. The sale prices vary from $34,900 to $755,000, with a median price of $163,000 and an average price of around $180,921. The inspection shows a substantial spread in both the living areas and the sale prices of apartments, as indicated by the large standard deviations.\n\n\n\n\nskim(apartments)\n\n\nData summary\n\n\nName\napartments\n\n\nNumber of rows\n1460\n\n\nNumber of columns\n2\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nGrLivArea\n0\n1\n1515.46\n525.48\n334\n1129.5\n1464\n1776.75\n5642\n▇▇▁▁▁\n\n\nSalePrice\n0\n1\n180921.20\n79442.50\n34900\n129975.0\n163000\n214000.00\n755000\n▇▅▁▁▁\n\n\n\n\n\nThe skim summary of the apartments dataset shows that there are no missing values in either of the two variables, GrLivArea and SalePrice. The dataset has a complete rate of 1 for both variables. The mean ground living area is 1,515.464 square feet with a standard deviation of 525.4804, indicating variation in apartment sizes. Similarly, the mean sale price is $180,921.20 with a higher standard deviation of $79,442.50, reflecting significant variability in apartment prices.\n\n\n\nQuantitative Data\n\nGrLivArea (dbl): The above-ground living area in square feet for each apartment.\nSalePrice (dbl): The sale price of the apartment in US dollars.\n\n\n\n\n\navg_sale_price &lt;- mean(apartments$SalePrice, na.rm = TRUE)\navg_sale_price\n\n[1] 180921.2\n\n\nThe average sale price of the apartments in the dataset is approximately $180,921.2. This figure is calculated by taking the mean of the SalePrice column, which represents the sale prices of the apartments.\n\n\n\n\nquantile(apartments$SalePrice, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)\n\n   25%    50%    75% \n129975 163000 214000 \n\n\nThis means that 25% of the apartments have a sale price below $129,975, 50% are below $163,000, and 75% are below $214,000.\n\n\n\n\nmedian(apartments$GrLivArea, na.rm = TRUE)\n\n[1] 1464\n\nmean(apartments$GrLivArea, na.rm = TRUE)\n\n[1] 1515.464\n\n\nThese values suggest that most apartments have a living area close to these sizes, with the median indicating the middle value and the mean reflecting the average size across the dataset.\n\n\n\n\ngf_histogram(~ GrLivArea, data = apartments, binwidth = 100, \n             color = \"green\", alpha = 0.6) %&gt;%\n  gf_labs(title = \"Distribution of Living Area Sizes\", \n          x = \"Living Area (sq ft)\", \n          y = \"Count\") %&gt;%\n  gf_theme(theme_minimal())\n\n\n\n\n\n\n\n\nThe majority of apartments have a living area between 1,000 and 2,500 square feet, with a peak around 1,500 to 2,000 square feet. There are fewer apartments with very small or very large living areas, and the distribution shows a right-skew, with a small number of larger apartments exceeding 3,000 square feet. This suggests that most apartments in the dataset fall within the mid-range of living areas.\n\n\n\n\ngf_histogram(~ GrLivArea, data = apartments, fill = \"red\", bins = 50) %&gt;%\n  gf_labs(x = \"Living Area (sqft)\", y = \"Count\", title = \"Frequency of Different Living Area Sizes\")\n\n\n\n\n\n\n\n\nMost apartments have living areas between 1,000 and 2,000 square feet, with a noticeable peak around 1,500 to 2,000 square feet. As the living area increases beyond 2,500 square feet, the frequency of apartments decreases significantly. Few apartments have living areas larger than 3,500 square feet, indicating that larger apartments are much less common.\n\n\n\n\napartments$PricePerSqFt &lt;- apartments$SalePrice / apartments$GrLivArea\ngf_histogram(~ PricePerSqFt, data = apartments, bins = 50, fill = \"yellow\", color = \"orange\") %&gt;%\n  gf_labs(x = \"Price per Square Foot\", y = \"Count\", title = \"Distribution of Price per Square Foot\")\n\n\n\n\n\n\n\nsummary(apartments$PricePerSqFt)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  28.36   99.82  120.10  120.57  138.70  276.25 \n\n\nMost apartments are priced between $75 and $125 per square foot, with the highest concentration just below $100. As the price per square foot increases beyond $150, the frequency decreases significantly, with very few apartments exceeding $200 per square foot. This indicates that the majority of apartments are within a mid-range price, with fewer properties being priced at the higher end.\n\n\n\n\nfert &lt;- read_csv(\"../../data/Fertility.csv\")\n\nRows: 254654 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): morekids, gender1, gender2, afam, hispanic, other\ndbl (3): rownames, age, work\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nfert\n\n# A tibble: 254,654 × 9\n   rownames morekids gender1 gender2   age afam  hispanic other  work\n      &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt;\n 1        1 no       male    female     27 no    no       no        0\n 2        2 no       female  male       30 no    no       no       30\n 3        3 no       male    female     27 no    no       no        0\n 4        4 no       male    female     35 yes   no       no        0\n 5        5 no       female  female     30 no    no       no       22\n 6        6 no       male    female     26 no    no       no       40\n 7        7 no       female  male       29 no    no       no        0\n 8        8 no       male    male       33 no    no       no       52\n 9        9 no       female  male       29 no    no       no        0\n10       10 no       male    female     27 no    no       no        0\n# ℹ 254,644 more rows\n\n\nThe Fertility dataset consists of 254,654 rows and 9 columns, capturing demographic and work-related information. It includes both quantitative and qualitative variables. The quantitative data, such as age and work experience, shows that the individuals range in age from 26 to 35, with work experience varying between 0 to 52 years. The qualitative data provides insights into factors like gender (gender1, gender2), ethnicity (African American, Hispanic, and other ethnicities), and whether individuals have more children (morekids).\n\n\n\n\nfert %&gt;% \n  head(10)\n\n# A tibble: 10 × 9\n   rownames morekids gender1 gender2   age afam  hispanic other  work\n      &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt;\n 1        1 no       male    female     27 no    no       no        0\n 2        2 no       female  male       30 no    no       no       30\n 3        3 no       male    female     27 no    no       no        0\n 4        4 no       male    female     35 yes   no       no        0\n 5        5 no       female  female     30 no    no       no       22\n 6        6 no       male    female     26 no    no       no       40\n 7        7 no       female  male       29 no    no       no        0\n 8        8 no       male    male       33 no    no       no       52\n 9        9 no       female  male       29 no    no       no        0\n10       10 no       male    female     27 no    no       no        0\n\n\nThe first 10 rows of the Fertility dataset provide a snapshot of individuals, focusing on whether they desire more children (“morekids”), gender roles of both partners (“gender1” and “gender2”), age, ethnicity (whether they are African American “afam” or Hispanic), and work experience. The data shows a mix of individuals with varying work experience, ranging from 0 to 52 years, and includes demographic details such as gender and ethnicity. Most individuals in these first 10 rows do not desire more children.\n\n\n\n\nglimpse(fert)\n\nRows: 254,654\nColumns: 9\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ morekids &lt;chr&gt; \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"…\n$ gender1  &lt;chr&gt; \"male\", \"female\", \"male\", \"male\", \"female\", \"male\", \"female\",…\n$ gender2  &lt;chr&gt; \"female\", \"male\", \"female\", \"female\", \"female\", \"female\", \"ma…\n$ age      &lt;dbl&gt; 27, 30, 27, 35, 30, 26, 29, 33, 29, 27, 28, 28, 35, 34, 32, 2…\n$ afam     &lt;chr&gt; \"no\", \"no\", \"no\", \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", …\n$ hispanic &lt;chr&gt; \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"…\n$ other    &lt;chr&gt; \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"…\n$ work     &lt;dbl&gt; 0, 30, 0, 0, 22, 40, 0, 52, 0, 0, 0, 52, 52, 52, 8, 7, 0, 40,…\n\n\nThe glimpse gives a quick summary of the structure of the data, highlighting the types of variables and their initial values.\n\n\n\n\ninspect(fert)\n\n\ncategorical variables:  \n      name     class levels      n missing\n1 morekids character      2 254654       0\n2  gender1 character      2 254654       0\n3  gender2 character      2 254654       0\n4     afam character      2 254654       0\n5 hispanic character      2 254654       0\n6    other character      2 254654       0\n                                   distribution\n1 no (61.9%), yes (38.1%)                      \n2 male (51.4%), female (48.6%)                 \n3 male (51.3%), female (48.7%)                 \n4 no (94.8%), yes (5.2%)                       \n5 no (92.6%), yes (7.4%)                       \n6 no (94.4%), yes (5.6%)                       \n\nquantitative variables:  \n      name   class min       Q1   median       Q3    max         mean\n1 rownames numeric   1 63664.25 127327.5 190990.8 254654 127327.50000\n2      age numeric  21    28.00     31.0     33.0     35     30.39327\n3     work numeric   0     0.00      5.0     44.0     52     19.01833\n            sd      n missing\n1 73512.422063 254654       0\n2     3.386447 254654       0\n3    21.867277 254654       0\n\n\nThe categorical variables capture demographic information, such as whether an individual has more children (with 61.9% indicating “no” and 38.1% indicating “yes”), the gender of the parents (roughly evenly split between male and female), and ethnic background (with 94.8% identifying as non-African American and 92.6% identifying as non-Hispanic). The quantitative variables include age, with a median of 31 years and a range from 21 to 35 years, and hours worked per week, with a median of 5 hours and a range extending up to 52 hours. This dataset provides a broad demographic and work-related profile of individuals.\n\n\n\n\nskim(fert)\n\n\nData summary\n\n\nName\nfert\n\n\nNumber of rows\n254654\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmorekids\n0\n1\n2\n3\n0\n2\n0\n\n\ngender1\n0\n1\n4\n6\n0\n2\n0\n\n\ngender2\n0\n1\n4\n6\n0\n2\n0\n\n\nafam\n0\n1\n2\n3\n0\n2\n0\n\n\nhispanic\n0\n1\n2\n3\n0\n2\n0\n\n\nother\n0\n1\n2\n3\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1\n127327.50\n73512.42\n1\n63664.25\n127327.5\n190990.8\n254654\n▇▇▇▇▇\n\n\nage\n0\n1\n30.39\n3.39\n21\n28.00\n31.0\n33.0\n35\n▁▃▅▇▇\n\n\nwork\n0\n1\n19.02\n21.87\n0\n0.00\n5.0\n44.0\n52\n▇▁▁▁▃\n\n\n\n\n\nFrom the skim summary, the dataset has no missing values across all columns. The age of individuals in the dataset ranges from 21 to 35 years, with a mean of approximately 30. The work variable ranges from 0 to 52, with a mean value of around 19, indicating a spread of work hours or some related measurement.\n\n\n\n\n\n\n\nrowname (dbl): The index or row number of the dataset.\nage (dbl): The age of individuals in the dataset.\nwork (dbl): The number of years the individuals have worked.\n\n\n\n\n\nmorekids (chr): Indicates whether the individual has more kids (e.g., yes, no).\ngender1 (chr): The gender of the individual (e.g., male, female).\ngender2 (chr): Another column representing gender (e.g., male, female).\nafam (chr): Indicates African American status (e.g., yes, no).\nhispanic (chr): Indicates Hispanic ethnicity (e.g., yes, no).\nother (chr): Indicates whether the individual belongs to another ethnic group (e.g., yes, no).\n\n\n\n\n\ngf_bar(~ age, data = fert, bins = 30, fill = \"purple\") %&gt;%\n  gf_labs(x = \"Age\", y = \"Count\", title = \"Distribution of Age\")\n\n\n\n\n\n\n\n\nThe distribution of ages in the fertility dataset shows that the majority of individuals fall between the ages of 25 and 35. There is a noticeable peak around the ages of 30 to 33, where the count of individuals reaches its highest point. The dataset contains fewer individuals under the age of 25 and over the age of 35, indicating a concentration of respondents in their late 20s to early 30s. This histogram suggests that the dataset primarily includes individuals in this middle age range, which could be typical for studies related to fertility.\n\n\n\n\ngf_bar(~ morekids, data = fert, fill = \"lightgreen\") %&gt;%\n  gf_labs(x = \"More Children\", y = \"Count\", title = \"Proportion of Individuals with More Children\")\n\n\n\n\n\n\n\n\nA larger portion of individuals, over 150,000, indicated that they do not have more children, while a smaller group, approximately 100,000, reported having more children. This indicates that the majority of respondents do not have additional children compared to those who do. The distribution suggests a notable difference between the two groups, with fewer individuals opting for more children.\n\n\n\n\ngf_histogram(~ work, data = fert, bins = 20, fill = \"orange\") %&gt;%\n  gf_labs(x = \"Work Hours\", y = \"Count\", title = \"Distribution of Work Hours\")\n\n\n\n\n\n\n\n\nThe histogram illustrates the distribution of work hours across individuals. A significant proportion of the individuals report zero work hours, as seen by the large spike at the beginning of the graph. There are also smaller groups of individuals with higher work hours, particularly around the 40-hour mark, which is typically considered a full-time workload. This suggests that many individuals in the dataset do not work, while those who do often work around 40 hours per week. The distribution is heavily skewed toward the lower end of the work hours scale.\n\n\n\n\ngf_props(~ gender1, data = fert, fill = \"lightblue\") %&gt;%\n  gf_labs(x = \"Gender 1\", y = \"Count\", title = \"Gender 1 Distribution\")\n\n\n\n\n\n\n\ngf_props(~ gender2, data = fert, fill = \"darkblue\") %&gt;%\n  gf_labs(x = \"Gender 2\", y = \"Count\", title = \"Gender 2 Distribution\")\n\n\n\n\n\n\n\n\nThe fertility dataset presents a balanced distribution of genders across both the Gender 1 and Gender 2 categories. In both groups, males and females are represented almost equally, as shown by the bar charts. The proportion of males in Gender 1 is slightly higher at 51.4%, while the proportion of females is 48.6%. Similarly, in Gender 2, the male proportion is 51.3%, with females comprising 48.7%. This even distribution highlights that gender representation is fairly uniform within the dataset, providing a balanced basis for further analysis regarding gender-related variables.\n\n\n\n\ngf_bar(~ afam, data = fert, fill = \"lightpink\") %&gt;%\n  gf_labs(x = \"African American\", y = \"Count\", title = \"African American Status Distribution\")\n\n\n\n\n\n\n\ngf_bar(~ hispanic, data = fert, fill = \"violet\") %&gt;%\n  gf_labs(x = \"Hispanic\", y = \"Count\", title = \"Hispanic Status Distribution\")\n\n\n\n\n\n\n\n\nThe two graphs show the distribution of African American and Hispanic statuses within the dataset. For both variables, the majority of individuals are classified as “no,” indicating they are not African American or Hispanic, while a smaller proportion is classified as “yes,” indicating they are. This suggests that the dataset has a relatively low representation of both African American and Hispanic individuals."
  },
  {
    "objectID": "posts/Day 5/index.html",
    "href": "posts/Day 5/index.html",
    "title": "Day 5",
    "section": "",
    "text": "Today, we are looking at groups.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(palmerpenguins) \n\n\n\n\nwages &lt;- read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/stevedata/gss_wages.csv\")\n\nRows: 61697 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): occrecode, wrkstat, gender, educcat, maritalcat\ndbl (7): rownames, year, realrinc, age, occ10, prestg10, childs\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nwages\n\n# A tibble: 61,697 × 12\n   rownames  year realrinc   age occ10 occrecode  prestg10 childs wrkstat gender\n      &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; \n 1        1  1974     4935    21  5620 Office an…       25      0 School  Male  \n 2        2  1974    43178    41  2040 Professio…       66      3 Full-T… Male  \n 3        3  1974       NA    83    NA &lt;NA&gt;             NA      2 Housek… Female\n 4        4  1974       NA    69    NA &lt;NA&gt;             NA      2 Housek… Female\n 5        5  1974    18505    58  5820 Office an…       37      0 Full-T… Female\n 6        6  1974    22206    30   910 Business/…       45      0 School  Male  \n 7        7  1974    55515    48   230 Business/…       59      2 Full-T… Male  \n 8        8  1974       NA    67  6355 Construct…       49      1 Retired Male  \n 9        9  1974       NA    51  4720 Sales            28      2 Housek… Female\n10       10  1974     4935    54  3940 Service          38      2 Full-T… Female\n# ℹ 61,687 more rows\n# ℹ 2 more variables: educcat &lt;chr&gt;, maritalcat &lt;chr&gt;\n\n\n\n\n\n\nglimpse(wages)\n\nRows: 61,697\nColumns: 12\n$ rownames   &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ year       &lt;dbl&gt; 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974,…\n$ realrinc   &lt;dbl&gt; 4935, 43178, NA, NA, 18505, 22206, 55515, NA, NA, 4935, NA,…\n$ age        &lt;dbl&gt; 21, 41, 83, 69, 58, 30, 48, 67, 51, 54, 89, 71, 27, 30, 22,…\n$ occ10      &lt;dbl&gt; 5620, 2040, NA, NA, 5820, 910, 230, 6355, 4720, 3940, 4810,…\n$ occrecode  &lt;chr&gt; \"Office and Administrative Support\", \"Professional\", NA, NA…\n$ prestg10   &lt;dbl&gt; 25, 66, NA, NA, 37, 45, 59, 49, 28, 38, 47, 45, 50, 29, 33,…\n$ childs     &lt;dbl&gt; 0, 3, 2, 2, 0, 0, 2, 1, 2, 2, 3, 1, 4, 3, 0, 1, 2, 3, 4, 8,…\n$ wrkstat    &lt;chr&gt; \"School\", \"Full-Time\", \"Housekeeper\", \"Housekeeper\", \"Full-…\n$ gender     &lt;chr&gt; \"Male\", \"Male\", \"Female\", \"Female\", \"Female\", \"Male\", \"Male…\n$ educcat    &lt;chr&gt; \"High School\", \"Bachelor\", \"Less Than High School\", \"Less T…\n$ maritalcat &lt;chr&gt; \"Married\", \"Married\", \"Widowed\", \"Widowed\", \"Never Married\"…\n\n\n\n\n\n\ninspect(wages)\n\n\ncategorical variables:  \n        name     class levels     n missing\n1  occrecode character     11 58136    3561\n2    wrkstat character      8 61676      21\n3     gender character      2 61697       0\n4    educcat character      5 61562     135\n5 maritalcat character      5 61670      27\n                                   distribution\n1 Professional (19%), Service (16.9%) ...      \n2 Full-Time (49.4%), Housekeeper (15.1%) ...   \n3 Female (56.1%), Male (43.9%)                 \n4 High School (51.5%) ...                      \n5 Married (51.7%), Never Married (21.8%) ...   \n\nquantitative variables:  \n      name   class  min    Q1 median    Q3      max         mean           sd\n1 rownames numeric    1 15425  30849 46273  61697.0 30849.000000 17810.534116\n2     year numeric 1974  1985   1996  2006   2018.0  1996.073715    12.794470\n3 realrinc numeric  227  8156  16563 27171 480144.5 22326.359234 28581.794499\n4      age numeric   18    32     44    59     89.0    46.176177    17.561065\n5    occ10 numeric   10  2710   4720  6230   9997.0  4695.774081  2627.724076\n6 prestg10 numeric   16    33     42    50     80.0    43.060701    12.987526\n7   childs numeric    0     0      2     3      8.0     1.923457     1.763569\n      n missing\n1 61697       0\n2 61697       0\n3 37887   23810\n4 61478     219\n5 58136    3561\n6 57511    4186\n7 61508     189\n\n\n\n\n\n\nskimr::skim(wages)\n\n\nData summary\n\n\nName\nwages\n\n\nNumber of rows\n61697\n\n\nNumber of columns\n12\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n7\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\noccrecode\n3561\n0.94\n5\n37\n0\n11\n0\n\n\nwrkstat\n21\n1.00\n5\n23\n0\n8\n0\n\n\ngender\n0\n1.00\n4\n6\n0\n2\n0\n\n\neduccat\n135\n1.00\n8\n21\n0\n5\n0\n\n\nmaritalcat\n27\n1.00\n7\n13\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1.00\n30849.00\n17810.53\n1\n15425\n30849\n46273\n61697.0\n▇▇▇▇▇\n\n\nyear\n0\n1.00\n1996.07\n12.79\n1974\n1985\n1996\n2006\n2018.0\n▆▇▇▇▇\n\n\nrealrinc\n23810\n0.61\n22326.36\n28581.79\n227\n8156\n16563\n27171\n480144.5\n▇▁▁▁▁\n\n\nage\n219\n1.00\n46.18\n17.56\n18\n32\n44\n59\n89.0\n▇▇▆▅▂\n\n\nocc10\n3561\n0.94\n4695.77\n2627.72\n10\n2710\n4720\n6230\n9997.0\n▃▅▇▂▃\n\n\nprestg10\n4186\n0.93\n43.06\n12.99\n16\n33\n42\n50\n80.0\n▃▇▇▃▁\n\n\nchilds\n189\n1.00\n1.92\n1.76\n0\n0\n2\n3\n8.0\n▇▇▂▁▁\n\n\n\n\n\n\n\n\n\nwages_clean &lt;-\n  wages %&gt;%\n  tidyr::drop_na(realrinc) \n\n\n\n\n\nwages_clean %&gt;%\n  gf_boxplot(realrinc ~ \"Income\") %&gt;% # Dummy X-axis \"variable\"\n  gf_labs(\n    title = \"Plot 1A: Income\",\n    subtitle = \"Many outliers on the high side\"\n  )\n\n\n\n\n\n\n\n## A boxplot visually summarizes the distribution of a dataset by displaying its quartiles. It highlights the median, the interquartile range (IQR), and potential outliers. The whiskers extend to the smallest and largest values within 1.5 times the IQR, while any points outside this range are considered outliers.\n## A skewed distribution occurs when data is unevenly spread, with one tail longer than the other. In right-skewed data, the tail is longer on the right; in left-skewed data, it's longer on the left. The mean, median, and mode are different in skewed distributions.\n\n\n\n\n\nwages_clean %&gt;%\n  gf_boxplot(gender ~ realrinc) %&gt;%\n  gf_labs(title = \"Plot 2A: Income by Gender\")"
  },
  {
    "objectID": "posts/Day 5/index.html#introduction",
    "href": "posts/Day 5/index.html#introduction",
    "title": "Day 5",
    "section": "",
    "text": "Today, we are looking at groups.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(palmerpenguins) \n\n\n\n\nwages &lt;- read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/stevedata/gss_wages.csv\")\n\nRows: 61697 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): occrecode, wrkstat, gender, educcat, maritalcat\ndbl (7): rownames, year, realrinc, age, occ10, prestg10, childs\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nwages\n\n# A tibble: 61,697 × 12\n   rownames  year realrinc   age occ10 occrecode  prestg10 childs wrkstat gender\n      &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; \n 1        1  1974     4935    21  5620 Office an…       25      0 School  Male  \n 2        2  1974    43178    41  2040 Professio…       66      3 Full-T… Male  \n 3        3  1974       NA    83    NA &lt;NA&gt;             NA      2 Housek… Female\n 4        4  1974       NA    69    NA &lt;NA&gt;             NA      2 Housek… Female\n 5        5  1974    18505    58  5820 Office an…       37      0 Full-T… Female\n 6        6  1974    22206    30   910 Business/…       45      0 School  Male  \n 7        7  1974    55515    48   230 Business/…       59      2 Full-T… Male  \n 8        8  1974       NA    67  6355 Construct…       49      1 Retired Male  \n 9        9  1974       NA    51  4720 Sales            28      2 Housek… Female\n10       10  1974     4935    54  3940 Service          38      2 Full-T… Female\n# ℹ 61,687 more rows\n# ℹ 2 more variables: educcat &lt;chr&gt;, maritalcat &lt;chr&gt;\n\n\n\n\n\n\nglimpse(wages)\n\nRows: 61,697\nColumns: 12\n$ rownames   &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ year       &lt;dbl&gt; 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974, 1974,…\n$ realrinc   &lt;dbl&gt; 4935, 43178, NA, NA, 18505, 22206, 55515, NA, NA, 4935, NA,…\n$ age        &lt;dbl&gt; 21, 41, 83, 69, 58, 30, 48, 67, 51, 54, 89, 71, 27, 30, 22,…\n$ occ10      &lt;dbl&gt; 5620, 2040, NA, NA, 5820, 910, 230, 6355, 4720, 3940, 4810,…\n$ occrecode  &lt;chr&gt; \"Office and Administrative Support\", \"Professional\", NA, NA…\n$ prestg10   &lt;dbl&gt; 25, 66, NA, NA, 37, 45, 59, 49, 28, 38, 47, 45, 50, 29, 33,…\n$ childs     &lt;dbl&gt; 0, 3, 2, 2, 0, 0, 2, 1, 2, 2, 3, 1, 4, 3, 0, 1, 2, 3, 4, 8,…\n$ wrkstat    &lt;chr&gt; \"School\", \"Full-Time\", \"Housekeeper\", \"Housekeeper\", \"Full-…\n$ gender     &lt;chr&gt; \"Male\", \"Male\", \"Female\", \"Female\", \"Female\", \"Male\", \"Male…\n$ educcat    &lt;chr&gt; \"High School\", \"Bachelor\", \"Less Than High School\", \"Less T…\n$ maritalcat &lt;chr&gt; \"Married\", \"Married\", \"Widowed\", \"Widowed\", \"Never Married\"…\n\n\n\n\n\n\ninspect(wages)\n\n\ncategorical variables:  \n        name     class levels     n missing\n1  occrecode character     11 58136    3561\n2    wrkstat character      8 61676      21\n3     gender character      2 61697       0\n4    educcat character      5 61562     135\n5 maritalcat character      5 61670      27\n                                   distribution\n1 Professional (19%), Service (16.9%) ...      \n2 Full-Time (49.4%), Housekeeper (15.1%) ...   \n3 Female (56.1%), Male (43.9%)                 \n4 High School (51.5%) ...                      \n5 Married (51.7%), Never Married (21.8%) ...   \n\nquantitative variables:  \n      name   class  min    Q1 median    Q3      max         mean           sd\n1 rownames numeric    1 15425  30849 46273  61697.0 30849.000000 17810.534116\n2     year numeric 1974  1985   1996  2006   2018.0  1996.073715    12.794470\n3 realrinc numeric  227  8156  16563 27171 480144.5 22326.359234 28581.794499\n4      age numeric   18    32     44    59     89.0    46.176177    17.561065\n5    occ10 numeric   10  2710   4720  6230   9997.0  4695.774081  2627.724076\n6 prestg10 numeric   16    33     42    50     80.0    43.060701    12.987526\n7   childs numeric    0     0      2     3      8.0     1.923457     1.763569\n      n missing\n1 61697       0\n2 61697       0\n3 37887   23810\n4 61478     219\n5 58136    3561\n6 57511    4186\n7 61508     189\n\n\n\n\n\n\nskimr::skim(wages)\n\n\nData summary\n\n\nName\nwages\n\n\nNumber of rows\n61697\n\n\nNumber of columns\n12\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n7\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\noccrecode\n3561\n0.94\n5\n37\n0\n11\n0\n\n\nwrkstat\n21\n1.00\n5\n23\n0\n8\n0\n\n\ngender\n0\n1.00\n4\n6\n0\n2\n0\n\n\neduccat\n135\n1.00\n8\n21\n0\n5\n0\n\n\nmaritalcat\n27\n1.00\n7\n13\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1.00\n30849.00\n17810.53\n1\n15425\n30849\n46273\n61697.0\n▇▇▇▇▇\n\n\nyear\n0\n1.00\n1996.07\n12.79\n1974\n1985\n1996\n2006\n2018.0\n▆▇▇▇▇\n\n\nrealrinc\n23810\n0.61\n22326.36\n28581.79\n227\n8156\n16563\n27171\n480144.5\n▇▁▁▁▁\n\n\nage\n219\n1.00\n46.18\n17.56\n18\n32\n44\n59\n89.0\n▇▇▆▅▂\n\n\nocc10\n3561\n0.94\n4695.77\n2627.72\n10\n2710\n4720\n6230\n9997.0\n▃▅▇▂▃\n\n\nprestg10\n4186\n0.93\n43.06\n12.99\n16\n33\n42\n50\n80.0\n▃▇▇▃▁\n\n\nchilds\n189\n1.00\n1.92\n1.76\n0\n0\n2\n3\n8.0\n▇▇▂▁▁\n\n\n\n\n\n\n\n\n\nwages_clean &lt;-\n  wages %&gt;%\n  tidyr::drop_na(realrinc) \n\n\n\n\n\nwages_clean %&gt;%\n  gf_boxplot(realrinc ~ \"Income\") %&gt;% # Dummy X-axis \"variable\"\n  gf_labs(\n    title = \"Plot 1A: Income\",\n    subtitle = \"Many outliers on the high side\"\n  )\n\n\n\n\n\n\n\n## A boxplot visually summarizes the distribution of a dataset by displaying its quartiles. It highlights the median, the interquartile range (IQR), and potential outliers. The whiskers extend to the smallest and largest values within 1.5 times the IQR, while any points outside this range are considered outliers.\n## A skewed distribution occurs when data is unevenly spread, with one tail longer than the other. In right-skewed data, the tail is longer on the right; in left-skewed data, it's longer on the left. The mean, median, and mode are different in skewed distributions.\n\n\n\n\n\nwages_clean %&gt;%\n  gf_boxplot(gender ~ realrinc) %&gt;%\n  gf_labs(title = \"Plot 2A: Income by Gender\")"
  },
  {
    "objectID": "posts/Day 7/index.html",
    "href": "posts/Day 7/index.html",
    "title": "Day 7",
    "section": "",
    "text": "We are looking at Inference for Comparing Two Paired Means.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(broom) \nlibrary(resampledata3)\n\n\nAttaching package: 'resampledata3'\n\nThe following object is masked from 'package:datasets':\n\n    Titanic\n\nlibrary(gt) \n\n\n\n\nknitr::opts_chunk$set(\n  fig.width = 7,\n## Sets the default width of figures to 7 inches.\n  fig.asp = 0.618, \n## Sets the aspect ratio of the figure to approximately the golden ratio.\n  fig.align = \"center\"\n## Centers the alignment of the figure output.\n)\ntheme_custom &lt;- function() {\n## defines a custom theme for ggplot2 plots, using the font \"Roboto Condensed\" and modifying certain visual elements like the plot title, subtitles, captions, axis titles, and text.\n  font &lt;- \"Roboto Condensed\" \n  theme_classic(base_size = 14) %+replace% ## used to replace elements from the base theme with custom settings.\n    theme(\n      panel.grid.minor = element_blank(), \n      text = element_text(family = font),\n      plot.title = element_text( \n        family = font, \n        face = \"bold\", \n        hjust = 0, \n        margin = margin(0, 0, 10, 0)\n      ),\n      plot.subtitle = element_text( \n        family = font,                \n        hjust = 0,\n        margin = margin(2, 0, 5, 0)\n      ),\n      plot.caption = element_text( \n        family = font, \n        size = 8, \n        hjust = 1\n      ), \n\n      axis.title = element_text( \n        family = font,\n        size = 10\n      ),\n      axis.text = element_text(\n        family = font, \n        size = 8\n      ) \n    )\n}\n\n\ntheme_set(new = theme_custom())\n\n\n\n\n\ndata(\"Diving2017\", package = \"resampledata3\")\nDiving2017\n\n                     Name     Country Semifinal  Final\n1        CHEONG Jun Hoong    Malaysia    325.50 397.50\n2                SI Yajie       China    382.80 396.00\n3                REN Qian       China    367.50 391.95\n4              KIM Mi Rae North Korea    346.00 385.55\n5              WU Melissa   Australia    318.70 370.20\n6           KIM Kuk Hyang North Korea    360.85 360.00\n7         ITAHASHI Minami       Japan    313.70 357.85\n8        BENFEITO Meaghan      Canada    355.15 331.40\n9          PAMG Pandelela    Malaysia    322.75 322.40\n10        CHAMANDY Olivia      Canada    320.55 307.15\n11       PARRATTO Jessica         USA    322.75 302.35\n12 MURILLO URREA Carolina    Colombia    325.75 283.35\n\nDiving2017_inspect &lt;- inspect(Diving2017)\nDiving2017_inspect$categorical\n\n# A tibble: 2 × 6\n  name    class  levels     n missing distribution                              \n  &lt;chr&gt;   &lt;chr&gt;   &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                                     \n1 Name    factor     12    12       0 \" SI Yajie (8.3%) ...                    …\n2 Country factor      8    12       0 \"Canada (16.7%), China (16.7%) ...       …\n\nDiving2017_inspect$quantitative\n\n# A tibble: 2 × 11\n  name      class     min    Q1 median    Q3   max  mean    sd     n missing\n* &lt;chr&gt;     &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;\n1 Semifinal numeric  314.  322.   326.  357.  383.  338.  22.9    12       0\n2 Final     numeric  283.  319.   359.  387.  398.  350.  40.0    12       0\n\n\nThe dataset from the Diving2017 championship includes results from 12 divers across 8 countries, with no missing data. The semifinal scores ranged from 313.7 to 382.8, with a median of 325.63 and a standard deviation of 22.95, indicating a relatively consistent performance among divers. The final scores showed more variation, ranging from 283.35 to 397.5, with a higher median of 358.93 and a larger standard deviation of 40.02, suggesting greater performance differences in the final round. Overall, most divers improved their scores in the final compared to the semifinals.\n\n\n\n\ntheme_set(new = theme_custom())\n\nDiving2017_long &lt;- Diving2017 %&gt;%\n  pivot_longer(\n    cols = c(Final, Semifinal),\n    names_to = \"race\",\n    values_to = \"scores\"\n  )\nDiving2017_long\n\n# A tibble: 24 × 4\n   Name               Country     race      scores\n   &lt;fct&gt;              &lt;fct&gt;       &lt;chr&gt;      &lt;dbl&gt;\n 1 \"CHEONG Jun Hoong\" Malaysia    Final       398.\n 2 \"CHEONG Jun Hoong\" Malaysia    Semifinal   326.\n 3 \" SI Yajie\"        China       Final       396 \n 4 \" SI Yajie\"        China       Semifinal   383.\n 5 \"REN Qian\"         China       Final       392.\n 6 \"REN Qian\"         China       Semifinal   368.\n 7 \"KIM Mi Rae\"       North Korea Final       386.\n 8 \"KIM Mi Rae\"       North Korea Semifinal   346 \n 9 \"WU Melissa\"       Australia   Final       370.\n10 \"WU Melissa\"       Australia   Semifinal   319.\n# ℹ 14 more rows\n\n\nIn the transformed long-format dataset from the Diving2017 championship, each diver now has two rows: one for their semifinal score and one for their final score, making a total of 24 rows. The columns include the diver’s Name, Country, Race (indicating whether the score is from the semifinal or final), and Scores. This reshaping of the data makes it easier to compare semifinal and final performance for each diver. The scores range from a low of 307.15 in the final to a high of 397.5, reflecting varying levels of improvement or decline between the semifinal and final rounds.\n\n\n\n\nDiving2017_long %&gt;%\n  gf_density(~scores,\n    fill = ~race,\n    alpha = 0.5,\n    title = \"Diving Scores\"\n  ) %&gt;%\n  gf_facet_grid(~race) %&gt;%\n  gf_fitdistr(dist = \"dnorm\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe density plot visualizes the distribution of scores from the Diving2017 championship, separated into semifinal and final rounds. The semifinal scores (in blue) show a slightly more concentrated distribution, with a peak around 350, indicating that most divers scored close to this value. The final scores (in pink) are more widely spread, peaking around 375, but with a flatter distribution, suggesting a greater variability in performance. The normal distribution curve is fitted for both sets of scores, showing that while the semifinal scores are more normally distributed, the final scores have a wider range and less symmetry.\n\n\n\n\nDiving2017_long %&gt;%\n  gf_col(\n    fct_reorder(Name, scores) ~ scores,\n    fill = ~race,\n    alpha = 0.5,\n    position = \"dodge\",\n    xlab = \"Scores\",\n    ylab = \"Name\",\n    title = \"Diving Scores\"\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe plot shows that top performers like SI Yajie and REN Qian from China consistently scored higher in both rounds, while other divers, such as KIM Mi Rae and CHEONG Jun Hoong, also performed well but with slight variations between the two rounds. Notably, some divers, like BENFEITO Meaghan and MURILLO URREA Carolina, experienced a drop in their final scores compared to the semifinals. The plot, with its clear distinction between semifinal and final scores through color coding, makes it easy to see changes in individual performances across the rounds.\n\n\n\n\nDiving2017_long %&gt;%\n  gf_boxplot(\n    scores ~ race,\n    fill = ~race,\n    alpha = 0.5,\n    xlab = \"Race\",\n    ylab = \"Scores\",\n    title = \"Diving Scores\"\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe boxplot visualizes the distribution of diving scores for the semifinal and final rounds. The box for the final scores (in pink) is positioned higher overall, indicating that final scores tend to be higher than semifinal scores. The median score in the final round is higher, around 375, compared to the semifinal’s median of about 350. The final scores also show more variability, with a wider interquartile range (IQR) and longer whiskers, reflecting a broader spread of scores. The semifinal scores (in blue) are more concentrated, with a smaller IQR and whiskers, indicating less variation in scores. This plot emphasizes that divers generally performed better and with more variability in the final round than in the semifinal.\n\n\n\n\nshapiro.test(Diving2017$Final)\n\n\n    Shapiro-Wilk normality test\n\ndata:  Diving2017$Final\nW = 0.9184, p-value = 0.273\n\nshapiro.test(Diving2017$Semifinal)\n\n\n    Shapiro-Wilk normality test\n\ndata:  Diving2017$Semifinal\nW = 0.86554, p-value = 0.05738\n\n\nThe Shapiro-Wilk normality test was performed on the semifinal and final diving scores to assess whether the data is normally distributed.\n\nFinal scores: The test statistic W=0.9184 and the p-value is 0.273. Since the p-value is greater than the typical significance level of 0.05, we fail to reject the null hypothesis, indicating that the final scores do not significantly deviate from a normal distribution.\nSemifinal scores: The test statistic W=0.86554 and the p-value is 0.05738. Although the p-value is close to 0.05, it is still slightly higher, so we also fail to reject the null hypothesis for the semifinal scores. This suggests that the semifinal scores are approximately normally distributed, but with a slightly stronger deviation from normality compared to the final scores.\n\nIn summary, both the semifinal and final scores are not significantly different from a normal distribution based on the Shapiro-Wilk test results.\n\n\n\n\ntheme_set(new = theme_custom())\n\nset.rseed(1234)\nDiving2017 %&gt;%\n  mutate(\n    Final_norm = rnorm(\n      n = 12,\n      mean = mean(Final),\n      sd = sd(Final)\n    ),\n    Semifinal_norm = rnorm(\n      n = 12,\n      mean = mean(Semifinal),\n      sd = sd(Semifinal)\n    )\n  ) %&gt;%\n  pivot_longer(\n    cols =\n      c(Semifinal, Final, Semifinal_norm, Final_norm),\n    names_to = \"score_type\", values_to = \"value\"\n  ) %&gt;%\n  gf_boxplot(value ~ score_type,\n    fill = ~score_type,\n    show.legend = FALSE\n  ) %&gt;%\n  gf_labs(title = \"Comparing Data and Normal Boxplots\")\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nDiving2017_long %&gt;%\n  gf_qq(~ scores | race, size = 2) %&gt;%\n  gf_qqline(ylab = \"scores\", xlab = \"theoretical normal\")\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n## set.rseed(1234)-This ensures reproducibility by setting a seed for random number generation. The seed ensures that random numbers generated in the next step will be the same every time the code is run.\n## gf_qq() generates the QQ plot for the scores variable, grouped by race (semifinal and final).\n## gf_qqline() adds a reference line to the QQ plot, which helps to assess how closely the actual data follows a normal distribution.\n\nIn the boxplots comparing the actual and simulated normal scores for the diving championship data, the Final and Semifinal scores are shown alongside their respective normally generated counterparts. The actual final scores exhibit a wider range with a slightly higher median compared to the simulated normal distribution, which is narrower. Similarly, the semifinal scores display more variability than the corresponding simulated normal distribution, but they are closer in range compared to the finals. The normal simulations serve as a baseline for comparison, highlighting the greater variability in actual scores, especially in the finals.\nIn the QQ plot (Quantile-Quantile plot), the actual scores for both the final and semifinal rounds are plotted against a theoretical normal distribution. While the semifinal scores mostly follow the expected straight-line pattern of a normal distribution, the final scores deviate more significantly, particularly at the higher end, where outliers appear above the theoretical line. This confirms that the final scores show more variation from normality, whereas the semifinal scores are closer to a normal distribution.\n\n\n\n\nvar.test(scores ~ race,\n  data = Diving2017_long,\n  ratio = 1, \n  conf.int = TRUE,\n  conf.level = 0.95\n) %&gt;%\n  broom::tidy()\n\nMultiple parameters; naming those columns num.df, den.df\n\n\n# A tibble: 1 × 9\n  estimate num.df den.df statistic p.value conf.low conf.high method alternative\n     &lt;dbl&gt;  &lt;int&gt;  &lt;int&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      \n1     3.04     11     11      3.04  0.0783    0.876      10.6 F tes… two.sided  \n\n## The var.test() function is used to conduct the F-test for equality of variances between two groups (semifinal and final scores in this case).\n## ratio = 1: Specifies the null hypothesis that the ratio of the variances is equal to 1, meaning both groups have the same variance.\n\nThe F-test for variances was performed to compare the variability between the final and semifinal scores in the Diving2017 dataset. The test statistic is 3.041, with a p-value of 0.0783. Since the p-value is greater than the typical significance level of 0.05, we fail to reject the null hypothesis, suggesting that the variances between the two groups (final and semifinal scores) are not significantly different.\nThe confidence interval for the variance ratio is (0.8755, 10.5644), which includes 1, further supporting the conclusion that there is no significant difference in variance between the semifinal and final scores. Thus, the variability in scores is approximately the same in both rounds.\n\n\n\n\nobs_diff_swim &lt;- diffmean(scores ~ race,\n  data = Diving2017_long,\n  only.2 = FALSE\n)\nobs_diff_swim\n\ndiffmean \n -11.975 \n\n## diffmean(scores ~ race): This calculates the difference in the mean scores between the two groups defined by the race variable (semifinal and final).\n## only.2 = FALSE: This argument specifies that the comparison should be made between the two groups in race (semifinal and final), even if there are more than two categories. Here, it ensures the comparison is made between exactly these two categories.\n\nThis calculates that the mean score in the semifinal is about 11.975 points lower than the mean score in the final. This negative value suggests that divers generally performed better in the final round compared to the semifinal.\n\n\n\n\nmosaic::t.test(\n  x = Diving2017$Semifinal,\n  y = Diving2017$Final,\n  paired = TRUE, var.equal = FALSE\n) %&gt;% broom::tidy()\n\n# A tibble: 1 × 8\n  estimate statistic p.value parameter conf.low conf.high method     alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      \n1    -12.0     -1.19   0.259        11    -34.1      10.2 Paired t-… two.sided  \n\n\nThe paired t-test comparing the semifinal and final diving scores reveals that the average score difference is -11.975, with semifinal scores being lower than final scores. However, the p-value of 0.259 indicates that this difference is not statistically significant, meaning the observed difference could be due to random variation. The 95% confidence interval for the mean difference, ranging from -34.11 to 10.17, includes zero, further supporting that there is no meaningful difference between the two rounds. Overall, there is no significant evidence to suggest that scores significantly improved from the semifinals to the finals.\n\n\n\n\nwilcox.test(\n  x = Diving2017$Semifinal,\n  y = Diving2017$Final,\n  mu = 0,\n  alternative = \"two.sided\", \n  paired = TRUE,\n  conf.int = TRUE,\n  conf.level = 0.95\n) %&gt;%\n  broom::tidy()\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low conf.high method               alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;      \n1    -12.0        27   0.380    -35.8      12.3 Wilcoxon signed ran… two.sided  \n\n\nThe Wilcoxon signed-rank test was conducted to compare the semifinal and final diving scores. The estimated difference between the median semifinal and final scores is -11.96, suggesting that semifinal scores are lower. However, the p-value of 0.38 indicates that this difference is not statistically significant at the 95% confidence level. The 95% confidence interval for the median difference ranges from -35.83 to 12.3, which includes zero, further supporting the conclusion that there is no significant difference between the scores in the semifinal and final rounds. This test confirms that the score differences could be due to random variation.\n\n\n\n\nlm(Semifinal - Final ~ 1, data = Diving2017) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95)\n\n# A tibble: 1 × 7\n  term        estimate std.error statistic p.value conf.low conf.high\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)    -12.0      10.1     -1.19   0.259    -34.1      10.2\n\nsigned_rank &lt;- function(x) {\n  sign(x) * rank(abs(x))\n}\n\nlm(signed_rank(Semifinal - Final) ~ 1,\n  data = Diving2017\n) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95)\n\n# A tibble: 1 × 7\n  term        estimate std.error statistic p.value conf.low conf.high\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)       -2      2.14    -0.937   0.369    -6.70      2.70\n\n## lm(Semifinal - Final ~ 1, data = Diving2017)- This part fits a simple linear model to the difference between Semifinal and Final scores, essentially calculating the mean difference between the two. ~ 1 means that the model is fitting just the intercept, which represents the average difference between semifinal and final scores.\n## signed_rank &lt;- function(x) \n## This function applies a signed rank transformation to the difference between Semifinal and Final scores.\n## sign(x) returns the sign of each element in x (positive or negative).\n## rank(abs(x)) computes the ranks of the absolute values of x.\n## The result is a vector where each difference is replaced by its signed rank.\n## lm(signed_rank(Semifinal - Final) ~ 1, data = Diving2017)- After applying the signed rank transformation, the code fits another linear model (just like the first one) but with the signed ranks instead of the raw differences.\n\nThe first linear model estimates the mean difference between semifinal and final scores. The estimate of -11.975 indicates that the semifinal scores are, on average, 11.975 points lower than the final scores. However, the p-value of 0.259 suggests that this difference is not statistically significant.\nThe second linear model, based on the signed ranks, estimates a mean difference of -2, which is also not statistically significant (p = 0.369). The confidence interval ranges from -6.7 to 2.7, indicating that the mean rank difference is not meaningfully different from zero.\n\n\n\n\npolarity &lt;- c(rep(1, 6), rep(-1, 6))\n\npolarity\n\n [1]  1  1  1  1  1  1 -1 -1 -1 -1 -1 -1\n\nnull_dist_swim &lt;- do(4999) *\n  mean(\n    data = Diving2017,\n    ~ (Final - Semifinal) * \n      mosaic::resample(polarity, \n        replace = TRUE\n      )\n  )\n\nnull_dist_swim\n\n              mean\n1     1.866667e+00\n2    -3.733333e+00\n3    -1.234167e+01\n4    -2.058333e+00\n5     8.783333e+00\n6     1.296667e+01\n7    -1.440833e+01\n8     1.409167e+01\n9    -1.263333e+01\n10   -1.440833e+01\n11   -1.033333e+01\n12    1.044167e+01\n13   -5.916667e-01\n14   -1.078333e+01\n15    2.350000e+00\n16   -7.508333e+00\n17   -1.018333e+01\n18   -9.491667e+00\n19   -1.344167e+01\n20   -1.462500e+01\n21   -1.629167e+01\n22   -1.870000e+01\n23    2.758333e+00\n24   -8.550000e+00\n25    2.833333e-01\n26    2.916667e+00\n27   -4.033333e+00\n28    5.083333e-01\n29    1.121667e+01\n30    3.083333e+00\n31   -1.942500e+01\n32   -1.725000e+00\n33   -1.733333e+00\n34   -2.162500e+01\n35   -3.283333e+00\n36    9.725000e+00\n37   -3.200000e+00\n38   -3.333333e-02\n39   -1.397500e+01\n40   -1.060000e+01\n41   -1.383333e+00\n42    3.333333e+00\n43    6.166667e+00\n44   -7.100000e+00\n45   -8.100000e+00\n46   -1.799167e+01\n47   -8.916667e-01\n48    1.308333e+00\n49   -6.375000e+00\n50    5.683333e+00\n51    7.083333e+00\n52    2.700000e+00\n53    1.400000e+00\n54    6.508333e+00\n55   -1.416667e-01\n56    1.276667e+01\n57   -1.045000e+01\n58    1.039167e+01\n59   -1.128333e+01\n60    9.916667e+00\n61    5.750000e-01\n62    8.816667e+00\n63   -1.503333e+01\n64   -4.850000e+00\n65   -1.393333e+01\n66   -3.416667e-01\n67   -9.358333e+00\n68   -1.781667e+01\n69    3.941667e+00\n70    9.566667e+00\n71    1.052500e+01\n72    7.900000e+00\n73   -1.578333e+01\n74   -2.075000e+00\n75   -1.488333e+01\n76   -8.400000e+00\n77   -2.566667e+00\n78    2.232500e+01\n79   -7.408333e+00\n80    8.841667e+00\n81   -6.616667e+00\n82    1.678333e+01\n83   -1.692500e+01\n84    1.250000e+00\n85    5.808333e+00\n86    1.182500e+01\n87   -7.158333e+00\n88   -3.000000e+00\n89    5.633333e+00\n90    4.500000e-01\n91    2.250000e-01\n92   -2.858333e+00\n93    1.320000e+01\n94   -2.473333e+01\n95   -2.080000e+01\n96    1.265000e+01\n97   -8.333333e-03\n98    2.000000e+00\n99    6.825000e+00\n100   2.010833e+01\n101  -2.916667e-01\n102   3.675000e+00\n103  -8.100000e+00\n104   4.850000e+00\n105   1.549167e+01\n106  -8.316667e+00\n107   1.236667e+01\n108  -1.216667e+00\n109   2.341667e+00\n110   4.183333e+00\n111   5.416667e+00\n112   1.277500e+01\n113   3.716667e+00\n114   5.183333e+00\n115  -9.625000e+00\n116   1.640833e+01\n117   1.675000e+00\n118  -1.856667e+01\n119   6.075000e+00\n120  -1.622500e+01\n121   1.262500e+01\n122   1.280000e+01\n123  -1.476667e+01\n124   1.045833e+01\n125   5.333333e+00\n126   7.291667e+00\n127  -1.727500e+01\n128   6.708333e+00\n129  -1.895833e+01\n130  -8.008333e+00\n131   8.316667e+00\n132  -1.514167e+01\n133   3.125000e+00\n134  -4.616667e+00\n135  -1.383333e+01\n136   1.343333e+01\n137   3.591667e+00\n138   4.358333e+00\n139   5.466667e+00\n140  -1.525833e+01\n141   9.383333e+00\n142  -6.791667e+00\n143  -1.163333e+01\n144   5.875000e+00\n145   1.122500e+01\n146  -1.365833e+01\n147  -7.983333e+00\n148  -6.791667e+00\n149   1.816667e+01\n150   2.863333e+01\n151   1.474167e+01\n152   1.901667e+01\n153  -8.808333e+00\n154   6.350000e+00\n155  -6.908333e+00\n156  -1.171667e+01\n157   3.816667e+00\n158   7.608333e+00\n159  -7.841667e+00\n160   2.133333e+01\n161  -9.483333e+00\n162   1.708333e+00\n163  -1.388333e+01\n164   1.333333e+00\n165  -1.191667e+01\n166   2.500000e+00\n167  -1.800000e+00\n168   1.317500e+01\n169  -5.091667e+00\n170   3.425000e+00\n171  -6.433333e+00\n172   8.333333e-01\n173  -2.741667e+00\n174  -1.692500e+01\n175  -1.103333e+01\n176   5.350000e+00\n177   9.583333e+00\n178  -5.300000e+00\n179  -3.866667e+00\n180  -1.220000e+01\n181   9.983333e+00\n182   7.091667e+00\n183   2.650000e+00\n184  -2.583333e-01\n185   6.166667e+00\n186   9.541667e+00\n187   7.358333e+00\n188   6.000000e-01\n189  -3.600000e+00\n190   1.600000e+00\n191  -7.141667e+00\n192   1.933333e+01\n193  -2.516667e+00\n194   1.125833e+01\n195   1.567500e+01\n196  -9.666667e-01\n197   5.683333e+00\n198   1.130000e+01\n199  -3.908333e+00\n200   7.041667e+00\n201  -4.700000e+00\n202  -3.791667e+00\n203   4.416667e+00\n204  -1.075000e+00\n205   7.091667e+00\n206  -4.216667e+00\n207   3.050000e+00\n208   6.933333e+00\n209  -7.350000e+00\n210  -1.409167e+01\n211  -6.016667e+00\n212   1.261667e+01\n213   1.296667e+01\n214  -3.433333e+00\n215  -1.787500e+01\n216  -7.558333e+00\n217   6.316667e+00\n218   1.858333e+00\n219  -5.391667e+00\n220  -1.157500e+01\n221  -8.933333e+00\n222  -1.913333e+01\n223  -1.374167e+01\n224  -2.475000e+00\n225  -2.127500e+01\n226  -1.910000e+01\n227  -2.500000e+00\n228  -1.067500e+01\n229   2.320000e+01\n230  -4.725000e+00\n231   1.275000e+00\n232  -5.441667e+00\n233  -8.333333e-01\n234   1.171667e+01\n235  -1.850833e+01\n236  -1.308333e+00\n237  -2.065833e+01\n238  -1.555000e+01\n239   8.608333e+00\n240  -1.207500e+01\n241  -2.141667e+01\n242  -1.263333e+01\n243  -1.740000e+01\n244   2.775000e+00\n245  -8.608333e+00\n246  -1.366667e+00\n247  -5.066667e+00\n248   1.557500e+01\n249   5.908333e+00\n250  -1.655000e+01\n251  -6.175000e+00\n252   2.566667e+00\n253   1.083333e+00\n254  -1.520000e+01\n255   1.135833e+01\n256   3.700000e+00\n257   3.933333e+00\n258   4.000000e-01\n259   4.791667e+00\n260  -1.065833e+01\n261  -1.359167e+01\n262   1.511667e+01\n263  -3.941667e+00\n264   1.045833e+01\n265  -1.603333e+01\n266  -1.445833e+01\n267   5.566667e+00\n268   9.833333e+00\n269   1.858333e+00\n270  -4.000000e+00\n271   5.150000e+00\n272  -3.308333e+00\n273   4.533333e+00\n274   8.516667e+00\n275   1.050000e+00\n276  -8.633333e+00\n277  -2.833333e+00\n278   1.316667e+00\n279  -2.066667e+00\n280   1.474167e+01\n281  -1.858333e+00\n282  -3.491667e+00\n283   9.983333e+00\n284   1.845833e+01\n285   9.525000e+00\n286  -1.517500e+01\n287  -1.122500e+01\n288   1.053333e+01\n289   8.333333e-01\n290   9.008333e+00\n291  -5.033333e+00\n292   8.550000e+00\n293   4.741667e+00\n294   1.810833e+01\n295   2.558333e+00\n296   3.541667e+00\n297   1.027500e+01\n298  -1.570000e+01\n299  -7.350000e+00\n300   2.121667e+01\n301   4.300000e+00\n302  -4.408333e+00\n303  -2.261667e+01\n304   4.025000e+00\n305  -9.225000e+00\n306   1.394167e+01\n307  -8.041667e+00\n308   1.785000e+01\n309   5.875000e+00\n310  -1.510833e+01\n311   1.391667e+00\n312  -1.120000e+01\n313   1.921667e+01\n314   7.500000e-01\n315   9.983333e+00\n316   1.283333e+01\n317  -1.520000e+01\n318   1.257500e+01\n319  -7.325000e+00\n320   5.266667e+00\n321  -1.836667e+01\n322   3.433333e+00\n323   6.375000e+00\n324  -5.441667e+00\n325  -1.522500e+01\n326  -8.050000e+00\n327   1.488333e+01\n328   1.799167e+01\n329   7.275000e+00\n330   1.067500e+01\n331  -7.558333e+00\n332  -1.791667e+00\n333   3.816667e+00\n334  -1.665000e+01\n335  -8.341667e+00\n336   8.808333e+00\n337  -2.141667e+00\n338   4.616667e+00\n339   4.733333e+00\n340   1.092500e+01\n341   4.666667e-01\n342   8.458333e+00\n343  -4.675000e+00\n344   6.491667e+00\n345   6.908333e+00\n346  -8.608333e+00\n347  -8.041667e+00\n348   4.766667e+00\n349  -8.950000e+00\n350   3.816667e+00\n351   3.333333e+00\n352   2.150000e+00\n353   3.416667e-01\n354  -6.125000e+00\n355   5.808333e+00\n356  -1.051667e+01\n357  -1.100000e+01\n358  -1.245000e+01\n359   1.525833e+01\n360   1.458333e+00\n361   1.174167e+01\n362   1.095000e+01\n363  -8.433333e+00\n364  -1.373333e+01\n365  -2.025000e+00\n366   1.038333e+01\n367  -9.666667e-01\n368  -6.025000e+00\n369   2.708333e+00\n370   1.686667e+01\n371  -8.808333e+00\n372  -1.953333e+01\n373  -4.500000e+00\n374   8.808333e+00\n375  -5.258333e+00\n376   1.457500e+01\n377  -1.255833e+01\n378   6.675000e+00\n379  -1.300000e+00\n380   7.616667e+00\n381   2.283333e+00\n382  -7.675000e+00\n383  -1.854167e+01\n384   5.875000e+00\n385   4.925000e+00\n386  -5.000000e+00\n387   5.166667e-01\n388  -3.908333e+00\n389   3.908333e+00\n390   1.373333e+01\n391   1.658333e+00\n392   3.166667e+00\n393   6.250000e-01\n394  -1.415000e+01\n395   1.801667e+01\n396   1.379167e+01\n397  -1.750000e+00\n398  -7.116667e+00\n399   5.708333e+00\n400  -8.108333e+00\n401  -9.400000e+00\n402   7.208333e+00\n403  -2.537500e+01\n404   1.084167e+01\n405  -1.476667e+01\n406   1.115000e+01\n407  -1.866667e+00\n408  -1.435000e+01\n409   4.416667e+00\n410  -2.016667e+00\n411   3.333333e+00\n412   9.358333e+00\n413  -7.383333e+00\n414   2.558333e+00\n415   2.255833e+01\n416   9.833333e-01\n417  -2.891667e+00\n418   4.233333e+00\n419   8.933333e+00\n420   2.625000e+00\n421  -1.370833e+01\n422   3.225000e+00\n423   4.116667e+00\n424  -8.666667e+00\n425  -1.191667e+00\n426  -7.783333e+00\n427   2.758333e+00\n428  -7.783333e+00\n429  -1.220000e+01\n430   2.204167e+01\n431   3.483333e+00\n432  -1.426667e+01\n433   6.558333e+00\n434   4.300000e+00\n435  -1.508333e+01\n436   1.461667e+01\n437  -4.583333e-01\n438  -5.083333e-01\n439   6.525000e+00\n440  -1.233333e+01\n441   1.420833e+01\n442  -2.000000e+00\n443  -1.511667e+01\n444  -3.425000e+00\n445   5.833333e-02\n446   6.991667e+00\n447   1.426667e+01\n448   2.833333e+00\n449  -7.200000e+00\n450   1.400000e+00\n451  -3.675000e+00\n452  -1.496667e+01\n453   4.675000e+00\n454   2.024167e+01\n455  -2.416667e+00\n456  -5.475000e+00\n457   1.597500e+01\n458  -6.016667e+00\n459   4.066667e+00\n460  -5.116667e+00\n461   6.933333e+00\n462   2.891667e+00\n463   6.733333e+00\n464   1.741667e+00\n465  -3.266667e+00\n466   1.415000e+01\n467   6.400000e+00\n468   1.406667e+01\n469   3.566667e+00\n470   1.441667e+00\n471   3.166667e-01\n472   3.325000e+00\n473   1.545833e+01\n474  -8.458333e+00\n475   1.517500e+01\n476  -4.783333e+00\n477  -4.533333e+00\n478  -1.916667e+00\n479   1.115833e+01\n480   2.141667e+00\n481  -1.043333e+01\n482   2.060000e+01\n483  -4.941667e+00\n484  -1.790833e+01\n485   1.760833e+01\n486  -7.533333e+00\n487   1.596667e+01\n488  -6.525000e+00\n489  -5.758333e+00\n490   8.333333e-03\n491  -1.221667e+01\n492   1.142500e+01\n493   8.866667e+00\n494   5.350000e+00\n495  -1.468333e+01\n496  -3.416667e-01\n497  -2.500000e-02\n498   1.086667e+01\n499   1.316667e+00\n500  -1.394167e+01\n501  -2.075000e+00\n502   3.533333e+00\n503  -4.641667e+00\n504  -3.975000e+00\n505   8.575000e+00\n506  -9.841667e+00\n507  -1.808333e+00\n508   4.183333e+00\n509  -2.083333e+00\n510   2.083333e-01\n511  -7.933333e+00\n512  -3.075000e+00\n513  -9.366667e+00\n514   1.139167e+01\n515  -1.166667e-01\n516  -1.066667e+01\n517  -1.125000e+00\n518  -7.358333e+00\n519   1.004167e+01\n520  -8.100000e+00\n521   1.591667e+00\n522   6.016667e+00\n523   6.416667e+00\n524   6.525000e+00\n525  -1.329167e+01\n526  -5.475000e+00\n527   1.388333e+01\n528  -9.475000e+00\n529  -5.125000e+00\n530   9.491667e+00\n531  -2.683333e+00\n532   1.575833e+01\n533   7.616667e+00\n534  -6.141667e+00\n535  -5.758333e+00\n536   1.916667e+00\n537  -5.841667e+00\n538  -4.166667e+00\n539   8.183333e+00\n540  -8.375000e+00\n541   3.175000e+00\n542   2.425000e+00\n543   1.282500e+01\n544  -7.641667e+00\n545   1.591667e+00\n546   5.091667e+00\n547   1.250833e+01\n548   2.950000e+00\n549   1.308333e+00\n550  -1.203333e+01\n551  -5.208333e+00\n552  -6.675000e+00\n553  -1.268333e+01\n554  -1.255833e+01\n555   9.383333e+00\n556  -5.825000e+00\n557   3.425000e+00\n558  -1.367500e+01\n559  -8.241667e+00\n560  -7.866667e+00\n561  -7.841667e+00\n562   5.875000e+00\n563   1.666667e+00\n564  -1.241667e+00\n565   8.166667e-01\n566   3.975000e+00\n567   1.616667e+01\n568  -5.608333e+00\n569   2.291667e+00\n570   3.533333e+00\n571   9.000000e-01\n572  -1.836667e+01\n573   9.625000e+00\n574  -5.341667e+00\n575  -9.250000e+00\n576   3.933333e+00\n577  -4.325000e+00\n578  -5.275000e+00\n579  -1.124167e+01\n580  -8.808333e+00\n581   1.904167e+01\n582   2.250000e+01\n583  -6.508333e+00\n584   9.166667e+00\n585   4.883333e+00\n586  -2.741667e+00\n587   6.433333e+00\n588  -2.877500e+01\n589  -4.441667e+00\n590   1.517500e+01\n591  -5.750000e-01\n592  -2.500000e+00\n593  -1.211667e+01\n594  -9.716667e+00\n595   3.875000e+00\n596  -7.066667e+00\n597  -1.069167e+01\n598  -1.080833e+01\n599  -1.468333e+01\n600   3.683333e+00\n601   6.416667e+00\n602   1.025833e+01\n603  -4.616667e+00\n604   2.246667e+01\n605   4.558333e+00\n606   3.041667e+00\n607  -2.416667e+00\n608  -4.850000e+00\n609   1.133333e+00\n610   8.108333e+00\n611  -1.597500e+01\n612  -4.650000e+00\n613   2.275000e+00\n614  -4.166667e+00\n615  -5.833333e-02\n616   4.983333e+00\n617  -4.275000e+00\n618   1.030833e+01\n619  -9.641667e+00\n620  -2.660000e+01\n621  -1.597500e+01\n622  -8.758333e+00\n623   1.950833e+01\n624   7.841667e+00\n625   1.482500e+01\n626  -2.333333e-01\n627   8.100000e+00\n628  -7.916667e-01\n629   2.475000e+00\n630   1.220833e+01\n631   5.583333e-01\n632  -3.058333e+00\n633  -3.058333e+00\n634   1.027500e+01\n635   5.400000e+00\n636   1.600000e+00\n637  -1.267500e+01\n638   6.791667e+00\n639  -2.583333e-01\n640  -1.741667e+00\n641   2.080000e+01\n642   5.666667e+00\n643   1.225833e+01\n644  -1.854167e+01\n645  -1.508333e+00\n646   1.557500e+01\n647  -2.358333e+00\n648   4.008333e+00\n649  -5.408333e+00\n650  -1.142500e+01\n651   1.644167e+01\n652  -5.325000e+00\n653  -1.037500e+01\n654  -4.091667e+00\n655   1.072500e+01\n656  -7.166667e-01\n657   7.550000e+00\n658   4.791667e+00\n659   7.500000e-02\n660  -9.566667e+00\n661  -9.383333e+00\n662   9.441667e+00\n663   6.850000e+00\n664   2.916667e-01\n665   1.916667e-01\n666  -1.459167e+01\n667  -1.600000e+00\n668  -4.591667e+00\n669  -1.236667e+01\n670   8.333333e-02\n671   1.380000e+01\n672   1.866667e+00\n673   8.016667e+00\n674   1.678333e+01\n675  -4.416667e+00\n676   4.050000e+00\n677  -5.766667e+00\n678  -9.191667e+00\n679   2.208333e+00\n680  -1.262500e+01\n681   5.175000e+00\n682   4.658333e+00\n683   7.500000e+00\n684   9.775000e+00\n685  -1.666667e+00\n686  -5.683333e+00\n687   8.733333e+00\n688  -5.416667e+00\n689  -7.416667e-01\n690   3.050000e+00\n691   5.316667e+00\n692   3.716667e+00\n693  -5.275000e+00\n694  -1.065833e+01\n695   2.869167e+01\n696   5.391667e+00\n697  -1.405833e+01\n698  -1.807500e+01\n699   4.558333e+00\n700  -5.358333e+00\n701  -8.550000e+00\n702  -8.716667e+00\n703  -4.733333e+00\n704  -7.383333e+00\n705  -8.775000e+00\n706  -1.294167e+01\n707   1.529167e+01\n708   1.913333e+01\n709   1.990000e+01\n710  -1.053333e+01\n711  -1.802500e+01\n712  -1.312500e+01\n713  -2.916667e+00\n714   4.550000e+00\n715   9.916667e-01\n716  -1.670833e+01\n717   6.675000e+00\n718   3.475000e+00\n719  -1.551667e+01\n720  -9.816667e+00\n721   5.916667e-01\n722  -1.078333e+01\n723  -6.500000e-01\n724  -4.250000e-01\n725   4.658333e+00\n726  -2.450000e+00\n727   7.475000e+00\n728   1.100833e+01\n729  -7.533333e+00\n730  -4.066667e+00\n731  -1.720000e+01\n732  -1.158333e+00\n733  -9.875000e+00\n734   1.791667e+00\n735   1.901667e+01\n736  -8.750000e+00\n737   9.875000e+00\n738   5.533333e+00\n739   1.168333e+01\n740  -1.206667e+01\n741   1.150000e+01\n742  -1.511667e+01\n743   1.105833e+01\n744   6.458333e+00\n745  -5.008333e+00\n746   2.261667e+01\n747  -1.098333e+01\n748  -9.916667e-01\n749  -2.741667e+00\n750  -4.166667e+00\n751   1.200000e+00\n752   3.916667e-01\n753  -1.110000e+01\n754  -9.333333e+00\n755  -1.239167e+01\n756   1.189167e+01\n757   6.025000e+00\n758  -6.158333e+00\n759  -2.058333e+00\n760  -1.171667e+01\n761   2.683333e+00\n762  -9.841667e+00\n763   1.508333e+01\n764   1.175000e+00\n765   7.200000e+00\n766  -9.841667e+00\n767  -1.242500e+01\n768   3.850000e+00\n769   9.625000e+00\n770   7.816667e+00\n771  -8.808333e+00\n772   1.383333e+01\n773   8.383333e+00\n774  -1.591667e+00\n775   1.497500e+01\n776   2.500000e-02\n777   1.591667e+00\n778  -5.208333e+00\n779  -1.581667e+01\n780  -7.000000e+00\n781   1.525833e+01\n782   6.016667e+00\n783  -2.660000e+01\n784  -7.825000e+00\n785  -2.558333e+00\n786  -8.933333e+00\n787   1.912500e+01\n788   1.203333e+01\n789   5.208333e+00\n790  -4.050000e+00\n791  -3.933333e+00\n792   4.500000e+00\n793   2.741667e+00\n794   1.120833e+01\n795  -5.258333e+00\n796   2.091667e+00\n797   5.825000e+00\n798   2.083333e-01\n799   2.150000e+00\n800   6.316667e+00\n801  -1.913333e+01\n802  -4.816667e+00\n803  -8.041667e+00\n804  -1.289167e+01\n805  -6.391667e+00\n806   3.366667e+00\n807  -5.666667e+00\n808   2.250000e+01\n809   7.025000e+00\n810   1.258333e+00\n811   5.350000e+00\n812  -7.000000e+00\n813   1.704167e+01\n814  -1.517500e+01\n815  -1.197500e+01\n816   4.250000e+00\n817   6.416667e+00\n818  -8.333333e-01\n819  -1.755000e+01\n820  -1.308333e+01\n821   5.625000e+00\n822  -1.358333e+01\n823  -2.166667e+00\n824   2.633333e+00\n825   5.475000e+00\n826  -1.719167e+01\n827   8.633333e+00\n828   1.239167e+01\n829   9.025000e+00\n830  -2.244167e+01\n831   5.616667e+00\n832   2.645833e+01\n833  -2.000000e-01\n834   2.247500e+01\n835   9.508333e+00\n836   5.625000e+00\n837   4.500000e+00\n838   4.383333e+00\n839   9.583333e+00\n840   6.016667e+00\n841   2.150000e+00\n842   8.858333e+00\n843  -2.266667e+00\n844  -6.783333e+00\n845   5.266667e+00\n846  -6.516667e+00\n847   2.261667e+01\n848   7.783333e+00\n849  -1.261667e+01\n850  -1.124167e+01\n851  -8.266667e+00\n852  -7.616667e+00\n853   2.224167e+01\n854  -6.533333e+00\n855  -2.408333e+00\n856   5.825000e+00\n857   1.046667e+01\n858   1.500000e-01\n859  -8.675000e+00\n860  -4.783333e+00\n861   1.400000e+01\n862  -1.217500e+01\n863  -5.758333e+00\n864  -7.183333e+00\n865  -8.216667e+00\n866  -1.115000e+01\n867  -1.666667e-02\n868  -4.025000e+00\n869   2.166667e-01\n870  -8.333333e-02\n871   1.441667e+00\n872   7.275000e+00\n873   2.566667e+00\n874   1.177500e+01\n875   5.200000e+00\n876   6.833333e-01\n877   2.883333e+00\n878  -2.314167e+01\n879   4.500000e+00\n880  -1.050000e+00\n881   9.875000e+00\n882   1.878333e+01\n883   3.350000e+00\n884  -1.546667e+01\n885  -9.358333e+00\n886   5.958333e+00\n887  -8.816667e+00\n888  -7.783333e+00\n889  -2.663333e+01\n890  -9.916667e-01\n891  -7.241667e+00\n892   8.866667e+00\n893  -2.166667e+00\n894  -8.691667e+00\n895   1.379167e+01\n896  -1.385833e+01\n897   7.275000e+00\n898   3.133333e+00\n899   1.927500e+01\n900   1.200833e+01\n901   1.858333e+00\n902   1.275000e+01\n903  -1.850000e+00\n904   1.780833e+01\n905  -4.325000e+00\n906   1.019167e+01\n907   1.341667e+00\n908  -3.758333e+00\n909   1.400000e+01\n910  -5.608333e+00\n911   2.305833e+01\n912  -2.716667e+00\n913   7.325000e+00\n914   1.221667e+01\n915   8.516667e+00\n916   1.435000e+01\n917   5.583333e+00\n918   7.491667e+00\n919  -7.900000e+00\n920   9.016667e+00\n921   1.153333e+01\n922   2.750000e+00\n923   1.122500e+01\n924   1.060833e+01\n925  -2.208333e+00\n926   5.266667e+00\n927  -3.116667e+00\n928  -1.808333e+00\n929  -2.375000e+00\n930   6.458333e+00\n931   8.516667e+00\n932  -4.000000e+00\n933  -1.397500e+01\n934  -3.125000e+00\n935   1.566667e+00\n936  -1.704167e+01\n937   6.241667e+00\n938  -1.476667e+01\n939   2.441667e+00\n940  -4.616667e+00\n941  -1.160000e+01\n942  -6.433333e+00\n943  -1.080833e+01\n944   1.416667e-01\n945   1.646667e+01\n946  -2.983333e+00\n947  -5.208333e+00\n948  -4.983333e+00\n949   1.802500e+01\n950  -7.966667e+00\n951  -2.244167e+01\n952   8.675000e+00\n953  -1.139167e+01\n954  -3.383333e+00\n955   4.925000e+00\n956  -2.650000e+00\n957  -1.465000e+01\n958   7.816667e+00\n959   2.100000e+01\n960   6.850000e+00\n961  -1.567500e+01\n962  -7.233333e+00\n963  -1.277500e+01\n964  -5.683333e+00\n965   1.060000e+01\n966   2.283333e+00\n967   4.791667e+00\n968  -8.750000e+00\n969  -7.666667e-01\n970  -2.250000e+01\n971  -5.325000e+00\n972  -2.516667e+00\n973  -1.024167e+01\n974  -1.045000e+01\n975  -1.051667e+01\n976  -7.408333e+00\n977   1.359167e+01\n978  -1.180833e+01\n979   2.094167e+01\n980  -7.041667e+00\n981  -2.166667e-01\n982  -7.508333e+00\n983  -1.333333e-01\n984   6.925000e+00\n985  -1.415000e+01\n986  -1.830833e+01\n987   1.065833e+01\n988   7.500000e+00\n989   5.425000e+00\n990   1.397500e+01\n991  -4.816667e+00\n992  -4.650000e+00\n993   7.666667e+00\n994  -2.225000e+00\n995  -3.108333e+00\n996  -4.441667e+00\n997   6.558333e+00\n998   7.116667e+00\n999   1.089167e+01\n1000 -8.966667e+00\n1001 -5.750000e+00\n1002  1.120000e+01\n1003  7.333333e+00\n1004  1.364167e+01\n1005 -1.864167e+01\n1006 -8.866667e+00\n1007 -1.359167e+01\n1008 -8.333333e-01\n1009 -2.825000e+00\n1010  7.933333e+00\n1011  1.921667e+01\n1012 -9.858333e+00\n1013 -5.008333e+00\n1014  5.416667e+00\n1015  4.091667e+00\n1016 -3.166667e-01\n1017 -2.543333e+01\n1018  1.380000e+01\n1019  2.645833e+01\n1020  1.500000e+01\n1021 -3.475000e+00\n1022  2.309167e+01\n1023 -7.675000e+00\n1024  4.737241e-15\n1025 -7.950000e+00\n1026  2.833333e-01\n1027 -6.391667e+00\n1028 -9.225000e+00\n1029  6.158333e+00\n1030 -7.416667e-01\n1031  1.124167e+01\n1032 -3.050000e+00\n1033 -6.241667e+00\n1034  5.766667e+00\n1035 -9.750000e-01\n1036  5.558333e+00\n1037 -1.555000e+01\n1038 -8.816667e+00\n1039  1.216667e+00\n1040 -9.433333e+00\n1041  4.850000e+00\n1042 -4.800000e+00\n1043 -1.503333e+01\n1044 -1.107500e+01\n1045 -1.185833e+01\n1046  8.408333e+00\n1047  4.883333e+00\n1048  5.550000e+00\n1049 -5.000000e+00\n1050  4.858333e+00\n1051  1.197500e+01\n1052  4.383333e+00\n1053 -5.750000e+00\n1054 -5.416667e+00\n1055 -8.550000e+00\n1056  1.067500e+01\n1057 -4.358333e+00\n1058 -4.983333e+00\n1059 -7.783333e+00\n1060 -1.257500e+01\n1061 -1.337500e+01\n1062  6.958333e+00\n1063  5.266667e+00\n1064  3.241667e+00\n1065  8.691667e+00\n1066 -1.216667e+00\n1067  1.561667e+01\n1068 -9.225000e+00\n1069 -1.503333e+01\n1070 -2.232500e+01\n1071  2.216667e+00\n1072  1.458333e+00\n1073 -1.177500e+01\n1074 -6.175000e+00\n1075 -4.583333e+00\n1076 -4.650000e+00\n1077 -8.408333e+00\n1078  5.333333e+00\n1079 -3.316667e+00\n1080 -5.425000e+00\n1081 -8.141667e+00\n1082 -4.641667e+00\n1083 -3.166667e-01\n1084 -6.566667e+00\n1085 -2.434167e+01\n1086  1.500000e-01\n1087  7.441667e+00\n1088 -3.325000e+00\n1089 -5.166667e-01\n1090 -1.750000e+00\n1091 -7.700000e+00\n1092  5.583333e+00\n1093 -1.980833e+01\n1094  1.359167e+01\n1095  9.583333e+00\n1096 -3.016667e+00\n1097  1.200833e+01\n1098  3.416667e-01\n1099 -1.245000e+01\n1100  4.250000e+00\n1101 -1.910000e+01\n1102 -6.525000e+00\n1103 -4.866667e+00\n1104 -1.341667e+00\n1105  2.156667e+01\n1106  1.529167e+01\n1107  2.441667e+00\n1108 -2.083333e-01\n1109 -2.708333e+00\n1110 -7.858333e+00\n1111  1.808333e+01\n1112 -1.221667e+01\n1113  6.400000e+00\n1114 -1.320000e+01\n1115 -1.259167e+01\n1116 -5.933333e+00\n1117 -1.980833e+01\n1118 -1.658333e+00\n1119  1.675000e+00\n1120  4.100000e+00\n1121  1.516667e+01\n1122 -1.435000e+01\n1123  6.666667e-02\n1124  4.391667e+00\n1125 -9.566667e+00\n1126  2.133333e+01\n1127  8.733333e+00\n1128 -1.533333e+00\n1129  3.175000e+00\n1130 -2.660000e+01\n1131 -1.177500e+01\n1132  1.030833e+01\n1133 -1.037500e+01\n1134  6.475000e+00\n1135  8.966667e+00\n1136 -8.866667e+00\n1137  8.075000e+00\n1138  2.558333e+00\n1139  1.312500e+01\n1140  1.074167e+01\n1141  7.200000e+00\n1142  6.475000e+00\n1143  2.316667e+00\n1144 -1.030833e+01\n1145 -1.163333e+01\n1146  2.267500e+01\n1147 -1.044167e+01\n1148  2.323333e+01\n1149  1.288333e+01\n1150 -8.808333e+00\n1151  9.441667e+00\n1152 -2.158333e+00\n1153 -5.691667e+00\n1154  7.491667e+00\n1155  1.030833e+01\n1156 -1.750000e+00\n1157  7.275000e+00\n1158  1.180000e+01\n1159 -2.250000e+01\n1160 -5.091667e+00\n1161  9.241667e+00\n1162 -7.550000e+00\n1163  8.333333e-01\n1164 -1.666667e+00\n1165  1.950833e+01\n1166 -1.650000e+00\n1167 -4.391667e+00\n1168  2.900000e+00\n1169 -7.133333e+00\n1170  8.375000e+00\n1171 -1.750000e+00\n1172  1.054167e+01\n1173  2.032500e+01\n1174  5.616667e+00\n1175  1.389167e+01\n1176  3.100000e+00\n1177 -1.203333e+01\n1178 -1.233333e+00\n1179 -3.316667e+00\n1180 -1.201667e+01\n1181 -1.856667e+01\n1182  2.833333e-01\n1183 -1.130000e+01\n1184 -5.608333e+00\n1185 -1.505833e+01\n1186  2.616667e+00\n1187  8.808333e+00\n1188 -4.250000e+00\n1189  4.275000e+00\n1190 -5.875000e+00\n1191  2.583333e-01\n1192 -9.166667e+00\n1193  1.579167e+01\n1194 -4.737241e-15\n1195 -1.078333e+01\n1196  8.258333e+00\n1197 -1.666667e-01\n1198 -5.483333e+00\n1199  1.781667e+01\n1200  3.225000e+00\n1201 -4.333333e-01\n1202  6.791667e+00\n1203  1.704167e+01\n1204  2.032500e+01\n1205  2.658333e+00\n1206 -7.300000e+00\n1207 -1.833333e+00\n1208 -1.052500e+01\n1209  1.377500e+01\n1210 -3.216667e+00\n1211  1.916667e+00\n1212  9.541667e+00\n1213 -5.825000e+00\n1214 -7.900000e+00\n1215  8.283333e+00\n1216 -1.215000e+01\n1217 -5.200000e+00\n1218  1.725000e+00\n1219 -1.153333e+01\n1220 -2.350000e+00\n1221  5.841667e+00\n1222 -6.350000e+00\n1223 -5.625000e+00\n1224  7.583333e+00\n1225  1.458333e+00\n1226  1.373333e+01\n1227 -3.966667e+00\n1228 -7.416667e-01\n1229  1.517500e+01\n1230 -1.174167e+01\n1231 -8.466667e+00\n1232  3.841667e+00\n1233 -1.333333e+00\n1234 -1.350000e+01\n1235 -1.048333e+01\n1236 -4.000000e-01\n1237 -1.483333e+00\n1238 -3.866667e+00\n1239  1.323333e+01\n1240 -1.511667e+01\n1241  5.666667e+00\n1242 -9.166667e+00\n1243 -1.305833e+01\n1244 -1.171667e+01\n1245  3.608333e+00\n1246  3.283333e+00\n1247 -8.691667e+00\n1248 -6.841667e+00\n1249 -6.016667e+00\n1250 -9.575000e+00\n1251  5.275000e+00\n1252  7.275000e+00\n1253 -5.458333e+00\n1254 -3.041667e+00\n1255  2.210000e+01\n1256 -5.383333e+00\n1257 -8.941667e+00\n1258  6.616667e+00\n1259 -9.083333e-01\n1260 -7.750000e-01\n1261  8.608333e+00\n1262 -3.333333e+00\n1263 -3.866667e+00\n1264  1.546667e+01\n1265 -7.325000e+00\n1266  6.908333e+00\n1267 -5.475000e+00\n1268  5.125000e+00\n1269  5.208333e+00\n1270  1.323333e+01\n1271 -9.100000e+00\n1272  1.359167e+01\n1273  4.725000e+00\n1274  1.037500e+01\n1275 -7.408333e+00\n1276  1.883333e+00\n1277  2.425833e+01\n1278  1.353333e+01\n1279  8.816667e+00\n1280  4.816667e+00\n1281 -3.425000e+00\n1282  8.808333e+00\n1283  6.666667e-02\n1284  1.236667e+01\n1285 -1.095000e+01\n1286  5.516667e+00\n1287 -8.433333e+00\n1288  3.116667e+00\n1289  6.333333e-01\n1290 -9.158333e+00\n1291 -5.325000e+00\n1292 -1.488333e+01\n1293 -1.575833e+01\n1294 -1.514167e+01\n1295  2.467500e+01\n1296  5.500000e+00\n1297 -9.166667e+00\n1298 -3.741667e+00\n1299 -5.841667e+00\n1300  1.755000e+01\n1301 -1.018333e+01\n1302  1.750000e-01\n1303  1.160000e+01\n1304  1.140000e+01\n1305  1.420833e+01\n1306  9.916667e-01\n1307  5.150000e+00\n1308  6.316667e+00\n1309 -2.275000e+00\n1310 -2.566667e+00\n1311  7.500000e-02\n1312  1.488333e+01\n1313 -2.158333e+00\n1314  1.458333e+00\n1315 -1.287500e+01\n1316  9.525000e+00\n1317  1.075000e+01\n1318  3.275000e+00\n1319  1.045833e+01\n1320  1.684167e+01\n1321  4.166667e+00\n1322  1.248333e+01\n1323  1.366667e+00\n1324  1.052500e+01\n1325  3.925000e+00\n1326 -8.100000e+00\n1327  3.133333e+00\n1328  2.741667e+00\n1329  3.225000e+00\n1330 -1.343333e+01\n1331  8.750000e+00\n1332 -6.016667e+00\n1333 -1.741667e+00\n1334  4.641667e+00\n1335  9.416667e-01\n1336 -3.391667e+00\n1337  5.825000e+00\n1338 -1.531667e+01\n1339 -2.500000e-02\n1340  3.591667e+00\n1341  9.025000e+00\n1342  7.533333e+00\n1343 -2.316667e+00\n1344 -1.033333e+01\n1345 -8.816667e+00\n1346 -1.191667e+00\n1347 -7.533333e+00\n1348  3.241667e+00\n1349  1.658333e+00\n1350 -1.901667e+01\n1351  2.303333e+01\n1352  1.098333e+01\n1353  4.241667e+00\n1354 -4.025000e+00\n1355  8.550000e+00\n1356  2.033333e+00\n1357 -1.341667e+00\n1358  1.426667e+01\n1359  1.344167e+01\n1360  8.050000e+00\n1361  3.750000e+00\n1362 -1.051667e+01\n1363  1.947500e+01\n1364  1.296667e+01\n1365  1.379167e+01\n1366  3.333333e+00\n1367  1.543333e+01\n1368 -1.250833e+01\n1369  2.083333e-01\n1370  7.241667e+00\n1371 -1.458333e+00\n1372 -5.550000e+00\n1373  8.691667e+00\n1374  2.591667e+00\n1375 -8.783333e+00\n1376  1.206667e+01\n1377  1.104167e+01\n1378  1.760833e+01\n1379 -9.425000e+00\n1380  1.250000e+00\n1381  7.566667e+00\n1382  1.203333e+01\n1383  5.683333e+00\n1384 -8.875000e+00\n1385  4.233333e+00\n1386  1.267500e+01\n1387 -8.666667e+00\n1388 -7.900000e+00\n1389  7.383333e+00\n1390 -1.083333e-01\n1391 -7.675000e+00\n1392  9.925000e+00\n1393  1.160000e+01\n1394 -5.750000e+00\n1395  8.250000e-01\n1396  1.034167e+01\n1397  1.581667e+01\n1398 -8.725000e+00\n1399  3.566667e+00\n1400 -3.141667e+00\n1401  7.158333e+00\n1402 -1.115000e+01\n1403  2.091667e+00\n1404  3.275000e+00\n1405  5.175000e+00\n1406 -2.683333e+00\n1407  1.168333e+01\n1408  4.358333e+00\n1409 -9.083333e-01\n1410  1.522500e+01\n1411  9.416667e+00\n1412  4.500000e+00\n1413 -1.373333e+01\n1414 -1.197500e+01\n1415 -6.991667e+00\n1416  1.358333e+01\n1417 -2.420000e+01\n1418  2.877500e+01\n1419 -9.000000e-01\n1420 -1.415000e+01\n1421  3.333333e-02\n1422 -1.107500e+01\n1423  5.583333e+00\n1424  6.933333e+00\n1425 -8.950000e+00\n1426  1.828333e+01\n1427 -4.275000e+00\n1428  8.316667e+00\n1429  1.250833e+01\n1430 -2.091667e+00\n1431 -5.475000e+00\n1432 -4.800000e+00\n1433 -2.975000e+00\n1434  1.953333e+01\n1435 -1.133333e+00\n1436  1.013333e+01\n1437 -2.833333e+00\n1438  7.933333e+00\n1439  1.543333e+01\n1440 -1.790833e+01\n1441 -4.183333e+00\n1442  5.833333e-02\n1443 -6.441667e+00\n1444 -3.875000e+00\n1445 -1.858333e+00\n1446 -8.633333e+00\n1447 -1.359167e+01\n1448 -7.408333e+00\n1449  1.186667e+01\n1450  1.591667e+00\n1451 -1.183333e+00\n1452 -5.000000e-02\n1453 -1.400000e+01\n1454 -8.916667e-01\n1455 -2.750000e+00\n1456 -1.162500e+01\n1457 -6.875000e+00\n1458 -1.344167e+01\n1459 -5.500000e+00\n1460  5.150000e+00\n1461  1.166667e-01\n1462 -2.032500e+01\n1463  9.625000e+00\n1464 -6.283333e+00\n1465  1.690000e+01\n1466  1.775000e+00\n1467 -1.611667e+01\n1468  1.725833e+01\n1469 -2.176667e+01\n1470  1.120000e+01\n1471 -1.075000e+00\n1472  2.166667e-01\n1473 -1.050000e+01\n1474 -5.416667e+00\n1475 -1.045000e+01\n1476  1.918333e+01\n1477 -1.426667e+01\n1478 -1.425000e+00\n1479 -5.008333e+00\n1480  7.025000e+00\n1481 -1.411667e+01\n1482 -1.800000e+00\n1483  8.500000e-01\n1484  8.041667e+00\n1485  2.317500e+01\n1486 -9.916667e-01\n1487  1.068333e+01\n1488  1.617500e+01\n1489 -1.517500e+01\n1490 -8.408333e+00\n1491 -4.441667e+00\n1492  1.733333e+00\n1493 -1.250833e+01\n1494 -6.425000e+00\n1495  1.360000e+01\n1496  6.925000e+00\n1497  1.125000e+00\n1498 -4.066667e+00\n1499 -1.367500e+01\n1500  1.275833e+01\n1501 -5.458333e+00\n1502  1.956667e+01\n1503  1.043333e+01\n1504  1.808333e+00\n1505 -1.791667e+00\n1506 -5.150000e+00\n1507  1.168333e+01\n1508 -1.275833e+01\n1509  1.525833e+01\n1510  1.560833e+01\n1511 -1.221667e+01\n1512  3.333333e-02\n1513  7.391667e+00\n1514  2.100000e+00\n1515 -1.733333e+00\n1516  1.277500e+01\n1517 -1.320000e+01\n1518  2.537500e+01\n1519 -2.858333e+00\n1520  1.468333e+01\n1521 -8.300000e+00\n1522  5.683333e+00\n1523 -1.025000e+01\n1524 -1.367500e+01\n1525 -2.516667e+00\n1526 -9.375000e+00\n1527 -1.300000e+00\n1528 -1.457500e+01\n1529 -2.004167e+01\n1530 -9.583333e-01\n1531 -5.841667e+00\n1532  3.425000e+00\n1533 -2.309167e+01\n1534 -6.908333e+00\n1535  1.573333e+01\n1536  7.208333e+00\n1537  7.041667e+00\n1538 -5.583333e-01\n1539  1.158333e+00\n1540 -1.383333e+01\n1541 -7.208333e+00\n1542  3.908333e+00\n1543 -1.265000e+01\n1544 -1.749167e+01\n1545  8.875000e+00\n1546 -8.550000e+00\n1547  1.808333e+00\n1548  9.016667e+00\n1549 -1.302500e+01\n1550 -1.016667e+00\n1551  8.433333e+00\n1552 -1.174167e+01\n1553 -1.458333e+00\n1554 -7.383333e+00\n1555  8.441667e+00\n1556  1.133333e+00\n1557  1.123333e+01\n1558 -2.044167e+01\n1559  2.891667e+00\n1560  7.558333e+00\n1561  9.508333e+00\n1562  2.500000e-02\n1563 -8.633333e+00\n1564  1.055833e+01\n1565  1.941667e+00\n1566  5.125000e+00\n1567 -1.901667e+01\n1568  6.641667e+00\n1569 -1.629167e+01\n1570 -2.030000e+01\n1571 -1.197500e+01\n1572 -1.148333e+01\n1573  1.280000e+01\n1574 -8.333333e-03\n1575 -4.741667e+00\n1576 -1.075000e+01\n1577 -4.066667e+00\n1578  6.441667e+00\n1579 -1.801667e+01\n1580 -1.440833e+01\n1581  2.127500e+01\n1582  1.267500e+01\n1583 -7.833333e-01\n1584 -1.308333e+00\n1585 -1.030833e+01\n1586  3.066667e+00\n1587  7.075000e+00\n1588 -2.650000e+00\n1589  1.858333e+00\n1590 -1.496667e+01\n1591 -3.125000e+00\n1592  1.458333e+00\n1593  3.391667e+00\n1594  7.533333e+00\n1595 -1.503333e+01\n1596  3.191667e+00\n1597  8.333333e-02\n1598 -4.500000e+00\n1599  6.100000e+00\n1600 -1.180000e+01\n1601  8.333333e-01\n1602 -5.425000e+00\n1603 -2.156667e+01\n1604 -1.388333e+01\n1605 -2.467500e+01\n1606 -3.483333e+00\n1607  8.250000e-01\n1608  1.337500e+01\n1609  8.200000e+00\n1610 -1.850833e+01\n1611  1.216667e+00\n1612  1.593333e+01\n1613  1.734167e+01\n1614  8.166667e-01\n1615  2.650000e+00\n1616 -3.941667e+00\n1617  1.766667e+01\n1618 -6.666667e-02\n1619  7.208333e+00\n1620  1.550000e+00\n1621 -5.358333e+00\n1622 -1.907500e+01\n1623 -3.941667e+00\n1624  5.316667e+00\n1625  3.050000e+00\n1626  1.131667e+01\n1627  9.433333e+00\n1628  3.425000e+00\n1629  1.317500e+01\n1630 -1.749167e+01\n1631 -4.591667e+00\n1632 -4.675000e+00\n1633  1.274167e+01\n1634  6.083333e+00\n1635 -6.533333e+00\n1636 -1.510833e+01\n1637  2.019167e+01\n1638  7.900000e+00\n1639  8.458333e+00\n1640 -1.291667e+01\n1641 -1.277500e+01\n1642  7.816667e+00\n1643  1.800000e+00\n1644 -1.250000e+00\n1645  5.133333e+00\n1646  5.033333e+00\n1647  9.833333e+00\n1648 -9.833333e-01\n1649  2.425000e+00\n1650  6.675000e+00\n1651  1.599167e+01\n1652  6.991667e+00\n1653 -5.766667e+00\n1654  6.616667e+00\n1655  3.225000e+00\n1656 -1.915833e+01\n1657 -8.958333e+00\n1658 -1.316667e+00\n1659  7.900000e+00\n1660 -3.125000e+00\n1661  2.950000e+00\n1662 -4.216667e+00\n1663  1.034167e+01\n1664 -5.875000e+00\n1665 -5.766667e+00\n1666  2.267500e+01\n1667  1.463333e+01\n1668 -4.041667e+00\n1669 -2.833333e+00\n1670 -1.822500e+01\n1671  2.566667e+00\n1672  1.131667e+01\n1673 -9.416667e-01\n1674  5.258333e+00\n1675 -1.921667e+01\n1676 -6.850000e+00\n1677  7.750000e+00\n1678  7.408333e+00\n1679 -2.074167e+01\n1680 -1.065833e+01\n1681 -1.078333e+01\n1682  4.616667e+00\n1683  7.275000e+00\n1684  6.500000e-01\n1685  1.801667e+01\n1686  3.850000e+00\n1687  4.000000e-01\n1688 -7.608333e+00\n1689 -1.016667e+00\n1690  2.025000e+01\n1691 -7.466667e+00\n1692  1.084167e+01\n1693  1.250833e+01\n1694 -3.741667e+00\n1695 -9.358333e+00\n1696 -6.233333e+00\n1697 -1.209167e+01\n1698 -8.008333e+00\n1699 -1.323333e+01\n1700  4.241667e+00\n1701  8.133333e+00\n1702  1.150000e+01\n1703 -4.308333e+00\n1704  1.068333e+01\n1705  1.176667e+01\n1706  9.241667e+00\n1707 -3.158333e+00\n1708  3.958333e+00\n1709  2.566667e+00\n1710  1.403333e+01\n1711 -6.783333e+00\n1712 -1.250000e+00\n1713  8.400000e+00\n1714 -2.583333e-01\n1715 -1.420833e+01\n1716  1.462500e+01\n1717  5.550000e+00\n1718  3.550000e+00\n1719  1.420833e+01\n1720 -1.858333e+00\n1721 -1.474167e+01\n1722  7.783333e+00\n1723 -6.733333e+00\n1724 -9.716667e+00\n1725 -1.290833e+01\n1726 -6.241667e+00\n1727  1.191667e+01\n1728 -7.675000e+00\n1729  7.533333e+00\n1730 -5.266667e+00\n1731 -8.608333e+00\n1732 -7.158333e+00\n1733  1.345833e+01\n1734  7.158333e+00\n1735 -7.325000e+00\n1736  8.250000e+00\n1737  1.719167e+01\n1738 -1.816667e+01\n1739 -1.531667e+01\n1740  1.074167e+01\n1741  1.337500e+01\n1742  1.790833e+01\n1743 -1.600000e+00\n1744  6.125000e+00\n1745 -1.242500e+01\n1746  3.541667e+00\n1747 -4.050000e+00\n1748  1.636667e+01\n1749  5.625000e+00\n1750 -5.691667e+00\n1751  5.583333e+00\n1752 -1.904167e+01\n1753  1.234167e+01\n1754  1.191667e+00\n1755  2.162500e+01\n1756  1.443333e+01\n1757  8.100000e+00\n1758 -8.758333e+00\n1759  8.933333e+00\n1760  7.125000e+00\n1761  1.241667e+00\n1762  5.041667e+00\n1763  1.200833e+01\n1764  8.916667e-01\n1765 -1.275000e+01\n1766 -7.025000e+00\n1767  2.252500e+01\n1768  9.225000e+00\n1769 -1.420833e+01\n1770 -5.300000e+00\n1771  1.176667e+01\n1772  1.100833e+01\n1773 -4.141667e+00\n1774  6.416667e-01\n1775 -3.600000e+00\n1776  9.716667e+00\n1777 -4.166667e-01\n1778  1.584167e+01\n1779 -1.590833e+01\n1780  1.287500e+01\n1781  4.175000e+00\n1782 -9.800000e+00\n1783 -1.455833e+01\n1784  1.426667e+01\n1785  1.941667e+00\n1786  1.075000e+01\n1787 -1.750000e+00\n1788  7.533333e+00\n1789 -1.217500e+01\n1790 -5.508333e+00\n1791  3.541667e+00\n1792 -9.083333e-01\n1793 -2.235833e+01\n1794  2.083333e+00\n1795  1.051667e+01\n1796 -3.900000e+00\n1797  5.166667e-01\n1798 -1.625000e+00\n1799 -5.150000e+00\n1800 -1.854167e+01\n1801  3.866667e+00\n1802 -1.379167e+01\n1803  1.866667e+00\n1804  1.540833e+01\n1805  3.041667e+00\n1806  3.566667e+00\n1807  2.558333e+00\n1808  4.983333e+00\n1809  6.641667e+00\n1810  1.365000e+01\n1811  1.587500e+01\n1812  2.204167e+01\n1813  5.416667e+00\n1814  1.019167e+01\n1815  1.345833e+01\n1816  8.333333e-01\n1817  8.816667e+00\n1818  4.041667e+00\n1819  6.425000e+00\n1820  1.064167e+01\n1821  1.666667e+00\n1822 -2.983333e+00\n1823  5.266667e+00\n1824  1.533333e+00\n1825 -1.583333e+00\n1826  8.575000e+00\n1827  4.791667e+00\n1828  5.083333e-01\n1829  3.133333e+00\n1830  9.250000e+00\n1831 -1.075000e+00\n1832  7.050000e+00\n1833 -9.750000e-01\n1834  3.033333e+00\n1835  7.933333e+00\n1836  5.750000e-01\n1837  1.511667e+01\n1838  4.183333e+00\n1839  1.359167e+01\n1840  1.075000e+01\n1841 -8.041667e+00\n1842  1.047500e+01\n1843  2.420000e+01\n1844 -1.063333e+01\n1845  1.567500e+01\n1846  1.050000e+00\n1847  1.134167e+01\n1848 -7.241667e+00\n1849  1.690000e+01\n1850  7.933333e+00\n1851 -1.048333e+01\n1852  2.825000e+00\n1853  1.541667e+00\n1854  1.049167e+01\n1855 -1.660833e+01\n1856 -1.142500e+01\n1857 -2.350000e+00\n1858  1.380000e+01\n1859  6.908333e+00\n1860  7.100000e+00\n1861  1.482500e+01\n1862  3.416667e-01\n1863 -4.500000e+00\n1864  5.391667e+00\n1865  4.708333e+00\n1866 -9.841667e+00\n1867  4.008333e+00\n1868  2.094167e+01\n1869 -7.958333e+00\n1870 -1.516667e+00\n1871 -1.785000e+01\n1872 -8.833333e-01\n1873 -1.470833e+01\n1874 -9.583333e-01\n1875 -8.258333e+00\n1876 -1.440833e+01\n1877 -1.394167e+01\n1878  6.666667e-02\n1879 -3.758333e+00\n1880 -4.616667e+00\n1881  1.942500e+01\n1882  3.033333e+00\n1883  3.283333e+00\n1884  7.866667e+00\n1885 -1.921667e+01\n1886 -3.816667e+00\n1887 -1.522500e+01\n1888  4.558333e+00\n1889  6.583333e+00\n1890 -8.216667e+00\n1891  1.585000e+01\n1892  1.265000e+01\n1893  1.287500e+01\n1894  2.883333e+01\n1895  1.775000e+01\n1896 -1.582500e+01\n1897 -7.991667e+00\n1898 -1.013333e+01\n1899 -1.128333e+01\n1900  9.833333e-01\n1901 -6.850000e+00\n1902  2.038333e+01\n1903 -3.366667e+00\n1904  7.816667e+00\n1905 -7.408333e+00\n1906  4.908333e+00\n1907  2.883333e+01\n1908  1.415000e+01\n1909  3.366667e+00\n1910 -1.990000e+01\n1911 -2.255833e+01\n1912 -5.341667e+00\n1913 -6.708333e+00\n1914  1.308333e+01\n1915 -7.783333e+00\n1916 -5.266667e+00\n1917  2.250000e+01\n1918 -2.127500e+01\n1919 -2.233333e+00\n1920  1.274167e+01\n1921 -1.180000e+01\n1922  1.660833e+01\n1923 -7.425000e+00\n1924  1.183333e+00\n1925 -1.191667e+01\n1926 -2.640000e+01\n1927 -2.408333e+00\n1928 -7.833333e-01\n1929  1.733333e+00\n1930 -5.458333e+00\n1931  7.666667e+00\n1932 -2.166667e+00\n1933  1.397500e+01\n1934  1.535000e+01\n1935  5.150000e+00\n1936 -1.365000e+01\n1937 -4.758333e+00\n1938  2.416667e+00\n1939 -8.775000e+00\n1940  3.883333e+00\n1941 -8.950000e+00\n1942  1.180833e+01\n1943  4.175000e+00\n1944  7.833333e-01\n1945  3.741667e+00\n1946 -6.333333e-01\n1947  1.123333e+01\n1948  2.741667e+00\n1949 -7.750000e-01\n1950  6.983333e+00\n1951  1.089167e+01\n1952 -3.591667e+00\n1953  2.645833e+01\n1954 -2.320000e+01\n1955 -3.425000e+00\n1956 -9.083333e-01\n1957  1.983333e+00\n1958  8.008333e+00\n1959 -6.908333e+00\n1960 -1.608333e+00\n1961  5.133333e+00\n1962  3.158333e+00\n1963  9.425000e+00\n1964 -7.950000e+00\n1965 -1.550000e+00\n1966 -5.983333e+00\n1967  1.086667e+01\n1968 -3.016667e+00\n1969 -6.791667e+00\n1970  8.500000e-01\n1971  5.908333e+00\n1972 -5.166667e-01\n1973 -1.731667e+01\n1974  7.408333e+00\n1975  2.425000e+00\n1976 -6.908333e+00\n1977  1.383333e+00\n1978 -7.325000e+00\n1979  2.333333e-01\n1980 -9.083333e+00\n1981 -2.900000e+00\n1982  3.091667e+00\n1983 -1.468333e+01\n1984 -1.400000e+01\n1985  2.425833e+01\n1986 -6.791667e+00\n1987 -1.209167e+01\n1988 -5.475000e+00\n1989 -2.267500e+01\n1990  5.900000e+00\n1991  6.616667e+00\n1992 -2.267500e+01\n1993 -5.350000e+00\n1994 -1.039167e+01\n1995 -1.207500e+01\n1996  1.050000e+00\n1997 -8.866667e+00\n1998  2.019167e+01\n1999 -2.166667e-01\n2000 -6.850000e+00\n2001 -1.142500e+01\n2002  3.733333e+00\n2003  1.921667e+01\n2004  1.745833e+01\n2005  1.160000e+01\n2006  3.000000e+00\n2007  5.608333e+00\n2008  7.025000e+00\n2009  1.916667e+00\n2010 -1.045833e+01\n2011  9.483333e+00\n2012 -1.664167e+01\n2013  3.091667e+00\n2014 -1.998333e+01\n2015  1.200000e+00\n2016 -8.750000e+00\n2017 -4.908333e+00\n2018  3.308333e+00\n2019 -2.434167e+01\n2020  1.055000e+01\n2021  1.063333e+01\n2022 -1.860000e+01\n2023 -1.241667e+00\n2024 -1.391667e+01\n2025 -3.825000e+00\n2026 -1.468333e+01\n2027 -4.141667e+00\n2028 -2.258333e+01\n2029 -2.583333e-01\n2030 -3.450000e+00\n2031 -5.625000e+00\n2032  6.366667e+00\n2033 -3.683333e+00\n2034  1.269167e+01\n2035 -6.875000e+00\n2036 -1.098333e+01\n2037  3.475000e+00\n2038 -3.308333e+00\n2039 -9.683333e+00\n2040  9.475000e+00\n2041  2.441667e+00\n2042 -6.508333e+00\n2043 -6.375000e+00\n2044  1.488333e+01\n2045 -1.027500e+01\n2046 -6.250000e-01\n2047 -1.727500e+01\n2048  7.725000e+00\n2049  6.841667e+00\n2050 -5.000000e-02\n2051 -7.900000e+00\n2052 -7.500000e-01\n2053  7.100000e+00\n2054  5.608333e+00\n2055 -3.216667e+00\n2056 -2.208333e+00\n2057 -8.458333e+00\n2058  5.533333e+00\n2059 -2.266667e+00\n2060 -5.475000e+00\n2061  5.091667e+00\n2062 -2.883333e+00\n2063  1.121667e+01\n2064  3.750000e-01\n2065  1.276667e+01\n2066  1.075000e+00\n2067  1.248333e+01\n2068  2.208333e+00\n2069 -9.300000e+00\n2070 -5.008333e+00\n2071 -1.171667e+01\n2072 -3.991667e+00\n2073 -1.250833e+01\n2074 -8.725000e+00\n2075  6.241667e+00\n2076 -1.191667e+00\n2077  9.583333e+00\n2078  6.733333e+00\n2079  3.675000e+00\n2080 -1.921667e+01\n2081  6.666667e+00\n2082 -7.466667e+00\n2083 -1.892500e+01\n2084  2.075000e+00\n2085 -4.850000e+00\n2086 -2.208333e+00\n2087  9.958333e+00\n2088  1.664167e+01\n2089 -1.400000e+00\n2090 -1.450833e+01\n2091  1.058333e+00\n2092  1.216667e+00\n2093 -2.300000e+01\n2094  8.516667e+00\n2095 -3.333333e-01\n2096  3.325000e+00\n2097  1.162500e+01\n2098 -1.933333e+01\n2099  1.046667e+01\n2100 -1.913333e+01\n2101 -3.750000e-01\n2102  1.725000e+00\n2103 -1.005833e+01\n2104 -1.468333e+01\n2105 -1.191667e+01\n2106  1.206667e+01\n2107 -2.475000e+00\n2108  1.107500e+01\n2109 -1.177500e+01\n2110 -1.318333e+01\n2111  1.508333e+00\n2112  1.613333e+01\n2113 -8.400000e+00\n2114 -3.550000e+00\n2115  1.465000e+01\n2116 -1.870000e+01\n2117  1.294167e+01\n2118  3.450000e+00\n2119 -1.215000e+01\n2120 -7.725000e+00\n2121 -5.683333e+00\n2122  9.433333e+00\n2123  1.741667e+00\n2124  2.000833e+01\n2125  8.658333e+00\n2126 -2.100000e+00\n2127 -1.675000e+00\n2128  1.124167e+01\n2129  3.241667e+00\n2130  1.394167e+01\n2131  7.841667e+00\n2132  1.505833e+01\n2133  1.288333e+01\n2134 -9.766667e+00\n2135  1.176667e+01\n2136  7.183333e+00\n2137  1.379167e+01\n2138 -5.083333e-01\n2139  2.916667e+00\n2140  6.225000e+00\n2141 -1.796667e+01\n2142  3.516667e+00\n2143 -2.133333e+01\n2144 -1.191667e+01\n2145 -1.005833e+01\n2146  2.000833e+01\n2147 -1.454167e+01\n2148  8.108333e+00\n2149  2.210000e+01\n2150  1.233333e+01\n2151  1.296667e+01\n2152 -7.041667e+00\n2153  2.583333e-01\n2154 -5.816667e+00\n2155 -5.150000e+00\n2156 -2.303333e+01\n2157 -1.049167e+01\n2158  5.825000e+00\n2159 -2.000000e+00\n2160  2.966667e+00\n2161  6.083333e-01\n2162  1.058333e+00\n2163 -1.531667e+01\n2164 -3.316667e+00\n2165  2.475000e+00\n2166  1.913333e+01\n2167 -5.150000e+00\n2168 -8.050000e+00\n2169 -5.633333e+00\n2170 -9.050000e+00\n2171 -6.158333e+00\n2172 -1.516667e+01\n2173  1.465000e+01\n2174 -1.220833e+01\n2175  3.908333e+00\n2176  1.801667e+01\n2177  1.799167e+01\n2178 -7.808333e+00\n2179 -2.210000e+01\n2180 -1.766667e+01\n2181  1.039167e+01\n2182 -7.016667e+00\n2183 -7.216667e+00\n2184  2.261667e+01\n2185 -1.904167e+01\n2186 -8.633333e+00\n2187  5.333333e+00\n2188 -1.858333e+00\n2189 -1.078333e+01\n2190  6.333333e-01\n2191  1.235833e+01\n2192 -2.004167e+01\n2193 -1.537500e+01\n2194 -1.130000e+01\n2195  2.660000e+01\n2196 -2.133333e+01\n2197  9.783333e+00\n2198 -6.183333e+00\n2199  2.200000e+00\n2200  7.275000e+00\n2201 -1.641667e+00\n2202 -5.525000e+00\n2203  1.393333e+01\n2204  6.500000e-01\n2205 -8.100000e+00\n2206 -7.750000e-01\n2207 -1.133333e+01\n2208 -1.065833e+01\n2209  4.783333e+00\n2210  1.311667e+01\n2211 -5.750000e+00\n2212  1.259167e+01\n2213 -5.325000e+00\n2214  1.075000e+00\n2215  1.045000e+01\n2216  8.333333e-03\n2217  5.875000e+00\n2218 -7.500000e+00\n2219  1.221667e+01\n2220 -2.080000e+01\n2221 -5.416667e-01\n2222  7.841667e+00\n2223  8.925000e+00\n2224 -9.050000e+00\n2225 -5.150000e+00\n2226 -1.027500e+01\n2227  1.090000e+01\n2228  3.125000e+00\n2229  4.975000e+00\n2230 -4.558333e+00\n2231  1.763333e+01\n2232  9.341667e+00\n2233 -5.150000e+00\n2234  1.389167e+01\n2235  9.975000e+00\n2236 -2.080000e+01\n2237  1.781667e+01\n2238 -3.783333e+00\n2239  9.783333e+00\n2240  4.308333e+00\n2241 -9.558333e+00\n2242 -1.594167e+01\n2243  1.787500e+01\n2244 -2.416667e+00\n2245  1.393333e+01\n2246  7.641667e+00\n2247 -8.333333e-02\n2248 -1.373333e+01\n2249 -9.008333e+00\n2250 -6.616667e+00\n2251 -5.608333e+00\n2252  1.239167e+01\n2253  2.663333e+01\n2254  1.045000e+01\n2255 -8.466667e+00\n2256  1.054167e+01\n2257  3.125000e+00\n2258  7.050000e+00\n2259 -1.415000e+01\n2260  4.591667e+00\n2261  3.225000e+00\n2262  3.050000e+00\n2263  1.233333e+00\n2264  9.858333e+00\n2265 -1.866667e+00\n2266  2.775000e+00\n2267  4.166667e-01\n2268  3.116667e+00\n2269 -1.092500e+01\n2270 -4.675000e+00\n2271  6.616667e+00\n2272 -5.458333e+00\n2273  1.836667e+01\n2274  6.916667e-01\n2275 -4.358333e+00\n2276  1.183333e+01\n2277 -3.116667e+00\n2278  3.375000e+00\n2279  5.766667e+00\n2280  6.566667e+00\n2281 -3.175000e+00\n2282 -8.133333e+00\n2283 -7.383333e+00\n2284 -1.807500e+01\n2285  6.175000e+00\n2286  3.050000e+00\n2287 -5.825000e+00\n2288 -1.296667e+01\n2289 -1.211667e+01\n2290  1.683333e+01\n2291 -2.038333e+01\n2292  1.248333e+01\n2293  6.075000e+00\n2294 -1.750000e-01\n2295  1.288333e+01\n2296  1.067500e+01\n2297  5.400000e+00\n2298  1.775000e+01\n2299  2.500000e+00\n2300  5.083333e-01\n2301  5.841667e+00\n2302  1.850000e+00\n2303  4.141667e+00\n2304  1.283333e+01\n2305  1.337500e+01\n2306  2.300000e+00\n2307  1.600000e+00\n2308  4.358333e+00\n2309 -2.208333e+00\n2310 -8.791667e+00\n2311 -1.013333e+01\n2312  6.541667e+00\n2313  6.500000e-01\n2314 -2.166667e+00\n2315 -7.833333e-01\n2316  7.050000e+00\n2317 -1.895833e+01\n2318 -1.174167e+01\n2319  1.080833e+01\n2320 -1.830833e+01\n2321  1.233333e+01\n2322  4.500000e+00\n2323  1.320000e+01\n2324 -6.158333e+00\n2325 -6.425000e+00\n2326  3.283333e+00\n2327 -1.176667e+01\n2328 -5.350000e+00\n2329  8.550000e+00\n2330  1.629167e+01\n2331  1.027500e+01\n2332 -4.816667e+00\n2333 -4.941667e+00\n2334 -1.170833e+01\n2335  5.875000e+00\n2336  1.800000e+00\n2337 -3.366667e+00\n2338  2.645833e+01\n2339  3.925000e+00\n2340  1.394167e+01\n2341  5.383333e+00\n2342  6.908333e+00\n2343 -1.261667e+01\n2344 -1.440833e+01\n2345  1.387500e+01\n2346  4.250000e-01\n2347 -3.750000e-01\n2348  1.510833e+01\n2349 -1.030833e+01\n2350 -3.333333e-02\n2351  5.458333e+00\n2352 -1.666667e+00\n2353  7.725000e+00\n2354  9.433333e+00\n2355 -8.616667e+00\n2356 -3.541667e+00\n2357 -3.333333e+00\n2358  7.216667e+00\n2359 -8.316667e+00\n2360  8.333333e-01\n2361 -1.405833e+01\n2362 -2.300000e+00\n2363 -6.916667e-01\n2364  7.350000e+00\n2365 -3.966667e+00\n2366  4.858333e+00\n2367  4.041667e+00\n2368 -1.045833e+01\n2369 -1.364167e+01\n2370  5.683333e+00\n2371 -3.083333e+00\n2372 -1.316667e+00\n2373 -5.833333e-02\n2374  8.841667e+00\n2375 -1.359167e+01\n2376 -2.058333e+00\n2377  2.566667e+00\n2378 -2.127500e+01\n2379  1.830833e+01\n2380  4.800000e+00\n2381 -4.708333e+00\n2382  2.291667e+00\n2383 -7.583333e+00\n2384  1.391667e+01\n2385  9.816667e+00\n2386 -1.206667e+01\n2387 -3.075000e+00\n2388 -2.450000e+00\n2389 -1.590833e+01\n2390  2.204167e+01\n2391  6.075000e+00\n2392  5.341667e+00\n2393 -2.267500e+01\n2394  6.433333e+00\n2395 -6.366667e+00\n2396 -4.175000e+00\n2397  1.061667e+01\n2398 -1.391667e+01\n2399 -6.291667e+00\n2400  7.341667e+00\n2401  3.450000e+00\n2402  5.625000e+00\n2403 -1.291667e+01\n2404  1.750000e-01\n2405  1.275000e+01\n2406  2.083333e-01\n2407  4.900000e+00\n2408 -1.092500e+01\n2409  8.550000e+00\n2410 -7.900000e+00\n2411  4.500000e+00\n2412 -1.033333e+01\n2413  2.350000e+00\n2414  1.051667e+01\n2415 -5.625000e+00\n2416 -1.616667e+01\n2417  3.416667e-01\n2418 -4.616667e+00\n2419  2.075000e+00\n2420 -7.500000e+00\n2421 -1.373333e+01\n2422 -1.065833e+01\n2423  1.617500e+01\n2424  3.333333e+00\n2425  1.177500e+01\n2426 -7.525000e+00\n2427 -1.020000e+01\n2428 -1.984167e+01\n2429 -1.114167e+01\n2430 -7.933333e+00\n2431 -1.125833e+01\n2432  4.766667e+00\n2433  6.783333e+00\n2434  1.984167e+01\n2435  1.787500e+01\n2436  1.916667e+00\n2437 -7.100000e+00\n2438 -2.645833e+01\n2439  4.675000e+00\n2440 -6.991667e+00\n2441 -8.166667e-01\n2442  7.500000e-02\n2443  1.403333e+01\n2444 -3.258333e+00\n2445  3.666667e-01\n2446 -4.183333e+00\n2447 -9.433333e+00\n2448  1.704167e+01\n2449  1.566667e+00\n2450 -1.186667e+01\n2451 -1.750000e-01\n2452 -3.175000e+00\n2453  1.810833e+01\n2454 -1.625000e+00\n2455  5.066667e+00\n2456 -1.924167e+01\n2457  1.733333e+00\n2458  1.200000e+01\n2459 -2.583333e-01\n2460 -1.525833e+01\n2461 -1.191667e+01\n2462  8.841667e+00\n2463  3.425000e+00\n2464  3.066667e+00\n2465 -1.250833e+01\n2466  4.241667e+00\n2467  1.117500e+01\n2468 -3.308333e+00\n2469 -2.841667e+00\n2470 -3.241667e+00\n2471  3.891667e+00\n2472 -8.416667e-01\n2473 -4.325000e+00\n2474  7.300000e+00\n2475  5.633333e+00\n2476  1.101667e+01\n2477  8.875000e+00\n2478  6.833333e-01\n2479 -1.921667e+01\n2480  2.235833e+01\n2481 -3.333333e-02\n2482  8.800000e+00\n2483 -1.541667e+00\n2484  1.025000e+01\n2485  1.183333e+01\n2486 -6.350000e+00\n2487 -3.716667e+00\n2488 -1.641667e+00\n2489 -4.300000e+00\n2490  1.098333e+01\n2491 -1.810833e+01\n2492  2.341667e+00\n2493  8.416667e-01\n2494 -1.217500e+01\n2495 -1.678333e+01\n2496  1.156667e+01\n2497  1.221667e+01\n2498  1.670833e+01\n2499 -1.092500e+01\n2500 -2.625000e+00\n2501  1.027500e+01\n2502  6.375000e+00\n2503 -2.225000e+00\n2504 -1.325833e+01\n2505 -6.566667e+00\n2506 -5.983333e+00\n2507 -1.998333e+01\n2508  1.704167e+01\n2509  1.116667e+00\n2510 -7.283333e+00\n2511  1.892500e+01\n2512 -1.275000e+01\n2513  3.875000e+00\n2514  3.900000e+00\n2515  1.168333e+01\n2516  2.833333e+00\n2517 -7.125000e+00\n2518 -4.500000e+00\n2519  5.150000e+00\n2520  5.091667e+00\n2521 -1.426667e+01\n2522 -1.066667e+01\n2523 -5.341667e+00\n2524 -5.483333e+00\n2525 -1.975000e+00\n2526  1.690000e+01\n2527  8.983333e+00\n2528 -4.550000e+00\n2529  2.408333e+00\n2530 -2.458333e+00\n2531  1.440833e+01\n2532 -7.441667e+00\n2533 -1.613333e+01\n2534 -3.275000e+00\n2535 -9.225000e+00\n2536 -5.900000e+00\n2537 -7.383333e+00\n2538 -3.158333e+00\n2539  1.858333e+00\n2540 -3.266667e+00\n2541  1.953333e+01\n2542  6.175000e+00\n2543  4.675000e+00\n2544 -2.305833e+01\n2545  7.200000e+00\n2546  3.200000e+00\n2547 -2.543333e+01\n2548 -1.128333e+01\n2549 -3.925000e+00\n2550  8.516667e+00\n2551 -1.320000e+01\n2552  1.719167e+01\n2553  4.916667e+00\n2554 -1.546667e+01\n2555  2.416667e+00\n2556  1.308333e+01\n2557  1.329167e+01\n2558 -1.483333e+00\n2559  1.317500e+01\n2560 -2.558333e+00\n2561 -1.416667e-01\n2562  1.465000e+01\n2563  3.350000e+00\n2564 -2.500000e-02\n2565  6.558333e+00\n2566  6.666667e-01\n2567  1.365000e+01\n2568  1.189167e+01\n2569  1.061667e+01\n2570 -3.391667e+00\n2571  7.275000e+00\n2572 -2.575000e+00\n2573  1.104167e+01\n2574 -2.116667e+00\n2575  7.200000e+00\n2576 -5.516667e+00\n2577 -2.416667e+00\n2578  7.666667e-01\n2579 -9.166667e+00\n2580  8.841667e+00\n2581 -5.558333e+00\n2582  1.600000e+00\n2583  5.875000e+00\n2584  3.333333e-01\n2585 -3.025000e+00\n2586 -7.641667e+00\n2587  2.708333e+00\n2588  1.020000e+01\n2589  1.388333e+01\n2590 -4.358333e+00\n2591  1.183333e+00\n2592 -1.517500e+01\n2593 -1.600000e+00\n2594 -3.241667e+00\n2595 -1.790833e+01\n2596  7.158333e+00\n2597 -2.983333e+00\n2598  6.383333e+00\n2599 -6.041667e+00\n2600 -5.750000e-01\n2601 -1.124167e+01\n2602  6.558333e+00\n2603 -1.051667e+01\n2604 -2.633333e+00\n2605 -9.775000e+00\n2606  9.083333e+00\n2607 -5.200000e+00\n2608  1.267500e+01\n2609 -2.041667e+00\n2610  1.331667e+01\n2611  1.646667e+01\n2612  2.657500e+01\n2613 -4.725000e+00\n2614  2.441667e+00\n2615  1.154167e+01\n2616  7.841667e+00\n2617 -1.234167e+01\n2618  9.775000e+00\n2619 -5.875000e+00\n2620  7.491667e+00\n2621  8.000000e-01\n2622 -1.027500e+01\n2623  2.450000e+00\n2624  5.033333e+00\n2625  1.217500e+01\n2626  8.941667e+00\n2627 -6.791667e+00\n2628  4.500000e+00\n2629  2.323333e+01\n2630  1.365833e+01\n2631  2.244167e+01\n2632  1.927500e+01\n2633 -1.258333e+00\n2634  4.650000e+00\n2635 -2.156667e+01\n2636  2.650000e+00\n2637 -1.808333e+00\n2638 -3.483333e+00\n2639 -9.875000e+00\n2640  6.933333e+00\n2641 -4.675000e+00\n2642  4.900000e+00\n2643  2.833333e-01\n2644 -1.365000e+01\n2645  1.035833e+01\n2646 -1.816667e+01\n2647  5.850000e+00\n2648  1.066667e+01\n2649 -9.775000e+00\n2650  8.016667e+00\n2651 -8.800000e+00\n2652  1.298333e+01\n2653 -9.475000e+00\n2654 -3.600000e+00\n2655  8.608333e+00\n2656 -1.658333e+01\n2657 -4.733333e+00\n2658  8.025000e+00\n2659  2.300000e+01\n2660 -3.925000e+00\n2661  2.166667e-01\n2662 -3.091667e+00\n2663 -9.083333e+00\n2664  2.091667e+00\n2665  4.708333e+00\n2666  3.316667e+00\n2667 -2.461667e+01\n2668  1.050000e+00\n2669  1.394167e+01\n2670 -1.142500e+01\n2671 -4.041667e+00\n2672  4.308333e+00\n2673  6.383333e+00\n2674 -4.383333e+00\n2675  3.425000e+00\n2676 -8.333333e-01\n2677  1.359167e+01\n2678 -1.235833e+01\n2679 -1.514167e+01\n2680  1.850833e+01\n2681 -9.583333e+00\n2682  6.883333e+00\n2683  5.550000e+00\n2684 -9.275000e+00\n2685  1.323333e+01\n2686  3.925000e+00\n2687 -1.690000e+01\n2688  7.441667e+00\n2689  1.268333e+01\n2690 -6.025000e+00\n2691 -6.850000e+00\n2692  7.566667e+00\n2693 -1.449167e+01\n2694 -1.590833e+01\n2695 -1.394167e+01\n2696 -4.366667e+00\n2697  1.503333e+01\n2698 -8.516667e+00\n2699 -4.733333e+00\n2700 -6.300000e+00\n2701 -5.566667e+00\n2702  9.625000e+00\n2703 -4.858333e+00\n2704 -5.958333e+00\n2705 -7.841667e+00\n2706 -8.108333e+00\n2707  2.741667e+00\n2708  1.168333e+01\n2709  9.900000e+00\n2710 -7.525000e+00\n2711 -1.840000e+01\n2712 -3.941667e+00\n2713  1.191667e+00\n2714 -1.854167e+01\n2715  1.380000e+01\n2716 -1.516667e+01\n2717 -5.358333e+00\n2718  2.250000e-01\n2719 -4.900000e+00\n2720  5.900000e+00\n2721 -1.375000e+00\n2722  1.441667e+01\n2723  3.866667e+00\n2724 -6.500000e-01\n2725 -6.850000e+00\n2726  3.125000e+00\n2727 -9.400000e+00\n2728 -1.808333e+01\n2729 -8.816667e+00\n2730 -2.461667e+01\n2731  5.133333e+00\n2732  4.833333e-01\n2733  3.041667e+00\n2734  1.253333e+01\n2735 -3.675000e+00\n2736  1.672500e+01\n2737 -1.550000e+00\n2738  1.766667e+01\n2739  1.593333e+01\n2740 -1.441667e+00\n2741 -1.195000e+01\n2742 -6.375000e+00\n2743  1.174167e+01\n2744 -7.241667e+00\n2745 -1.588333e+01\n2746 -9.416667e-01\n2747 -3.391667e+00\n2748 -8.458333e+00\n2749  6.825000e+00\n2750  1.800000e+00\n2751  1.454167e+01\n2752 -7.166667e-01\n2753  6.175000e+00\n2754 -2.000000e+00\n2755 -2.775000e+00\n2756  1.517500e+01\n2757  4.858333e+00\n2758 -4.100000e+00\n2759  7.750000e-01\n2760 -3.450000e+00\n2761  1.158333e+00\n2762 -5.333333e-01\n2763  5.475000e+00\n2764  1.807500e+01\n2765  6.108333e+00\n2766  3.925000e+00\n2767 -6.508333e+00\n2768 -4.766667e+00\n2769 -1.270000e+01\n2770 -6.916667e-01\n2771  7.750000e+00\n2772 -9.008333e+00\n2773 -6.675000e+00\n2774 -3.250000e+00\n2775  1.041667e+00\n2776 -1.608333e+00\n2777 -7.500000e+00\n2778  6.175000e+00\n2779 -1.866667e+00\n2780 -7.058333e+00\n2781 -2.241667e+01\n2782  1.625000e+00\n2783  1.350000e+01\n2784  1.907500e+01\n2785 -1.666667e+00\n2786  7.041667e+00\n2787 -1.282500e+01\n2788 -6.650000e+00\n2789 -5.300000e+00\n2790  4.366667e+00\n2791 -7.100000e+00\n2792 -1.443333e+01\n2793 -1.049167e+01\n2794  2.066667e+00\n2795 -5.958333e+00\n2796 -1.435000e+01\n2797  4.000000e-01\n2798 -6.233333e+00\n2799 -1.755000e+01\n2800 -9.833333e-01\n2801 -2.083333e-01\n2802  8.933333e+00\n2803  1.500000e+01\n2804  8.758333e+00\n2805 -1.001667e+01\n2806 -7.425000e+00\n2807  1.034167e+01\n2808  1.075000e+00\n2809 -4.100000e+00\n2810 -1.400000e+00\n2811 -8.000000e-01\n2812  3.966667e+00\n2813 -8.458333e+00\n2814  8.800000e+00\n2815 -8.866667e+00\n2816  3.433333e+00\n2817 -2.158333e+00\n2818  2.224167e+01\n2819  1.799167e+01\n2820  8.550000e+00\n2821  1.092500e+01\n2822 -7.150000e+00\n2823 -1.483333e+00\n2824  6.666667e+00\n2825  7.350000e+00\n2826  6.458333e+00\n2827  1.046667e+01\n2828 -4.175000e+00\n2829  2.135833e+01\n2830 -1.275000e+01\n2831  8.600000e+00\n2832  7.866667e+00\n2833 -8.041667e+00\n2834 -1.189167e+01\n2835 -1.233333e+01\n2836  1.148333e+01\n2837 -1.058333e+01\n2838 -1.010000e+01\n2839 -6.433333e+00\n2840 -2.320000e+01\n2841 -5.550000e+00\n2842 -9.241667e+00\n2843  1.054167e+01\n2844  1.755000e+01\n2845 -1.379167e+01\n2846  9.433333e+00\n2847  3.600000e+00\n2848  1.583333e+00\n2849 -3.125000e+00\n2850  2.683333e+00\n2851 -2.775000e+00\n2852 -7.408333e+00\n2853 -4.583333e-01\n2854  9.508333e+00\n2855  2.246667e+01\n2856  1.377500e+01\n2857  6.308333e+00\n2858  4.358333e+00\n2859 -1.666667e+00\n2860 -5.758333e+00\n2861 -1.035833e+01\n2862 -1.520000e+01\n2863 -1.936667e+01\n2864  1.769167e+01\n2865 -2.833333e-01\n2866  1.324167e+01\n2867  3.383333e+00\n2868 -1.394167e+01\n2869 -7.808333e+00\n2870  1.933333e+01\n2871  6.533333e+00\n2872  1.385000e+01\n2873  1.090000e+01\n2874 -6.250000e-01\n2875 -6.816667e+00\n2876  7.391667e+00\n2877 -2.266667e+00\n2878 -2.583333e-01\n2879 -4.791667e+00\n2880 -4.741667e+00\n2881 -1.234167e+01\n2882  8.908333e+00\n2883  3.908333e+00\n2884  6.316667e+00\n2885 -2.250000e-01\n2886  1.737500e+01\n2887  2.640000e+01\n2888 -5.900000e+00\n2889  9.916667e+00\n2890 -6.375000e+00\n2891  2.640000e+01\n2892  5.683333e+00\n2893  2.529167e+01\n2894  2.024167e+01\n2895  9.958333e+00\n2896  1.800000e+00\n2897 -2.127500e+01\n2898  1.075000e+00\n2899 -2.416667e+00\n2900  2.916667e-01\n2901  5.350000e+00\n2902  1.263333e+01\n2903  6.883333e+00\n2904 -3.400000e+00\n2905 -1.535000e+01\n2906 -1.276667e+01\n2907  5.125000e+00\n2908 -1.019167e+01\n2909 -1.191667e+01\n2910  1.550000e+00\n2911  2.025000e+00\n2912  2.583333e-01\n2913 -1.380000e+01\n2914 -1.845833e+01\n2915  9.000000e-01\n2916 -7.325000e+00\n2917 -1.041667e+00\n2918  4.158333e+00\n2919  1.270000e+01\n2920  1.268333e+01\n2921  1.215000e+01\n2922 -2.458333e+00\n2923  4.791667e+00\n2924  1.200833e+01\n2925 -2.019167e+01\n2926  7.550000e+00\n2927  1.271667e+01\n2928 -5.125000e+00\n2929  6.316667e+00\n2930 -6.491667e+00\n2931 -2.258333e+01\n2932 -4.916667e+00\n2933  1.263333e+01\n2934  1.220833e+01\n2935  3.700000e+00\n2936  9.158333e+00\n2937  1.698333e+01\n2938  7.233333e+00\n2939  4.500000e+00\n2940  6.533333e+00\n2941  4.950000e+00\n2942  2.320000e+01\n2943 -6.158333e+00\n2944 -3.125000e+00\n2945 -1.215000e+01\n2946  1.488333e+01\n2947 -3.025000e+00\n2948  1.459167e+01\n2949  1.525833e+01\n2950 -1.034167e+01\n2951 -1.998333e+01\n2952 -8.266667e+00\n2953  1.458333e+00\n2954  8.758333e+00\n2955 -6.316667e+00\n2956 -2.166667e-01\n2957  1.283333e+01\n2958 -2.529167e+01\n2959 -1.561667e+01\n2960 -5.666667e+00\n2961  1.049167e+01\n2962  1.373333e+01\n2963 -1.296667e+01\n2964 -9.008333e+00\n2965 -2.232500e+01\n2966  4.841667e+00\n2967  2.625000e+00\n2968  1.391667e+01\n2969 -3.508333e+00\n2970  4.191667e+00\n2971  1.540000e+01\n2972  5.266667e+00\n2973 -6.383333e+00\n2974  9.375000e+00\n2975 -6.433333e+00\n2976 -2.100000e+01\n2977 -7.491667e+00\n2978 -1.916667e+00\n2979 -8.216667e+00\n2980  5.841667e+00\n2981  6.241667e+00\n2982  9.925000e+00\n2983 -1.397500e+01\n2984  5.175000e+00\n2985  6.991667e+00\n2986 -9.025000e+00\n2987 -5.916667e-01\n2988 -9.700000e+00\n2989 -3.908333e+00\n2990 -7.416667e-01\n2991 -5.441667e+00\n2992  1.461667e+01\n2993  1.663333e+01\n2994 -3.583333e-01\n2995 -4.850000e+00\n2996  8.241667e+00\n2997 -2.204167e+01\n2998 -1.060000e+01\n2999  5.408333e+00\n3000  4.333333e+00\n3001  9.925000e+00\n3002  7.583333e-01\n3003 -1.593333e+01\n3004 -5.208333e+00\n3005  1.597500e+01\n3006 -8.458333e+00\n3007  1.380000e+01\n3008 -5.808333e+00\n3009 -1.248333e+01\n3010 -5.983333e+00\n3011 -1.215833e+01\n3012 -1.541667e+00\n3013  3.175000e+00\n3014  2.291667e+00\n3015  3.100000e+00\n3016  1.250833e+01\n3017 -2.233333e+00\n3018  1.144167e+01\n3019  1.261667e+01\n3020  8.666667e+00\n3021  1.075000e+01\n3022  1.020000e+01\n3023  1.060833e+01\n3024  1.449167e+01\n3025 -9.925000e+00\n3026 -1.910000e+01\n3027 -1.133333e+01\n3028  1.750000e-01\n3029  8.008333e+00\n3030  1.666667e+00\n3031 -1.051667e+01\n3032  4.383333e+00\n3033  1.379167e+01\n3034  3.750000e+00\n3035 -1.270000e+01\n3036 -5.416667e-01\n3037 -8.250000e+00\n3038  6.783333e+00\n3039  1.603333e+01\n3040  3.333333e-02\n3041  1.488333e+01\n3042  2.467500e+01\n3043  1.191667e+00\n3044  7.525000e+00\n3045  1.171667e+01\n3046 -2.033333e+00\n3047 -9.841667e+00\n3048 -2.080000e+01\n3049 -1.684167e+01\n3050  1.468333e+01\n3051 -5.083333e-01\n3052 -8.400000e+00\n3053  1.049167e+01\n3054 -4.041667e+00\n3055 -1.810833e+01\n3056  8.333333e-03\n3057 -1.531667e+01\n3058 -5.150000e+00\n3059  5.616667e+00\n3060  4.183333e+00\n3061  8.500000e-01\n3062 -1.170833e+01\n3063  9.366667e+00\n3064 -7.725000e+00\n3065 -6.108333e+00\n3066 -4.758333e+00\n3067 -2.125000e+00\n3068  1.115000e+01\n3069  6.475000e+00\n3070 -3.850000e+00\n3071 -9.633333e+00\n3072 -7.783333e+00\n3073  4.591667e+00\n3074 -9.800000e+00\n3075  1.025000e+01\n3076  4.708333e+00\n3077  1.933333e+01\n3078 -5.291667e+00\n3079 -5.825000e+00\n3080 -9.083333e-01\n3081  1.488333e+01\n3082 -2.916667e+00\n3083  4.733333e+00\n3084  2.408333e+00\n3085 -7.000000e-01\n3086 -3.741667e+00\n3087 -1.265000e+01\n3088 -9.641667e+00\n3089 -1.282500e+01\n3090 -1.740000e+01\n3091  3.433333e+00\n3092 -1.420833e+01\n3093 -2.863333e+01\n3094 -8.316667e+00\n3095  1.291667e+01\n3096  1.781667e+01\n3097  8.316667e+00\n3098  5.091667e+00\n3099 -1.450000e+00\n3100 -1.148333e+01\n3101  1.116667e+00\n3102  7.500000e+00\n3103  1.833333e+00\n3104  1.308333e+01\n3105  5.125000e+00\n3106  6.583333e+00\n3107  6.233333e+00\n3108  5.458333e+00\n3109 -5.266667e+00\n3110 -1.810833e+01\n3111  3.325000e+00\n3112 -5.983333e+00\n3113  1.191667e+00\n3114  6.733333e+00\n3115  2.420000e+01\n3116 -1.365000e+01\n3117  4.916667e+00\n3118  2.508333e+00\n3119  4.108333e+00\n3120 -8.383333e+00\n3121 -1.528333e+01\n3122 -1.389167e+01\n3123 -8.408333e+00\n3124 -1.110000e+01\n3125  6.158333e+00\n3126 -2.375000e+00\n3127 -3.783333e+00\n3128  1.377500e+01\n3129 -8.075000e+00\n3130  4.441667e+00\n3131  1.064167e+01\n3132 -8.816667e+00\n3133 -1.197500e+01\n3134  5.358333e+00\n3135  9.775000e+00\n3136  1.567500e+01\n3137  1.365833e+01\n3138 -9.400000e+00\n3139  9.558333e+00\n3140 -5.683333e+00\n3141 -1.261667e+01\n3142  6.291667e+00\n3143  4.175000e+00\n3144  1.856667e+01\n3145 -7.808333e+00\n3146 -2.250000e-01\n3147  3.800000e+00\n3148 -9.716667e+00\n3149 -9.166667e+00\n3150  6.491667e+00\n3151 -1.725000e+00\n3152  1.516667e+01\n3153 -5.616667e+00\n3154  1.566667e+00\n3155  2.133333e+01\n3156  3.700000e+00\n3157 -2.640000e+01\n3158 -1.379167e+01\n3159 -2.450000e+00\n3160  3.433333e+00\n3161 -4.858333e+00\n3162  1.541667e+00\n3163  3.333333e+00\n3164 -2.645833e+01\n3165  6.916667e-01\n3166 -1.183333e+00\n3167  2.775000e+00\n3168  1.463333e+01\n3169  7.883333e+00\n3170 -3.166667e-01\n3171 -2.450000e+00\n3172 -1.725000e+00\n3173 -4.508333e+00\n3174 -9.858333e+00\n3175  5.416667e-01\n3176 -1.045000e+01\n3177 -1.018333e+01\n3178 -1.234167e+01\n3179 -6.941667e+00\n3180  1.201667e+01\n3181 -1.344167e+01\n3182 -7.841667e+00\n3183  1.195000e+01\n3184  1.116667e+00\n3185  5.150000e+00\n3186 -1.308333e+01\n3187  1.254167e+01\n3188  7.391667e+00\n3189  2.026667e+01\n3190 -6.108333e+00\n3191 -1.801667e+01\n3192  6.791667e+00\n3193 -7.833333e-01\n3194  2.900000e+00\n3195 -7.166667e-01\n3196  2.156667e+01\n3197 -1.655000e+01\n3198 -7.441667e+00\n3199  6.583333e+00\n3200 -1.128333e+01\n3201  8.216667e+00\n3202  2.775000e+00\n3203  1.496667e+01\n3204 -4.650000e+00\n3205 -1.791667e+00\n3206  1.613333e+01\n3207 -5.208333e+00\n3208 -8.041667e+00\n3209  4.583333e-01\n3210  1.605000e+01\n3211 -5.691667e+00\n3212 -1.316667e+00\n3213 -3.533333e+00\n3214  2.455833e+01\n3215  7.425000e+00\n3216 -2.233333e+00\n3217 -1.528333e+01\n3218  5.900000e+00\n3219 -7.416667e-01\n3220  2.891667e+00\n3221 -2.030000e+01\n3222 -1.051667e+01\n3223 -1.583333e-01\n3224  8.058333e+00\n3225  7.750000e-01\n3226 -2.010833e+01\n3227 -4.558333e+00\n3228 -3.991667e+00\n3229 -7.333333e+00\n3230 -6.650000e+00\n3231 -7.116667e+00\n3232  2.130000e+01\n3233 -8.800000e+00\n3234  1.906667e+01\n3235 -2.863333e+01\n3236  1.051667e+01\n3237 -8.108333e+00\n3238  4.333333e-01\n3239 -2.491667e+00\n3240 -3.716667e+00\n3241  4.008333e+00\n3242 -5.000000e-02\n3243  8.791667e+00\n3244  5.150000e+00\n3245 -1.258333e+00\n3246  2.891667e+00\n3247  6.241667e+00\n3248 -5.258333e+00\n3249 -7.166667e-01\n3250  1.294167e+01\n3251 -6.933333e+00\n3252 -8.916667e-01\n3253  8.608333e+00\n3254  7.166667e-01\n3255  2.025000e+00\n3256 -3.900000e+00\n3257 -2.147500e+01\n3258  1.403333e+01\n3259 -6.791667e+00\n3260 -2.200000e+00\n3261 -2.975000e+00\n3262  3.316667e+00\n3263 -1.095833e+01\n3264  4.708333e+00\n3265 -9.483333e+00\n3266 -5.266667e+00\n3267  2.408333e+00\n3268 -1.591667e+00\n3269  3.116667e+00\n3270  8.383333e+00\n3271  1.468333e+01\n3272  2.080000e+01\n3273 -1.936667e+01\n3274 -2.643333e+01\n3275 -5.000000e-02\n3276  1.074167e+01\n3277  1.298333e+01\n3278  1.157500e+01\n3279  6.708333e+00\n3280  1.573333e+01\n3281  2.127500e+01\n3282  6.366667e+00\n3283  1.049167e+01\n3284 -9.050000e+00\n3285 -8.016667e+00\n3286  2.264167e+01\n3287  1.174167e+01\n3288 -1.331667e+01\n3289  1.380000e+01\n3290  1.227500e+01\n3291 -1.109167e+01\n3292  4.908333e+00\n3293 -8.858333e+00\n3294 -1.078333e+01\n3295  7.500000e-01\n3296  4.650000e+00\n3297  7.266667e+00\n3298 -4.075000e+00\n3299  1.850833e+01\n3300  1.585000e+01\n3301 -5.000000e-01\n3302  2.100000e+01\n3303 -2.640000e+01\n3304  5.550000e+00\n3305 -3.175000e+00\n3306 -1.870000e+01\n3307  3.816667e+00\n3308 -1.391667e+01\n3309 -1.166667e-01\n3310 -3.675000e+00\n3311 -1.287500e+01\n3312 -1.290833e+01\n3313 -1.177500e+01\n3314 -2.258333e+01\n3315  4.308333e+00\n3316  8.258333e+00\n3317 -8.758333e+00\n3318  3.166667e+00\n3319 -7.783333e+00\n3320 -6.316667e+00\n3321  1.032500e+01\n3322 -1.910000e+01\n3323  1.388333e+01\n3324 -5.608333e+00\n3325 -8.858333e+00\n3326 -1.160000e+01\n3327 -1.737500e+01\n3328 -8.733333e+00\n3329  2.016667e+00\n3330 -2.625000e+00\n3331 -2.645833e+01\n3332  1.508333e+01\n3333 -1.047500e+01\n3334 -1.502500e+01\n3335  1.013333e+01\n3336  9.333333e+00\n3337  2.058333e+00\n3338 -1.100833e+01\n3339 -2.323333e+01\n3340  5.475000e+00\n3341 -1.698333e+01\n3342  3.183333e+00\n3343 -2.283333e+00\n3344 -4.508333e+00\n3345  1.924167e+01\n3346 -9.166667e-01\n3347 -4.858333e+00\n3348  9.525000e+00\n3349 -1.144167e+01\n3350  1.185833e+01\n3351  1.075000e+00\n3352  4.408333e+00\n3353 -8.658333e+00\n3354 -5.391667e+00\n3355  1.870000e+01\n3356  4.616667e+00\n3357 -1.441667e+01\n3358  3.491667e+00\n3359  3.141667e+00\n3360 -1.733333e+00\n3361  1.775000e+01\n3362 -5.766667e+00\n3363 -1.684167e+01\n3364 -9.700000e+00\n3365  6.966667e+00\n3366  2.026667e+01\n3367  4.558333e+00\n3368 -2.475000e+00\n3369  1.162500e+01\n3370 -1.947500e+01\n3371 -2.038333e+01\n3372  4.408333e+00\n3373 -1.317500e+01\n3374 -1.057500e+01\n3375 -5.958333e+00\n3376  8.466667e+00\n3377  7.141667e+00\n3378  1.136667e+01\n3379 -1.460000e+01\n3380 -4.333333e-01\n3381  5.466667e+00\n3382 -2.975000e+00\n3383  1.395000e+01\n3384 -3.133333e+00\n3385 -3.991667e+00\n3386  6.850000e+00\n3387 -3.333333e+00\n3388 -1.240000e+01\n3389 -8.491667e+00\n3390 -3.391667e+00\n3391 -7.183333e+00\n3392 -1.842500e+01\n3393 -1.269167e+01\n3394 -2.543333e+01\n3395 -1.216667e+00\n3396 -2.916667e+00\n3397  1.267500e+01\n3398  1.257500e+01\n3399  1.483333e+00\n3400 -1.080833e+01\n3401 -1.215833e+01\n3402 -7.883333e+00\n3403  7.166667e-01\n3404 -1.529167e+01\n3405  9.775000e+00\n3406  7.000000e+00\n3407  5.375000e+00\n3408 -4.650000e+00\n3409 -2.975000e+00\n3410  1.692500e+01\n3411 -1.200833e+01\n3412 -1.416667e-01\n3413 -1.456667e+01\n3414 -5.150000e+00\n3415  3.383333e+00\n3416  6.233333e+00\n3417 -8.158333e+00\n3418  4.783333e+00\n3419  8.375000e+00\n3420  2.166667e-01\n3421  1.866667e+00\n3422 -6.308333e+00\n3423  9.583333e-01\n3424  8.125000e+00\n3425 -5.325000e+00\n3426  3.125000e+00\n3427 -1.053333e+01\n3428 -6.641667e+00\n3429 -2.074167e+01\n3430 -1.010000e+01\n3431  7.350000e+00\n3432  1.203333e+01\n3433  3.933333e+00\n3434 -2.975000e+00\n3435  7.616667e+00\n3436 -1.860000e+01\n3437 -4.841667e+00\n3438  1.617500e+01\n3439 -3.250000e+00\n3440  8.675000e+00\n3441 -2.537500e+01\n3442  1.341667e+00\n3443 -8.316667e+00\n3444  9.900000e+00\n3445 -2.026667e+01\n3446  8.250000e-01\n3447 -6.641667e+00\n3448 -6.766667e+00\n3449 -1.884167e+01\n3450  3.141667e+00\n3451 -1.191667e+00\n3452 -2.975000e+00\n3453  1.426667e+01\n3454  1.596667e+01\n3455  9.633333e+00\n3456 -9.416667e+00\n3457 -6.833333e-01\n3458  7.325000e+00\n3459  4.083333e+00\n3460 -4.816667e+00\n3461 -1.180000e+01\n3462  7.416667e-01\n3463 -1.039167e+01\n3464 -1.058333e+01\n3465  3.483333e+00\n3466  7.833333e-01\n3467  1.333333e+00\n3468 -7.491667e+00\n3469 -2.825000e+00\n3470 -1.895833e+01\n3471  5.233333e+00\n3472  2.225000e+00\n3473  1.420833e+01\n3474 -3.591667e+00\n3475 -5.166667e-01\n3476 -9.833333e+00\n3477 -2.183333e+00\n3478  1.543333e+01\n3479 -8.266667e+00\n3480  9.491667e+00\n3481 -1.665000e+01\n3482 -1.415000e+01\n3483  1.092500e+01\n3484 -1.166667e-01\n3485 -2.481667e+01\n3486 -1.305833e+01\n3487 -8.933333e+00\n3488  1.136667e+01\n3489 -1.593333e+01\n3490  7.091667e+00\n3491 -1.242500e+01\n3492  9.050000e+00\n3493  4.675000e+00\n3494  6.533333e+00\n3495 -3.791667e+00\n3496  6.991667e+00\n3497 -3.733333e+00\n3498  1.927500e+01\n3499  1.426667e+01\n3500 -1.836667e+01\n3501  1.567500e+01\n3502 -1.686667e+01\n3503  5.066667e+00\n3504  1.275833e+01\n3505  1.174167e+01\n3506 -6.375000e+00\n3507  7.583333e-01\n3508 -9.916667e+00\n3509  1.750000e-01\n3510  2.246667e+01\n3511 -8.375000e+00\n3512 -2.133333e+01\n3513 -3.333333e-02\n3514  8.241667e+00\n3515 -1.808333e+00\n3516 -3.666667e-01\n3517  8.950000e+00\n3518 -9.025000e+00\n3519  3.716667e+00\n3520  8.691667e+00\n3521  4.250000e-01\n3522 -2.115833e+01\n3523  1.180000e+01\n3524 -2.008333e+00\n3525  1.796667e+01\n3526  7.166667e-01\n3527 -1.052500e+01\n3528  9.416667e-01\n3529  1.383333e+00\n3530  2.025000e+01\n3531  5.550000e+00\n3532 -5.550000e+00\n3533  2.121667e+01\n3534 -6.783333e+00\n3535 -7.066667e+00\n3536  6.791667e+00\n3537 -1.910000e+01\n3538  1.110000e+01\n3539 -9.433333e+00\n3540 -4.816667e+00\n3541 -1.510833e+01\n3542 -1.318333e+01\n3543  1.268333e+01\n3544 -2.966667e+00\n3545  3.941667e+00\n3546 -6.833333e-01\n3547 -6.575000e+00\n3548 -1.460000e+01\n3549  1.045833e+01\n3550  1.227500e+01\n3551 -5.150000e+00\n3552 -3.808333e+00\n3553  4.833333e-01\n3554 -9.050000e+00\n3555 -5.691667e+00\n3556 -1.910000e+01\n3557 -4.900000e+00\n3558 -1.441667e+00\n3559  3.991667e+00\n3560 -9.558333e+00\n3561  6.175000e+00\n3562  6.583333e+00\n3563 -8.258333e+00\n3564  4.500000e-01\n3565 -7.100000e+00\n3566  8.966667e+00\n3567 -1.599167e+01\n3568 -2.566667e+00\n3569 -5.033333e+00\n3570 -1.125833e+01\n3571  1.597500e+01\n3572  6.541667e+00\n3573 -2.529167e+01\n3574 -5.091667e+00\n3575 -6.791667e+00\n3576 -1.066667e+01\n3577  7.166667e-01\n3578 -7.300000e+00\n3579 -1.615000e+01\n3580 -2.000000e-01\n3581 -1.440000e+01\n3582 -7.016667e+00\n3583 -1.065833e+01\n3584 -1.666667e+00\n3585  3.850000e+00\n3586  9.916667e+00\n3587  7.916667e-01\n3588  1.379167e+01\n3589 -1.906667e+01\n3590 -1.482500e+01\n3591  1.725000e+00\n3592  4.591667e+00\n3593 -1.385833e+01\n3594  5.816667e+00\n3595  5.200000e+00\n3596  1.373333e+01\n3597  1.166667e-01\n3598 -2.833333e-01\n3599  7.816667e+00\n3600  1.800000e+00\n3601 -2.025000e+00\n3602 -5.825000e+00\n3603 -8.000000e+00\n3604 -1.557500e+01\n3605 -1.840000e+01\n3606  6.441667e+00\n3607 -9.416667e-01\n3608  4.091667e+00\n3609  6.875000e+00\n3610  1.708333e+00\n3611 -2.877500e+01\n3612 -7.125000e+00\n3613  1.065833e+01\n3614  1.247500e+01\n3615  2.358333e+00\n3616 -6.383333e+00\n3617 -2.000833e+01\n3618  8.400000e+00\n3619 -1.195000e+01\n3620  1.550000e+00\n3621  2.708333e+00\n3622 -2.025000e+00\n3623 -1.289167e+01\n3624 -2.575000e+00\n3625  1.041667e+01\n3626 -1.496667e+01\n3627  6.916667e-01\n3628  3.666667e-01\n3629 -5.008333e+00\n3630  7.900000e+00\n3631  3.625000e+00\n3632 -1.576667e+01\n3633 -2.130000e+01\n3634 -1.135833e+01\n3635 -5.350000e+00\n3636  3.625000e+00\n3637 -1.416667e-01\n3638 -1.174167e+01\n3639 -4.408333e+00\n3640  2.433333e+00\n3641 -2.005000e+01\n3642 -2.645833e+01\n3643  5.750000e+00\n3644  8.666667e+00\n3645  2.210000e+01\n3646  2.044167e+01\n3647  1.796667e+01\n3648 -4.500000e-01\n3649 -1.533333e+00\n3650  5.333333e+00\n3651  1.365833e+01\n3652  1.775000e+01\n3653  1.440833e+01\n3654 -3.141667e+00\n3655 -7.350000e+00\n3656 -9.050000e+00\n3657  1.440833e+01\n3658 -5.758333e+00\n3659  2.183333e+00\n3660  9.658333e+00\n3661 -4.250000e-01\n3662  2.966667e+00\n3663  4.716667e+00\n3664  3.333333e+00\n3665 -2.877500e+01\n3666 -4.416667e+00\n3667 -1.854167e+01\n3668 -6.416667e-01\n3669 -1.333333e+00\n3670 -1.590833e+01\n3671  4.166667e+00\n3672  5.208333e+00\n3673 -8.325000e+00\n3674 -8.200000e+00\n3675 -2.012500e+01\n3676  5.750000e+00\n3677 -2.916667e-01\n3678  7.500000e-01\n3679  5.966667e+00\n3680 -9.583333e+00\n3681 -5.125000e+00\n3682 -5.091667e+00\n3683  1.755000e+01\n3684 -9.858333e+00\n3685 -5.150000e+00\n3686 -9.975000e+00\n3687  1.290833e+01\n3688 -4.216667e+00\n3689 -3.425000e+00\n3690 -7.158333e+00\n3691 -1.483333e+00\n3692  2.255833e+01\n3693  4.041667e+00\n3694 -1.283333e+01\n3695  5.375000e+00\n3696 -3.450000e+00\n3697 -4.866667e+00\n3698 -9.858333e+00\n3699 -1.265000e+01\n3700  8.325000e+00\n3701 -1.063333e+01\n3702 -1.990000e+01\n3703  1.217500e+01\n3704  3.450000e+00\n3705 -2.658333e+00\n3706 -4.850000e+00\n3707  1.503333e+01\n3708  1.808333e+01\n3709 -5.900000e+00\n3710  7.666667e-01\n3711  1.602500e+01\n3712 -4.183333e+00\n3713 -3.933333e+00\n3714  7.241667e+00\n3715  6.983333e+00\n3716 -2.000000e+00\n3717 -7.750000e-01\n3718  7.050000e+00\n3719 -3.750000e-01\n3720 -9.383333e+00\n3721 -1.123333e+01\n3722  1.465000e+01\n3723  1.257500e+01\n3724 -3.133333e+00\n3725 -5.825000e+00\n3726  5.275000e+00\n3727 -1.086667e+01\n3728 -7.325000e+00\n3729  8.616667e+00\n3730 -4.366667e+00\n3731  1.055000e+01\n3732 -6.708333e+00\n3733  8.958333e+00\n3734  1.557500e+01\n3735  2.030000e+01\n3736 -1.013333e+01\n3737 -2.825000e+00\n3738 -4.150000e+00\n3739 -1.150000e+01\n3740 -1.608333e+00\n3741  3.425000e+00\n3742 -3.133333e+00\n3743 -1.990000e+01\n3744  1.186667e+01\n3745  8.183333e+00\n3746 -2.266667e+00\n3747 -1.927500e+01\n3748  5.258333e+00\n3749  3.366667e+00\n3750  1.980833e+01\n3751 -6.966667e+00\n3752  8.400000e+00\n3753  4.858333e+00\n3754  1.543333e+01\n3755  2.708333e+00\n3756  2.475000e+00\n3757 -1.858333e+00\n3758  6.575000e+00\n3759 -4.550000e+00\n3760  5.216667e+00\n3761 -2.065833e+01\n3762 -2.246667e+01\n3763  4.008333e+00\n3764 -1.110000e+01\n3765  8.716667e+00\n3766 -5.191667e+00\n3767 -1.115833e+01\n3768  6.466667e+00\n3769  3.333333e-02\n3770  7.125000e+00\n3771 -6.375000e+00\n3772 -1.275833e+01\n3773  1.385833e+01\n3774 -1.630833e+01\n3775  3.841667e+00\n3776  2.350000e+00\n3777 -3.116667e+00\n3778  5.416667e+00\n3779 -2.425000e+00\n3780 -4.983333e+00\n3781 -3.025000e+00\n3782  2.060000e+01\n3783 -1.268333e+01\n3784 -8.916667e-01\n3785 -1.755000e+01\n3786  2.375000e+00\n3787 -9.300000e+00\n3788  8.916667e-01\n3789  1.360000e+01\n3790  5.875000e+00\n3791 -1.084167e+01\n3792 -7.233333e+00\n3793  1.984167e+01\n3794 -1.516667e+01\n3795 -9.275000e+00\n3796 -6.791667e+00\n3797 -7.750000e-01\n3798 -5.383333e+00\n3799  7.866667e+00\n3800  1.594167e+01\n3801 -9.800000e+00\n3802 -1.445000e+01\n3803  4.841667e+00\n3804  3.041667e+00\n3805 -3.191667e+00\n3806 -2.008333e+00\n3807 -1.904167e+01\n3808  1.878333e+01\n3809 -1.918333e+01\n3810  5.250000e-01\n3811 -1.323333e+01\n3812  9.583333e-01\n3813 -6.233333e+00\n3814 -1.426667e+01\n3815  8.333333e-03\n3816 -1.822500e+01\n3817  3.791667e+00\n3818  3.000000e+00\n3819  2.044167e+01\n3820  3.275000e+00\n3821 -2.218333e+01\n3822 -8.325000e+00\n3823 -2.358333e+00\n3824  6.791667e+00\n3825  3.908333e+00\n3826 -8.000000e-01\n3827 -5.841667e+00\n3828  1.836667e+01\n3829  1.160000e+01\n3830  5.175000e+00\n3831 -1.658333e+00\n3832  1.108333e+00\n3833  8.108333e+00\n3834  5.408333e+00\n3835  9.366667e+00\n3836  5.966667e+00\n3837  9.875000e+00\n3838  3.791667e+00\n3839  5.708333e+00\n3840  2.133333e+01\n3841  6.050000e+00\n3842 -4.358333e+00\n3843  1.255833e+01\n3844 -1.130000e+01\n3845  3.166667e+00\n3846  2.408333e+00\n3847 -7.750000e-01\n3848 -1.060833e+01\n3849  3.333333e-01\n3850 -3.575000e+00\n3851  2.000833e+01\n3852 -9.158333e+00\n3853 -6.083333e-01\n3854 -5.833333e-02\n3855  7.350000e+00\n3856  1.611667e+01\n3857  7.166667e-01\n3858  5.266667e+00\n3859 -7.166667e-01\n3860 -1.304167e+01\n3861  3.666667e-01\n3862  1.704167e+01\n3863  1.856667e+01\n3864 -1.860000e+01\n3865  3.741667e+00\n3866 -2.433333e+00\n3867 -1.560833e+01\n3868 -3.200000e+00\n3869  4.066667e+00\n3870 -2.025000e+01\n3871  4.083333e+00\n3872 -7.408333e+00\n3873 -5.666667e-01\n3874 -1.337500e+01\n3875 -7.833333e-01\n3876  1.613333e+01\n3877 -1.296667e+01\n3878 -5.150000e+00\n3879  2.869167e+01\n3880  2.176667e+01\n3881 -5.416667e-01\n3882 -8.041667e+00\n3883  7.275000e+00\n3884 -5.041667e+00\n3885 -3.625000e+00\n3886 -4.650000e+00\n3887  6.575000e+00\n3888  7.241667e+00\n3889 -4.791667e+00\n3890 -8.458333e+00\n3891  2.116667e+00\n3892 -4.925000e+00\n3893 -1.450000e+00\n3894 -2.877500e+01\n3895  2.758333e+00\n3896 -7.758333e+00\n3897 -4.475000e+00\n3898  8.433333e+00\n3899  7.258333e+00\n3900 -6.875000e+00\n3901 -8.158333e+00\n3902  5.916667e-01\n3903 -1.220833e+01\n3904  7.900000e+00\n3905 -7.841667e+00\n3906  5.625000e+00\n3907  1.573333e+01\n3908 -8.933333e+00\n3909 -1.308333e+00\n3910  6.666667e-02\n3911 -1.583333e-01\n3912  1.025000e+01\n3913  1.171667e+01\n3914  2.204167e+01\n3915  4.383333e+00\n3916  9.166667e-02\n3917  9.416667e-01\n3918 -8.816667e+00\n3919  2.616667e+00\n3920  7.675000e+00\n3921  2.537500e+01\n3922  1.658333e+00\n3923  8.608333e+00\n3924 -4.300000e+00\n3925  3.641667e+00\n3926  2.141667e+01\n3927 -1.672500e+01\n3928 -4.358333e+00\n3929  7.666667e+00\n3930 -1.052500e+01\n3931 -2.116667e+00\n3932  1.200833e+01\n3933  6.108333e+00\n3934 -1.166667e-01\n3935  7.500000e-01\n3936 -6.441667e+00\n3937 -1.675000e+00\n3938 -1.060000e+01\n3939  5.150000e+00\n3940  6.108333e+00\n3941 -1.984167e+01\n3942 -1.476667e+01\n3943  8.008333e+00\n3944 -2.916667e-01\n3945  8.058333e+00\n3946  4.675000e+00\n3947  6.908333e+00\n3948 -6.583333e+00\n3949 -5.275000e+00\n3950 -3.325000e+00\n3951 -1.845833e+01\n3952 -3.758333e+00\n3953  8.800000e+00\n3954  8.258333e+00\n3955 -2.100000e+01\n3956  1.298333e+01\n3957  2.470000e+01\n3958 -2.775000e+00\n3959 -7.500000e+00\n3960  1.045833e+01\n3961 -2.425000e+00\n3962  7.100000e+00\n3963 -8.575000e+00\n3964 -1.323333e+01\n3965 -3.425000e+00\n3966  5.150000e+00\n3967  6.383333e+00\n3968 -5.416667e+00\n3969 -1.100833e+01\n3970 -1.133333e+01\n3971 -1.191667e+00\n3972  3.666667e-01\n3973 -4.675000e+00\n3974  1.209167e+01\n3975 -3.741667e+00\n3976 -1.095000e+01\n3977  1.895833e+01\n3978 -3.858333e+00\n3979 -1.822500e+01\n3980  1.603333e+01\n3981 -5.200000e+00\n3982  1.666667e+00\n3983  3.908333e+00\n3984 -6.908333e+00\n3985  9.716667e+00\n3986 -1.277500e+01\n3987  1.220833e+01\n3988 -3.808333e+00\n3989 -8.416667e-01\n3990 -2.500000e-02\n3991  1.262500e+01\n3992 -3.141667e+00\n3993 -8.250000e+00\n3994 -1.215000e+01\n3995 -8.983333e+00\n3996  7.058333e+00\n3997 -3.566667e+00\n3998 -7.100000e+00\n3999  2.508333e+00\n4000  2.643333e+01\n4001  7.141667e+00\n4002  7.566667e+00\n4003  1.217500e+01\n4004 -1.913333e+01\n4005 -5.900000e+00\n4006  5.316667e+00\n4007  1.100000e+00\n4008  1.795833e+01\n4009  2.083333e+00\n4010 -3.841667e+00\n4011  6.250000e-01\n4012 -3.750000e+00\n4013  3.166667e-01\n4014 -6.991667e+00\n4015  9.900000e+00\n4016 -4.708333e+00\n4017  7.083333e+00\n4018 -7.666667e-01\n4019  6.583333e+00\n4020  5.816667e+00\n4021 -8.716667e+00\n4022 -7.675000e+00\n4023 -1.216667e+00\n4024  1.166667e-01\n4025  5.825000e+00\n4026 -1.364167e+01\n4027 -1.165833e+01\n4028  5.583333e+00\n4029  1.075000e+00\n4030 -1.165833e+01\n4031 -1.406667e+01\n4032 -3.616667e+00\n4033 -1.045000e+01\n4034  5.816667e+00\n4035  5.475000e+00\n4036 -6.908333e+00\n4037  1.579167e+01\n4038  8.250000e-01\n4039 -1.095833e+01\n4040  8.941667e+00\n4041  8.075000e+00\n4042  4.908333e+00\n4043 -8.400000e+00\n4044  1.300000e+00\n4045  2.075000e+00\n4046  1.833333e+00\n4047  1.686667e+01\n4048 -1.207500e+01\n4049 -3.475000e+00\n4050  7.500000e+00\n4051 -1.933333e+01\n4052 -2.775000e+00\n4053 -1.435000e+01\n4054 -1.242500e+01\n4055 -2.708333e+00\n4056 -5.933333e+00\n4057  1.115833e+01\n4058 -3.258333e+00\n4059 -3.975000e+00\n4060  5.275000e+00\n4061 -1.128333e+01\n4062 -3.616667e+00\n4063  7.916667e-01\n4064 -1.787500e+01\n4065 -4.716667e+00\n4066 -4.408333e+00\n4067  6.983333e+00\n4068  1.615000e+01\n4069  3.925000e+00\n4070 -1.345833e+01\n4071 -7.641667e+00\n4072  3.383333e+00\n4073  2.283333e+00\n4074  7.566667e+00\n4075 -7.166667e-01\n4076 -3.816667e+00\n4077  9.625000e+00\n4078  1.318333e+01\n4079  1.615000e+01\n4080  4.133333e+00\n4081  1.658333e+01\n4082 -1.025000e+01\n4083 -5.616667e+00\n4084  1.189167e+01\n4085 -8.833333e-01\n4086 -2.000000e+00\n4087 -8.491667e+00\n4088 -9.833333e-01\n4089 -1.915833e+01\n4090  8.491667e+00\n4091  1.403333e+01\n4092 -1.822500e+01\n4093  9.275000e+00\n4094  9.541667e+00\n4095 -9.083333e+00\n4096  5.391667e+00\n4097  5.550000e+00\n4098 -6.175000e+00\n4099  7.966667e+00\n4100  1.291667e+01\n4101 -5.325000e+00\n4102 -5.683333e+00\n4103  1.045833e+01\n4104  2.467500e+01\n4105  1.760833e+01\n4106  7.166667e-01\n4107 -4.066667e+00\n4108  3.991667e+00\n4109  1.019167e+01\n4110  3.050000e+00\n4111 -8.375000e+00\n4112  1.084167e+01\n4113  4.850000e+00\n4114 -9.783333e+00\n4115 -9.833333e+00\n4116 -7.441667e+00\n4117  1.500000e+01\n4118 -4.250000e-01\n4119  8.875000e+00\n4120  3.325000e+00\n4121 -1.594167e+01\n4122 -8.666667e+00\n4123 -4.216667e+00\n4124 -4.166667e+00\n4125  1.275833e+01\n4126 -4.858333e+00\n4127  1.751667e+01\n4128  1.520000e+01\n4129 -1.255833e+01\n4130  1.065833e+01\n4131  1.666667e+00\n4132 -1.441667e+01\n4133  1.060000e+01\n4134 -8.691667e+00\n4135 -4.300000e+00\n4136  3.908333e+00\n4137  1.550000e+00\n4138  9.341667e+00\n4139  1.089167e+01\n4140  1.010000e+01\n4141  9.641667e+00\n4142  1.990000e+01\n4143 -2.116667e+00\n4144  5.258333e+00\n4145  2.683333e+00\n4146 -8.866667e+00\n4147 -4.383333e+00\n4148  1.597500e+01\n4149 -3.158333e+00\n4150  1.590833e+01\n4151 -1.581667e+01\n4152  1.061667e+01\n4153  5.991667e+00\n4154  5.525000e+00\n4155  1.698333e+01\n4156  8.333333e-01\n4157  1.500000e-01\n4158  2.883333e+00\n4159 -2.127500e+01\n4160 -1.394167e+01\n4161  1.814167e+01\n4162  7.350000e+00\n4163 -1.474167e+01\n4164 -6.025000e+00\n4165 -1.731667e+01\n4166  1.441667e+00\n4167 -2.708333e+00\n4168  1.037500e+01\n4169 -5.083333e-01\n4170 -5.358333e+00\n4171  3.541667e+00\n4172  4.500000e-01\n4173  2.085833e+01\n4174 -1.391667e+01\n4175 -9.708333e+00\n4176 -9.716667e+00\n4177 -6.441667e+00\n4178 -2.566667e+00\n4179 -6.475000e+00\n4180  5.033333e+00\n4181  2.481667e+01\n4182  1.704167e+01\n4183 -9.583333e+00\n4184 -2.058333e+00\n4185 -8.916667e-01\n4186  6.908333e+00\n4187 -2.026667e+01\n4188 -2.147500e+01\n4189 -3.425000e+00\n4190 -5.441667e+00\n4191 -1.941667e+00\n4192  5.416667e-01\n4193  2.025000e+01\n4194  1.691667e+00\n4195 -9.383333e+00\n4196 -1.254167e+01\n4197 -1.201667e+01\n4198 -1.191667e+00\n4199  6.125000e+00\n4200 -3.966667e+00\n4201  5.475000e+00\n4202 -3.816667e+00\n4203 -1.725000e+00\n4204  1.808333e+00\n4205 -1.162500e+01\n4206 -4.500000e-01\n4207  6.791667e+00\n4208  5.583333e-01\n4209 -5.491667e+00\n4210  3.266667e+00\n4211  3.200000e+00\n4212 -1.801667e+01\n4213 -2.127500e+01\n4214  6.075000e+00\n4215  9.833333e-01\n4216 -3.200000e+00\n4217  5.341667e+00\n4218  4.708333e+00\n4219 -1.800000e+00\n4220  1.200833e+01\n4221  1.019167e+01\n4222 -2.225000e+00\n4223 -1.531667e+01\n4224 -4.216667e+00\n4225  1.051667e+01\n4226  6.600000e+00\n4227 -7.150000e+00\n4228 -1.883333e+00\n4229  3.166667e-01\n4230 -4.708333e+00\n4231  4.100000e+00\n4232 -2.216667e+00\n4233 -1.139167e+01\n4234  1.616667e+01\n4235  8.733333e+00\n4236 -1.274167e+01\n4237  8.550000e+00\n4238  1.271667e+01\n4239 -1.557500e+01\n4240 -5.408333e+00\n4241 -4.100000e+00\n4242  1.206667e+01\n4243 -1.690000e+01\n4244 -2.516667e+00\n4245  2.425833e+01\n4246 -1.383333e+00\n4247 -1.397500e+01\n4248  2.224167e+01\n4249 -7.166667e-01\n4250  2.267500e+01\n4251  7.958333e+00\n4252  1.373333e+01\n4253 -9.166667e-01\n4254  8.666667e+00\n4255 -6.525000e+00\n4256  1.116667e+00\n4257 -8.191667e+00\n4258 -7.550000e+00\n4259 -7.408333e+00\n4260 -3.050000e+00\n4261 -3.758333e+00\n4262 -4.358333e+00\n4263  1.200833e+01\n4264  2.121667e+01\n4265  1.912500e+01\n4266  1.600000e+00\n4267 -1.445000e+01\n4268 -4.500000e+00\n4269  1.083333e+00\n4270 -1.924167e+01\n4271 -3.600000e+00\n4272 -7.933333e+00\n4273 -1.025000e+01\n4274 -8.666667e+00\n4275 -1.047500e+01\n4276  2.225000e+00\n4277  6.708333e+00\n4278  6.158333e+00\n4279  5.150000e+00\n4280 -7.241667e+00\n4281  5.766667e+00\n4282  5.508333e+00\n4283 -1.836667e+01\n4284 -1.107500e+01\n4285 -6.541667e+00\n4286 -9.216667e+00\n4287 -1.476667e+01\n4288  1.907500e+01\n4289  2.883333e+00\n4290 -6.541667e+00\n4291  2.500000e-02\n4292 -9.083333e+00\n4293 -1.148333e+01\n4294 -1.166667e-01\n4295 -1.906667e+01\n4296 -1.060833e+01\n4297  1.615000e+01\n4298 -7.841667e+00\n4299  3.216667e+00\n4300 -3.183333e+00\n4301  3.075000e+00\n4302  9.416667e+00\n4303  2.019167e+01\n4304  7.641667e+00\n4305  5.266667e+00\n4306  1.578333e+01\n4307 -3.400000e+00\n4308  6.400000e+00\n4309 -3.225000e+00\n4310  1.840000e+01\n4311  1.898333e+01\n4312 -5.008333e+00\n4313 -5.566667e+00\n4314 -1.391667e+01\n4315 -1.057500e+01\n4316  1.666667e+00\n4317 -6.850000e+00\n4318  1.308333e+01\n4319  9.575000e+00\n4320 -2.467500e+01\n4321  1.311667e+01\n4322  1.055000e+01\n4323  3.591667e+00\n4324 -3.250000e+00\n4325 -2.983333e+00\n4326 -8.691667e+00\n4327  6.050000e+00\n4328 -7.583333e-01\n4329  6.383333e+00\n4330  5.041667e+00\n4331 -8.191667e+00\n4332  6.791667e+00\n4333  9.291667e+00\n4334 -1.692500e+01\n4335  4.183333e+00\n4336 -8.400000e+00\n4337  6.450000e+00\n4338  3.083333e+00\n4339 -1.514167e+01\n4340  2.416667e+00\n4341 -1.135833e+01\n4342 -1.514167e+01\n4343  7.025000e+00\n4344 -1.211667e+01\n4345 -8.716667e+00\n4346  1.142500e+01\n4347  1.200000e+00\n4348 -1.027500e+01\n4349  5.850000e+00\n4350  5.341667e+00\n4351 -8.866667e+00\n4352  3.450000e+00\n4353 -1.133333e+01\n4354  1.250833e+01\n4355 -5.000000e-02\n4356 -1.691667e+00\n4357 -2.633333e+00\n4358 -3.841667e+00\n4359  1.775000e+01\n4360  7.900000e+00\n4361  1.128333e+01\n4362  1.775000e+00\n4363  1.128333e+01\n4364 -1.599167e+01\n4365  7.166667e-01\n4366 -7.958333e+00\n4367 -7.141667e+00\n4368 -5.625000e+00\n4369  1.502500e+01\n4370 -1.037500e+01\n4371 -7.441667e+00\n4372  2.000000e-01\n4373  1.227500e+01\n4374  2.566667e+00\n4375  1.608333e+00\n4376 -8.633333e+00\n4377 -1.066667e+01\n4378 -9.716667e+00\n4379  3.458333e+00\n4380  2.026667e+01\n4381  1.913333e+01\n4382  1.209167e+01\n4383  1.440000e+01\n4384  7.041667e+00\n4385 -2.266667e+00\n4386 -5.583333e+00\n4387  1.924167e+01\n4388 -3.533333e+00\n4389  2.100000e+01\n4390 -1.998333e+01\n4391  2.091667e+00\n4392 -1.294167e+01\n4393  5.458333e+00\n4394  2.966667e+00\n4395  2.032500e+01\n4396 -2.147500e+01\n4397 -3.450000e+00\n4398  8.783333e+00\n4399  2.166667e-01\n4400 -7.816667e+00\n4401 -3.925000e+00\n4402 -1.351667e+01\n4403 -7.466667e+00\n4404 -2.241667e+01\n4405 -7.183333e+00\n4406 -1.220833e+01\n4407 -9.366667e+00\n4408 -1.733333e+00\n4409  8.816667e+00\n4410 -4.591667e+00\n4411 -1.041667e+01\n4412 -1.395000e+01\n4413 -1.549167e+01\n4414  1.403333e+01\n4415 -1.133333e+01\n4416  2.012500e+01\n4417  8.750000e+00\n4418 -1.625000e+00\n4419  1.142500e+01\n4420 -6.158333e+00\n4421  1.927500e+01\n4422  6.183333e+00\n4423  4.091667e+00\n4424 -3.258333e+00\n4425  1.605000e+01\n4426  9.833333e-01\n4427  9.083333e-01\n4428 -6.558333e+00\n4429 -1.250000e+00\n4430  5.808333e+00\n4431  3.333333e+00\n4432 -8.550000e+00\n4433  3.483333e+00\n4434 -1.025833e+01\n4435  3.200000e+00\n4436  3.250000e+00\n4437  1.766667e+01\n4438 -1.514167e+01\n4439  2.916667e+00\n4440  3.200000e+00\n4441 -3.591667e+00\n4442  2.224167e+01\n4443  7.125000e+00\n4444  9.416667e-01\n4445  1.599167e+01\n4446 -6.475000e+00\n4447  1.514167e+01\n4448  5.416667e-01\n4449 -1.180000e+01\n4450 -1.283333e+01\n4451  1.984167e+01\n4452  6.458333e+00\n4453 -4.616667e+00\n4454 -1.281667e+01\n4455  3.866667e+00\n4456  1.248333e+01\n4457 -1.195000e+01\n4458  2.252500e+01\n4459 -2.166667e+00\n4460 -3.825000e+00\n4461 -1.503333e+01\n4462 -7.500000e-01\n4463 -4.791667e+00\n4464 -5.766667e+00\n4465  7.950000e+00\n4466 -1.907500e+01\n4467 -3.675000e+00\n4468 -1.080833e+01\n4469  1.440833e+01\n4470  7.466667e+00\n4471  5.841667e+00\n4472  1.083333e+00\n4473 -8.100000e+00\n4474 -6.100000e+00\n4475 -1.939167e+01\n4476  3.800000e+00\n4477  9.083333e+00\n4478  5.458333e+00\n4479  1.013333e+01\n4480 -2.080000e+01\n4481 -6.991667e+00\n4482 -1.525833e+01\n4483  3.991667e+00\n4484  2.025000e+01\n4485  1.567500e+01\n4486 -2.916667e+00\n4487 -4.533333e+00\n4488  6.500000e+00\n4489 -1.333333e-01\n4490 -4.300000e+00\n4491 -5.000000e+00\n4492  9.400000e+00\n4493 -6.850000e+00\n4494 -2.750000e-01\n4495  1.517500e+01\n4496 -2.250000e-01\n4497 -1.525833e+01\n4498 -1.027500e+01\n4499 -1.953333e+01\n4500 -2.500000e-02\n4501  1.441667e+01\n4502  1.013333e+01\n4503 -1.165833e+01\n4504 -1.468333e+01\n4505  2.766667e+00\n4506  1.514167e+01\n4507  3.391667e+00\n4508 -3.391667e+00\n4509  1.616667e+01\n4510  8.125000e+00\n4511 -1.660833e+01\n4512  2.600000e+00\n4513 -8.666667e+00\n4514 -1.503333e+01\n4515  7.425000e+00\n4516  1.858333e+00\n4517 -1.253333e+01\n4518 -3.425000e+00\n4519 -1.174167e+01\n4520 -1.163333e+01\n4521  5.291667e+00\n4522  4.008333e+00\n4523 -7.025000e+00\n4524  1.296667e+01\n4525 -2.083333e+00\n4526 -1.602500e+01\n4527 -4.750000e-01\n4528 -4.508333e+00\n4529 -1.165833e+01\n4530  2.833333e+00\n4531 -3.483333e+00\n4532  9.783333e+00\n4533 -6.125000e+00\n4534 -7.900000e+00\n4535  1.500000e+00\n4536  4.075000e+00\n4537  1.684167e+01\n4538  1.375000e+00\n4539 -9.250000e-01\n4540  1.163333e+01\n4541 -2.408333e+00\n4542  3.783333e+00\n4543  8.500000e-01\n4544 -8.608333e+00\n4545 -5.900000e+00\n4546 -6.108333e+00\n4547  1.445000e+01\n4548  6.791667e+00\n4549  1.171667e+01\n4550 -5.208333e+00\n4551 -1.924167e+01\n4552  5.650000e+00\n4553 -3.616667e+00\n4554  1.027500e+01\n4555  2.141667e+01\n4556  2.156667e+01\n4557  1.066667e+01\n4558 -2.000000e-01\n4559  1.830833e+01\n4560 -9.558333e+00\n4561 -5.441667e+00\n4562 -9.683333e+00\n4563 -6.650000e+00\n4564 -1.051667e+01\n4565 -1.898333e+01\n4566 -7.000000e+00\n4567  9.925000e+00\n4568 -5.583333e-01\n4569  1.333333e-01\n4570 -1.359167e+01\n4571  2.625000e+00\n4572  8.666667e+00\n4573 -9.666667e-01\n4574 -1.233333e+00\n4575 -2.135833e+01\n4576 -1.793333e+01\n4577 -2.255833e+01\n4578 -1.975000e+00\n4579  3.241667e+00\n4580 -5.291667e+00\n4581 -7.666667e-01\n4582  7.325000e+00\n4583 -3.250000e+00\n4584 -1.175000e+00\n4585  1.166667e-01\n4586  1.248333e+01\n4587 -5.766667e+00\n4588 -3.033333e+00\n4589  1.400833e+01\n4590  2.025000e+01\n4591 -7.666667e-01\n4592  5.766667e+00\n4593  4.816667e+00\n4594  5.008333e+00\n4595 -4.250000e-01\n4596 -2.320000e+01\n4597 -1.483333e+00\n4598  6.450000e+00\n4599  3.158333e+00\n4600 -8.333333e-02\n4601  8.875000e+00\n4602  4.791667e+00\n4603  8.325000e+00\n4604  1.983333e+00\n4605  8.316667e+00\n4606  9.983333e+00\n4607  1.587500e+01\n4608 -1.508333e+01\n4609  6.825000e+00\n4610 -4.233333e+00\n4611 -3.683333e+00\n4612  9.191667e+00\n4613  1.810833e+01\n4614 -9.083333e+00\n4615  6.616667e+00\n4616 -5.825000e+00\n4617 -6.783333e+00\n4618 -5.683333e+00\n4619  8.041667e+00\n4620 -1.610833e+01\n4621 -2.264167e+01\n4622 -1.395000e+01\n4623  2.633333e+00\n4624  1.617500e+01\n4625  3.158333e+00\n4626 -5.408333e+00\n4627  1.435000e+01\n4628  4.000000e-01\n4629 -9.800000e+00\n4630 -9.083333e-01\n4631 -4.750000e-01\n4632 -6.591667e+00\n4633  6.016667e+00\n4634 -1.367500e+01\n4635 -1.441667e+00\n4636 -6.425000e+00\n4637 -2.966667e+00\n4638 -7.166667e-01\n4639  1.108333e+00\n4640  2.026667e+01\n4641  9.500000e+00\n4642  5.566667e+00\n4643 -5.533333e+00\n4644 -1.393333e+01\n4645  6.816667e+00\n4646 -3.908333e+00\n4647 -1.570000e+01\n4648 -2.633333e+00\n4649 -1.854167e+01\n4650 -2.508333e+00\n4651 -6.575000e+00\n4652  3.541667e+00\n4653  4.091667e+00\n4654  1.781667e+01\n4655 -9.083333e+00\n4656 -4.616667e+00\n4657 -7.900000e+00\n4658 -2.425000e+00\n4659 -3.483333e+00\n4660  1.145833e+01\n4661 -3.116667e+00\n4662 -7.608333e+00\n4663 -4.000000e-01\n4664 -6.416667e-01\n4665  1.033333e+01\n4666  8.800000e+00\n4667 -8.633333e+00\n4668 -3.900000e+00\n4669 -1.333333e-01\n4670  1.166667e-01\n4671  2.416667e+00\n4672 -1.751667e+01\n4673  2.975000e+00\n4674 -1.128333e+01\n4675 -2.741667e+00\n4676  9.716667e+00\n4677 -5.691667e+00\n4678 -1.069167e+01\n4679  8.141667e+00\n4680  3.391667e+00\n4681 -1.011667e+01\n4682 -1.125000e+00\n4683 -6.466667e+00\n4684  2.425000e+00\n4685 -6.250000e-01\n4686  1.387500e+01\n4687  4.975000e+00\n4688  2.833333e+00\n4689 -9.416667e+00\n4690  1.725000e+00\n4691  7.500000e-01\n4692 -8.375000e+00\n4693  2.683333e+00\n4694 -9.541667e+00\n4695 -7.700000e+00\n4696 -1.105833e+01\n4697 -4.500000e-01\n4698 -1.617500e+01\n4699  6.333333e-01\n4700 -7.500000e+00\n4701  6.791667e+00\n4702  4.675000e+00\n4703 -1.383333e+00\n4704 -4.116667e+00\n4705 -9.016667e+00\n4706  4.641667e+00\n4707  1.215833e+01\n4708  4.841667e+00\n4709 -6.675000e+00\n4710 -1.866667e+00\n4711  5.266667e+00\n4712 -1.585000e+01\n4713  7.525000e+00\n4714  2.333333e-01\n4715 -1.289167e+01\n4716 -1.098333e+01\n4717  9.975000e+00\n4718  5.625000e+00\n4719 -1.665000e+01\n4720  1.807500e+01\n4721  1.611667e+01\n4722  1.039167e+01\n4723 -3.333333e-02\n4724 -1.600000e+00\n4725  5.000000e+00\n4726  1.275833e+01\n4727 -2.566667e+00\n4728  4.858333e+00\n4729 -2.869167e+01\n4730  9.566667e+00\n4731  1.153333e+01\n4732 -7.966667e+00\n4733 -7.883333e+00\n4734  7.100000e+00\n4735  2.267500e+01\n4736  1.261667e+01\n4737  2.264167e+01\n4738  6.525000e+00\n4739  4.500000e-01\n4740 -6.450000e+00\n4741  5.116667e+00\n4742 -1.584167e+01\n4743 -2.458333e+00\n4744  2.358333e+00\n4745 -9.083333e+00\n4746 -1.435000e+01\n4747 -2.141667e+01\n4748  5.058333e+00\n4749  7.383333e+00\n4750 -1.025833e+01\n4751 -2.440000e+01\n4752 -1.745833e+01\n4753 -1.691667e+00\n4754  2.841667e+00\n4755 -5.150000e+00\n4756 -2.891667e+00\n4757 -5.008333e+00\n4758 -1.405833e+01\n4759  1.254167e+01\n4760 -1.068333e+01\n4761 -8.666667e+00\n4762  2.649167e+01\n4763 -9.633333e+00\n4764  8.958333e+00\n4765 -1.641667e+00\n4766 -1.858333e+00\n4767  3.666667e-01\n4768  2.650000e+00\n4769 -1.458333e+00\n4770  1.916667e+00\n4771  1.013333e+01\n4772  1.221667e+01\n4773  1.415000e+01\n4774  6.766667e+00\n4775  4.758333e+00\n4776 -2.291667e+00\n4777 -4.708333e+00\n4778  3.950000e+00\n4779  1.420833e+01\n4780 -1.916667e+00\n4781 -5.175000e+00\n4782 -1.160000e+01\n4783 -6.083333e-01\n4784  1.760833e+01\n4785 -5.666667e+00\n4786 -2.030000e+01\n4787 -1.101667e+01\n4788  6.233333e+00\n4789  1.269167e+01\n4790  6.833333e-01\n4791 -5.400000e+00\n4792  5.333333e+00\n4793  6.441667e+00\n4794 -1.678333e+01\n4795 -7.916667e+00\n4796  3.325000e+00\n4797 -8.616667e+00\n4798 -8.608333e+00\n4799 -3.333333e-01\n4800  7.208333e+00\n4801  8.133333e+00\n4802  1.704167e+01\n4803  5.291667e+00\n4804  7.141667e+00\n4805  6.850000e+00\n4806  1.704167e+01\n4807 -1.133333e+00\n4808 -5.316667e+00\n4809 -9.641667e+00\n4810  1.866667e+00\n4811 -1.734167e+01\n4812 -1.276667e+01\n4813 -7.491667e+00\n4814  5.066667e+00\n4815  2.156667e+01\n4816  4.533333e+00\n4817 -8.333333e-01\n4818  8.716667e+00\n4819 -1.115000e+01\n4820 -1.283333e+01\n4821  1.050000e+00\n4822  1.610833e+01\n4823 -7.100000e+00\n4824  9.025000e+00\n4825 -9.333333e-01\n4826 -5.750000e+00\n4827  4.883333e+00\n4828  2.650000e+00\n4829  1.221667e+01\n4830 -2.166667e+00\n4831  6.591667e+00\n4832  5.183333e+00\n4833 -1.733333e+00\n4834 -1.241667e+00\n4835 -3.475000e+00\n4836  2.058333e+00\n4837  4.175000e+00\n4838  1.100000e+00\n4839 -9.833333e+00\n4840 -5.350000e+00\n4841  4.441667e+00\n4842  2.420000e+01\n4843 -1.360000e+01\n4844 -3.166667e-01\n4845 -1.423333e+01\n4846 -9.416667e+00\n4847 -4.091667e+00\n4848 -5.691667e+00\n4849 -8.950000e+00\n4850 -7.616667e+00\n4851  7.241667e+00\n4852 -6.016667e+00\n4853 -1.176667e+01\n4854 -1.385000e+01\n4855 -1.646667e+01\n4856 -3.625000e+00\n4857 -2.233333e+00\n4858 -1.441667e+01\n4859 -2.625000e+00\n4860  2.583333e-01\n4861  1.470833e+01\n4862  6.158333e+00\n4863 -1.373333e+01\n4864 -1.216667e+00\n4865 -1.245000e+01\n4866  3.600000e+00\n4867 -1.550000e+00\n4868  2.166667e-01\n4869 -7.900000e+00\n4870  7.833333e-01\n4871 -2.258333e+01\n4872  1.043333e+01\n4873 -2.266667e+00\n4874 -2.010833e+01\n4875 -4.416667e+00\n4876 -6.225000e+00\n4877  1.154167e+01\n4878 -1.145833e+01\n4879 -1.607500e+01\n4880  7.133333e+00\n4881 -1.171667e+01\n4882 -4.250000e-01\n4883 -1.183333e+01\n4884 -4.591667e+00\n4885  3.166667e-01\n4886  5.608333e+00\n4887 -7.266667e+00\n4888  9.250000e-01\n4889  1.203333e+01\n4890 -1.110000e+01\n4891 -1.300000e+00\n4892  1.125000e+00\n4893 -1.924167e+01\n4894  1.128333e+01\n4895 -1.165833e+01\n4896  1.160000e+01\n4897  1.294167e+01\n4898  9.000000e-01\n4899  2.434167e+01\n4900 -9.300000e+00\n4901  8.183333e+00\n4902  5.475000e+00\n4903 -1.072500e+01\n4904 -5.416667e-01\n4905  6.291667e+00\n4906  2.261667e+01\n4907  6.966667e+00\n4908  1.010000e+01\n4909  1.216667e+00\n4910 -6.641667e+00\n4911 -1.918333e+01\n4912 -8.666667e+00\n4913 -8.008333e+00\n4914  5.116667e+00\n4915  6.591667e+00\n4916 -3.191667e+00\n4917  1.546667e+01\n4918  1.933333e+01\n4919  1.075000e+00\n4920 -1.725000e+00\n4921  3.116667e+00\n4922 -6.083333e+00\n4923  1.719167e+01\n4924 -1.195000e+01\n4925 -2.434167e+01\n4926 -1.582500e+01\n4927  7.183333e+00\n4928 -7.241667e+00\n4929 -2.529167e+01\n4930  9.333333e+00\n4931 -6.416667e+00\n4932  9.433333e+00\n4933 -6.991667e+00\n4934 -1.733333e+00\n4935 -1.191667e+01\n4936  6.158333e+00\n4937 -3.333333e-02\n4938 -3.625000e+00\n4939  2.016667e+00\n4940  2.508333e+00\n4941 -1.698333e+01\n4942 -5.766667e+00\n4943 -4.416667e+00\n4944  3.091667e+00\n4945  7.833333e-01\n4946 -4.791667e+00\n4947 -1.549167e+01\n4948  1.030833e+01\n4949  6.250000e-01\n4950 -7.466667e+00\n4951  2.261667e+01\n4952 -7.666667e+00\n4953 -3.208333e+00\n4954 -9.633333e+00\n4955  6.591667e+00\n4956  1.916667e+00\n4957  9.000000e+00\n4958  4.983333e+00\n4959 -1.808333e+00\n4960  1.915833e+01\n4961  1.080833e+01\n4962  1.254167e+01\n4963 -4.100000e+00\n4964 -1.383333e+00\n4965  1.420833e+01\n4966  8.316667e+00\n4967 -6.025000e+00\n4968  4.591667e+00\n4969  3.941667e+00\n4970 -2.166667e-01\n4971  3.608333e+00\n4972 -7.900000e+00\n4973 -9.050000e+00\n4974  1.001667e+01\n4975 -1.268333e+01\n4976  2.758333e+00\n4977 -5.908333e+00\n4978 -1.288333e+01\n4979  1.805000e+01\n4980  1.025000e+01\n4981  6.141667e+00\n4982 -5.133333e+00\n4983  6.841667e+00\n4984 -3.450000e+00\n4985 -1.907500e+01\n4986 -2.416667e+00\n4987 -5.625000e+00\n4988 -3.091667e+00\n4989 -4.091667e+00\n4990  7.666667e+00\n4991  1.353333e+01\n4992  9.016667e+00\n4993 -7.816667e+00\n4994  9.433333e+00\n4995  1.587500e+01\n4996  7.991667e+00\n4997  1.455833e+01\n4998 -6.675000e+00\n4999  1.450000e+00\n\n## polarity &lt;- c(rep(1, 6), rep(-1, 6))- This creates a vector polarity that contains six 1s and six -1s. The 1s represent keeping the original sign of the difference between Final and Semifinal scores, while the -1s represent flipping the sign of the difference.\n## The do(4999) command runs the following process 4999 times to create a null distribution of resampled mean differences.\n## In each iteration, it calculates the mean of the differences between Final and Semifinal scores, with the polarity of the differences randomly flipped using mosaic::resample(polarity, replace = TRUE).\n## The null distribution simulates what the mean differences would look like under the null hypothesis, assuming no true difference between the scores.\n\nThis generates a null distribution of mean differences between Final and Semifinal scores by flipping the sign of the differences randomly and calculating the mean across 4999 iterations. This permutation test helps assess whether the observed difference in scores is statistically significant by comparing it against the generated null distribution. The results (e.g., 1.866, -3.733, etc.) represent the simulated mean differences under the assumption of no real difference between the scores.\n\n\n\n\ntheme_set(new = theme_custom())\n\ngf_histogram(data = null_dist_swim, ~mean) %&gt;%\n  gf_vline(\n    xintercept = obs_diff_swim,\n    colour = \"red\",\n    linewidth = 1\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\ngf_ecdf(data = null_dist_swim, ~mean, linewidth = 1) %&gt;%\n  gf_vline(\n    xintercept = obs_diff_swim,\n    colour = \"red\",\n    linewidth = 1\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nprop1(~ mean &lt;= obs_diff_swim, data = null_dist_swim)\n\nprop_TRUE \n   0.1272 \n\n## gf_ecdf(data = null_dist_swim, ~mean, linewidth = 1) %&gt;%\n## gf_vline(xintercept = obs_diff_swim, colour = \"red\", linewidth = 1)- This creates an ECDF plot, showing the cumulative proportion of mean values from the null distribution. Again, a red vertical line is added at the location of the observed mean difference (obs_diff_swim).\n## prop1(~ mean &lt;= obs_diff_swim, data = null_dist_swim)- This calculates the proportion of the values in the null distribution that are less than or equal to the observed mean difference (obs_diff_swim). This can be interpreted as a two-tailed p-value.\n\nThe code visualizes the null distribution of resampled mean differences between the final and semifinal diving scores, and compares it to the observed mean difference of -11.975. The histogram shows that the observed difference lies in the left tail of the null distribution, suggesting that such a difference is rare under the assumption of no true difference between rounds. The ECDF plot further highlights this by showing that only a small proportion of the null distribution is less than or equal to the observed difference. This visualization suggests that the observed difference may be statistically significant, as it deviates notably from the central values of the null distribution.\n\n\n\n\nmosaic::t.test(\n  x = Diving2017$Semifinal,\n  y = Diving2017$Final,\n  paired = TRUE\n) %&gt;%\n  broom::tidy() %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(cell_fill(color = \"cyan\"), cell_text(weight = \"bold\")),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"t.test\")\n\n\n\n\n\n\n\nt.test\n\n\nestimate\nstatistic\np.value\nparameter\nconf.low\nconf.high\nmethod\nalternative\n\n\n\n\n-11.975\n-1.190339\n0.2589684\n11\n-34.11726\n10.16726\nPaired t-test\ntwo.sided\n\n\n\n\n\n\nlm(Semifinal - Final ~ 1, data = Diving2017) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95) %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(cell_fill(color = \"cyan\"), cell_text(weight = \"bold\")),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"Linear Model\")\n\n\n\n\n\n\n\nLinear Model\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\nconf.low\nconf.high\n\n\n\n\n(Intercept)\n-11.975\n10.06016\n-1.190339\n0.2589684\n-34.11726\n10.16726\n\n\n\n\n\n\nwilcox.test(\n  x = Diving2017$Semifinal,\n  y = Diving2017$Final,\n  paired = TRUE\n) %&gt;%\n  broom::tidy() %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(cell_fill(color = \"palegreen\"), cell_text(weight = \"bold\")),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"Wilcoxon test\")\n\n\n\n\n\n\n\nWilcoxon test\n\n\nstatistic\np.value\nmethod\nalternative\n\n\n\n\n27\n0.3803711\nWilcoxon signed rank exact test\ntwo.sided\n\n\n\n\n\n\nlm(signed_rank(Semifinal - Final) ~ 1,\n  data = Diving2017\n) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95) %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(cell_fill(color = \"palegreen\"), cell_text(weight = \"bold\")),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"Linear Model with sign.rank\")\n\n\n\n\n\n\n\nLinear Model with sign.rank\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\nconf.low\nconf.high\n\n\n\n\n(Intercept)\n-2\n2.135558\n-0.9365236\n0.3691097\n-6.70033\n2.70033\n\n\n\n\n\n\n\nThe results from four different statistical tests, including the paired t-test, linear model, Wilcoxon signed-rank test, and linear model with signed ranks, all consistently show that there is no statistically significant difference between the semifinal and final diving scores. The p-values from all tests (ranging from 0.259 to 0.380) are well above the typical significance threshold of 0.05, indicating that any observed difference in scores could be due to random variation. The paired t-test and linear model both estimate a mean score difference of -11.975, while the Wilcoxon test and the signed-rank model yield slightly different estimates but ultimately lead to the same conclusion: the score difference is not significant. This suggests that the diving performances in the semifinal and final rounds are statistically similar.\n\n\n\n\ndata(\"Groceries\")\nGroceries &lt;- Groceries %&gt;%\n  mutate(Product = stringr::str_squish(Product)) # Knock off extra spaces\nGroceries\n\n                                                    Product     Size Target\n1                                   Kellogg NutriGrain Bars   8 bars   2.50\n2                          Quaker Oats Life Cereal Original     18oz   3.19\n3                                General Mills Lucky Charms   11.50z   3.19\n4                                 Quaker Oats Old Fashioned     18oz   2.82\n5                                      Nabisco Oreo Cookies  14.3oz    2.99\n6                                        Nabisco Chips Ahoy     13oz   2.64\n7                                Doritos Nacho Cheese Chips     10oz   3.99\n8                                   Cheez-it Original Baked     21oz   4.79\n9                                  Swiss Miss Hot Chocolate 10 count   1.49\n10                        Tazo Chai Classic Latte Black Tea   32 oz    3.49\n11                                Annie's Macaroni & Cheese      6oz   1.79\n12                                      Rice A Roni Chicken    6.9oz   1.00\n13                            Zatarain's Jambalaya Rice Mix      8oz   1.62\n14                                 SPAM Original Lunch Meat     12oz   2.79\n15                           Campbell's Chicken Noodle Soup  10.75oz   0.99\n16                       Dinty Moore Hearty Meals Beef Stew     15oz   1.99\n17                                  Hormel Chili with Beans     15oz   1.94\n18                                    Dole Pineapple Chunks    20 oz   1.59\n19                              Skippy Creamy Peanut Butter   16.3oz   2.59\n20                            Smucker's Strawberry Preserve     18oz   2.99\n21                                     Heinz Tomato Ketchup     32oz   2.99\n22                 Near East Couscous Toasted Pine Nuts mix    5.6oz   2.12\n23                                 Barilla Angel Hair Pasta     16oz   1.42\n24       Betty Crocker Super Moist Chocolate Fudge Cake Mix  15.25oz   1.22\n25                             Kraft Jet-Puffed Marshmllows     16oz   1.99\n26 Dunkin' Donuts Original Blend Medium Roast Ground Coffee     12oz   7.19\n27                             Dove Promises Milk Chocolate   8.87oz   3.19\n28                                                 Skittles     41oz   7.99\n29                         Vlasic Kosher Dill Pickle Spears     24oz   2.39\n30                          Vlasic Old Fashioned Sauerkraut     32oz   1.99\n   Walmart\n1     2.78\n2     6.01\n3     2.98\n4     2.68\n5     2.98\n6     1.98\n7     2.50\n8     4.79\n9     1.28\n10    2.98\n11    1.72\n12    1.00\n13    1.54\n14    2.64\n15    1.58\n16    1.98\n17    1.88\n18    1.47\n19    2.58\n20    2.84\n21    2.88\n22    1.98\n23    1.38\n24    1.17\n25    1.96\n26    6.98\n27    3.50\n28    6.98\n29    2.18\n30    1.97\n\nGroceries_inspect &lt;- inspect(Groceries)\nGroceries_inspect$categorical\n\n# A tibble: 2 × 6\n  name    class     levels     n missing distribution                           \n  &lt;chr&gt;   &lt;chr&gt;      &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                                  \n1 Product character     30    30       0 \"Annie's Macaroni & Cheese (3.3%) ... …\n2 Size    factor        24    30       0 \"18oz (10%), 12oz (6.7%) ...          …\n\nGroceries_inspect$quantitative\n\n# A tibble: 2 × 11\n  name    class     min    Q1 median    Q3   max  mean    sd     n missing\n* &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;\n1 Target  numeric  0.99  1.83   2.54  3.14  7.99  2.76  1.58    30       0\n2 Walmart numeric  1     1.76   2.34  2.96  6.98  2.71  1.56    30       0\n\n\nThe case study compares the prices of 30 grocery items between Walmart and Target. The dataset includes products such as cereals, cookies, and beverages with their respective sizes and prices at both stores. The summary statistics show that Target’s prices range from $0.99 to $7.99, with a median price of $2.545 and an average price of $2.76. On the other hand, Walmart’s prices range from $1.00 to $6.98, with a median price of $2.34 and an average price of $2.71. The standard deviations are quite similar for both stores (Target: 1.58, Walmart: 1.56), suggesting comparable price variability. Overall, Target tends to have slightly higher average prices than Walmart for the same products, though the difference is minimal.\n\n\n\n\ntheme_set(new = theme_custom())\n\nGroceries_long &lt;- Groceries %&gt;%\n  pivot_longer(\n    cols = c(Walmart, Target),\n    names_to = \"store\",\n    values_to = \"prices\"\n  ) %&gt;%\n  mutate(store = as_factor(store))\nGroceries_long\n\n# A tibble: 60 × 4\n   Product                          Size      store   prices\n   &lt;chr&gt;                            &lt;fct&gt;     &lt;fct&gt;    &lt;dbl&gt;\n 1 Kellogg NutriGrain Bars          \"8 bars\"  Walmart   2.78\n 2 Kellogg NutriGrain Bars          \"8 bars\"  Target    2.5 \n 3 Quaker Oats Life Cereal Original \"18oz\"    Walmart   6.01\n 4 Quaker Oats Life Cereal Original \"18oz\"    Target    3.19\n 5 General Mills Lucky Charms       \"11.50z\"  Walmart   2.98\n 6 General Mills Lucky Charms       \"11.50z\"  Target    3.19\n 7 Quaker Oats Old Fashioned        \"18oz\"    Walmart   2.68\n 8 Quaker Oats Old Fashioned        \"18oz\"    Target    2.82\n 9 Nabisco Oreo Cookies             \"14.3oz \" Walmart   2.98\n10 Nabisco Oreo Cookies             \"14.3oz \" Target    2.99\n# ℹ 50 more rows\n\n\nIn this analysis, the grocery prices from both Walmart and Target are reshaped into a long-form dataset for easier comparison. The data is structured to display each product, its size, the store (Walmart or Target), and the corresponding price at each store. This restructuring allows for clearer analysis by aligning the same products across both stores, making it easier to compare the price differences for each item. For example, Kellogg NutriGrain Bars are priced at $2.78 at Walmart and $2.50 at Target. Similarly, Quaker Oats Life Cereal is priced at $6.01 at Walmart and $3.19 at Target, highlighting significant variations in pricing between the two retailers for certain items.\n\n\n\n\nGroceries_long %&gt;%\n  gf_dhistogram(~prices,\n    fill = ~store,\n    alpha = 0.5,\n    title = \"Grocery Costs\"\n  ) %&gt;%\n  gf_facet_grid(~store) %&gt;%\n  gf_fitdistr(dist = \"dnorm\")\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThis visualisation compares the distribution of grocery prices at Walmart and Target using histograms and overlaying normal distribution curves. Each store’s prices are represented separately, with Walmart in red and Target in blue. The shapes of the distributions indicate that Walmart prices are more widely spread, with several items priced above $5, whereas Target has a higher concentration of items priced between $2 and $4. The fitted normal distribution curves further suggest that Walmart’s pricing has a wider range, while Target’s pricing is more clustered around the lower price range, making Target appear slightly more consistent in pricing across products.\n\n\n\n\nGroceries_long %&gt;%\n  gf_density(~prices,\n    fill = ~store,\n    alpha = 0.5,\n    title = \"Grocery Costs\"\n  ) %&gt;%\n  gf_facet_grid(~store) %&gt;%\n  gf_fitdistr(dist = \"dnorm\")\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThis density plot compares grocery prices between Walmart and Target. The red area represents Walmart prices, while the blue area shows Target prices. The graph suggests that Walmart has a higher concentration of lower-priced items around the $2 range, with a sharp peak and a gradual decline, showing a few products priced above $6. In contrast, Target has a more evenly distributed pricing structure, with a peak around $3 and more products priced consistently in the $2 to $4 range. The normal distribution curves indicate that Walmart’s prices are more dispersed, while Target’s prices are clustered closer to the lower range, with fewer high-priced items.\n\n\n\n\ntheme_set(new = theme_custom())\n\nGroceries_long %&gt;%\n  gf_boxplot(prices ~ store,\n    fill = ~store\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThis boxplot compares the prices of grocery items at Walmart and Target. The boxes represent the interquartile range (IQR) of prices, with the median price indicated by the thick horizontal line within each box. Both stores have a similar median price, with Walmart slightly lower than Target. Walmart’s prices appear to be more tightly clustered around the lower range, while Target has a wider range of prices. There are more outliers (higher-priced items) for both stores, but Target has more extreme price outliers above $6. This suggests that while the general pricing between the two stores is similar, Target has a slightly broader distribution of higher-priced items.\n\n\n\n\ntheme_set(new = theme_custom())\n\nGroceries_long %&gt;%\n  gf_col(fct_reorder(Product, prices) ~ prices,\n    fill = ~store,\n    alpha = 0.5,\n    position = \"dodge\",\n    xlab = \"Prices\",\n    ylab = \"\",\n    title = \"Grocery Costs\"\n  ) %&gt;%\n  gf_col(\n    data =\n      Groceries_long %&gt;%\n        filter(\n          Product == \"Quaker Oats Life Cereal Original\"\n        ),\n    fct_reorder(Product, prices) ~ prices,\n    fill = ~store,\n    position = \"dodge\"\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe bar plot compares the prices of various grocery items between Walmart and Target. Each product is listed on the y-axis, with the corresponding prices shown on the x-axis. The products are color-coded based on the store, with Walmart represented in red and Target in blue. The graph reveals that prices for similar items vary between the two stores. For example, products like Skittles and Cheez-it Original Baked show notable differences in price, with Target generally having higher prices in some categories while Walmart has higher prices in others. This visual comparison provides an effective way to see which store offers lower prices on particular products. The plot also emphasizes that certain items have similar pricing between both stores, highlighting the competitiveness in pricing strategies.\n\n\n\n\nobs_diff_price &lt;- diffmean(prices ~ store,\n  data = Groceries_long,\n  only.2 = FALSE\n)\nobs_diff_price\n\n  diffmean \n0.05666667 \n\n\nThis calculates the difference in mean prices between two stores (Walmart and Target) using the diffmean function. The result, shown as diffmean = 0.05666667, indicates that the average price difference between the stores is approximately 0.057. This small positive difference suggests that, on average, prices are marginally higher at Target compared to Walmart for the grocery items in the dataset. However, the difference is not substantial, implying that both stores have relatively similar pricing overall.\n\n\n\n\nshapiro.test(Groceries$Walmart)\n\n\n    Shapiro-Wilk normality test\n\ndata:  Groceries$Walmart\nW = 0.78662, p-value = 3.774e-05\n\nshapiro.test(Groceries$Target)\n\n\n    Shapiro-Wilk normality test\n\ndata:  Groceries$Target\nW = 0.79722, p-value = 5.836e-05\n\n\nThe Shapiro-Wilk normality tests were conducted for both Walmart and Target grocery prices to assess if the data follows a normal distribution. For Walmart, the W-value is 0.78662 with a p-value of 3.774e-05, and for Target, the W-value is 0.79722 with a p-value of 5.836e-05. In both cases, the very small p-values (much less than 0.05) indicate that the prices for groceries at both Walmart and Target do not follow a normal distribution. Therefore, these distributions are likely non-normal, and further analysis might require non-parametric methods or transformations.\n\n\n\n\nvar.test(Groceries$Walmart, Groceries$Target)\n\n\n    F test to compare two variances\n\ndata:  Groceries$Walmart and Groceries$Target\nF = 0.97249, num df = 29, denom df = 29, p-value = 0.9406\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.4628695 2.0431908\nsample estimates:\nratio of variances \n         0.9724868 \n\n\nThe F-test for comparing the variances between Walmart and Target grocery prices resulted in an F-value of 0.97249 with a p-value of 0.9406. Since the p-value is much greater than 0.05, we fail to reject the null hypothesis, which means there is no significant difference in the variances between the two stores. The ratio of the variances is approximately 0.9725, and the 95% confidence interval ranges from 0.4627 to 2.0439, further confirming that the variance in grocery prices between Walmart and Target is similar.\n\n\n\n\nmosaic::t_test(Groceries$Walmart, Groceries$Target, paired = TRUE) %&gt;%\n  broom::tidy()\n\n# A tibble: 1 × 8\n  estimate statistic p.value parameter conf.low conf.high method     alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      \n1  -0.0567    -0.470   0.642        29   -0.303     0.190 Paired t-… two.sided  \n\n\nThe paired t-test results comparing prices at Walmart and Target show a mean difference of -0.0567, with a t-statistic of -0.4704556 and a p-value of 0.6415488. The confidence interval for the difference ranges from -0.3030159 to 0.1896825. Since the p-value is quite large (greater than 0.05), the results suggest that there is no statistically significant difference between the grocery prices at Walmart and Target. The confidence interval further supports this, as it contains zero, indicating that the mean difference could be negligible or non-existent.\n\n\n\n\n## For stability reasons, it may be advisable to use rounded data or to set digits.rank = 7, say,\n## such that determination of ties does not depend on very small numeric differences (see the example).\n\nwilcox.test(Groceries$Walmart, Groceries$Target,\n  data = Groceries_long,\n  digits.rank = 7, paired = TRUE,\n  conf.int = TRUE, conf.level = 0.95\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, data =\nGroceries_long, : cannot compute exact p-value with ties\n\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, data =\nGroceries_long, : cannot compute exact confidence interval with ties\n\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, data =\nGroceries_long, : cannot compute exact p-value with zeroes\n\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, data =\nGroceries_long, : cannot compute exact confidence interval with zeroes\n\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low conf.high method               alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;      \n1   -0.105        95  0.0143   -0.175   -0.0301 Wilcoxon signed ran… two.sided  \n\n\nThe non-parametric paired Wilcoxon test compares the grocery prices between Walmart and Target. The test’s p-value is 0.0143, which is significant at a 0.05 level, suggesting that the difference in prices between the two stores is statistically significant. The confidence interval ranges from -0.1750051 to -0.03005987, and the estimate of the effect size is -0.104966. This implies that Walmart’s prices tend to be slightly lower than Target’s, with the test favoring the conclusion that there is a genuine difference between the two.\n\n\n\n\nlm(Target - Walmart ~ 1, data = Groceries) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95)\n\n# A tibble: 1 × 7\n  term        estimate std.error statistic p.value conf.low conf.high\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)   0.0567     0.120     0.470   0.642   -0.190     0.303\n\nsigned_rank &lt;- function(x) {\n  sign(x) * rank(abs(x))\n}\n\nlm(signed_rank(Target - Walmart) ~ 1,\n  data = Groceries\n) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95)\n\n# A tibble: 1 × 7\n  term        estimate std.error statistic p.value conf.low conf.high\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)     8.53      2.89      2.95 0.00617     2.63      14.4\n\n\nThe first model computes the difference between Target and Walmart prices directly, resulting in an estimate of around 0.0567, but with a p-value of 0.6415, indicating no statistically significant difference between prices. The second model uses a rank transformation (signed rank) of the price differences.\nThe second approach produces an estimate of around 8.53, with a highly significant p-value (0.006), suggesting that Target’s prices are notably higher than Walmart’s. The confidence interval for the estimate ranges from 2.625 to 14.44, further confirming this significant difference when using the rank-based method.\nThis suggests that while a simple linear model does not reveal a significant price difference, a rank-based approach indicates that Target prices tend to be higher than Walmart prices.\n\n\n\n\n# | layout: [[15, 85, 15]]\n\ntheme_set(new = theme_custom())\n\npolarity &lt;- c(rep(1, 15), rep(-1, 15))\n\nnull_dist_price &lt;- do(9999) *\n  mean(\n    data = Groceries,\n    ~ (Target - Walmart) *\n      resample(polarity, replace = TRUE)\n  )\nnull_dist_price\n\n              mean\n1    -1.413333e-01\n2    -2.253333e-01\n3    -1.193333e-01\n4    -1.160000e-01\n5     8.733333e-02\n6    -1.406667e-01\n7    -1.200000e-02\n8    -4.800000e-02\n9     8.133333e-02\n10    1.433333e-01\n11    8.333333e-02\n12   -4.000000e-02\n13   -1.426667e-01\n14   -5.466667e-02\n15   -1.493333e-01\n16    2.206667e-01\n17   -1.560000e-01\n18   -1.980000e-01\n19    1.800000e-02\n20   -1.260000e-01\n21    1.666667e-02\n22   -2.220000e-01\n23    1.920000e-01\n24   -1.100000e-01\n25   -6.533333e-02\n26   -1.120000e-01\n27   -6.666667e-02\n28    9.466667e-02\n29    2.000000e-02\n30   -1.066667e-01\n31   -3.866667e-02\n32    2.066667e-02\n33   -1.333333e-03\n34   -7.133333e-02\n35   -2.140000e-01\n36    1.546667e-01\n37    1.920000e-01\n38    9.666667e-02\n39    6.933333e-02\n40   -9.733333e-02\n41    5.533333e-02\n42   -6.533333e-02\n43   -5.400000e-02\n44    1.300000e-01\n45    4.533333e-02\n46   -4.666667e-03\n47    3.333333e-02\n48    1.333333e-01\n49    1.640000e-01\n50    9.533333e-02\n51   -7.866667e-02\n52    1.700000e-01\n53   -1.880000e-01\n54    6.666667e-02\n55   -1.433333e-01\n56   -2.733333e-02\n57   -1.840000e-01\n58    3.933333e-02\n59    1.786667e-01\n60   -5.066667e-02\n61    1.540000e-01\n62   -2.133333e-02\n63    1.400000e-02\n64   -1.066667e-01\n65    1.406667e-01\n66    1.400000e-02\n67   -4.933333e-02\n68    1.393333e-01\n69    2.466667e-01\n70    1.866667e-02\n71   -1.346667e-01\n72    6.066667e-02\n73   -9.800000e-02\n74    1.020000e-01\n75   -1.060000e-01\n76   -1.080000e-01\n77    1.186667e-01\n78   -1.453333e-01\n79    4.266667e-02\n80   -5.266667e-02\n81    1.073333e-01\n82   -6.866667e-02\n83   -6.266667e-02\n84    2.133333e-01\n85   -1.300000e-01\n86    1.300000e-01\n87    1.266667e-02\n88    1.580000e-01\n89    4.333333e-02\n90    3.266667e-02\n91    4.733333e-02\n92   -1.400000e-02\n93   -2.920000e-01\n94    8.400000e-02\n95   -5.533333e-02\n96    1.133333e-02\n97    6.266667e-02\n98   -5.533333e-02\n99   -4.733333e-02\n100  -7.533333e-02\n101   9.933333e-02\n102   1.340000e-01\n103  -8.266667e-02\n104   1.606667e-01\n105  -1.160000e-01\n106  -5.000000e-02\n107  -3.266667e-02\n108  -2.266667e-02\n109   2.100000e-01\n110   1.653333e-01\n111   3.333333e-03\n112  -5.333333e-02\n113  -6.600000e-02\n114   1.733333e-02\n115   1.680000e-01\n116  -2.466667e-01\n117   2.333333e-02\n118  -2.120000e-01\n119  -7.866667e-02\n120  -1.780000e-01\n121   1.333333e-02\n122   1.226667e-01\n123   8.933333e-02\n124   1.273333e-01\n125  -3.933333e-02\n126   2.666667e-02\n127  -6.133333e-02\n128   6.266667e-02\n129   2.866667e-02\n130   1.666667e-01\n131   1.733333e-02\n132   1.800000e-02\n133   4.200000e-02\n134   1.100000e-01\n135   9.400000e-02\n136  -1.026667e-01\n137  -1.066667e-02\n138  -1.326667e-01\n139  -1.280000e-01\n140  -1.133333e-02\n141  -1.613333e-01\n142  -1.113333e-01\n143  -6.000000e-03\n144   8.333333e-02\n145   1.506667e-01\n146  -1.640000e-01\n147   2.533333e-02\n148  -4.066667e-02\n149   3.466667e-02\n150  -1.806667e-01\n151   5.466667e-02\n152  -8.133333e-02\n153  -6.000000e-03\n154  -7.933333e-02\n155   1.333333e-02\n156  -1.313333e-01\n157  -3.066667e-02\n158   4.000000e-03\n159   1.133333e-01\n160  -6.466667e-02\n161  -1.333333e-01\n162  -3.266667e-02\n163   3.400000e-02\n164   7.733333e-02\n165   1.253333e-01\n166  -1.213333e-01\n167   1.933333e-02\n168   1.600000e-02\n169  -3.133333e-02\n170  -8.733333e-02\n171  -1.666667e-02\n172  -1.273333e-01\n173   1.560000e-01\n174  -1.686667e-01\n175   1.580000e-01\n176  -4.666667e-03\n177  -4.266667e-02\n178   1.706667e-01\n179   4.066667e-02\n180  -7.266667e-02\n181   1.733333e-02\n182  -7.066667e-02\n183  -1.513333e-01\n184   4.733333e-02\n185  -9.400000e-02\n186   2.466667e-02\n187  -1.840000e-01\n188  -1.500000e-01\n189   7.933333e-02\n190   1.533333e-02\n191  -4.533333e-02\n192   1.540000e-01\n193   1.420000e-01\n194   1.440000e-01\n195  -9.333333e-03\n196   8.000000e-02\n197  -4.400000e-02\n198   9.533333e-02\n199   1.333333e-02\n200  -4.866667e-02\n201   1.526667e-01\n202  -1.213333e-01\n203   4.533333e-02\n204   1.740000e-01\n205  -2.106667e-01\n206  -5.600000e-02\n207  -1.440000e-01\n208  -8.400000e-02\n209  -5.400000e-02\n210   8.866667e-02\n211  -1.360000e-01\n212  -2.260000e-01\n213   1.293333e-01\n214   1.420000e-01\n215   1.866667e-02\n216  -1.526667e-01\n217  -1.026667e-01\n218   2.020000e-01\n219   2.533333e-02\n220  -2.133333e-01\n221  -1.293333e-01\n222  -1.840000e-01\n223  -8.733333e-02\n224  -8.400000e-02\n225   1.000000e-02\n226  -1.506667e-01\n227  -2.706667e-01\n228  -3.933333e-02\n229   2.606667e-01\n230   9.800000e-02\n231  -8.266667e-02\n232   1.093333e-01\n233   3.200000e-02\n234  -1.206667e-01\n235  -2.193333e-01\n236  -3.066667e-02\n237   1.113333e-01\n238  -2.253333e-01\n239   2.400000e-01\n240   1.553333e-01\n241  -7.466667e-02\n242  -4.666667e-03\n243   2.360000e-01\n244   1.193333e-01\n245   2.733333e-01\n246   1.133333e-02\n247  -3.733333e-02\n248   7.600000e-02\n249  -9.200000e-02\n250   3.333333e-03\n251   1.266667e-01\n252   1.140000e-01\n253  -2.000000e-02\n254  -1.460000e-01\n255  -3.133333e-02\n256  -8.400000e-02\n257   3.400000e-02\n258   1.140000e-01\n259   8.466667e-02\n260  -1.280000e-01\n261  -5.600000e-02\n262  -2.666667e-02\n263  -9.333333e-03\n264  -1.486667e-01\n265  -9.800000e-02\n266   1.100000e-01\n267  -1.660000e-01\n268  -2.100000e-01\n269   1.733333e-01\n270  -5.800000e-02\n271  -7.400000e-02\n272  -1.073333e-01\n273  -5.866667e-02\n274   1.833333e-01\n275   6.733333e-02\n276   1.980000e-01\n277  -1.053333e-01\n278  -4.133333e-02\n279   1.166667e-01\n280   6.266667e-02\n281  -1.453333e-01\n282  -8.666667e-02\n283  -3.000000e-02\n284   2.133333e-02\n285   8.666667e-03\n286   1.186667e-01\n287  -1.720000e-01\n288  -1.753333e-01\n289   8.000000e-03\n290  -1.713333e-01\n291   8.666667e-02\n292  -1.113333e-01\n293   9.600000e-02\n294   1.240000e-01\n295   8.866667e-02\n296  -7.066667e-02\n297  -1.006667e-01\n298  -1.213333e-01\n299  -1.573333e-01\n300   1.160000e-01\n301   2.806667e-01\n302  -5.933333e-02\n303   1.046667e-01\n304   1.500000e-01\n305  -2.020000e-01\n306  -1.153333e-01\n307  -7.733333e-02\n308   1.826667e-01\n309   1.873333e-01\n310   2.800000e-02\n311  -1.680000e-01\n312   1.380000e-01\n313   7.866667e-02\n314  -1.533333e-01\n315  -1.193333e-01\n316   1.873333e-01\n317   6.666667e-03\n318   1.053333e-01\n319   1.613333e-01\n320   9.000000e-02\n321   2.800000e-02\n322   9.466667e-02\n323   2.086667e-01\n324   2.200000e-02\n325   4.466667e-02\n326  -1.626667e-01\n327  -9.200000e-02\n328   1.573333e-01\n329   2.666667e-03\n330  -2.866667e-02\n331   7.466667e-02\n332  -1.173333e-01\n333   1.333333e-01\n334   7.800000e-02\n335   1.866667e-02\n336  -1.680000e-01\n337  -2.333333e-02\n338  -1.333333e-02\n339   1.146667e-01\n340  -1.193333e-01\n341  -1.646667e-01\n342   6.800000e-02\n343  -6.600000e-02\n344  -2.246667e-01\n345  -1.226667e-01\n346   1.340000e-01\n347   1.506667e-01\n348   7.200000e-02\n349  -2.466667e-02\n350  -1.480000e-01\n351  -1.513333e-01\n352   1.666667e-02\n353  -1.060000e-01\n354  -1.273333e-01\n355  -4.600000e-02\n356   1.433333e-01\n357   9.466667e-02\n358  -1.226667e-01\n359  -1.100000e-01\n360  -1.566667e-01\n361   2.266667e-02\n362   1.940000e-01\n363   8.066667e-02\n364   9.266667e-02\n365   3.400000e-02\n366   6.333333e-02\n367  -1.533333e-02\n368  -1.260000e-01\n369   1.053333e-01\n370   3.933333e-02\n371  -1.640000e-01\n372  -2.146667e-01\n373  -2.733333e-02\n374   1.400000e-02\n375  -1.773333e-01\n376  -2.066667e-01\n377  -2.133333e-02\n378  -1.546667e-01\n379   7.666667e-02\n380  -1.246667e-01\n381  -2.066667e-02\n382  -1.166667e-01\n383  -7.266667e-02\n384  -1.553333e-01\n385  -1.326667e-01\n386   8.200000e-02\n387  -1.060000e-01\n388   1.200000e-01\n389  -2.140000e-01\n390  -8.666667e-02\n391  -5.066667e-02\n392  -1.700000e-01\n393  -2.300000e-01\n394  -1.653333e-01\n395  -9.333333e-03\n396   2.033333e-01\n397   5.200000e-02\n398   1.153333e-01\n399   8.133333e-02\n400  -2.026667e-01\n401  -2.133333e-01\n402  -2.386667e-01\n403  -1.040000e-01\n404  -1.706667e-01\n405   1.853333e-01\n406   1.400000e-02\n407  -1.366667e-01\n408   2.006667e-01\n409  -2.266667e-01\n410  -1.166667e-01\n411   2.800000e-02\n412  -1.473333e-01\n413   1.460000e-01\n414  -8.466667e-02\n415  -6.866667e-02\n416   1.200000e-01\n417   1.466667e-02\n418   1.113333e-01\n419  -6.000000e-02\n420  -1.380000e-01\n421   1.173333e-01\n422  -3.400000e-02\n423  -2.220971e-17\n424   3.133333e-02\n425  -1.006667e-01\n426   2.733333e-02\n427   1.320000e-01\n428   6.400000e-02\n429   1.813333e-01\n430   4.066667e-02\n431   2.140000e-01\n432   1.133333e-01\n433  -2.193333e-01\n434   2.353333e-01\n435  -9.600000e-02\n436   4.000000e-03\n437   1.060000e-01\n438   1.246667e-01\n439   7.066667e-02\n440   1.293333e-01\n441   8.600000e-02\n442   3.333333e-02\n443   5.733333e-02\n444   4.333333e-02\n445   7.600000e-02\n446  -1.013333e-01\n447   1.373333e-01\n448  -2.293333e-01\n449  -8.000000e-03\n450   1.133333e-02\n451   7.333333e-02\n452   1.066667e-02\n453   1.813333e-01\n454  -1.126667e-01\n455  -4.466667e-02\n456   1.360000e-01\n457   1.713333e-01\n458   1.506667e-01\n459  -8.733333e-02\n460   1.693333e-01\n461  -1.613333e-01\n462  -4.800000e-02\n463  -2.326667e-01\n464  -1.133333e-02\n465   1.166667e-01\n466  -1.400000e-02\n467  -9.066667e-02\n468   5.733333e-02\n469   1.866667e-01\n470  -9.333333e-02\n471  -1.560000e-01\n472  -1.580000e-01\n473  -7.066667e-02\n474   3.733333e-02\n475   1.886667e-01\n476   1.513333e-01\n477   2.233333e-01\n478   1.226667e-01\n479   8.200000e-02\n480  -1.240000e-01\n481  -2.733333e-02\n482   2.466667e-02\n483  -4.133333e-02\n484  -4.133333e-02\n485   2.600000e-02\n486  -1.433333e-01\n487  -7.933333e-02\n488   1.706667e-01\n489   2.080000e-01\n490  -2.200000e-02\n491   1.693333e-01\n492   1.266667e-02\n493  -3.333333e-03\n494  -2.400000e-02\n495  -2.466667e-01\n496   1.673333e-01\n497   3.333333e-03\n498   4.666667e-03\n499   6.600000e-02\n500  -9.066667e-02\n501   1.526667e-01\n502  -3.200000e-02\n503   1.126667e-01\n504   2.166667e-01\n505  -2.733333e-02\n506   8.000000e-03\n507   2.240000e-01\n508  -6.133333e-02\n509   4.400000e-02\n510  -5.466667e-02\n511   4.133333e-02\n512  -3.666667e-02\n513   1.460000e-01\n514   9.466667e-02\n515  -1.740000e-01\n516  -5.733333e-02\n517  -1.620000e-01\n518  -5.333333e-02\n519  -5.933333e-02\n520   1.880000e-01\n521   8.000000e-02\n522  -1.246667e-01\n523   5.000000e-02\n524   4.266667e-02\n525  -1.006667e-01\n526  -1.846667e-01\n527  -6.600000e-02\n528  -2.726667e-01\n529  -1.846667e-01\n530  -3.800000e-02\n531  -2.933333e-02\n532   1.926667e-01\n533  -1.013333e-01\n534  -2.113333e-01\n535  -1.933333e-02\n536   1.113333e-01\n537   4.066667e-02\n538   1.673333e-01\n539  -1.733333e-02\n540   6.666667e-03\n541  -1.866667e-02\n542   4.933333e-02\n543   6.066667e-02\n544  -1.553333e-01\n545   1.386667e-01\n546   1.433333e-01\n547  -7.600000e-02\n548  -1.580000e-01\n549   9.533333e-02\n550  -1.200000e-01\n551   1.533333e-02\n552   4.200000e-02\n553   1.480000e-01\n554  -9.333333e-02\n555  -1.146667e-01\n556  -2.733333e-02\n557  -1.660000e-01\n558   1.766667e-01\n559   1.173333e-01\n560  -1.593333e-01\n561  -1.120000e-01\n562  -1.266667e-01\n563  -8.000000e-02\n564   1.673333e-01\n565  -1.606667e-01\n566   1.133333e-02\n567   2.533333e-02\n568   2.473333e-01\n569   8.000000e-02\n570  -6.733333e-02\n571  -1.160000e-01\n572  -1.653333e-01\n573  -8.800000e-02\n574  -5.933333e-02\n575  -7.533333e-02\n576  -1.060000e-01\n577   2.666667e-03\n578   1.546667e-01\n579   1.213333e-01\n580   1.286667e-01\n581   1.553333e-01\n582   1.013333e-01\n583  -2.400000e-02\n584  -8.666667e-03\n585  -2.221333e-17\n586  -7.400000e-02\n587  -3.066667e-02\n588  -6.333333e-02\n589   1.406667e-01\n590   6.733333e-02\n591   2.400000e-02\n592   1.120000e-01\n593   2.000000e-03\n594   5.400000e-02\n595   1.320000e-01\n596   1.533333e-01\n597  -1.413333e-01\n598  -1.046667e-01\n599  -1.353333e-01\n600  -1.500000e-01\n601   1.166667e-01\n602   1.333333e-02\n603  -1.413333e-01\n604   3.000000e-02\n605  -1.133333e-01\n606  -2.160000e-01\n607  -1.573333e-01\n608  -9.733333e-02\n609  -1.106667e-01\n610  -7.066667e-02\n611  -5.333333e-03\n612   1.713333e-01\n613  -1.306667e-01\n614   1.106667e-01\n615   1.573333e-01\n616   1.706667e-01\n617   1.686667e-01\n618  -2.193333e-01\n619   1.273333e-01\n620   1.886667e-01\n621   5.733333e-02\n622   1.666667e-02\n623  -1.606667e-01\n624   1.173333e-01\n625   6.666667e-03\n626  -1.980000e-01\n627   5.400000e-02\n628   3.466667e-02\n629  -1.213333e-01\n630  -1.740000e-01\n631  -1.073333e-01\n632  -1.666667e-02\n633  -8.733333e-02\n634   1.300000e-01\n635  -1.133333e-02\n636   6.333333e-02\n637  -9.733333e-02\n638   5.933333e-02\n639   2.600000e-02\n640  -9.200000e-02\n641  -1.213333e-01\n642   1.220000e-01\n643   1.100000e-01\n644   2.000000e-02\n645   4.133333e-02\n646   2.140000e-01\n647   1.400000e-02\n648  -5.866667e-02\n649  -5.800000e-02\n650   7.800000e-02\n651   5.733333e-02\n652  -3.333333e-02\n653   1.820000e-01\n654   2.060000e-01\n655   2.333333e-02\n656  -1.533333e-01\n657   4.533333e-02\n658  -8.133333e-02\n659  -4.000000e-03\n660  -8.933333e-02\n661  -2.133333e-01\n662  -1.573333e-01\n663   2.086667e-01\n664   1.706667e-01\n665   1.200000e-02\n666  -2.800000e-02\n667   5.600000e-02\n668   4.533333e-02\n669  -6.666667e-02\n670   3.333333e-03\n671   1.246667e-01\n672   1.073333e-01\n673  -1.306667e-01\n674  -1.873333e-01\n675   5.866667e-02\n676  -2.033333e-01\n677   9.333333e-02\n678  -1.200000e-02\n679   8.266667e-02\n680  -1.373333e-01\n681   5.400000e-02\n682   2.280000e-01\n683  -1.033333e-01\n684  -1.246667e-01\n685  -1.426667e-01\n686   1.486667e-01\n687  -8.066667e-02\n688  -4.733333e-02\n689   7.533333e-02\n690   4.666667e-02\n691   3.333333e-03\n692   5.600000e-02\n693  -1.526667e-01\n694   1.353333e-01\n695   3.333333e-02\n696   1.746667e-01\n697   7.733333e-02\n698   4.066667e-02\n699   1.340000e-01\n700  -1.720000e-01\n701   1.206667e-01\n702   1.633333e-01\n703  -1.046667e-01\n704  -2.013333e-01\n705   1.886667e-01\n706   1.353333e-01\n707   1.580000e-01\n708  -1.266667e-01\n709  -1.213333e-01\n710   1.240000e-01\n711   1.300000e-01\n712   1.600000e-02\n713   1.693333e-01\n714   1.853333e-01\n715  -1.673333e-01\n716   1.480000e-01\n717   2.333333e-02\n718   1.746667e-01\n719   3.533333e-02\n720   9.333333e-03\n721   2.800000e-02\n722   1.353333e-01\n723  -1.773333e-01\n724  -9.933333e-02\n725   6.400000e-02\n726   8.733333e-02\n727   1.740000e-01\n728  -5.800000e-02\n729  -1.300000e-01\n730   1.300000e-01\n731   1.566667e-01\n732   3.000000e-02\n733  -3.333333e-03\n734  -1.680000e-01\n735   1.146667e-01\n736   9.066667e-02\n737  -1.333333e-02\n738   6.000000e-03\n739   8.800000e-02\n740   1.493333e-01\n741  -1.020000e-01\n742   4.333333e-02\n743   2.200000e-02\n744  -1.186667e-01\n745   7.666667e-02\n746   8.000000e-03\n747   1.560000e-01\n748  -1.420000e-01\n749   1.880000e-01\n750   3.866667e-02\n751   2.060000e-01\n752   4.666667e-03\n753   6.066667e-02\n754  -1.806667e-01\n755  -8.066667e-02\n756  -1.000000e-02\n757  -6.333333e-02\n758  -8.733333e-02\n759  -9.133333e-02\n760   7.400000e-02\n761   1.593333e-01\n762   1.940000e-01\n763  -1.060000e-01\n764  -4.466667e-02\n765   8.133333e-02\n766   1.406667e-01\n767   6.533333e-02\n768   1.973333e-01\n769  -7.066667e-02\n770  -2.386667e-01\n771   2.026667e-01\n772   1.740000e-01\n773  -8.066667e-02\n774  -7.933333e-02\n775   1.600000e-02\n776  -2.106667e-01\n777  -5.333333e-02\n778   1.333333e-02\n779  -3.333333e-03\n780  -7.733333e-02\n781   2.400000e-02\n782  -4.200000e-02\n783  -4.933333e-02\n784  -1.140000e-01\n785   8.400000e-02\n786   2.073333e-01\n787  -3.333333e-02\n788   3.400000e-02\n789   5.266667e-02\n790   6.000000e-02\n791  -1.813333e-01\n792  -1.140000e-01\n793   1.613333e-01\n794   9.866667e-02\n795   6.400000e-02\n796   2.273333e-01\n797  -1.886667e-01\n798  -2.033333e-01\n799  -1.646667e-01\n800   9.933333e-02\n801  -1.853333e-01\n802  -1.100000e-01\n803  -1.200000e-01\n804   2.800000e-02\n805   9.733333e-02\n806   8.333333e-02\n807  -2.266667e-02\n808  -4.133333e-02\n809  -1.646667e-01\n810  -1.566667e-01\n811   1.146667e-01\n812  -7.866667e-02\n813  -2.306667e-01\n814   2.446667e-01\n815  -1.733333e-02\n816   3.066667e-02\n817   3.733333e-02\n818  -5.733333e-02\n819  -2.200000e-02\n820   1.000000e-01\n821  -1.060000e-01\n822  -5.200000e-02\n823  -6.800000e-02\n824  -1.866667e-02\n825   1.060000e-01\n826   1.393333e-01\n827  -3.066667e-02\n828   7.733333e-02\n829  -6.800000e-02\n830  -6.600000e-02\n831   1.146667e-01\n832   1.666667e-01\n833   3.533333e-02\n834  -3.066667e-02\n835   1.340000e-01\n836   9.000000e-02\n837  -1.766667e-01\n838  -6.866667e-02\n839  -2.193333e-01\n840  -2.933333e-02\n841  -1.700000e-01\n842   1.380000e-01\n843   9.066667e-02\n844  -6.133333e-02\n845  -1.626667e-01\n846   2.200000e-02\n847  -1.066667e-01\n848  -1.073333e-01\n849   6.600000e-02\n850  -3.933333e-02\n851  -7.933333e-02\n852   9.600000e-02\n853  -5.666667e-02\n854  -2.220000e-01\n855  -1.240000e-01\n856   6.400000e-02\n857  -3.866667e-02\n858   7.600000e-02\n859  -3.333333e-02\n860   6.466667e-02\n861  -2.666667e-03\n862  -1.220000e-01\n863   1.073333e-01\n864   1.126667e-01\n865   5.066667e-02\n866   2.173333e-01\n867  -4.933333e-02\n868   3.333333e-02\n869  -7.400000e-02\n870   2.533333e-02\n871  -8.400000e-02\n872   1.333333e-03\n873   1.300000e-01\n874  -1.446667e-01\n875   1.913333e-01\n876  -2.113333e-01\n877  -1.800000e-02\n878  -1.093333e-01\n879   7.066667e-02\n880  -6.133333e-02\n881  -1.120000e-01\n882  -1.566667e-01\n883   1.500000e-01\n884  -1.266667e-01\n885  -1.966667e-01\n886  -4.600000e-02\n887  -1.400000e-02\n888   6.666667e-03\n889  -1.233333e-01\n890  -1.293333e-01\n891   1.800000e-02\n892   9.133333e-02\n893  -6.733333e-02\n894  -6.400000e-02\n895  -1.333333e-01\n896   1.033333e-01\n897   1.406667e-01\n898   3.400000e-02\n899  -3.666667e-02\n900   8.466667e-02\n901  -5.333333e-02\n902  -1.613333e-01\n903  -7.666667e-02\n904   1.486667e-01\n905   2.113333e-01\n906   2.733333e-02\n907  -2.266667e-01\n908   9.533333e-02\n909  -1.426667e-01\n910  -1.840000e-01\n911  -3.400000e-02\n912   4.666667e-02\n913   2.206667e-01\n914   3.600000e-02\n915  -5.933333e-02\n916  -5.600000e-02\n917   1.286667e-01\n918   1.166667e-01\n919  -1.933333e-01\n920  -4.666667e-03\n921   2.333333e-02\n922  -8.866667e-02\n923  -9.533333e-02\n924  -4.266667e-02\n925  -1.600000e-02\n926   1.466667e-02\n927   6.333333e-02\n928  -6.000000e-03\n929   9.733333e-02\n930   1.866667e-01\n931   1.840000e-01\n932   1.673333e-01\n933   1.066667e-01\n934  -1.133333e-02\n935  -1.466667e-02\n936  -2.106667e-01\n937  -1.313333e-01\n938  -2.400000e-02\n939   8.266667e-02\n940  -1.273333e-01\n941  -1.293333e-01\n942   4.533333e-02\n943   7.333333e-03\n944  -2.466667e-02\n945  -2.666667e-03\n946  -5.800000e-02\n947   5.666667e-02\n948  -3.000000e-02\n949  -1.493333e-01\n950  -1.046667e-01\n951   7.000000e-02\n952  -1.506667e-01\n953   1.073333e-01\n954   6.866667e-02\n955  -6.400000e-02\n956  -1.680000e-01\n957   2.866667e-02\n958   2.933333e-02\n959  -5.933333e-02\n960   1.166667e-01\n961   4.933333e-02\n962   3.666667e-02\n963   9.600000e-02\n964   1.773333e-01\n965  -4.533333e-02\n966  -9.466667e-02\n967   2.366667e-01\n968   2.486667e-01\n969  -1.646667e-01\n970  -9.533333e-02\n971   2.193333e-01\n972   2.046667e-01\n973  -1.086667e-01\n974   1.193333e-01\n975   2.466667e-02\n976   9.000000e-02\n977   5.133333e-02\n978   7.666667e-02\n979  -9.466667e-02\n980   2.933333e-02\n981  -2.933333e-02\n982  -1.540000e-01\n983  -1.080000e-01\n984   9.866667e-02\n985   1.253333e-01\n986  -1.993333e-01\n987   9.333333e-02\n988   3.800000e-02\n989  -1.646667e-01\n990   1.860000e-01\n991  -1.420000e-01\n992   3.533333e-02\n993   1.193333e-01\n994   9.066667e-02\n995   1.166667e-01\n996   4.533333e-02\n997  -5.466667e-02\n998  -8.266667e-02\n999  -4.600000e-02\n1000 -1.893333e-01\n1001  7.066667e-02\n1002 -7.933333e-02\n1003 -2.866667e-02\n1004  1.460000e-01\n1005 -6.666667e-02\n1006  1.526667e-01\n1007 -1.946667e-01\n1008  2.313333e-01\n1009  3.200000e-02\n1010 -6.400000e-02\n1011 -6.266667e-02\n1012 -2.466667e-02\n1013 -6.666667e-02\n1014  1.340000e-01\n1015  2.466667e-02\n1016 -6.333333e-02\n1017  6.666667e-03\n1018 -1.566667e-01\n1019 -1.653333e-01\n1020 -1.740000e-01\n1021 -2.620000e-01\n1022 -7.866667e-02\n1023 -1.233333e-01\n1024  9.266667e-02\n1025 -5.466667e-02\n1026 -1.520000e-01\n1027 -5.800000e-02\n1028 -1.200000e-02\n1029  1.320000e-01\n1030  1.713333e-01\n1031  1.400000e-02\n1032 -1.500000e-01\n1033 -2.400000e-02\n1034 -9.266667e-02\n1035  3.933333e-02\n1036 -1.560000e-01\n1037 -1.146667e-01\n1038  8.400000e-02\n1039 -8.066667e-02\n1040 -1.433333e-01\n1041 -5.333333e-02\n1042  2.260000e-01\n1043  1.940000e-01\n1044  2.100000e-01\n1045  1.360000e-01\n1046 -1.880000e-01\n1047  1.026667e-01\n1048 -2.866667e-02\n1049 -1.060000e-01\n1050 -1.713333e-01\n1051 -1.580000e-01\n1052  4.466667e-02\n1053 -1.793333e-01\n1054 -1.473333e-01\n1055 -7.533333e-02\n1056  1.600000e-01\n1057 -1.626667e-01\n1058  1.986667e-01\n1059  1.233333e-01\n1060 -8.066667e-02\n1061  3.400000e-02\n1062 -4.133333e-02\n1063  1.126667e-01\n1064  1.260000e-01\n1065  9.666667e-02\n1066  1.333333e-01\n1067  1.286667e-01\n1068  6.400000e-02\n1069 -7.400000e-02\n1070 -3.333333e-02\n1071  1.953333e-01\n1072 -2.453333e-01\n1073 -9.200000e-02\n1074 -2.700000e-01\n1075  1.153333e-01\n1076 -1.333333e-01\n1077 -5.600000e-02\n1078  1.860000e-01\n1079  9.866667e-02\n1080 -5.333333e-02\n1081 -2.133333e-02\n1082  6.066667e-02\n1083 -1.073333e-01\n1084 -7.000000e-02\n1085 -4.066667e-02\n1086  1.920000e-01\n1087 -6.000000e-02\n1088  1.180000e-01\n1089 -9.600000e-02\n1090  2.800000e-02\n1091  3.533333e-02\n1092  1.433333e-01\n1093  1.340000e-01\n1094 -2.060000e-01\n1095  7.266667e-02\n1096  5.866667e-02\n1097 -7.200000e-02\n1098 -9.933333e-02\n1099 -6.133333e-02\n1100 -1.460000e-01\n1101  1.633333e-01\n1102  2.240000e-01\n1103 -9.000000e-02\n1104 -2.600000e-02\n1105  4.866667e-02\n1106  1.200000e-02\n1107  2.533333e-02\n1108  1.740000e-01\n1109 -1.526667e-01\n1110  6.733333e-02\n1111  2.733333e-02\n1112 -7.666667e-02\n1113 -2.200000e-02\n1114 -2.066667e-01\n1115 -3.600000e-02\n1116  2.266667e-01\n1117  2.333333e-02\n1118  1.933333e-02\n1119  4.066667e-02\n1120 -1.146667e-01\n1121 -1.180000e-01\n1122 -5.200000e-02\n1123  1.586667e-01\n1124  2.666667e-03\n1125  3.666667e-02\n1126 -2.226667e-01\n1127  4.933333e-02\n1128 -1.693333e-01\n1129 -1.666667e-01\n1130 -1.400000e-01\n1131  2.800000e-02\n1132 -2.040000e-01\n1133  4.400000e-02\n1134  9.933333e-02\n1135  1.413333e-01\n1136 -7.666667e-02\n1137  1.900000e-01\n1138 -1.206667e-01\n1139 -3.000000e-02\n1140  7.733333e-02\n1141  2.400000e-02\n1142 -1.960000e-01\n1143 -4.400000e-02\n1144 -1.480000e-01\n1145  2.006667e-01\n1146  2.386667e-01\n1147  2.113333e-01\n1148 -4.000000e-03\n1149  5.000000e-02\n1150  1.206667e-01\n1151 -9.800000e-02\n1152  6.933333e-02\n1153  8.533333e-02\n1154 -1.440000e-01\n1155 -1.753333e-01\n1156 -2.466667e-02\n1157 -1.386667e-01\n1158 -6.200000e-02\n1159 -7.066667e-02\n1160 -1.226667e-01\n1161 -1.326667e-01\n1162 -1.840000e-01\n1163  1.146667e-01\n1164  4.066667e-02\n1165 -5.333333e-03\n1166 -1.400000e-02\n1167 -1.166667e-01\n1168  8.600000e-02\n1169 -1.346667e-01\n1170 -1.260000e-01\n1171 -1.113333e-01\n1172 -1.200000e-01\n1173 -1.646667e-01\n1174  7.133333e-02\n1175 -1.666667e-01\n1176  1.473333e-01\n1177  1.533333e-02\n1178  9.800000e-02\n1179 -9.666667e-02\n1180  1.666667e-01\n1181 -1.693333e-01\n1182  1.153333e-01\n1183 -1.473333e-01\n1184 -1.753333e-01\n1185 -1.880000e-01\n1186  2.380000e-01\n1187 -1.733333e-02\n1188  9.733333e-02\n1189 -7.600000e-02\n1190  1.746667e-01\n1191 -1.340000e-01\n1192  2.086667e-01\n1193  1.000000e-01\n1194 -2.200000e-01\n1195  4.666667e-02\n1196  1.186667e-01\n1197 -1.546667e-01\n1198  6.200000e-02\n1199 -1.186667e-01\n1200  7.866667e-02\n1201 -2.800000e-02\n1202  9.000000e-02\n1203  2.333333e-02\n1204 -2.666667e-02\n1205  6.000000e-02\n1206  2.333333e-02\n1207  1.360000e-01\n1208  1.666667e-01\n1209  9.133333e-02\n1210 -2.440000e-01\n1211  1.480000e-01\n1212 -1.226667e-01\n1213  2.006667e-01\n1214  1.686667e-01\n1215  3.600000e-02\n1216 -1.653333e-01\n1217 -9.266667e-02\n1218 -2.800000e-02\n1219 -9.533333e-02\n1220  1.840000e-01\n1221  6.266667e-02\n1222  6.466667e-02\n1223 -1.426667e-01\n1224 -1.193333e-01\n1225 -2.000000e-02\n1226 -1.840000e-01\n1227  1.173333e-01\n1228  1.466667e-02\n1229 -1.026667e-01\n1230  6.600000e-02\n1231  8.066667e-02\n1232 -2.533333e-02\n1233  1.466667e-01\n1234 -9.400000e-02\n1235  8.266667e-02\n1236  1.433333e-01\n1237  2.800000e-02\n1238  4.866667e-02\n1239  6.933333e-02\n1240  1.420000e-01\n1241 -1.346667e-01\n1242 -5.800000e-02\n1243  1.300000e-01\n1244 -5.000000e-02\n1245  4.066667e-02\n1246 -1.000000e-02\n1247 -1.500000e-01\n1248  1.000000e-01\n1249 -4.600000e-02\n1250  3.000000e-02\n1251 -8.000000e-03\n1252  2.666667e-03\n1253  1.046667e-01\n1254  1.200000e-02\n1255  1.993333e-01\n1256  4.333333e-02\n1257  1.806667e-01\n1258  1.420000e-01\n1259  1.380000e-01\n1260 -3.400000e-02\n1261 -1.146667e-01\n1262  9.600000e-02\n1263 -1.500000e-01\n1264  1.566667e-01\n1265  2.300000e-01\n1266  1.286667e-01\n1267 -3.466667e-02\n1268 -7.933333e-02\n1269  1.653333e-01\n1270 -1.220000e-01\n1271  5.666667e-02\n1272  1.553333e-01\n1273  1.600000e-02\n1274 -2.466667e-02\n1275 -1.353333e-01\n1276 -2.260000e-01\n1277  7.533333e-02\n1278 -1.600000e-01\n1279 -1.360000e-01\n1280  1.406667e-01\n1281  7.200000e-02\n1282  1.113333e-01\n1283  6.666667e-03\n1284  5.400000e-02\n1285  1.000000e-01\n1286  5.266667e-02\n1287  7.066667e-02\n1288 -1.686667e-01\n1289  6.000000e-03\n1290 -9.333333e-02\n1291  5.800000e-02\n1292  5.266667e-02\n1293  8.400000e-02\n1294  1.013333e-01\n1295 -2.666667e-02\n1296 -1.706667e-01\n1297 -4.333333e-02\n1298  5.800000e-02\n1299  7.866667e-02\n1300  4.866667e-02\n1301  3.400000e-02\n1302  2.333333e-02\n1303 -3.066667e-02\n1304  1.100000e-01\n1305  9.400000e-02\n1306 -6.666667e-04\n1307  6.466667e-02\n1308 -1.993333e-01\n1309  2.226667e-01\n1310  1.593333e-01\n1311  2.106667e-01\n1312  1.760000e-01\n1313 -7.066667e-02\n1314 -6.066667e-02\n1315 -1.240000e-01\n1316  3.600000e-02\n1317 -1.253333e-01\n1318 -7.866667e-02\n1319  5.533333e-02\n1320  1.740000e-01\n1321  1.706667e-01\n1322  3.466667e-02\n1323  1.260000e-01\n1324 -6.400000e-02\n1325  7.600000e-02\n1326 -6.666667e-02\n1327  4.800000e-02\n1328  4.200000e-02\n1329 -1.633333e-01\n1330  1.200000e-01\n1331 -5.266667e-02\n1332  2.600000e-02\n1333 -7.400000e-02\n1334  1.340000e-01\n1335  1.760000e-01\n1336 -2.253333e-01\n1337  1.020000e-01\n1338  1.340000e-01\n1339 -6.733333e-02\n1340 -8.666667e-03\n1341  1.020000e-01\n1342 -1.040000e-01\n1343 -5.000000e-02\n1344  1.380000e-01\n1345  1.240000e-01\n1346 -1.106667e-01\n1347 -1.560000e-01\n1348  2.333333e-02\n1349 -7.000000e-02\n1350  1.346667e-01\n1351  1.880000e-01\n1352  1.546667e-01\n1353  6.533333e-02\n1354 -3.866667e-02\n1355 -1.420000e-01\n1356  1.466667e-01\n1357  2.266667e-02\n1358  2.466667e-01\n1359 -1.960000e-01\n1360  1.113333e-01\n1361  7.800000e-02\n1362 -1.146667e-01\n1363  4.466667e-02\n1364 -1.653333e-01\n1365 -8.866667e-02\n1366 -1.833333e-01\n1367 -4.800000e-02\n1368 -2.466667e-02\n1369 -1.920000e-01\n1370  1.653333e-01\n1371 -1.026667e-01\n1372 -2.120000e-01\n1373 -1.053333e-01\n1374  4.000000e-02\n1375 -1.780000e-01\n1376 -8.000000e-02\n1377 -1.973333e-01\n1378 -2.866667e-02\n1379  1.573333e-01\n1380  1.626667e-01\n1381 -1.506667e-01\n1382  3.733333e-02\n1383 -2.733333e-02\n1384  3.600000e-02\n1385 -8.866667e-02\n1386 -4.666667e-03\n1387 -7.733333e-02\n1388  1.640000e-01\n1389  1.140000e-01\n1390 -8.866667e-02\n1391  1.046667e-01\n1392 -6.466667e-02\n1393  6.666667e-02\n1394 -3.800000e-02\n1395  2.053333e-01\n1396  1.133333e-01\n1397  1.533333e-02\n1398 -4.533333e-02\n1399  8.200000e-02\n1400 -6.533333e-02\n1401  7.733333e-02\n1402  1.253333e-01\n1403 -5.933333e-02\n1404 -8.866667e-02\n1405 -1.446667e-01\n1406 -1.266667e-01\n1407 -4.866667e-02\n1408 -2.600000e-02\n1409 -2.333333e-02\n1410 -2.066667e-02\n1411  1.493333e-01\n1412 -1.066667e-01\n1413 -1.553333e-01\n1414 -8.000000e-03\n1415  9.533333e-02\n1416 -4.400000e-02\n1417  1.760000e-01\n1418 -6.666667e-04\n1419  8.666667e-03\n1420  2.106667e-01\n1421 -1.180000e-01\n1422 -9.533333e-02\n1423 -2.173333e-01\n1424  1.473333e-01\n1425 -2.333333e-02\n1426 -5.466667e-02\n1427  4.266667e-02\n1428 -7.066667e-02\n1429 -1.173333e-01\n1430 -1.780000e-01\n1431  4.266667e-02\n1432 -1.793333e-01\n1433 -3.800000e-02\n1434  2.733333e-02\n1435 -1.060000e-01\n1436  1.933333e-02\n1437 -2.253333e-01\n1438  3.600000e-02\n1439 -9.666667e-02\n1440 -1.546667e-01\n1441 -2.420000e-01\n1442 -9.200000e-02\n1443 -1.706667e-01\n1444  5.066667e-02\n1445 -8.066667e-02\n1446 -7.333333e-02\n1447 -1.666667e-01\n1448  8.200000e-02\n1449 -5.600000e-02\n1450 -4.133333e-02\n1451  9.666667e-02\n1452 -5.866667e-02\n1453  1.873333e-01\n1454 -1.746667e-01\n1455  9.066667e-02\n1456 -1.013333e-01\n1457 -7.866667e-02\n1458 -1.313333e-01\n1459  4.333333e-02\n1460 -2.113333e-01\n1461  1.280000e-01\n1462  1.060000e-01\n1463 -4.000000e-02\n1464 -1.226667e-01\n1465  4.133333e-02\n1466  6.666667e-04\n1467  4.666667e-02\n1468 -1.733333e-01\n1469  1.386667e-01\n1470 -1.960000e-01\n1471  1.980000e-01\n1472  1.333333e-01\n1473 -1.020000e-01\n1474  1.000000e-01\n1475 -8.400000e-02\n1476 -4.266667e-02\n1477  8.400000e-02\n1478 -1.506667e-01\n1479 -1.600000e-02\n1480  1.180000e-01\n1481  1.826667e-01\n1482 -4.800000e-02\n1483  1.233333e-01\n1484 -3.000000e-02\n1485  1.213333e-01\n1486  7.000000e-02\n1487  1.533333e-01\n1488 -6.666667e-04\n1489 -9.666667e-02\n1490  4.200000e-02\n1491 -1.166667e-01\n1492  9.800000e-02\n1493  8.000000e-02\n1494 -4.666667e-02\n1495 -2.200000e-02\n1496  4.000000e-03\n1497 -9.533333e-02\n1498  5.133333e-02\n1499  1.626667e-01\n1500 -1.200000e-02\n1501 -9.000000e-02\n1502 -1.693333e-01\n1503 -1.333333e-03\n1504 -1.466667e-01\n1505  2.253333e-01\n1506 -1.113333e-01\n1507 -5.266667e-02\n1508  8.733333e-02\n1509  8.533333e-02\n1510 -1.086667e-01\n1511 -1.313333e-01\n1512 -5.400000e-02\n1513 -3.333333e-02\n1514 -5.200000e-02\n1515 -1.020000e-01\n1516  1.933333e-02\n1517  1.900000e-01\n1518 -4.800000e-02\n1519  1.526667e-01\n1520  1.140000e-01\n1521  2.666667e-03\n1522  8.866667e-02\n1523  4.533333e-02\n1524  9.533333e-02\n1525  2.206667e-01\n1526  3.200000e-02\n1527 -6.666667e-03\n1528  1.733333e-02\n1529 -2.260000e-01\n1530  1.466667e-02\n1531  1.040000e-01\n1532  1.026667e-01\n1533 -8.600000e-02\n1534 -2.273333e-01\n1535 -1.326667e-01\n1536 -5.333333e-02\n1537  1.460000e-01\n1538 -3.133333e-02\n1539 -5.733333e-02\n1540 -1.100000e-01\n1541  8.533333e-02\n1542 -3.533333e-02\n1543 -1.153333e-01\n1544 -1.740000e-01\n1545  2.666667e-03\n1546 -1.513333e-01\n1547  1.426667e-01\n1548  2.006667e-01\n1549  6.000000e-02\n1550 -5.466667e-02\n1551  5.333333e-03\n1552  6.666667e-04\n1553  1.200000e-01\n1554  1.253333e-01\n1555  1.713333e-01\n1556  2.666667e-02\n1557 -9.400000e-02\n1558  9.133333e-02\n1559 -4.000000e-02\n1560 -4.200000e-02\n1561  1.200000e-02\n1562  3.800000e-02\n1563 -1.853333e-01\n1564 -2.066667e-02\n1565 -1.666667e-01\n1566 -1.686667e-01\n1567  1.333333e-02\n1568 -1.120000e-01\n1569 -2.266667e-02\n1570 -1.053333e-01\n1571  5.600000e-02\n1572 -6.466667e-02\n1573 -1.933333e-01\n1574 -4.800000e-02\n1575 -9.733333e-02\n1576  5.533333e-02\n1577 -2.380000e-01\n1578  8.800000e-02\n1579  1.000000e-02\n1580  1.106667e-01\n1581 -1.066667e-02\n1582 -1.266667e-02\n1583  7.933333e-02\n1584  3.200000e-02\n1585  3.733333e-02\n1586  1.426667e-01\n1587 -4.666667e-03\n1588 -1.000000e-01\n1589  2.133333e-02\n1590 -1.233333e-01\n1591  7.000000e-02\n1592 -1.466667e-02\n1593  1.800000e-02\n1594  1.933333e-02\n1595  8.000000e-03\n1596 -2.726667e-01\n1597 -2.106667e-01\n1598 -5.533333e-02\n1599  3.666667e-02\n1600 -3.933333e-02\n1601  8.200000e-02\n1602 -1.526667e-01\n1603  1.720000e-01\n1604 -1.600000e-02\n1605  1.706667e-01\n1606 -1.726667e-01\n1607 -1.233333e-01\n1608  5.533333e-02\n1609 -1.473333e-01\n1610 -3.466667e-02\n1611 -1.060000e-01\n1612  1.120000e-01\n1613 -6.533333e-02\n1614 -2.326667e-01\n1615  4.466667e-02\n1616 -2.313333e-01\n1617  8.600000e-02\n1618 -1.220000e-01\n1619 -1.186667e-01\n1620 -1.886667e-01\n1621 -1.933333e-02\n1622 -2.933333e-02\n1623 -1.920000e-01\n1624  1.566667e-01\n1625 -1.933333e-02\n1626 -1.633333e-01\n1627  8.333333e-02\n1628 -1.040000e-01\n1629 -7.600000e-02\n1630 -7.133333e-02\n1631  3.333333e-03\n1632  8.533333e-02\n1633 -8.866667e-02\n1634 -9.800000e-02\n1635  1.813333e-01\n1636 -1.293333e-01\n1637  2.733333e-02\n1638 -1.473333e-01\n1639 -3.533333e-02\n1640 -4.133333e-02\n1641  1.506667e-01\n1642  6.000000e-02\n1643  1.353333e-01\n1644 -1.920000e-01\n1645  8.933333e-02\n1646  1.306667e-01\n1647 -2.166667e-01\n1648  9.466667e-02\n1649 -2.533333e-02\n1650 -9.400000e-02\n1651  1.993333e-01\n1652 -3.600000e-02\n1653 -1.286667e-01\n1654 -1.800000e-02\n1655 -1.806667e-01\n1656 -1.046667e-01\n1657 -1.933333e-01\n1658  3.933333e-02\n1659 -6.666667e-04\n1660  2.000000e-03\n1661 -1.040000e-01\n1662 -1.153333e-01\n1663  4.200000e-02\n1664  1.580000e-01\n1665 -1.260000e-01\n1666  4.200000e-02\n1667  9.733333e-02\n1668 -8.666667e-02\n1669  1.573333e-01\n1670 -1.266667e-01\n1671 -1.486667e-01\n1672 -1.793333e-01\n1673  1.120000e-01\n1674 -1.333333e-02\n1675  2.553333e-01\n1676  1.346667e-01\n1677 -2.800000e-02\n1678 -6.866667e-02\n1679 -1.993333e-01\n1680  1.120000e-01\n1681  2.400000e-02\n1682  9.066667e-02\n1683 -1.466667e-01\n1684 -7.733333e-02\n1685 -1.666667e-02\n1686  6.933333e-02\n1687 -1.206667e-01\n1688 -1.260000e-01\n1689 -1.266667e-02\n1690 -1.626667e-01\n1691  1.200000e-01\n1692  1.966667e-01\n1693 -1.306667e-01\n1694 -8.800000e-02\n1695  1.633333e-01\n1696 -1.406667e-01\n1697  1.773333e-01\n1698 -1.066667e-02\n1699  1.086667e-01\n1700  1.660000e-01\n1701 -2.000000e-01\n1702 -1.000000e-01\n1703  4.800000e-02\n1704 -7.333333e-02\n1705 -2.466667e-02\n1706  3.600000e-02\n1707 -1.926667e-01\n1708 -2.280000e-01\n1709  2.546667e-01\n1710  1.326667e-01\n1711  1.426667e-01\n1712 -1.040000e-01\n1713  1.866667e-01\n1714  6.533333e-02\n1715  1.733333e-01\n1716  6.866667e-02\n1717  2.060000e-01\n1718 -6.666667e-03\n1719 -4.866667e-02\n1720  1.606667e-01\n1721 -1.053333e-01\n1722 -1.733333e-02\n1723 -1.866667e-02\n1724 -7.400000e-02\n1725 -1.520000e-01\n1726 -2.060000e-01\n1727 -8.000000e-02\n1728 -2.600000e-02\n1729 -6.200000e-02\n1730 -1.186667e-01\n1731  8.266667e-02\n1732  5.733333e-02\n1733 -1.413333e-01\n1734  5.933333e-02\n1735  1.400000e-02\n1736 -8.000000e-03\n1737  1.500000e-01\n1738  3.933333e-02\n1739  1.146667e-01\n1740 -1.480000e-01\n1741  1.606667e-01\n1742  9.866667e-02\n1743  4.666667e-03\n1744 -3.533333e-02\n1745  2.733333e-02\n1746  1.233333e-01\n1747  5.000000e-02\n1748  1.606667e-01\n1749  9.933333e-02\n1750 -1.920000e-01\n1751  1.613333e-01\n1752  6.666667e-04\n1753  1.106667e-01\n1754  8.066667e-02\n1755 -3.733333e-02\n1756  1.573333e-01\n1757 -1.193333e-01\n1758 -6.133333e-02\n1759 -1.040000e-01\n1760 -1.093333e-01\n1761 -1.200000e-02\n1762  1.666667e-01\n1763 -1.380000e-01\n1764  1.333333e-03\n1765  1.593333e-01\n1766  1.266667e-02\n1767 -2.666667e-02\n1768  8.600000e-02\n1769  2.266667e-02\n1770  1.680000e-01\n1771 -8.666667e-03\n1772  2.866667e-02\n1773 -6.533333e-02\n1774 -5.200000e-02\n1775  1.426667e-01\n1776  1.800000e-02\n1777  7.533333e-02\n1778 -2.133333e-02\n1779 -1.546667e-01\n1780  1.773333e-01\n1781 -1.413333e-01\n1782  7.200000e-02\n1783  8.666667e-03\n1784  4.866667e-02\n1785  5.400000e-02\n1786 -1.480000e-01\n1787 -1.413333e-01\n1788  3.466667e-02\n1789 -7.600000e-02\n1790  9.933333e-02\n1791  2.346667e-01\n1792 -1.420000e-01\n1793  1.320000e-01\n1794 -1.033333e-01\n1795 -1.153333e-01\n1796  1.533333e-02\n1797  6.800000e-02\n1798 -1.366667e-01\n1799 -1.240000e-01\n1800  1.066667e-01\n1801 -2.333333e-02\n1802 -6.066667e-02\n1803  1.833333e-01\n1804  1.613333e-01\n1805  9.600000e-02\n1806  6.000000e-03\n1807  5.333333e-03\n1808  1.893333e-01\n1809  2.000000e-01\n1810 -5.066667e-02\n1811 -2.400000e-02\n1812  1.100000e-01\n1813 -1.600000e-02\n1814  1.333333e-02\n1815 -8.866667e-02\n1816  4.666667e-03\n1817  3.133333e-02\n1818  2.700000e-01\n1819  1.466667e-02\n1820  1.586667e-01\n1821  1.113333e-01\n1822  1.066667e-01\n1823 -4.200000e-02\n1824  1.513333e-01\n1825 -1.453333e-01\n1826 -9.666667e-02\n1827 -1.653333e-01\n1828 -9.800000e-02\n1829  8.533333e-02\n1830  1.000000e-02\n1831 -5.066667e-02\n1832  1.326667e-01\n1833 -3.400000e-02\n1834  2.000000e-02\n1835 -2.220000e-01\n1836  4.266667e-02\n1837  1.700000e-01\n1838 -1.433333e-01\n1839  2.553333e-01\n1840 -2.666667e-03\n1841 -2.066667e-02\n1842  3.333333e-03\n1843 -2.046667e-01\n1844 -2.186667e-01\n1845 -4.000000e-03\n1846 -5.533333e-02\n1847 -4.266667e-02\n1848  1.866667e-02\n1849 -1.373333e-01\n1850 -1.153333e-01\n1851 -1.513333e-01\n1852 -1.540000e-01\n1853  1.066667e-02\n1854  1.586667e-01\n1855 -8.466667e-02\n1856 -1.486667e-01\n1857  1.700000e-01\n1858  6.733333e-02\n1859  1.953333e-01\n1860  1.193333e-01\n1861 -1.760000e-01\n1862  1.940000e-01\n1863  3.333333e-03\n1864  8.733333e-02\n1865  4.133333e-02\n1866  5.733333e-02\n1867 -1.880000e-01\n1868  2.800000e-02\n1869 -1.573333e-01\n1870 -5.266667e-02\n1871  2.533333e-02\n1872 -1.580000e-01\n1873  2.066667e-02\n1874  1.860000e-01\n1875  1.333333e-03\n1876 -8.466667e-02\n1877  1.060000e-01\n1878  8.333333e-02\n1879  7.666667e-02\n1880  1.453333e-01\n1881 -2.000000e-02\n1882  2.000000e-02\n1883 -9.866667e-02\n1884  1.533333e-02\n1885  5.400000e-02\n1886  9.866667e-02\n1887  2.686667e-01\n1888 -9.066667e-02\n1889  2.666667e-02\n1890 -8.200000e-02\n1891  8.600000e-02\n1892  1.153333e-01\n1893 -2.466667e-02\n1894  2.280000e-01\n1895 -1.580000e-01\n1896 -1.560000e-01\n1897  1.333333e-03\n1898  1.400000e-02\n1899 -1.266667e-01\n1900 -1.900000e-01\n1901  1.560000e-01\n1902 -7.200000e-02\n1903 -3.266667e-02\n1904  2.746667e-01\n1905  1.440000e-01\n1906 -7.666667e-02\n1907  1.540000e-01\n1908  5.866667e-02\n1909  2.266667e-02\n1910 -1.200000e-02\n1911  9.533333e-02\n1912  1.660000e-01\n1913  1.253333e-01\n1914  5.266667e-02\n1915 -1.646667e-01\n1916 -2.520000e-01\n1917  3.133333e-02\n1918  1.573333e-01\n1919  2.333333e-02\n1920 -2.200000e-02\n1921  1.780000e-01\n1922  6.466667e-02\n1923 -3.666667e-02\n1924 -2.666667e-03\n1925 -4.600000e-02\n1926 -8.066667e-02\n1927 -8.866667e-02\n1928  5.333333e-02\n1929 -5.666667e-02\n1930  1.493333e-01\n1931 -7.600000e-02\n1932  1.246667e-01\n1933  2.666667e-03\n1934  1.820000e-01\n1935 -1.313333e-01\n1936 -9.000000e-02\n1937  1.820000e-01\n1938 -4.400000e-02\n1939 -2.020000e-01\n1940 -3.400000e-02\n1941  5.066667e-02\n1942  9.733333e-02\n1943 -1.446667e-01\n1944  6.333333e-02\n1945  1.360000e-01\n1946  1.073333e-01\n1947  5.400000e-02\n1948 -1.880000e-01\n1949 -9.866667e-02\n1950  1.100000e-01\n1951  5.733333e-02\n1952  1.060000e-01\n1953 -1.486667e-01\n1954 -7.066667e-02\n1955  5.066667e-02\n1956  5.533333e-02\n1957 -2.200000e-02\n1958  1.546667e-01\n1959  1.900000e-01\n1960  5.666667e-02\n1961  1.080000e-01\n1962 -1.566667e-01\n1963  7.000000e-02\n1964  9.466667e-02\n1965 -3.133333e-02\n1966 -1.006667e-01\n1967  1.873333e-01\n1968 -8.933333e-02\n1969  8.133333e-02\n1970 -2.400000e-02\n1971 -1.526667e-01\n1972  9.533333e-02\n1973  1.333333e-01\n1974 -1.266667e-01\n1975 -1.780000e-01\n1976  1.306667e-01\n1977  1.413333e-01\n1978 -2.246667e-01\n1979 -9.000000e-02\n1980  1.160000e-01\n1981 -1.466667e-02\n1982 -1.466667e-02\n1983  9.533333e-02\n1984 -2.580000e-01\n1985  1.553333e-01\n1986  1.886667e-01\n1987 -6.133333e-02\n1988 -6.666667e-03\n1989  2.200000e-02\n1990 -1.340000e-01\n1991 -1.666667e-02\n1992 -2.160000e-01\n1993  1.213333e-01\n1994  2.266667e-02\n1995  1.640000e-01\n1996  1.120000e-01\n1997 -2.000000e-03\n1998 -3.333333e-03\n1999 -1.233333e-01\n2000 -7.200000e-02\n2001  1.066667e-01\n2002  1.266667e-01\n2003 -1.766667e-01\n2004 -3.200000e-02\n2005 -2.560000e-01\n2006  3.400000e-02\n2007  2.666667e-02\n2008  1.626667e-01\n2009  1.240000e-01\n2010 -2.800000e-02\n2011  2.066667e-02\n2012  2.666667e-03\n2013  1.060000e-01\n2014  1.593333e-01\n2015 -1.920000e-01\n2016  1.733333e-01\n2017  1.726667e-01\n2018 -3.466667e-02\n2019 -7.333333e-02\n2020 -1.020000e-01\n2021 -1.200000e-02\n2022 -1.080000e-01\n2023  1.266667e-02\n2024  4.333333e-02\n2025 -1.940000e-01\n2026 -1.673333e-01\n2027 -7.200000e-02\n2028 -6.533333e-02\n2029  3.200000e-02\n2030  2.220610e-17\n2031  1.473333e-01\n2032  1.666667e-01\n2033  2.666667e-02\n2034 -1.293333e-01\n2035  1.766667e-01\n2036  1.700000e-01\n2037  4.466667e-02\n2038 -8.000000e-02\n2039 -2.533333e-01\n2040  1.366667e-01\n2041 -2.420000e-01\n2042  2.066667e-01\n2043 -8.000000e-02\n2044 -1.173333e-01\n2045  1.446667e-01\n2046 -3.733333e-02\n2047  7.733333e-02\n2048  1.360000e-01\n2049 -2.580000e-01\n2050 -1.913333e-01\n2051 -8.200000e-02\n2052  2.020000e-01\n2053  1.880000e-01\n2054 -4.133333e-02\n2055 -2.266667e-02\n2056 -3.600000e-02\n2057 -8.333333e-02\n2058  4.266667e-02\n2059 -1.693333e-01\n2060 -1.266667e-02\n2061  1.006667e-01\n2062 -2.066667e-02\n2063 -3.666667e-02\n2064 -2.400000e-02\n2065 -1.866667e-01\n2066 -1.353333e-01\n2067 -2.420000e-01\n2068 -3.266667e-02\n2069  4.066667e-02\n2070  1.886667e-01\n2071 -9.333333e-02\n2072  1.326667e-01\n2073 -1.280000e-01\n2074  6.933333e-02\n2075 -2.053333e-01\n2076 -6.333333e-02\n2077  1.113333e-01\n2078 -4.000000e-02\n2079  8.066667e-02\n2080 -2.866667e-02\n2081 -2.593333e-01\n2082  2.193333e-01\n2083  2.426667e-01\n2084 -1.473333e-01\n2085  1.940000e-01\n2086  1.573333e-01\n2087  9.933333e-02\n2088 -1.273333e-01\n2089 -8.933333e-02\n2090 -9.600000e-02\n2091 -1.246667e-01\n2092 -9.866667e-02\n2093 -3.200000e-02\n2094  9.533333e-02\n2095  1.146667e-01\n2096 -9.133333e-02\n2097  2.393333e-01\n2098  1.213333e-01\n2099 -2.420000e-01\n2100 -3.266667e-02\n2101 -7.333333e-02\n2102 -7.266667e-02\n2103 -1.406667e-01\n2104 -8.000000e-03\n2105  7.800000e-02\n2106  1.406667e-01\n2107 -4.666667e-03\n2108  7.466667e-02\n2109  1.800000e-02\n2110 -1.333333e-01\n2111 -4.400000e-02\n2112  1.233333e-01\n2113  1.340000e-01\n2114 -1.006667e-01\n2115  8.733333e-02\n2116  1.766667e-01\n2117  6.533333e-02\n2118 -1.666667e-02\n2119  1.800000e-02\n2120  1.133333e-02\n2121  7.733333e-02\n2122  1.100000e-01\n2123  1.840000e-01\n2124 -7.933333e-02\n2125 -1.540000e-01\n2126 -2.006667e-01\n2127 -1.760000e-01\n2128  1.540000e-01\n2129  1.860000e-01\n2130  1.620000e-01\n2131  2.400000e-02\n2132 -2.406667e-01\n2133 -1.813333e-01\n2134  1.080000e-01\n2135 -1.133333e-02\n2136 -4.266667e-02\n2137 -1.026667e-01\n2138 -3.133333e-02\n2139  2.800000e-02\n2140 -1.933333e-02\n2141  4.133333e-02\n2142  5.933333e-02\n2143  2.773333e-01\n2144  8.000000e-03\n2145  6.933333e-02\n2146  2.333333e-02\n2147  7.466667e-02\n2148  5.333333e-03\n2149 -4.933333e-02\n2150 -7.400000e-02\n2151 -6.000000e-02\n2152  1.253333e-01\n2153 -8.133333e-02\n2154  2.666667e-03\n2155 -2.866667e-02\n2156  2.553333e-01\n2157  3.040000e-01\n2158  4.866667e-02\n2159  1.506667e-01\n2160  1.600000e-02\n2161  8.066667e-02\n2162  9.866667e-02\n2163  6.600000e-02\n2164  1.266667e-01\n2165 -1.513333e-01\n2166  9.600000e-02\n2167  1.866667e-02\n2168  5.933333e-02\n2169  4.800000e-02\n2170  8.533333e-02\n2171 -8.666667e-03\n2172  2.246667e-01\n2173  8.733333e-02\n2174 -7.333333e-03\n2175  1.500000e-01\n2176  1.120000e-01\n2177  9.400000e-02\n2178 -2.206667e-01\n2179 -1.160000e-01\n2180 -1.733333e-02\n2181 -1.746667e-01\n2182 -2.800000e-02\n2183  2.666667e-03\n2184 -1.126667e-01\n2185 -4.600000e-02\n2186 -9.733333e-02\n2187  2.333333e-01\n2188 -1.880000e-01\n2189 -5.400000e-02\n2190  1.233333e-01\n2191 -5.666667e-02\n2192 -2.653333e-01\n2193 -7.666667e-02\n2194  9.733333e-02\n2195  2.406667e-01\n2196  1.040000e-01\n2197  2.200000e-01\n2198  1.133333e-01\n2199  7.733333e-02\n2200  1.046667e-01\n2201 -8.266667e-02\n2202  3.866667e-02\n2203 -6.466667e-02\n2204  1.073333e-01\n2205  1.360000e-01\n2206 -4.666667e-02\n2207 -1.580000e-01\n2208 -7.533333e-02\n2209  1.120000e-01\n2210 -1.853333e-01\n2211 -8.400000e-02\n2212 -1.000000e-02\n2213  1.466667e-01\n2214 -8.933333e-02\n2215  5.466667e-02\n2216 -7.866667e-02\n2217  1.646667e-01\n2218 -5.066667e-02\n2219 -1.560000e-01\n2220 -2.133333e-02\n2221 -1.746667e-01\n2222 -1.606667e-01\n2223 -6.400000e-02\n2224 -3.733333e-02\n2225 -1.206667e-01\n2226  3.266667e-02\n2227  7.666667e-02\n2228  1.153333e-01\n2229  9.533333e-02\n2230  1.700000e-01\n2231  1.620000e-01\n2232  1.200000e-01\n2233  2.053333e-01\n2234  1.546667e-01\n2235  2.306667e-01\n2236  1.173333e-01\n2237 -1.273333e-01\n2238  2.533333e-02\n2239  1.220000e-01\n2240  1.280000e-01\n2241 -4.266667e-02\n2242 -2.666667e-03\n2243  1.733333e-01\n2244  9.800000e-02\n2245 -8.600000e-02\n2246  1.680000e-01\n2247  6.466667e-02\n2248  2.266667e-02\n2249 -7.533333e-02\n2250  2.000000e-02\n2251  1.933333e-02\n2252  1.833333e-01\n2253 -6.733333e-02\n2254 -1.833333e-01\n2255 -1.353333e-01\n2256 -4.933333e-02\n2257  4.533333e-02\n2258 -1.826667e-01\n2259 -9.333333e-03\n2260  1.046667e-01\n2261 -6.666667e-02\n2262  3.400000e-02\n2263 -1.226667e-01\n2264  1.006667e-01\n2265 -2.093333e-01\n2266 -6.866667e-02\n2267  4.400000e-02\n2268 -1.026667e-01\n2269  1.906667e-01\n2270  2.453333e-01\n2271 -7.733333e-02\n2272  1.453333e-01\n2273 -6.333333e-02\n2274 -6.666667e-04\n2275 -1.933333e-01\n2276  1.166667e-01\n2277  8.600000e-02\n2278  6.866667e-02\n2279  1.060000e-01\n2280  8.666667e-02\n2281  3.266667e-02\n2282  1.153333e-01\n2283 -1.860000e-01\n2284 -1.353333e-01\n2285  9.333333e-02\n2286  1.100000e-01\n2287 -1.866667e-01\n2288  1.373333e-01\n2289  1.973333e-01\n2290 -1.286667e-01\n2291 -7.266667e-02\n2292 -6.666667e-03\n2293  2.320000e-01\n2294 -8.866667e-02\n2295  9.200000e-02\n2296 -1.160000e-01\n2297 -9.866667e-02\n2298 -7.266667e-02\n2299 -1.413333e-01\n2300 -6.000000e-02\n2301  1.593333e-01\n2302  1.173333e-01\n2303 -1.200000e-02\n2304 -7.733333e-02\n2305 -2.666667e-02\n2306 -3.800000e-02\n2307  9.333333e-03\n2308  2.733333e-02\n2309  1.380000e-01\n2310 -1.493333e-01\n2311  1.693333e-01\n2312  1.640000e-01\n2313 -1.033333e-01\n2314  2.466667e-02\n2315  2.466667e-02\n2316  1.420000e-01\n2317 -9.333333e-03\n2318 -1.446667e-01\n2319 -2.520000e-01\n2320  2.166667e-01\n2321  2.460000e-01\n2322  2.286667e-01\n2323 -2.600000e-02\n2324 -7.000000e-02\n2325 -3.866667e-02\n2326 -8.333333e-02\n2327  2.000000e-02\n2328 -1.666667e-02\n2329 -7.466667e-02\n2330 -9.666667e-02\n2331  2.000000e-03\n2332  2.413333e-01\n2333  5.400000e-02\n2334  1.440000e-01\n2335 -1.826667e-01\n2336  1.780000e-01\n2337 -1.813333e-01\n2338  7.000000e-02\n2339 -1.353333e-01\n2340 -9.400000e-02\n2341 -1.346667e-01\n2342  6.400000e-02\n2343 -6.266667e-02\n2344  7.933333e-02\n2345 -1.180000e-01\n2346  2.140000e-01\n2347 -2.173333e-01\n2348  2.333333e-02\n2349 -1.060000e-01\n2350 -4.000000e-02\n2351 -7.600000e-02\n2352  8.800000e-02\n2353  1.266667e-02\n2354  1.460000e-01\n2355  7.533333e-02\n2356  1.966667e-01\n2357 -2.000000e-03\n2358 -1.106667e-01\n2359 -1.066667e-02\n2360  8.400000e-02\n2361 -2.293333e-01\n2362 -3.866667e-02\n2363 -8.600000e-02\n2364  2.133333e-02\n2365 -1.600000e-01\n2366  2.800000e-02\n2367  1.060000e-01\n2368  5.000000e-02\n2369  1.266667e-02\n2370 -1.000000e-01\n2371  4.866667e-02\n2372 -6.800000e-02\n2373 -1.060000e-01\n2374  1.886667e-01\n2375  3.333333e-02\n2376  1.280000e-01\n2377  1.873333e-01\n2378  7.866667e-02\n2379  1.180000e-01\n2380  1.300000e-01\n2381 -9.066667e-02\n2382 -1.600000e-01\n2383  1.566667e-01\n2384  2.800000e-02\n2385 -1.433333e-01\n2386 -9.800000e-02\n2387  9.733333e-02\n2388  3.933333e-02\n2389  1.153333e-01\n2390  6.666667e-02\n2391 -2.000000e-01\n2392  1.220000e-01\n2393 -2.933333e-02\n2394 -1.533333e-01\n2395 -3.466667e-02\n2396 -2.200000e-02\n2397  2.400000e-02\n2398 -1.006667e-01\n2399 -6.600000e-02\n2400 -1.813333e-01\n2401 -9.600000e-02\n2402  8.333333e-02\n2403 -7.066667e-02\n2404 -1.626667e-01\n2405  1.493333e-01\n2406  1.266667e-02\n2407  1.513333e-01\n2408 -9.333333e-03\n2409 -4.800000e-02\n2410  6.400000e-02\n2411  1.340000e-01\n2412  5.866667e-02\n2413 -1.440000e-01\n2414  7.533333e-02\n2415  1.486667e-01\n2416  1.766667e-01\n2417  2.253333e-01\n2418 -9.733333e-02\n2419  2.666667e-03\n2420 -1.353333e-01\n2421  6.933333e-02\n2422 -9.200000e-02\n2423 -9.066667e-02\n2424 -1.066667e-01\n2425  1.286667e-01\n2426  1.666667e-01\n2427 -1.626667e-01\n2428 -1.366667e-01\n2429 -1.086667e-01\n2430  6.133333e-02\n2431 -6.000000e-03\n2432  1.166667e-01\n2433 -1.833333e-01\n2434  1.133333e-02\n2435  1.506667e-01\n2436  5.533333e-02\n2437 -1.053333e-01\n2438 -8.400000e-02\n2439  1.366667e-01\n2440  5.133333e-02\n2441  5.933333e-02\n2442 -1.006667e-01\n2443 -5.666667e-02\n2444 -1.360000e-01\n2445  1.880000e-01\n2446  3.533333e-02\n2447 -4.666667e-02\n2448 -1.633333e-01\n2449  1.180000e-01\n2450 -3.266667e-02\n2451 -2.266667e-02\n2452  7.066667e-02\n2453 -9.333333e-02\n2454 -4.000000e-02\n2455  1.606667e-01\n2456 -3.600000e-02\n2457 -9.333333e-02\n2458  3.200000e-02\n2459  6.666667e-02\n2460  1.500000e-01\n2461  1.100000e-01\n2462 -5.266667e-02\n2463 -7.466667e-02\n2464 -2.333333e-02\n2465  1.880000e-01\n2466 -1.366667e-01\n2467  5.066667e-02\n2468  1.493333e-01\n2469 -1.326667e-01\n2470 -1.126667e-01\n2471 -9.466667e-02\n2472  1.306667e-01\n2473  3.000000e-02\n2474  1.453333e-01\n2475 -1.073333e-01\n2476  1.666667e-01\n2477 -6.066667e-02\n2478  7.600000e-02\n2479  9.466667e-02\n2480  3.800000e-02\n2481  6.533333e-02\n2482  2.400000e-02\n2483 -2.006667e-01\n2484  7.666667e-02\n2485  3.866667e-02\n2486  1.133333e-02\n2487  1.873333e-01\n2488  2.600000e-02\n2489 -5.933333e-02\n2490  1.740000e-01\n2491  1.173333e-01\n2492  2.346667e-01\n2493 -8.600000e-02\n2494 -1.033333e-01\n2495 -9.800000e-02\n2496  1.046667e-01\n2497 -1.126667e-01\n2498  3.400000e-02\n2499 -9.733333e-02\n2500 -1.600000e-02\n2501  3.600000e-02\n2502 -1.306667e-01\n2503  5.866667e-02\n2504 -6.200000e-02\n2505 -1.466667e-01\n2506 -1.946667e-01\n2507  3.266667e-02\n2508 -2.200000e-01\n2509  2.133333e-01\n2510 -6.333333e-02\n2511  9.866667e-02\n2512  1.573333e-01\n2513  2.800000e-02\n2514 -2.333333e-02\n2515 -8.466667e-02\n2516 -1.313333e-01\n2517  4.000000e-03\n2518 -5.733333e-02\n2519  7.266667e-02\n2520 -2.400000e-02\n2521 -1.333333e-02\n2522 -1.466667e-02\n2523  1.153333e-01\n2524  1.873333e-01\n2525 -8.533333e-02\n2526 -6.333333e-02\n2527 -1.040000e-01\n2528 -2.400000e-02\n2529 -9.866667e-02\n2530 -1.066667e-02\n2531 -1.033333e-01\n2532 -1.533333e-01\n2533  1.333333e-02\n2534  9.600000e-02\n2535  3.733333e-02\n2536 -7.200000e-02\n2537 -4.066667e-02\n2538  1.946667e-01\n2539 -1.840000e-01\n2540 -9.933333e-02\n2541 -6.400000e-02\n2542  1.566667e-01\n2543 -3.733333e-02\n2544  1.586667e-01\n2545  4.066667e-02\n2546  1.306667e-01\n2547  9.333333e-02\n2548 -3.733333e-02\n2549  1.740000e-01\n2550 -8.866667e-02\n2551 -1.200000e-01\n2552 -6.133333e-02\n2553 -2.260000e-01\n2554 -6.666667e-02\n2555  6.133333e-02\n2556 -1.753333e-01\n2557 -1.000000e-02\n2558 -1.600000e-02\n2559 -4.666667e-02\n2560 -6.133333e-02\n2561  1.200000e-02\n2562 -1.540000e-01\n2563 -1.233333e-01\n2564  2.733333e-02\n2565 -1.073333e-01\n2566 -1.546667e-01\n2567  6.666667e-04\n2568  6.466667e-02\n2569  2.026667e-01\n2570 -1.346667e-01\n2571  1.180000e-01\n2572 -3.466667e-02\n2573  8.533333e-02\n2574 -1.480000e-01\n2575 -1.426667e-01\n2576 -2.366667e-01\n2577  1.846667e-01\n2578  2.613333e-01\n2579 -2.200000e-02\n2580 -3.933333e-02\n2581 -2.313333e-01\n2582  1.093333e-01\n2583  7.200000e-02\n2584  4.600000e-02\n2585 -1.193333e-01\n2586  1.660000e-01\n2587  9.933333e-02\n2588  1.226667e-01\n2589 -1.953333e-01\n2590 -1.180000e-01\n2591  9.266667e-02\n2592  1.213333e-01\n2593  2.280000e-01\n2594 -4.800000e-02\n2595 -8.200000e-02\n2596  1.586667e-01\n2597  2.540000e-01\n2598  7.933333e-02\n2599  3.666667e-02\n2600  1.160000e-01\n2601 -1.940000e-01\n2602  1.953333e-01\n2603 -1.800000e-01\n2604  1.026667e-01\n2605  8.733333e-02\n2606 -1.420000e-01\n2607 -1.460000e-01\n2608  1.573333e-01\n2609 -1.580000e-01\n2610  3.200000e-02\n2611 -1.720000e-01\n2612  1.213333e-01\n2613  1.173333e-01\n2614 -5.733333e-02\n2615 -2.000000e-03\n2616 -6.866667e-02\n2617  9.200000e-02\n2618 -7.133333e-02\n2619  1.326667e-01\n2620  4.866667e-02\n2621  9.333333e-03\n2622 -3.000000e-02\n2623 -6.666667e-02\n2624 -1.846667e-01\n2625  1.993333e-01\n2626  3.200000e-02\n2627 -1.486667e-01\n2628  4.866667e-02\n2629 -1.913333e-01\n2630  1.133333e-01\n2631  2.413333e-01\n2632  1.333333e-03\n2633  5.133333e-02\n2634 -4.600000e-02\n2635 -1.700000e-01\n2636 -2.466667e-02\n2637  8.733333e-02\n2638 -6.333333e-02\n2639  1.353333e-01\n2640 -8.000000e-03\n2641 -2.153333e-01\n2642  1.046667e-01\n2643  1.033333e-01\n2644  1.400000e-02\n2645 -1.186667e-01\n2646 -1.806667e-01\n2647 -3.133333e-02\n2648 -1.380000e-01\n2649 -7.266667e-02\n2650  1.906667e-01\n2651 -3.333333e-03\n2652  8.666667e-03\n2653  2.186667e-01\n2654  2.400000e-02\n2655 -8.466667e-02\n2656 -1.200000e-01\n2657  5.600000e-02\n2658  8.666667e-03\n2659 -1.780000e-01\n2660  8.466667e-02\n2661 -1.160000e-01\n2662  6.400000e-02\n2663 -5.533333e-02\n2664  1.033333e-01\n2665  2.433333e-01\n2666  6.333333e-02\n2667 -1.600000e-02\n2668  1.266667e-02\n2669 -9.800000e-02\n2670 -1.146667e-01\n2671  1.266667e-01\n2672  3.333333e-02\n2673  3.066667e-02\n2674  3.466667e-02\n2675  4.200000e-02\n2676  8.000000e-03\n2677  8.333333e-02\n2678  1.606667e-01\n2679  2.080000e-01\n2680 -1.380000e-01\n2681  2.533333e-02\n2682 -2.266667e-02\n2683 -1.846667e-01\n2684 -6.466667e-02\n2685 -8.666667e-03\n2686  6.666667e-02\n2687  5.000000e-02\n2688  1.980000e-01\n2689  1.593333e-01\n2690  1.880000e-01\n2691 -1.646667e-01\n2692  1.213333e-01\n2693 -4.000000e-03\n2694  1.046667e-01\n2695  6.133333e-02\n2696  2.266667e-01\n2697 -1.086667e-01\n2698  1.373333e-01\n2699 -1.126667e-01\n2700  1.593333e-01\n2701  1.753333e-01\n2702  1.866667e-02\n2703  1.920000e-01\n2704 -1.200000e-02\n2705 -8.666667e-02\n2706  2.466667e-02\n2707 -2.120000e-01\n2708 -1.186667e-01\n2709  3.733333e-02\n2710 -9.666667e-02\n2711  1.040000e-01\n2712 -2.366667e-01\n2713 -1.120000e-01\n2714  9.666667e-02\n2715  1.373333e-01\n2716 -1.533333e-02\n2717  1.260000e-01\n2718 -5.466667e-02\n2719  1.120000e-01\n2720  1.893333e-01\n2721 -1.606667e-01\n2722 -9.666667e-02\n2723  8.400000e-02\n2724  2.666667e-02\n2725 -5.800000e-02\n2726  1.746667e-01\n2727  8.000000e-02\n2728  1.773333e-01\n2729  2.373333e-01\n2730  9.866667e-02\n2731 -4.000000e-02\n2732 -9.333333e-02\n2733 -1.113333e-01\n2734  3.866667e-02\n2735 -8.400000e-02\n2736 -5.666667e-02\n2737  2.466667e-02\n2738 -1.513333e-01\n2739 -1.660000e-01\n2740 -2.066667e-02\n2741 -3.400000e-02\n2742  9.333333e-03\n2743  1.246667e-01\n2744 -1.000000e-02\n2745  1.540000e-01\n2746  1.913333e-01\n2747 -1.080000e-01\n2748 -1.180000e-01\n2749  2.000000e-03\n2750 -8.066667e-02\n2751  1.786667e-01\n2752 -1.160000e-01\n2753  6.666667e-03\n2754 -1.526667e-01\n2755 -1.246667e-01\n2756 -1.080000e-01\n2757 -8.133333e-02\n2758 -2.320000e-01\n2759  2.093333e-01\n2760 -1.906667e-01\n2761 -1.060000e-01\n2762 -1.780000e-01\n2763 -6.666667e-03\n2764  4.200000e-02\n2765  1.806667e-01\n2766 -6.400000e-02\n2767  5.200000e-02\n2768 -1.793333e-01\n2769  2.600000e-02\n2770 -9.000000e-02\n2771 -1.146667e-01\n2772 -2.066667e-02\n2773 -6.666667e-02\n2774  8.266667e-02\n2775 -3.600000e-02\n2776 -8.200000e-02\n2777 -1.473333e-01\n2778  4.000000e-03\n2779  1.566667e-01\n2780 -1.933333e-01\n2781 -9.200000e-02\n2782 -9.200000e-02\n2783  1.093333e-01\n2784 -1.186667e-01\n2785  1.066667e-02\n2786  1.666667e-01\n2787 -8.133333e-02\n2788  1.593333e-01\n2789 -1.046667e-01\n2790  7.066667e-02\n2791 -7.733333e-02\n2792 -1.933333e-02\n2793  4.666667e-03\n2794  1.620000e-01\n2795  5.000000e-02\n2796  3.533333e-02\n2797 -1.486667e-01\n2798 -6.866667e-02\n2799 -4.266667e-02\n2800 -1.086667e-01\n2801  2.026667e-01\n2802 -1.473333e-01\n2803 -1.846667e-01\n2804  1.540000e-01\n2805 -1.140000e-01\n2806  1.733333e-02\n2807  1.460000e-01\n2808  1.566667e-01\n2809 -1.800000e-02\n2810 -1.293333e-01\n2811 -9.933333e-02\n2812 -1.173333e-01\n2813 -1.526667e-01\n2814 -6.000000e-03\n2815 -6.666667e-03\n2816  2.240000e-01\n2817 -3.066667e-02\n2818 -1.746667e-01\n2819 -8.733333e-02\n2820 -1.086667e-01\n2821 -1.140000e-01\n2822  1.780000e-01\n2823 -2.733333e-02\n2824 -2.140000e-01\n2825 -2.000000e-03\n2826  1.653333e-01\n2827  1.413333e-01\n2828 -8.733333e-02\n2829  1.093333e-01\n2830  7.533333e-02\n2831 -9.066667e-02\n2832 -1.140000e-01\n2833  7.133333e-02\n2834  4.800000e-02\n2835 -7.600000e-02\n2836  6.000000e-03\n2837  7.066667e-02\n2838  1.660000e-01\n2839 -4.600000e-02\n2840  1.320000e-01\n2841 -8.666667e-03\n2842  1.553333e-01\n2843  1.546667e-01\n2844 -1.066667e-02\n2845  7.333333e-02\n2846  5.333333e-02\n2847  1.486667e-01\n2848 -8.200000e-02\n2849 -3.333333e-03\n2850  1.460000e-01\n2851 -2.260000e-01\n2852 -3.133333e-02\n2853  1.973333e-01\n2854  3.266667e-02\n2855 -2.293333e-01\n2856  2.146667e-01\n2857 -1.453333e-01\n2858  9.133333e-02\n2859 -1.780000e-01\n2860 -9.066667e-02\n2861 -1.940000e-01\n2862  2.666667e-03\n2863 -1.473333e-01\n2864  1.186667e-01\n2865  5.333333e-02\n2866  2.733333e-02\n2867  5.066667e-02\n2868 -2.620000e-01\n2869  1.520000e-01\n2870  9.066667e-02\n2871  5.600000e-02\n2872 -3.466667e-02\n2873 -6.066667e-02\n2874 -5.200000e-02\n2875 -9.066667e-02\n2876 -7.400000e-02\n2877  9.800000e-02\n2878  1.513333e-01\n2879 -1.740000e-01\n2880  5.200000e-02\n2881  1.313333e-01\n2882  1.733333e-02\n2883  1.800000e-02\n2884 -4.000000e-03\n2885 -7.333333e-02\n2886  1.520000e-01\n2887 -2.466667e-02\n2888 -1.526667e-01\n2889 -4.266667e-02\n2890 -1.073333e-01\n2891  9.333333e-02\n2892  1.020000e-01\n2893  1.826667e-01\n2894 -5.000000e-02\n2895  8.066667e-02\n2896 -6.066667e-02\n2897  1.366667e-01\n2898 -2.066667e-01\n2899 -4.000000e-02\n2900  7.133333e-02\n2901 -3.533333e-02\n2902  9.666667e-02\n2903 -1.086667e-01\n2904 -7.000000e-02\n2905 -7.200000e-02\n2906  3.600000e-02\n2907  1.226667e-01\n2908  2.000000e-02\n2909  2.400000e-02\n2910 -1.100000e-01\n2911  1.520000e-01\n2912 -1.226667e-01\n2913 -2.173333e-01\n2914 -1.220000e-01\n2915 -1.573333e-01\n2916 -9.533333e-02\n2917  1.266667e-02\n2918  1.740000e-01\n2919 -8.200000e-02\n2920 -1.140000e-01\n2921 -2.200000e-02\n2922  9.066667e-02\n2923 -2.513333e-01\n2924 -3.800000e-02\n2925  2.600000e-02\n2926 -2.866667e-02\n2927  1.433333e-01\n2928  1.560000e-01\n2929  2.600000e-02\n2930 -1.006667e-01\n2931 -1.333333e-03\n2932  6.933333e-02\n2933  1.533333e-02\n2934 -4.666667e-02\n2935  2.266667e-02\n2936 -2.440000e-01\n2937 -1.300000e-01\n2938 -1.266667e-01\n2939 -8.066667e-02\n2940  1.053333e-01\n2941 -3.400000e-02\n2942  7.400000e-02\n2943  4.800000e-02\n2944 -5.933333e-02\n2945 -6.533333e-02\n2946 -8.666667e-02\n2947  6.000000e-02\n2948  5.200000e-02\n2949 -9.600000e-02\n2950 -5.466667e-02\n2951 -1.533333e-01\n2952 -5.000000e-02\n2953 -8.000000e-02\n2954  6.266667e-02\n2955 -8.866667e-02\n2956 -1.746667e-01\n2957  8.266667e-02\n2958  8.200000e-02\n2959 -1.273333e-01\n2960 -6.933333e-02\n2961  1.726667e-01\n2962 -3.200000e-02\n2963 -1.800000e-01\n2964  2.013333e-01\n2965  1.040000e-01\n2966 -5.333333e-02\n2967  4.666667e-02\n2968  1.653333e-01\n2969  3.066667e-02\n2970 -1.153333e-01\n2971 -1.420000e-01\n2972 -1.873333e-01\n2973 -4.200000e-02\n2974  1.546667e-01\n2975  9.200000e-02\n2976  5.933333e-02\n2977  1.526667e-01\n2978 -2.866667e-02\n2979  1.866667e-02\n2980  1.586667e-01\n2981  1.393333e-01\n2982 -7.000000e-02\n2983 -1.546667e-01\n2984  1.000000e-02\n2985 -6.666667e-03\n2986 -5.333333e-03\n2987  1.133333e-02\n2988 -1.120000e-01\n2989 -1.400000e-02\n2990  5.733333e-02\n2991  1.433333e-01\n2992  1.000000e-02\n2993 -3.866667e-02\n2994 -1.333333e-01\n2995 -1.466667e-01\n2996  1.800000e-02\n2997 -3.333333e-03\n2998 -1.506667e-01\n2999  4.200000e-02\n3000  4.733333e-02\n3001 -1.020000e-01\n3002  2.500000e-01\n3003 -6.200000e-02\n3004 -4.066667e-02\n3005 -8.600000e-02\n3006 -1.333333e-01\n3007 -7.666667e-02\n3008  5.733333e-02\n3009 -1.073333e-01\n3010  7.333333e-03\n3011 -1.526667e-01\n3012 -7.733333e-02\n3013  1.040000e-01\n3014  1.166667e-01\n3015  1.526667e-01\n3016  1.773333e-01\n3017  4.666667e-03\n3018  1.040000e-01\n3019  1.700000e-01\n3020 -1.546667e-01\n3021  1.680000e-01\n3022 -1.933333e-02\n3023 -7.800000e-02\n3024 -6.600000e-02\n3025  1.160000e-01\n3026 -3.866667e-02\n3027  3.066667e-02\n3028  9.266667e-02\n3029 -6.333333e-02\n3030 -1.166667e-01\n3031  2.466667e-02\n3032  7.066667e-02\n3033 -5.933333e-02\n3034 -1.613333e-01\n3035  1.673333e-01\n3036 -1.426667e-01\n3037  1.453333e-01\n3038  1.100000e-01\n3039 -1.820000e-01\n3040 -7.800000e-02\n3041 -1.466667e-01\n3042  1.346667e-01\n3043 -1.213333e-01\n3044  1.066667e-02\n3045 -1.800000e-02\n3046 -1.000000e-01\n3047 -1.740000e-01\n3048 -1.666667e-02\n3049 -1.200000e-02\n3050 -1.533333e-02\n3051  2.413333e-01\n3052  1.393333e-01\n3053  2.666667e-02\n3054  6.466667e-02\n3055  1.546667e-01\n3056 -8.466667e-02\n3057 -1.666667e-02\n3058  5.933333e-02\n3059  1.080000e-01\n3060 -6.066667e-02\n3061 -1.566667e-01\n3062 -3.000000e-02\n3063 -1.300000e-01\n3064  1.066667e-01\n3065 -2.606667e-01\n3066 -1.340000e-01\n3067 -4.466667e-02\n3068 -2.000000e-03\n3069  5.533333e-02\n3070 -1.840000e-01\n3071  1.733333e-01\n3072  3.733333e-02\n3073 -5.466667e-02\n3074 -1.526667e-01\n3075 -3.600000e-02\n3076 -1.720000e-01\n3077  2.666667e-02\n3078 -1.286667e-01\n3079 -1.500000e-01\n3080  1.733333e-02\n3081 -3.066667e-02\n3082 -3.333333e-02\n3083  1.320000e-01\n3084 -2.293333e-01\n3085 -1.426667e-01\n3086 -2.400000e-02\n3087 -1.466667e-02\n3088 -1.466667e-01\n3089 -7.466667e-02\n3090  1.900000e-01\n3091 -9.800000e-02\n3092  2.000000e-02\n3093  1.620000e-01\n3094  1.200000e-02\n3095  8.866667e-02\n3096 -1.106667e-01\n3097 -9.200000e-02\n3098 -9.466667e-02\n3099 -3.333333e-02\n3100  2.073333e-01\n3101  2.466667e-02\n3102 -1.913333e-01\n3103 -7.000000e-02\n3104  3.133333e-02\n3105  1.433333e-01\n3106  1.626667e-01\n3107  1.026667e-01\n3108 -1.153333e-01\n3109  9.933333e-02\n3110 -1.060000e-01\n3111  1.333333e-02\n3112  1.106667e-01\n3113  1.666667e-02\n3114  8.666667e-03\n3115 -2.000000e-01\n3116  1.566667e-01\n3117 -6.733333e-02\n3118  1.573333e-01\n3119 -1.793333e-01\n3120  2.113333e-01\n3121 -3.133333e-02\n3122  1.720000e-01\n3123 -2.013333e-01\n3124 -4.200000e-02\n3125 -2.266667e-02\n3126 -4.066667e-02\n3127 -1.893333e-01\n3128  1.093333e-01\n3129 -1.493333e-01\n3130 -2.360000e-01\n3131  2.800000e-02\n3132  1.333333e-02\n3133  1.613333e-01\n3134  2.200000e-01\n3135  3.066667e-02\n3136  4.400000e-02\n3137  1.333333e-03\n3138 -1.013333e-01\n3139 -5.733333e-02\n3140 -1.713333e-01\n3141 -1.520000e-01\n3142  1.066667e-02\n3143  2.160000e-01\n3144  3.733333e-02\n3145  1.126667e-01\n3146 -1.820000e-01\n3147  1.493333e-01\n3148 -9.666667e-02\n3149 -1.820000e-01\n3150  8.466667e-02\n3151  1.173333e-01\n3152  9.133333e-02\n3153  4.066667e-02\n3154  2.666667e-03\n3155  5.600000e-02\n3156 -1.853333e-01\n3157  1.020000e-01\n3158  1.200000e-02\n3159  1.666667e-02\n3160  1.886667e-01\n3161  1.493333e-01\n3162 -6.800000e-02\n3163  8.200000e-02\n3164 -1.033333e-01\n3165  5.333333e-03\n3166  7.200000e-02\n3167 -2.266667e-02\n3168  1.353333e-01\n3169 -8.666667e-03\n3170 -1.906667e-01\n3171  1.986667e-01\n3172 -7.933333e-02\n3173  8.866667e-02\n3174  2.600000e-02\n3175  4.333333e-02\n3176  5.666667e-02\n3177  2.093333e-01\n3178  2.293333e-01\n3179  2.666667e-03\n3180  8.400000e-02\n3181  4.133333e-02\n3182 -1.306667e-01\n3183 -1.553333e-01\n3184 -8.466667e-02\n3185  1.393333e-01\n3186  1.133333e-02\n3187 -1.860000e-01\n3188  1.800000e-01\n3189  2.240000e-01\n3190  1.666667e-01\n3191 -2.266667e-01\n3192 -1.253333e-01\n3193 -6.466667e-02\n3194  3.333333e-03\n3195  1.200000e-01\n3196 -2.313333e-01\n3197 -2.020000e-01\n3198 -8.266667e-02\n3199  1.553333e-01\n3200  2.400000e-02\n3201 -2.526667e-01\n3202  9.533333e-02\n3203  1.606667e-01\n3204 -1.433333e-01\n3205  3.133333e-02\n3206 -5.266667e-02\n3207 -6.866667e-02\n3208  2.066667e-02\n3209  9.866667e-02\n3210 -9.733333e-02\n3211  4.066667e-02\n3212  1.760000e-01\n3213  1.000000e-01\n3214 -3.533333e-02\n3215  9.000000e-02\n3216 -2.933333e-02\n3217 -1.126667e-01\n3218 -3.800000e-02\n3219 -1.406667e-01\n3220  4.666667e-03\n3221  1.060000e-01\n3222 -2.240000e-01\n3223 -1.753333e-01\n3224  4.333333e-02\n3225  1.353333e-01\n3226 -5.600000e-02\n3227 -1.520000e-01\n3228  2.273333e-01\n3229  4.000000e-02\n3230 -1.273333e-01\n3231  3.200000e-02\n3232  2.293333e-01\n3233 -1.013333e-01\n3234 -4.066667e-02\n3235 -1.933333e-02\n3236 -6.400000e-02\n3237 -1.613333e-01\n3238  1.086667e-01\n3239 -2.033333e-01\n3240 -3.333333e-03\n3241 -3.266667e-02\n3242 -3.533333e-02\n3243 -1.193333e-01\n3244  1.753333e-01\n3245  2.220000e-01\n3246  3.800000e-02\n3247  1.373333e-01\n3248  7.733333e-02\n3249 -1.333333e-01\n3250 -1.733333e-02\n3251 -4.933333e-02\n3252  1.220000e-01\n3253  2.133333e-02\n3254 -5.333333e-03\n3255  1.693333e-01\n3256  4.800000e-02\n3257  5.600000e-02\n3258 -1.793333e-01\n3259 -3.933333e-02\n3260  1.500000e-01\n3261  1.533333e-02\n3262  1.673333e-01\n3263  1.866667e-02\n3264  6.666667e-04\n3265  9.600000e-02\n3266  2.400000e-02\n3267 -3.333333e-03\n3268  1.086667e-01\n3269  7.066667e-02\n3270  2.933333e-02\n3271  7.666667e-02\n3272 -1.546667e-01\n3273 -2.240000e-01\n3274 -4.266667e-02\n3275  2.200000e-02\n3276 -6.866667e-02\n3277 -4.733333e-02\n3278 -2.466667e-02\n3279  1.733333e-02\n3280  7.400000e-02\n3281  1.546667e-01\n3282 -5.600000e-02\n3283 -9.466667e-02\n3284  1.600000e-02\n3285  1.066667e-01\n3286 -8.000000e-02\n3287 -1.500000e-01\n3288  6.800000e-02\n3289 -1.800000e-02\n3290 -6.266667e-02\n3291 -1.940000e-01\n3292  1.326667e-01\n3293 -5.400000e-02\n3294  9.266667e-02\n3295 -2.326667e-01\n3296 -1.180000e-01\n3297 -3.666667e-02\n3298 -7.133333e-02\n3299  1.253333e-01\n3300 -1.533333e-02\n3301 -2.800000e-02\n3302 -4.200000e-02\n3303  2.933333e-02\n3304 -7.400000e-02\n3305 -1.506667e-01\n3306 -1.540000e-01\n3307  3.400000e-02\n3308  1.713333e-01\n3309 -1.486667e-01\n3310  3.533333e-02\n3311 -2.133333e-02\n3312 -1.040000e-01\n3313  3.866667e-02\n3314 -1.466667e-01\n3315 -1.260000e-01\n3316 -4.200000e-02\n3317 -1.580000e-01\n3318  2.306667e-01\n3319  5.000000e-02\n3320 -3.866667e-02\n3321 -5.866667e-02\n3322 -1.240000e-01\n3323  2.600000e-02\n3324 -7.333333e-02\n3325 -1.753333e-01\n3326  5.400000e-02\n3327  3.133333e-02\n3328 -7.066667e-02\n3329  1.893333e-01\n3330 -2.866667e-02\n3331  1.360000e-01\n3332  8.200000e-02\n3333 -1.220000e-01\n3334  8.866667e-02\n3335 -2.026667e-01\n3336 -2.466667e-02\n3337 -1.313333e-01\n3338  1.313333e-01\n3339 -1.133333e-02\n3340 -9.933333e-02\n3341  8.066667e-02\n3342  6.333333e-02\n3343  1.333333e-03\n3344  2.220610e-17\n3345 -1.060000e-01\n3346  1.666667e-02\n3347 -8.466667e-02\n3348 -1.400000e-02\n3349 -1.866667e-02\n3350  5.466667e-02\n3351  7.066667e-02\n3352 -3.266667e-02\n3353 -1.146667e-01\n3354 -2.340000e-01\n3355  8.000000e-03\n3356 -3.600000e-02\n3357  1.193333e-01\n3358 -1.266667e-02\n3359 -6.000000e-02\n3360  1.133333e-02\n3361 -2.666667e-03\n3362 -8.000000e-02\n3363  5.733333e-02\n3364  2.233333e-01\n3365 -1.280000e-01\n3366  1.860000e-01\n3367  5.333333e-03\n3368  2.093333e-01\n3369  4.133333e-02\n3370  1.686667e-01\n3371  8.400000e-02\n3372 -1.386667e-01\n3373 -1.660000e-01\n3374 -4.533333e-02\n3375 -8.600000e-02\n3376 -1.306667e-01\n3377  1.906667e-01\n3378 -5.333333e-03\n3379 -5.933333e-02\n3380 -1.240000e-01\n3381 -3.000000e-02\n3382  2.033333e-01\n3383 -5.179691e-17\n3384 -1.520000e-01\n3385  7.800000e-02\n3386  1.033333e-01\n3387  4.533333e-02\n3388 -1.293333e-01\n3389 -3.733333e-02\n3390 -5.933333e-02\n3391  8.000000e-03\n3392 -1.353333e-01\n3393  2.133333e-02\n3394  1.426667e-01\n3395  9.066667e-02\n3396  2.866667e-02\n3397  1.166667e-01\n3398 -1.973333e-01\n3399  1.026667e-01\n3400  8.666667e-02\n3401  2.153333e-01\n3402  1.586667e-01\n3403  1.073333e-01\n3404 -4.600000e-02\n3405 -9.066667e-02\n3406  9.333333e-02\n3407  6.666667e-04\n3408 -9.000000e-02\n3409  1.066667e-02\n3410 -1.113333e-01\n3411 -1.300000e-01\n3412  5.200000e-02\n3413  2.333333e-02\n3414 -1.846667e-01\n3415  2.086667e-01\n3416 -1.506667e-01\n3417  2.600000e-02\n3418  1.146667e-01\n3419 -1.500000e-01\n3420  1.266667e-02\n3421  1.266667e-02\n3422 -5.733333e-02\n3423 -3.066667e-02\n3424  2.466667e-02\n3425 -3.200000e-02\n3426  1.266667e-02\n3427 -5.466667e-02\n3428  2.020000e-01\n3429  1.333333e-03\n3430 -1.440000e-01\n3431 -2.733333e-01\n3432  1.813333e-01\n3433 -8.133333e-02\n3434  1.366667e-01\n3435 -9.666667e-02\n3436 -9.200000e-02\n3437 -1.380000e-01\n3438 -1.213333e-01\n3439  1.086667e-01\n3440 -1.966667e-01\n3441 -1.760000e-01\n3442 -1.080000e-01\n3443 -2.340000e-01\n3444  1.500000e-01\n3445  7.333333e-02\n3446  7.866667e-02\n3447 -5.800000e-02\n3448 -1.800000e-02\n3449  3.466667e-02\n3450 -3.466667e-02\n3451  8.200000e-02\n3452  1.466667e-01\n3453  3.533333e-02\n3454  1.073333e-01\n3455 -9.600000e-02\n3456  1.466667e-01\n3457 -1.326667e-01\n3458 -6.666667e-02\n3459 -1.766667e-01\n3460  2.600000e-02\n3461  7.133333e-02\n3462 -2.506667e-01\n3463  2.140000e-01\n3464 -2.000000e-02\n3465  2.266667e-02\n3466  1.160000e-01\n3467  1.893333e-01\n3468 -8.133333e-02\n3469 -1.346667e-01\n3470  1.226667e-01\n3471  6.666667e-02\n3472 -2.400000e-02\n3473 -2.460000e-01\n3474 -2.333333e-02\n3475 -2.286667e-01\n3476  3.933333e-02\n3477  5.066667e-02\n3478 -2.666667e-03\n3479  3.800000e-02\n3480 -8.866667e-02\n3481 -2.220000e-01\n3482  1.540000e-01\n3483  7.466667e-02\n3484 -1.333333e-03\n3485  6.200000e-02\n3486 -4.533333e-02\n3487  7.333333e-02\n3488  9.733333e-02\n3489 -8.266667e-02\n3490  7.066667e-02\n3491 -6.066667e-02\n3492  1.066667e-02\n3493  1.813333e-01\n3494  7.333333e-03\n3495  1.400000e-02\n3496  1.253333e-01\n3497 -1.700000e-01\n3498 -6.200000e-02\n3499  1.273333e-01\n3500  1.706667e-01\n3501  1.133333e-01\n3502 -1.073333e-01\n3503 -2.400000e-02\n3504  1.940000e-01\n3505 -3.000000e-02\n3506  2.353333e-01\n3507  6.000000e-03\n3508 -1.473333e-01\n3509  2.333333e-02\n3510  7.533333e-02\n3511  1.066667e-02\n3512  5.600000e-02\n3513  9.466667e-02\n3514 -8.000000e-02\n3515 -7.533333e-02\n3516 -1.133333e-02\n3517  7.666667e-02\n3518 -1.533333e-02\n3519  1.213333e-01\n3520 -9.066667e-02\n3521  1.313333e-01\n3522 -7.400000e-02\n3523  1.200000e-01\n3524  1.106667e-01\n3525 -2.253333e-01\n3526 -1.473333e-01\n3527 -1.153333e-01\n3528 -6.933333e-02\n3529 -1.633333e-01\n3530  1.193333e-01\n3531  3.699405e-17\n3532  2.113333e-01\n3533 -1.553333e-01\n3534  1.466667e-02\n3535  9.933333e-02\n3536 -2.300000e-01\n3537  1.880000e-01\n3538 -2.173333e-01\n3539  8.333333e-02\n3540 -6.533333e-02\n3541  5.933333e-02\n3542  1.433333e-01\n3543  2.680000e-01\n3544 -6.533333e-02\n3545  8.533333e-02\n3546  1.466667e-02\n3547 -5.333333e-02\n3548 -2.266667e-01\n3549  2.866667e-02\n3550 -7.666667e-02\n3551  1.753333e-01\n3552 -3.400000e-02\n3553 -2.446667e-01\n3554 -6.466667e-02\n3555  1.266667e-02\n3556  4.000000e-03\n3557 -2.066667e-02\n3558  9.800000e-02\n3559  2.040000e-01\n3560 -7.600000e-02\n3561  5.733333e-02\n3562  1.400000e-02\n3563  6.733333e-02\n3564 -5.066667e-02\n3565 -5.400000e-02\n3566 -1.246667e-01\n3567 -4.866667e-02\n3568  1.693333e-01\n3569  4.866667e-02\n3570  1.040000e-01\n3571 -8.533333e-02\n3572 -1.160000e-01\n3573  1.386667e-01\n3574  2.313333e-01\n3575  1.300000e-01\n3576  1.140000e-01\n3577  7.866667e-02\n3578 -2.500000e-01\n3579  1.600000e-01\n3580  1.520000e-01\n3581  2.666667e-02\n3582  4.266667e-02\n3583 -4.533333e-02\n3584  2.613333e-01\n3585  8.400000e-02\n3586  4.800000e-02\n3587 -1.386667e-01\n3588 -9.866667e-02\n3589 -1.000000e-02\n3590 -2.186667e-01\n3591  4.533333e-02\n3592  1.326667e-01\n3593  1.526667e-01\n3594  1.226667e-01\n3595  1.673333e-01\n3596  1.393333e-01\n3597 -2.420000e-01\n3598 -1.233333e-01\n3599 -5.400000e-02\n3600 -1.833333e-01\n3601 -2.166667e-01\n3602 -1.806667e-01\n3603  1.153333e-01\n3604  1.906667e-01\n3605 -1.980000e-01\n3606  2.386667e-01\n3607 -1.333333e-03\n3608 -1.046667e-01\n3609 -4.466667e-02\n3610 -1.400000e-01\n3611  2.266667e-02\n3612  1.320000e-01\n3613 -1.693333e-01\n3614  1.440000e-01\n3615  3.866667e-02\n3616  3.933333e-02\n3617 -1.440000e-01\n3618  1.113333e-01\n3619 -2.000000e-02\n3620 -1.606667e-01\n3621  5.133333e-02\n3622 -1.320000e-01\n3623  1.613333e-01\n3624 -8.666667e-03\n3625  1.506667e-01\n3626 -1.460000e-01\n3627 -2.653333e-01\n3628 -1.273333e-01\n3629  1.533333e-02\n3630 -5.800000e-02\n3631  1.153333e-01\n3632  9.800000e-02\n3633  1.306667e-01\n3634 -1.133333e-01\n3635 -9.533333e-02\n3636 -5.866667e-02\n3637 -6.600000e-02\n3638 -2.466667e-02\n3639 -7.266667e-02\n3640  1.046667e-01\n3641 -7.133333e-02\n3642 -1.460000e-01\n3643  1.553333e-01\n3644  2.000000e-03\n3645 -7.666667e-02\n3646 -1.386667e-01\n3647  8.266667e-02\n3648 -1.246667e-01\n3649 -5.333333e-03\n3650 -1.160000e-01\n3651  4.000000e-02\n3652 -1.026667e-01\n3653  1.366667e-01\n3654  2.133333e-02\n3655 -1.020000e-01\n3656  1.633333e-01\n3657 -9.200000e-02\n3658  8.666667e-02\n3659 -7.133333e-02\n3660  9.933333e-02\n3661  1.773333e-01\n3662  7.466667e-02\n3663  5.600000e-02\n3664 -5.333333e-03\n3665 -2.040000e-01\n3666  1.820000e-01\n3667 -3.666667e-02\n3668  1.833333e-01\n3669  7.466667e-02\n3670  5.666667e-02\n3671 -1.806667e-01\n3672 -6.066667e-02\n3673 -2.140000e-01\n3674 -4.000000e-02\n3675 -1.220000e-01\n3676 -1.233333e-01\n3677  1.373333e-01\n3678 -7.800000e-02\n3679 -2.366667e-01\n3680  1.246667e-01\n3681 -9.333333e-02\n3682 -3.466667e-02\n3683 -8.000000e-02\n3684  2.640000e-01\n3685 -1.453333e-01\n3686  2.400000e-02\n3687  1.513333e-01\n3688 -4.666667e-02\n3689  8.000000e-02\n3690  5.133333e-02\n3691 -1.553333e-01\n3692  6.666667e-02\n3693  1.773333e-01\n3694  1.566667e-01\n3695  1.193333e-01\n3696 -8.866667e-02\n3697  1.560000e-01\n3698 -4.600000e-02\n3699  2.000000e-03\n3700 -6.266667e-02\n3701  2.466667e-01\n3702 -2.066667e-02\n3703  2.013333e-01\n3704  1.786667e-01\n3705 -2.666667e-03\n3706 -1.953333e-01\n3707  2.800000e-02\n3708  7.666667e-02\n3709  2.000000e-03\n3710 -1.133333e-01\n3711 -1.913333e-01\n3712 -1.533333e-01\n3713  8.333333e-02\n3714 -2.706667e-01\n3715 -6.800000e-02\n3716  2.366667e-01\n3717  1.940000e-01\n3718  8.866667e-02\n3719  1.526667e-01\n3720 -1.120000e-01\n3721  6.000000e-02\n3722  2.800000e-02\n3723 -1.320000e-01\n3724  1.053333e-01\n3725  1.020000e-01\n3726  2.066667e-02\n3727 -2.340000e-01\n3728 -1.786667e-01\n3729  1.166667e-01\n3730 -3.733333e-02\n3731 -1.033333e-01\n3732  2.033333e-01\n3733 -1.600000e-02\n3734  6.266667e-02\n3735 -7.200000e-02\n3736  7.533333e-02\n3737 -6.600000e-02\n3738  1.066667e-01\n3739 -1.320000e-01\n3740 -2.006667e-01\n3741 -1.286667e-01\n3742  3.133333e-02\n3743  1.160000e-01\n3744 -1.400000e-02\n3745 -1.866667e-02\n3746  1.733333e-02\n3747 -4.066667e-02\n3748  1.426667e-01\n3749 -2.166667e-01\n3750  4.133333e-02\n3751  4.733333e-02\n3752  9.600000e-02\n3753 -1.620000e-01\n3754  1.480000e-01\n3755 -1.186667e-01\n3756  3.200000e-02\n3757  1.746667e-01\n3758 -1.200000e-02\n3759 -1.740000e-01\n3760  1.266667e-01\n3761 -4.266667e-02\n3762  6.533333e-02\n3763 -5.466667e-02\n3764  2.026667e-01\n3765  6.800000e-02\n3766 -2.133333e-02\n3767 -2.333333e-02\n3768  4.666667e-02\n3769 -1.006667e-01\n3770  1.400000e-02\n3771  5.133333e-02\n3772 -1.833333e-01\n3773  6.666667e-04\n3774 -2.166667e-01\n3775  6.800000e-02\n3776  3.866667e-02\n3777 -1.433333e-01\n3778  1.920000e-01\n3779 -2.546667e-01\n3780  1.040000e-01\n3781  1.066667e-01\n3782 -1.066667e-01\n3783  3.333333e-02\n3784  1.800000e-02\n3785 -7.333333e-03\n3786 -1.520000e-01\n3787  1.800000e-01\n3788  1.200000e-02\n3789 -4.466667e-02\n3790 -1.800000e-02\n3791  1.400000e-01\n3792 -5.333333e-02\n3793  2.800000e-02\n3794  3.800000e-02\n3795 -7.266667e-02\n3796 -4.200000e-02\n3797  1.213333e-01\n3798 -4.666667e-03\n3799 -1.660000e-01\n3800 -2.286667e-01\n3801 -2.133333e-02\n3802 -1.460000e-01\n3803 -8.266667e-02\n3804 -8.733333e-02\n3805 -2.113333e-01\n3806 -1.493333e-01\n3807  8.000000e-03\n3808 -1.373333e-01\n3809  1.080000e-01\n3810  1.420000e-01\n3811 -9.266667e-02\n3812 -1.746667e-01\n3813  1.000000e-01\n3814 -1.706667e-01\n3815 -1.406667e-01\n3816 -1.646667e-01\n3817  2.400000e-02\n3818  9.066667e-02\n3819 -5.866667e-02\n3820 -1.880000e-01\n3821 -1.133333e-01\n3822  5.333333e-03\n3823 -1.133333e-01\n3824  8.400000e-02\n3825 -1.126667e-01\n3826  7.600000e-02\n3827 -6.333333e-02\n3828  3.600000e-02\n3829 -1.920000e-01\n3830 -1.173333e-01\n3831  2.746667e-01\n3832 -1.520000e-01\n3833  1.060000e-01\n3834  1.893333e-01\n3835  2.066667e-02\n3836  1.033333e-01\n3837  9.333333e-03\n3838 -8.133333e-02\n3839  5.333333e-02\n3840  1.506667e-01\n3841 -6.800000e-02\n3842  1.893333e-01\n3843 -9.200000e-02\n3844  1.853333e-01\n3845  8.533333e-02\n3846 -1.113333e-01\n3847 -6.466667e-02\n3848 -6.066667e-02\n3849 -1.553333e-01\n3850 -4.000000e-03\n3851 -1.260000e-01\n3852 -2.113333e-01\n3853 -4.933333e-02\n3854  3.000000e-02\n3855  7.133333e-02\n3856  1.533333e-01\n3857  1.600000e-02\n3858  2.066667e-02\n3859  3.866667e-02\n3860  8.933333e-02\n3861  9.133333e-02\n3862 -6.866667e-02\n3863 -7.266667e-02\n3864  1.793333e-01\n3865  5.933333e-02\n3866  5.333333e-03\n3867  1.960000e-01\n3868  2.666667e-02\n3869  6.666667e-03\n3870 -6.933333e-02\n3871 -1.913333e-01\n3872  3.800000e-02\n3873 -1.180000e-01\n3874  2.706667e-01\n3875 -3.666667e-02\n3876 -1.686667e-01\n3877 -1.053333e-01\n3878  7.000000e-02\n3879 -9.466667e-02\n3880  3.200000e-02\n3881  1.733333e-01\n3882  2.000000e-03\n3883 -1.333333e-01\n3884 -8.600000e-02\n3885  1.586667e-01\n3886 -4.266667e-02\n3887 -1.693333e-01\n3888 -2.800000e-02\n3889  1.460000e-01\n3890  8.200000e-02\n3891 -1.560000e-01\n3892  1.346667e-01\n3893  2.933333e-02\n3894  7.200000e-02\n3895  2.533333e-02\n3896 -1.246667e-01\n3897  5.533333e-02\n3898  4.933333e-02\n3899 -4.266667e-02\n3900 -2.326667e-01\n3901  5.466667e-02\n3902 -2.533333e-02\n3903  1.280000e-01\n3904 -1.466667e-01\n3905  7.066667e-02\n3906  1.766667e-01\n3907 -5.466667e-02\n3908  3.333333e-03\n3909  1.393333e-01\n3910  6.400000e-02\n3911 -2.573333e-01\n3912  1.733333e-02\n3913  1.240000e-01\n3914 -6.400000e-02\n3915 -1.160000e-01\n3916 -4.666667e-02\n3917  1.793333e-01\n3918 -1.266667e-02\n3919  2.060000e-01\n3920  1.246667e-01\n3921  1.200000e-01\n3922  3.266667e-02\n3923 -1.200000e-01\n3924 -4.266667e-02\n3925 -1.400000e-01\n3926  9.733333e-02\n3927  6.133333e-02\n3928  3.533333e-02\n3929  7.533333e-02\n3930 -1.193333e-01\n3931 -1.406667e-01\n3932  1.326667e-01\n3933 -9.866667e-02\n3934  2.933333e-02\n3935  5.600000e-02\n3936  6.000000e-02\n3937  3.333333e-02\n3938  9.266667e-02\n3939 -1.146667e-01\n3940  1.800000e-02\n3941  8.133333e-02\n3942  6.000000e-03\n3943 -1.620000e-01\n3944 -1.566667e-01\n3945 -2.233333e-01\n3946 -3.066667e-02\n3947  5.400000e-02\n3948  1.520000e-01\n3949  8.600000e-02\n3950  1.240000e-01\n3951 -6.400000e-02\n3952 -1.266667e-01\n3953 -2.466667e-02\n3954  1.733333e-02\n3955 -2.273333e-01\n3956 -4.000000e-02\n3957  4.000000e-02\n3958 -6.600000e-02\n3959  1.493333e-01\n3960  6.533333e-02\n3961 -6.666667e-02\n3962 -1.106667e-01\n3963  7.410465e-18\n3964 -6.666667e-03\n3965 -1.886667e-01\n3966 -6.866667e-02\n3967  2.533333e-01\n3968  1.940000e-01\n3969  1.306667e-01\n3970 -1.333333e-02\n3971 -2.666667e-03\n3972 -7.333333e-02\n3973  7.200000e-02\n3974 -2.480000e-01\n3975  5.866667e-02\n3976 -1.200000e-02\n3977 -1.166667e-01\n3978 -7.133333e-02\n3979 -1.333333e-03\n3980  6.866667e-02\n3981  2.506667e-01\n3982  4.933333e-02\n3983  2.173333e-01\n3984  1.286667e-01\n3985 -3.400000e-02\n3986 -9.066667e-02\n3987  3.866667e-02\n3988  2.866667e-02\n3989  1.340000e-01\n3990  2.300000e-01\n3991  2.000000e-01\n3992  3.600000e-02\n3993  1.560000e-01\n3994 -1.106667e-01\n3995 -9.866667e-02\n3996  1.400000e-02\n3997 -2.026667e-01\n3998  3.333333e-03\n3999 -3.400000e-02\n4000  5.200000e-02\n4001  3.466667e-02\n4002  7.000000e-02\n4003 -7.333333e-03\n4004 -3.200000e-02\n4005 -9.933333e-02\n4006  1.380000e-01\n4007 -9.466667e-02\n4008  1.453333e-01\n4009  5.400000e-02\n4010 -1.646667e-01\n4011  9.533333e-02\n4012  2.066667e-02\n4013  1.233333e-01\n4014  1.646667e-01\n4015 -1.146667e-01\n4016  3.333333e-02\n4017  9.466667e-02\n4018  1.220000e-01\n4019  1.013333e-01\n4020 -7.933333e-02\n4021 -7.466667e-02\n4022  1.673333e-01\n4023 -1.140000e-01\n4024  4.466667e-02\n4025  6.000000e-03\n4026 -7.933333e-02\n4027 -1.333333e-02\n4028  4.133333e-02\n4029  1.206667e-01\n4030 -5.933333e-02\n4031 -1.386667e-01\n4032 -7.333333e-03\n4033  1.353333e-01\n4034  7.533333e-02\n4035  2.393333e-01\n4036  1.220000e-01\n4037 -1.000000e-01\n4038 -6.133333e-02\n4039 -1.706667e-01\n4040  1.713333e-01\n4041  1.653333e-01\n4042 -1.653333e-01\n4043  6.666667e-04\n4044  1.280000e-01\n4045  5.333333e-02\n4046  2.533333e-02\n4047 -1.153333e-01\n4048  2.200000e-02\n4049  1.280000e-01\n4050 -1.733333e-01\n4051 -1.666667e-02\n4052  2.666667e-03\n4053  2.266667e-01\n4054  9.800000e-02\n4055 -4.133333e-02\n4056 -6.866667e-02\n4057  1.586667e-01\n4058 -1.306667e-01\n4059 -5.866667e-02\n4060  1.253333e-01\n4061 -1.333333e-03\n4062 -1.533333e-02\n4063  5.066667e-02\n4064  4.400000e-02\n4065  4.000000e-02\n4066  1.453333e-01\n4067 -1.266667e-02\n4068 -7.266667e-02\n4069  4.133333e-02\n4070  1.920000e-01\n4071 -8.600000e-02\n4072 -1.040000e-01\n4073 -1.226667e-01\n4074  8.466667e-02\n4075 -1.273333e-01\n4076 -6.666667e-02\n4077 -1.400000e-02\n4078 -1.720000e-01\n4079  9.333333e-02\n4080  4.000000e-02\n4081 -1.566667e-01\n4082  6.666667e-03\n4083 -1.586667e-01\n4084  6.800000e-02\n4085 -1.513333e-01\n4086 -1.713333e-01\n4087 -1.086667e-01\n4088 -7.200000e-02\n4089 -2.180000e-01\n4090 -1.573333e-01\n4091 -8.733333e-02\n4092 -7.333333e-02\n4093  1.213333e-01\n4094 -1.113333e-01\n4095  1.806667e-01\n4096  1.586667e-01\n4097  8.400000e-02\n4098 -9.200000e-02\n4099 -8.000000e-03\n4100  3.600000e-02\n4101 -7.266667e-02\n4102 -8.600000e-02\n4103  1.186667e-01\n4104  1.273333e-01\n4105 -2.000000e-02\n4106 -1.380000e-01\n4107  2.446667e-01\n4108  6.266667e-02\n4109  1.333333e-02\n4110 -2.433333e-01\n4111 -1.086667e-01\n4112 -1.533333e-01\n4113  9.466667e-02\n4114  8.000000e-03\n4115 -1.713333e-01\n4116  2.020000e-01\n4117  1.233333e-01\n4118 -8.800000e-02\n4119  3.133333e-02\n4120  8.000000e-03\n4121 -1.600000e-01\n4122  1.853333e-01\n4123  1.793333e-01\n4124  7.866667e-02\n4125 -1.800000e-01\n4126  1.986667e-01\n4127 -1.486667e-01\n4128  4.733333e-02\n4129  5.666667e-02\n4130  1.586667e-01\n4131 -2.260000e-01\n4132  1.153333e-01\n4133  6.800000e-02\n4134  7.066667e-02\n4135 -4.733333e-02\n4136 -6.266667e-02\n4137 -9.333333e-02\n4138  1.926667e-01\n4139  1.506667e-01\n4140 -4.800000e-02\n4141  2.566667e-01\n4142  6.400000e-02\n4143 -3.000000e-02\n4144  1.453333e-01\n4145  6.666667e-03\n4146  5.200000e-02\n4147 -1.673333e-01\n4148 -1.133333e-02\n4149 -1.886667e-01\n4150 -2.933333e-02\n4151 -2.000000e-03\n4152 -5.333333e-03\n4153  1.606667e-01\n4154 -2.106667e-01\n4155 -6.600000e-02\n4156 -2.220971e-17\n4157 -1.153333e-01\n4158  5.733333e-02\n4159  1.286667e-01\n4160  1.560000e-01\n4161  4.333333e-02\n4162  4.000000e-02\n4163  1.600000e-01\n4164  9.666667e-02\n4165  2.846667e-01\n4166  3.933333e-02\n4167  1.060000e-01\n4168 -1.606667e-01\n4169  1.213333e-01\n4170 -1.126667e-01\n4171 -2.086667e-01\n4172 -1.953333e-01\n4173  1.120000e-01\n4174 -2.333333e-02\n4175  1.293333e-01\n4176 -1.393333e-01\n4177 -2.146667e-01\n4178 -8.266667e-02\n4179 -8.666667e-02\n4180  3.733333e-02\n4181  2.466667e-02\n4182  1.280000e-01\n4183  8.066667e-02\n4184  9.533333e-02\n4185 -1.926667e-01\n4186 -1.120000e-01\n4187  2.046667e-01\n4188  1.286667e-01\n4189  2.686667e-01\n4190  8.800000e-02\n4191  1.153333e-01\n4192  2.666667e-01\n4193 -1.846667e-01\n4194 -5.133333e-02\n4195  6.933333e-02\n4196 -1.320000e-01\n4197  1.333333e-01\n4198 -8.866667e-02\n4199  8.066667e-02\n4200 -1.933333e-02\n4201  5.466667e-02\n4202  6.666667e-03\n4203  4.800000e-02\n4204 -5.000000e-02\n4205 -1.380000e-01\n4206  1.260000e-01\n4207 -6.000000e-02\n4208  8.266667e-02\n4209  1.333333e-03\n4210  1.560000e-01\n4211  2.120000e-01\n4212  6.000000e-02\n4213  2.606667e-01\n4214 -1.953333e-01\n4215 -8.933333e-02\n4216 -4.133333e-02\n4217  8.866667e-02\n4218  9.200000e-02\n4219 -4.000000e-03\n4220  1.440000e-01\n4221  9.400000e-02\n4222 -1.533333e-02\n4223 -3.533333e-02\n4224 -1.320000e-01\n4225 -6.400000e-02\n4226 -1.973333e-01\n4227 -1.720000e-01\n4228  4.200000e-02\n4229  7.533333e-02\n4230 -2.800000e-02\n4231 -5.800000e-02\n4232  1.286667e-01\n4233 -1.746667e-01\n4234 -7.200000e-02\n4235 -1.040000e-01\n4236  4.133333e-02\n4237  5.066667e-02\n4238 -1.486667e-01\n4239 -9.133333e-02\n4240 -5.600000e-02\n4241  1.353333e-01\n4242 -6.666667e-03\n4243 -4.933333e-02\n4244  1.633333e-01\n4245 -1.273333e-01\n4246 -5.400000e-02\n4247 -1.686667e-01\n4248 -1.613333e-01\n4249  1.286667e-01\n4250  9.200000e-02\n4251  4.000000e-03\n4252  2.073333e-01\n4253  1.186667e-01\n4254 -1.380000e-01\n4255 -2.146667e-01\n4256  8.066667e-02\n4257  9.400000e-02\n4258 -4.466667e-02\n4259 -7.000000e-02\n4260 -1.113333e-01\n4261  1.393333e-01\n4262 -2.533333e-02\n4263  2.133333e-02\n4264  8.133333e-02\n4265  1.653333e-01\n4266  2.200000e-02\n4267  1.240000e-01\n4268 -2.533333e-02\n4269  1.333333e-02\n4270 -2.093333e-01\n4271  1.540000e-01\n4272  6.000000e-03\n4273 -9.266667e-02\n4274  6.000000e-02\n4275 -1.060000e-01\n4276  1.653333e-01\n4277  4.066667e-02\n4278  2.320000e-01\n4279 -1.366667e-01\n4280 -1.486667e-01\n4281 -1.306667e-01\n4282 -2.400000e-01\n4283  2.666667e-02\n4284  1.473333e-01\n4285  5.666667e-02\n4286 -7.733333e-02\n4287 -7.666667e-02\n4288 -1.286667e-01\n4289 -1.433333e-01\n4290  1.000000e-02\n4291 -1.760000e-01\n4292 -2.166667e-01\n4293 -1.013333e-01\n4294 -4.466667e-02\n4295  7.933333e-02\n4296 -1.900000e-01\n4297  1.860000e-01\n4298 -9.333333e-02\n4299  2.386667e-01\n4300 -6.800000e-02\n4301 -1.966667e-01\n4302 -6.666667e-04\n4303 -3.333333e-02\n4304 -1.386667e-01\n4305 -1.626667e-01\n4306  1.406667e-01\n4307  1.000000e-02\n4308  1.280000e-01\n4309  2.113333e-01\n4310 -2.200000e-02\n4311  1.433333e-01\n4312 -2.033333e-01\n4313 -1.493333e-01\n4314  2.866667e-01\n4315  9.066667e-02\n4316 -5.333333e-02\n4317  4.666667e-03\n4318  3.800000e-02\n4319  6.266667e-02\n4320 -2.866667e-02\n4321 -1.493333e-01\n4322 -1.380000e-01\n4323  4.733333e-02\n4324  1.646667e-01\n4325  1.226667e-01\n4326  1.966667e-01\n4327  5.866667e-02\n4328  2.100000e-01\n4329  1.220000e-01\n4330 -5.066667e-02\n4331  1.666667e-01\n4332 -1.400000e-01\n4333  4.733333e-02\n4334  2.266667e-01\n4335 -4.000000e-03\n4336 -7.466667e-02\n4337 -7.333333e-02\n4338  9.866667e-02\n4339  5.266667e-02\n4340  1.473333e-01\n4341  1.113333e-01\n4342  1.286667e-01\n4343 -9.666667e-02\n4344  4.866667e-02\n4345 -8.600000e-02\n4346  1.580000e-01\n4347 -1.573333e-01\n4348  3.733333e-02\n4349  1.633333e-01\n4350  1.400000e-01\n4351 -9.200000e-02\n4352  6.200000e-02\n4353  1.820000e-01\n4354 -7.333333e-02\n4355 -1.060000e-01\n4356 -1.853333e-01\n4357 -1.686667e-01\n4358 -2.040000e-01\n4359  8.600000e-02\n4360 -2.733333e-02\n4361 -1.200000e-02\n4362  9.800000e-02\n4363  9.733333e-02\n4364  1.293333e-01\n4365 -1.666667e-02\n4366 -2.800000e-02\n4367 -1.393333e-01\n4368  1.360000e-01\n4369 -5.333333e-02\n4370 -1.600000e-01\n4371 -2.933333e-02\n4372 -2.133333e-02\n4373  3.266667e-02\n4374  2.600000e-02\n4375 -9.733333e-02\n4376  7.600000e-02\n4377  2.533333e-02\n4378  1.420000e-01\n4379  1.933333e-02\n4380  3.400000e-02\n4381 -1.140000e-01\n4382  3.400000e-02\n4383  1.033333e-01\n4384  2.733333e-02\n4385 -1.433333e-01\n4386 -1.173333e-01\n4387  2.433333e-01\n4388 -4.333333e-02\n4389 -2.620000e-01\n4390  5.200000e-02\n4391  1.140000e-01\n4392  4.600000e-02\n4393  4.400000e-02\n4394  1.933333e-02\n4395  8.866667e-02\n4396 -1.400000e-01\n4397  1.153333e-01\n4398  1.053333e-01\n4399  2.193333e-01\n4400 -1.026667e-01\n4401 -1.293333e-01\n4402  6.333333e-02\n4403 -8.333333e-02\n4404  4.666667e-02\n4405  1.933333e-01\n4406  2.733333e-02\n4407 -6.666667e-02\n4408  8.133333e-02\n4409 -2.066667e-02\n4410 -1.973333e-01\n4411 -2.033333e-01\n4412 -1.606667e-01\n4413  6.733333e-02\n4414 -9.533333e-02\n4415 -9.266667e-02\n4416  3.733333e-02\n4417 -2.186667e-01\n4418 -9.133333e-02\n4419 -1.700000e-01\n4420  1.113333e-01\n4421 -1.140000e-01\n4422  1.600000e-02\n4423  1.246667e-01\n4424 -1.133333e-01\n4425 -1.213333e-01\n4426  4.200000e-02\n4427  1.846667e-01\n4428 -1.026667e-01\n4429 -1.026667e-01\n4430  1.466667e-02\n4431  1.740000e-01\n4432  1.980000e-01\n4433  5.133333e-02\n4434 -1.313333e-01\n4435 -8.600000e-02\n4436  1.113333e-01\n4437 -1.180000e-01\n4438  1.280000e-01\n4439  1.300000e-01\n4440  2.100000e-01\n4441  2.266667e-02\n4442 -1.800000e-01\n4443 -2.066667e-01\n4444  4.466667e-02\n4445  4.666667e-02\n4446  1.340000e-01\n4447  3.600000e-02\n4448  3.200000e-02\n4449  1.580000e-01\n4450 -9.466667e-02\n4451 -2.240000e-01\n4452  1.940000e-01\n4453  1.326667e-01\n4454 -5.733333e-02\n4455  1.500000e-01\n4456 -5.266667e-02\n4457  4.066667e-02\n4458  1.840000e-01\n4459 -2.353333e-01\n4460 -1.533333e-01\n4461 -1.453333e-01\n4462 -9.800000e-02\n4463  1.200000e-02\n4464  5.000000e-02\n4465  3.933333e-02\n4466 -1.533333e-01\n4467 -1.306667e-01\n4468 -2.526667e-01\n4469 -1.800000e-02\n4470 -1.786667e-01\n4471 -2.046667e-01\n4472 -2.126667e-01\n4473  5.733333e-02\n4474 -1.513333e-01\n4475  9.200000e-02\n4476 -1.640000e-01\n4477 -9.666667e-02\n4478  6.466667e-02\n4479 -5.933333e-02\n4480 -4.000000e-03\n4481 -1.120000e-01\n4482 -6.866667e-02\n4483  3.933333e-02\n4484  4.066667e-02\n4485 -9.200000e-02\n4486 -2.326667e-01\n4487 -1.233333e-01\n4488 -1.040000e-01\n4489  9.866667e-02\n4490 -2.466667e-02\n4491 -1.866667e-02\n4492  1.226667e-01\n4493  4.200000e-02\n4494  1.446667e-01\n4495  1.440000e-01\n4496 -9.466667e-02\n4497  1.746667e-01\n4498  6.666667e-03\n4499 -2.866667e-02\n4500 -2.380000e-01\n4501  1.140000e-01\n4502  9.266667e-02\n4503 -1.013333e-01\n4504  8.066667e-02\n4505 -2.066667e-02\n4506  5.800000e-02\n4507  7.866667e-02\n4508  1.773333e-01\n4509  1.020000e-01\n4510 -3.200000e-02\n4511 -1.526667e-01\n4512 -1.306667e-01\n4513  1.306667e-01\n4514  1.706667e-01\n4515  8.400000e-02\n4516 -6.800000e-02\n4517  8.266667e-02\n4518 -8.866667e-02\n4519  5.266667e-02\n4520  1.100000e-01\n4521 -5.866667e-02\n4522  3.600000e-02\n4523  1.200000e-01\n4524 -2.280000e-01\n4525  1.166667e-01\n4526  1.193333e-01\n4527  2.040000e-01\n4528  8.733333e-02\n4529  5.600000e-02\n4530  4.000000e-02\n4531  9.533333e-02\n4532 -5.800000e-02\n4533  8.200000e-02\n4534  1.060000e-01\n4535 -1.113333e-01\n4536  9.800000e-02\n4537 -1.333333e-03\n4538  1.933333e-02\n4539  2.080000e-01\n4540 -2.400000e-01\n4541  6.333333e-02\n4542  2.933333e-02\n4543  6.066667e-02\n4544 -1.180000e-01\n4545 -1.413333e-01\n4546 -1.173333e-01\n4547 -1.293333e-01\n4548  8.000000e-03\n4549 -3.333333e-02\n4550  4.666667e-02\n4551  6.466667e-02\n4552 -4.400000e-02\n4553 -8.333333e-02\n4554 -1.033333e-01\n4555  1.740000e-01\n4556  1.460000e-01\n4557 -9.733333e-02\n4558  6.533333e-02\n4559  2.033333e-01\n4560 -1.866667e-02\n4561 -1.466667e-02\n4562 -8.066667e-02\n4563  1.066667e-01\n4564  2.000000e-01\n4565  1.966667e-01\n4566 -1.546667e-01\n4567  1.420000e-01\n4568 -6.666667e-04\n4569  1.946667e-01\n4570 -4.066667e-02\n4571 -5.800000e-02\n4572  6.666667e-02\n4573 -1.753333e-01\n4574 -1.540000e-01\n4575 -1.466667e-02\n4576  2.200000e-02\n4577 -1.106667e-01\n4578  6.400000e-02\n4579 -8.933333e-02\n4580 -1.846667e-01\n4581 -2.020000e-01\n4582 -1.960000e-01\n4583 -3.266667e-02\n4584 -1.533333e-01\n4585 -6.666667e-03\n4586  1.733333e-01\n4587  7.800000e-02\n4588  4.133333e-02\n4589 -1.953333e-01\n4590  9.800000e-02\n4591  2.800000e-02\n4592 -6.666667e-04\n4593  1.380000e-01\n4594 -6.933333e-02\n4595 -3.333333e-02\n4596  2.400000e-02\n4597 -3.133333e-02\n4598  1.760000e-01\n4599 -1.640000e-01\n4600  8.933333e-02\n4601 -8.666667e-02\n4602 -8.066667e-02\n4603 -7.066667e-02\n4604 -1.533333e-02\n4605  1.026667e-01\n4606 -1.800000e-01\n4607 -4.200000e-02\n4608 -7.066667e-02\n4609 -1.320000e-01\n4610  1.933333e-02\n4611  5.333333e-02\n4612 -7.866667e-02\n4613 -1.113333e-01\n4614  2.393333e-01\n4615  1.193333e-01\n4616  6.666667e-04\n4617 -7.666667e-02\n4618 -1.813333e-01\n4619 -1.340000e-01\n4620  1.133333e-02\n4621  1.706667e-01\n4622 -5.400000e-02\n4623 -9.666667e-02\n4624 -1.280000e-01\n4625  1.166667e-01\n4626  9.800000e-02\n4627  1.566667e-01\n4628 -1.033333e-01\n4629 -5.933333e-02\n4630 -9.000000e-02\n4631 -1.480000e-01\n4632 -2.033333e-01\n4633  1.266667e-01\n4634  1.453333e-01\n4635  7.733333e-02\n4636  6.666667e-03\n4637 -4.000000e-02\n4638  1.773333e-01\n4639  1.713333e-01\n4640 -4.733333e-02\n4641 -2.013333e-01\n4642 -2.600000e-02\n4643 -1.333333e-03\n4644 -1.066667e-02\n4645 -1.226667e-01\n4646  6.200000e-02\n4647  4.266667e-02\n4648 -2.666667e-03\n4649  7.066667e-02\n4650  1.933333e-02\n4651  1.433333e-01\n4652  6.200000e-02\n4653  1.266667e-02\n4654 -1.400000e-02\n4655 -1.553333e-01\n4656  4.266667e-02\n4657 -4.066667e-02\n4658  7.333333e-02\n4659  3.466667e-02\n4660 -5.066667e-02\n4661 -1.000000e-02\n4662  8.933333e-02\n4663 -2.666667e-02\n4664 -1.353333e-01\n4665 -6.933333e-02\n4666 -1.226667e-01\n4667  1.480000e-01\n4668  2.100000e-01\n4669 -2.340000e-01\n4670  5.733333e-02\n4671 -6.266667e-02\n4672 -2.726667e-01\n4673 -1.526667e-01\n4674 -1.820000e-01\n4675 -2.180000e-01\n4676 -4.000000e-02\n4677 -1.266667e-02\n4678  2.466667e-01\n4679  1.106667e-01\n4680  8.066667e-02\n4681 -2.666667e-02\n4682  1.540000e-01\n4683 -9.200000e-02\n4684 -2.000000e-03\n4685 -8.866667e-02\n4686 -1.493333e-01\n4687  2.466667e-02\n4688  9.466667e-02\n4689 -5.466667e-02\n4690  1.346667e-01\n4691 -3.333333e-03\n4692 -4.466667e-02\n4693  3.333333e-02\n4694 -8.133333e-02\n4695 -1.966667e-01\n4696  3.733333e-02\n4697  4.600000e-02\n4698 -8.533333e-02\n4699 -7.066667e-02\n4700  3.333333e-02\n4701 -2.226667e-01\n4702 -1.640000e-01\n4703  5.533333e-02\n4704  2.060000e-01\n4705  6.400000e-02\n4706  2.446667e-01\n4707 -2.293333e-01\n4708 -1.246667e-01\n4709 -1.480000e-01\n4710 -1.853333e-01\n4711  1.393333e-01\n4712  1.600000e-01\n4713  1.333333e-01\n4714  1.340000e-01\n4715 -1.346667e-01\n4716  2.133333e-02\n4717 -1.073333e-01\n4718 -1.400000e-01\n4719  8.733333e-02\n4720 -9.000000e-02\n4721  8.066667e-02\n4722 -2.666667e-03\n4723 -1.860000e-01\n4724  5.400000e-02\n4725  8.666667e-02\n4726 -5.533333e-02\n4727  1.266667e-01\n4728 -6.533333e-02\n4729  6.733333e-02\n4730 -9.400000e-02\n4731 -5.800000e-02\n4732  1.266667e-02\n4733 -4.666667e-03\n4734 -9.200000e-02\n4735  1.786667e-01\n4736 -2.200000e-02\n4737  2.146667e-01\n4738 -1.360000e-01\n4739 -8.000000e-03\n4740 -1.933333e-02\n4741  3.533333e-02\n4742  1.666667e-02\n4743  4.733333e-02\n4744 -7.333333e-02\n4745 -8.133333e-02\n4746 -1.313333e-01\n4747  2.126667e-01\n4748 -3.800000e-02\n4749 -1.406667e-01\n4750  1.266667e-02\n4751 -1.300000e-01\n4752  9.000000e-02\n4753  2.333333e-02\n4754 -2.673333e-01\n4755  4.066667e-02\n4756 -5.066667e-02\n4757  2.200000e-02\n4758 -2.246667e-01\n4759  1.646667e-01\n4760  1.693333e-01\n4761 -1.233333e-01\n4762 -1.053333e-01\n4763 -2.086667e-01\n4764 -2.800000e-02\n4765  2.733333e-02\n4766 -2.000000e-03\n4767 -1.433333e-01\n4768 -1.486667e-01\n4769  9.800000e-02\n4770 -1.720000e-01\n4771  5.466667e-02\n4772 -2.120000e-01\n4773 -9.533333e-02\n4774 -5.333333e-02\n4775 -2.466667e-02\n4776  8.466667e-02\n4777 -7.400000e-02\n4778 -3.133333e-02\n4779  1.566667e-01\n4780  2.800000e-02\n4781  6.666667e-02\n4782 -1.006667e-01\n4783  1.020000e-01\n4784 -1.313333e-01\n4785 -7.400000e-02\n4786 -4.133333e-02\n4787  1.633333e-01\n4788  1.700000e-01\n4789  3.666667e-02\n4790 -5.866667e-02\n4791 -1.706667e-01\n4792  9.933333e-02\n4793 -2.060000e-01\n4794  7.533333e-02\n4795 -9.533333e-02\n4796 -9.333333e-03\n4797 -2.293333e-01\n4798 -1.333333e-03\n4799 -1.406667e-01\n4800  5.000000e-02\n4801  1.900000e-01\n4802 -1.306667e-01\n4803 -1.626667e-01\n4804 -1.246667e-01\n4805 -1.060000e-01\n4806 -2.500000e-01\n4807  1.333333e-01\n4808  1.866667e-02\n4809 -3.066667e-02\n4810  1.660000e-01\n4811  1.313333e-01\n4812  1.120000e-01\n4813 -1.533333e-01\n4814 -1.353333e-01\n4815  2.600000e-02\n4816 -2.073333e-01\n4817 -2.666667e-02\n4818  4.266667e-02\n4819  2.073333e-01\n4820  1.626667e-01\n4821  2.666667e-03\n4822  1.880000e-01\n4823 -8.600000e-02\n4824  1.126667e-01\n4825  2.200000e-02\n4826 -1.966667e-01\n4827 -1.013333e-01\n4828 -1.746667e-01\n4829 -2.400000e-02\n4830 -9.133333e-02\n4831  9.266667e-02\n4832  1.866667e-01\n4833 -1.753333e-01\n4834 -1.640000e-01\n4835  1.386667e-01\n4836 -1.093333e-01\n4837 -1.153333e-01\n4838  1.706667e-01\n4839 -3.866667e-02\n4840  6.533333e-02\n4841  1.546667e-01\n4842 -1.700000e-01\n4843  1.266667e-01\n4844 -1.566667e-01\n4845 -2.180000e-01\n4846 -4.666667e-03\n4847 -4.933333e-02\n4848  2.053333e-01\n4849 -1.553333e-01\n4850 -1.586667e-01\n4851 -5.800000e-02\n4852  6.200000e-02\n4853  7.200000e-02\n4854 -7.466667e-02\n4855 -1.500000e-01\n4856 -1.400000e-02\n4857 -7.200000e-02\n4858 -1.806667e-01\n4859 -1.006667e-01\n4860  2.400000e-02\n4861 -5.600000e-02\n4862 -5.333333e-02\n4863 -7.533333e-02\n4864  1.386667e-01\n4865  8.066667e-02\n4866 -1.820000e-01\n4867  4.266667e-02\n4868  3.333333e-02\n4869 -4.133333e-02\n4870  1.573333e-01\n4871  3.333333e-03\n4872  1.573333e-01\n4873 -1.386667e-01\n4874  1.786667e-01\n4875 -2.333333e-02\n4876  5.466667e-02\n4877 -2.466667e-02\n4878  6.266667e-02\n4879 -4.666667e-03\n4880  1.200000e-02\n4881  6.666667e-03\n4882 -8.600000e-02\n4883  8.200000e-02\n4884  1.733333e-01\n4885  7.133333e-02\n4886 -4.666667e-03\n4887  1.346667e-01\n4888  1.340000e-01\n4889 -1.193333e-01\n4890  6.000000e-02\n4891  4.400000e-02\n4892  7.333333e-03\n4893  1.053333e-01\n4894 -7.333333e-02\n4895  4.733333e-02\n4896 -1.940000e-01\n4897  1.093333e-01\n4898 -1.826667e-01\n4899 -7.733333e-02\n4900  4.133333e-02\n4901  7.400000e-02\n4902 -2.593333e-01\n4903 -2.266667e-02\n4904 -1.546667e-01\n4905  1.640000e-01\n4906 -3.200000e-02\n4907 -6.800000e-02\n4908 -7.933333e-02\n4909 -9.466667e-02\n4910  2.133333e-02\n4911 -1.053333e-01\n4912  2.000000e-02\n4913  1.706667e-01\n4914 -2.866667e-02\n4915 -6.933333e-02\n4916  9.733333e-02\n4917 -1.000000e-02\n4918 -2.046667e-01\n4919  1.773333e-01\n4920 -2.706667e-01\n4921 -3.933333e-02\n4922  1.146667e-01\n4923  1.420000e-01\n4924 -1.780000e-01\n4925  1.240000e-01\n4926  1.140000e-01\n4927  7.266667e-02\n4928  5.866667e-02\n4929  1.013333e-01\n4930  7.666667e-02\n4931  9.000000e-02\n4932  1.140000e-01\n4933  1.153333e-01\n4934 -6.266667e-02\n4935  1.446667e-01\n4936 -1.200000e-01\n4937 -1.653333e-01\n4938  1.760000e-01\n4939  3.333333e-02\n4940 -1.213333e-01\n4941  2.666667e-03\n4942  1.406667e-01\n4943 -7.666667e-02\n4944 -4.066667e-02\n4945  2.020000e-01\n4946  1.666667e-01\n4947 -1.926667e-01\n4948 -2.340000e-01\n4949  1.300000e-01\n4950 -1.546667e-01\n4951 -2.020000e-01\n4952  1.026667e-01\n4953  8.000000e-03\n4954 -1.026667e-01\n4955  1.206667e-01\n4956  1.786667e-01\n4957 -7.000000e-02\n4958  9.400000e-02\n4959  1.560000e-01\n4960  4.133333e-02\n4961  3.800000e-02\n4962  7.533333e-02\n4963  7.933333e-02\n4964  1.020000e-01\n4965 -1.633333e-01\n4966  9.000000e-02\n4967  5.133333e-02\n4968 -3.133333e-02\n4969  1.866667e-02\n4970 -4.000000e-03\n4971 -9.266667e-02\n4972 -6.533333e-02\n4973  8.666667e-03\n4974 -1.386667e-01\n4975 -1.320000e-01\n4976  1.026667e-01\n4977 -1.253333e-01\n4978  9.200000e-02\n4979  1.780000e-01\n4980  1.313333e-01\n4981 -9.800000e-02\n4982  5.200000e-02\n4983  5.333333e-02\n4984 -9.533333e-02\n4985 -1.933333e-02\n4986  1.373333e-01\n4987  7.800000e-02\n4988 -2.666667e-03\n4989 -7.666667e-02\n4990 -1.466667e-02\n4991  8.600000e-02\n4992 -1.933333e-02\n4993  4.666667e-03\n4994 -4.400000e-02\n4995 -6.266667e-02\n4996  2.506667e-01\n4997  2.533333e-02\n4998 -7.000000e-02\n4999 -5.200000e-02\n5000  2.320000e-01\n5001 -8.666667e-03\n5002  9.600000e-02\n5003  1.133333e-01\n5004  6.400000e-02\n5005 -1.546667e-01\n5006 -1.386667e-01\n5007 -2.173333e-01\n5008 -1.566667e-01\n5009  1.313333e-01\n5010  8.866667e-02\n5011  2.060000e-01\n5012  1.353333e-01\n5013  2.221694e-17\n5014  1.466667e-02\n5015  1.286667e-01\n5016 -1.126667e-01\n5017 -1.573333e-01\n5018 -5.133333e-02\n5019 -8.133333e-02\n5020  1.000000e-01\n5021  8.000000e-03\n5022  2.533333e-02\n5023  7.333333e-02\n5024  1.353333e-01\n5025  1.266667e-02\n5026 -2.380000e-01\n5027 -2.200000e-02\n5028  1.493333e-01\n5029 -1.693333e-01\n5030  1.246667e-01\n5031  4.133333e-02\n5032 -6.466667e-02\n5033  1.566667e-01\n5034 -1.706667e-01\n5035 -7.400000e-02\n5036 -1.606667e-01\n5037  1.226667e-01\n5038 -8.000000e-02\n5039  5.600000e-02\n5040 -2.013333e-01\n5041 -2.220000e-01\n5042  1.726667e-01\n5043  1.313333e-01\n5044 -1.146667e-01\n5045  5.066667e-02\n5046  1.000000e-01\n5047  7.133333e-02\n5048  2.020000e-01\n5049 -6.400000e-02\n5050 -3.066667e-02\n5051 -1.133333e-01\n5052 -1.093333e-01\n5053  1.126667e-01\n5054 -1.946667e-01\n5055  1.766667e-01\n5056  2.400000e-02\n5057  5.600000e-02\n5058  6.666667e-02\n5059 -1.160000e-01\n5060  1.346667e-01\n5061 -3.666667e-02\n5062 -1.846667e-01\n5063 -1.746667e-01\n5064 -1.473333e-01\n5065 -7.933333e-02\n5066 -2.606667e-01\n5067  4.200000e-02\n5068 -1.226667e-01\n5069  1.853333e-01\n5070  3.200000e-02\n5071 -7.133333e-02\n5072  1.680000e-01\n5073  4.666667e-02\n5074  1.266667e-01\n5075 -1.633333e-01\n5076 -4.466667e-02\n5077 -1.253333e-01\n5078  1.913333e-01\n5079 -1.946667e-01\n5080  1.486667e-01\n5081  2.026667e-01\n5082  2.600000e-02\n5083  7.466667e-02\n5084 -7.866667e-02\n5085  9.200000e-02\n5086 -1.613333e-01\n5087  4.066667e-02\n5088  1.340000e-01\n5089 -7.600000e-02\n5090 -5.133333e-02\n5091  6.666667e-02\n5092 -1.566667e-01\n5093 -2.800000e-02\n5094 -9.733333e-02\n5095  1.766667e-01\n5096  4.800000e-02\n5097 -2.386667e-01\n5098 -3.133333e-02\n5099 -1.913333e-01\n5100  3.066667e-02\n5101  1.853333e-01\n5102 -1.066667e-02\n5103 -1.920000e-01\n5104 -2.040000e-01\n5105 -6.666667e-02\n5106  1.206667e-01\n5107 -9.466667e-02\n5108  1.346667e-01\n5109 -1.013333e-01\n5110 -5.800000e-02\n5111 -1.646667e-01\n5112  9.066667e-02\n5113  1.880000e-01\n5114  6.666667e-04\n5115  2.346667e-01\n5116  1.460000e-01\n5117 -1.666667e-02\n5118  3.933333e-02\n5119  1.666667e-02\n5120 -1.873333e-01\n5121 -1.286667e-01\n5122  5.266667e-02\n5123 -8.066667e-02\n5124  1.426667e-01\n5125  7.600000e-02\n5126  1.753333e-01\n5127 -5.466667e-02\n5128 -1.780000e-01\n5129  1.606667e-01\n5130 -2.666667e-03\n5131  1.253333e-01\n5132 -1.680000e-01\n5133  1.413333e-01\n5134 -1.400000e-01\n5135 -9.133333e-02\n5136  1.333333e-01\n5137  6.666667e-02\n5138 -2.066667e-02\n5139 -1.093333e-01\n5140  3.133333e-02\n5141  8.266667e-02\n5142  1.226667e-01\n5143 -1.066667e-01\n5144  1.200000e-01\n5145 -2.413333e-01\n5146 -1.140000e-01\n5147  2.466667e-02\n5148 -2.933333e-02\n5149 -1.986667e-01\n5150 -5.000000e-02\n5151  8.933333e-02\n5152 -1.820000e-01\n5153 -5.800000e-02\n5154 -2.466667e-02\n5155  1.446667e-01\n5156 -3.933333e-02\n5157  1.846667e-01\n5158 -1.320000e-01\n5159  1.733333e-01\n5160 -9.533333e-02\n5161 -1.740000e-01\n5162 -1.466667e-01\n5163  8.000000e-03\n5164  1.226667e-01\n5165  1.146667e-01\n5166 -7.200000e-02\n5167 -2.100000e-01\n5168  4.866667e-02\n5169 -1.153333e-01\n5170 -1.906667e-01\n5171 -2.213333e-01\n5172  1.333333e-03\n5173 -2.433333e-01\n5174  1.666667e-02\n5175  1.060000e-01\n5176  1.133333e-02\n5177 -1.226667e-01\n5178 -5.333333e-03\n5179  5.600000e-02\n5180  8.133333e-02\n5181  1.906667e-01\n5182  1.860000e-01\n5183 -2.040000e-01\n5184 -1.146667e-01\n5185 -5.933333e-02\n5186 -8.266667e-02\n5187  3.533333e-02\n5188 -1.940000e-01\n5189 -9.866667e-02\n5190  1.026667e-01\n5191 -1.800000e-01\n5192  1.493333e-01\n5193  1.226667e-01\n5194 -1.186667e-01\n5195 -3.466667e-02\n5196  1.273333e-01\n5197 -1.400000e-02\n5198  9.000000e-02\n5199  1.260000e-01\n5200 -1.600000e-02\n5201  1.133333e-01\n5202  3.066667e-02\n5203  1.660000e-01\n5204  1.360000e-01\n5205 -9.066667e-02\n5206 -7.466667e-02\n5207 -2.333333e-01\n5208  1.133333e-02\n5209  9.466667e-02\n5210  2.133333e-02\n5211  9.666667e-02\n5212 -7.466667e-02\n5213 -1.120000e-01\n5214  1.993333e-01\n5215  1.273333e-01\n5216  1.126667e-01\n5217 -2.733333e-02\n5218  1.000000e-01\n5219  1.240000e-01\n5220  1.333333e-01\n5221  9.333333e-02\n5222 -9.666667e-02\n5223 -2.320000e-01\n5224 -3.133333e-02\n5225 -1.673333e-01\n5226 -4.333333e-02\n5227 -9.266667e-02\n5228  1.713333e-01\n5229  1.566667e-01\n5230  2.086667e-01\n5231 -1.340000e-01\n5232  1.266667e-01\n5233 -1.226667e-01\n5234  5.666667e-02\n5235 -9.733333e-02\n5236 -1.113333e-01\n5237 -1.886667e-01\n5238  9.266667e-02\n5239  1.733333e-02\n5240  1.333333e-02\n5241 -1.566667e-01\n5242  2.100000e-01\n5243  1.426667e-01\n5244  1.726667e-01\n5245  2.013333e-01\n5246 -3.000000e-02\n5247  1.320000e-01\n5248 -4.666667e-02\n5249  9.400000e-02\n5250  6.600000e-02\n5251 -1.580000e-01\n5252 -6.266667e-02\n5253  5.333333e-03\n5254  9.533333e-02\n5255  8.000000e-03\n5256  5.933333e-02\n5257  3.266667e-02\n5258  2.140000e-01\n5259 -1.073333e-01\n5260 -2.226667e-01\n5261 -1.093333e-01\n5262  1.633333e-01\n5263 -1.946667e-01\n5264 -5.266667e-02\n5265 -9.333333e-03\n5266  3.133333e-02\n5267 -1.173333e-01\n5268  1.093333e-01\n5269 -1.240000e-01\n5270 -1.533333e-02\n5271  8.866667e-02\n5272  7.666667e-02\n5273  7.466667e-02\n5274 -1.086667e-01\n5275  6.733333e-02\n5276  7.933333e-02\n5277 -7.333333e-03\n5278  4.600000e-02\n5279  9.333333e-03\n5280  1.960000e-01\n5281 -5.133333e-02\n5282  4.800000e-02\n5283  1.553333e-01\n5284  1.666667e-02\n5285 -2.440000e-01\n5286  2.173333e-01\n5287  1.813333e-01\n5288 -2.933333e-02\n5289 -2.086667e-01\n5290  9.200000e-02\n5291  8.866667e-02\n5292  1.420000e-01\n5293 -2.133333e-02\n5294  1.680000e-01\n5295 -1.133333e-02\n5296  2.033333e-01\n5297  2.200000e-02\n5298 -3.133333e-02\n5299  1.493333e-01\n5300 -1.226667e-01\n5301 -1.440000e-01\n5302  1.366667e-01\n5303 -1.866667e-02\n5304  2.800000e-02\n5305 -3.600000e-02\n5306  1.133333e-01\n5307  9.400000e-02\n5308  1.600000e-01\n5309 -1.346667e-01\n5310 -4.266667e-02\n5311 -1.886667e-01\n5312 -1.066667e-02\n5313  1.473333e-01\n5314 -1.320000e-01\n5315  6.733333e-02\n5316 -1.000000e-01\n5317 -7.600000e-02\n5318 -1.113333e-01\n5319 -1.266667e-01\n5320  1.160000e-01\n5321 -6.000000e-03\n5322  2.180000e-01\n5323  1.213333e-01\n5324  1.006667e-01\n5325 -1.200000e-02\n5326 -1.253333e-01\n5327  1.320000e-01\n5328  1.260000e-01\n5329 -8.600000e-02\n5330  7.866667e-02\n5331 -5.800000e-02\n5332 -4.933333e-02\n5333 -2.066667e-01\n5334 -1.466667e-01\n5335  1.880000e-01\n5336  3.466667e-02\n5337  6.000000e-03\n5338  9.000000e-02\n5339 -4.533333e-02\n5340 -8.400000e-02\n5341 -3.600000e-02\n5342  4.666667e-02\n5343 -1.673333e-01\n5344  5.600000e-02\n5345 -1.400000e-01\n5346  2.333333e-02\n5347 -1.000000e-01\n5348 -4.800000e-02\n5349 -6.266667e-02\n5350  1.193333e-01\n5351  3.000000e-02\n5352  2.466667e-02\n5353 -1.266667e-01\n5354  7.066667e-02\n5355  9.933333e-02\n5356  1.900000e-01\n5357  8.800000e-02\n5358  1.446667e-01\n5359 -2.306667e-01\n5360  2.240000e-01\n5361 -1.886667e-01\n5362 -5.733333e-02\n5363  5.533333e-02\n5364  7.333333e-03\n5365  1.493333e-01\n5366 -1.173333e-01\n5367  1.826667e-01\n5368  1.726667e-01\n5369 -2.660000e-01\n5370 -3.733333e-02\n5371  8.600000e-02\n5372 -8.733333e-02\n5373 -3.200000e-02\n5374 -6.866667e-02\n5375 -4.666667e-03\n5376  1.046667e-01\n5377  7.266667e-02\n5378  4.066667e-02\n5379  4.400000e-02\n5380 -8.000000e-02\n5381  1.600000e-02\n5382  2.393333e-01\n5383  7.400000e-02\n5384 -6.666667e-04\n5385 -1.526667e-01\n5386  1.160000e-01\n5387  1.333333e-02\n5388  8.666667e-02\n5389 -4.133333e-02\n5390  8.933333e-02\n5391 -1.700000e-01\n5392 -7.866667e-02\n5393  5.933333e-02\n5394 -3.000000e-02\n5395 -1.020000e-01\n5396 -2.600000e-02\n5397  6.666667e-03\n5398  1.066667e-01\n5399 -1.600000e-01\n5400 -1.893333e-01\n5401  7.866667e-02\n5402  1.460000e-01\n5403  1.246667e-01\n5404 -1.833333e-01\n5405 -1.446667e-01\n5406 -1.293333e-01\n5407  1.213333e-01\n5408 -1.893333e-01\n5409 -4.133333e-02\n5410  1.000000e-02\n5411 -1.506667e-01\n5412 -1.893333e-01\n5413 -4.666667e-03\n5414 -6.400000e-02\n5415 -1.326667e-01\n5416 -5.533333e-02\n5417  7.406851e-18\n5418  1.860000e-01\n5419  2.866667e-02\n5420 -2.733333e-02\n5421  4.933333e-02\n5422 -1.060000e-01\n5423  3.133333e-02\n5424  1.126667e-01\n5425 -1.606667e-01\n5426 -4.466667e-02\n5427 -9.000000e-02\n5428  1.160000e-01\n5429  6.733333e-02\n5430  1.520000e-01\n5431  7.333333e-03\n5432  1.266667e-02\n5433  5.200000e-02\n5434 -1.980000e-01\n5435  1.540000e-01\n5436 -6.133333e-02\n5437 -2.866667e-02\n5438  3.333333e-03\n5439 -1.326667e-01\n5440 -7.066667e-02\n5441 -1.666667e-01\n5442  2.280000e-01\n5443  1.746667e-01\n5444 -1.593333e-01\n5445 -1.106667e-01\n5446 -2.133333e-02\n5447 -1.440000e-01\n5448  5.466667e-02\n5449 -2.640000e-01\n5450 -1.346667e-01\n5451 -1.200000e-02\n5452 -1.066667e-01\n5453  6.800000e-02\n5454  2.073333e-01\n5455  1.200000e-02\n5456  3.800000e-02\n5457  1.000000e-02\n5458  9.133333e-02\n5459 -2.733333e-02\n5460 -1.293333e-01\n5461 -1.466667e-01\n5462 -1.980000e-01\n5463  7.733333e-02\n5464  9.800000e-02\n5465  1.960000e-01\n5466 -1.500000e-01\n5467 -1.793333e-01\n5468  8.466667e-02\n5469  1.940000e-01\n5470 -2.600000e-02\n5471  2.386667e-01\n5472 -1.620000e-01\n5473 -1.200000e-02\n5474 -8.666667e-02\n5475  6.200000e-02\n5476 -1.526667e-01\n5477  1.213333e-01\n5478 -8.600000e-02\n5479 -1.066667e-02\n5480  1.600000e-02\n5481 -3.666667e-02\n5482 -6.933333e-02\n5483  1.633333e-01\n5484 -1.213333e-01\n5485 -1.013333e-01\n5486  1.053333e-01\n5487 -8.733333e-02\n5488 -3.000000e-02\n5489  1.000000e-01\n5490  1.113333e-01\n5491  9.066667e-02\n5492 -1.066667e-02\n5493 -1.233333e-01\n5494 -7.333333e-02\n5495 -2.266667e-02\n5496  7.333333e-02\n5497  1.546667e-01\n5498 -5.266667e-02\n5499  4.133333e-02\n5500 -1.753333e-01\n5501 -1.173333e-01\n5502 -5.133333e-02\n5503  3.933333e-02\n5504 -1.573333e-01\n5505 -8.600000e-02\n5506  4.400000e-02\n5507 -1.133333e-02\n5508 -1.053333e-01\n5509 -6.266667e-02\n5510 -1.586667e-01\n5511 -2.060000e-01\n5512  6.000000e-03\n5513  1.386667e-01\n5514  1.260000e-01\n5515  2.133333e-01\n5516 -1.233333e-01\n5517 -2.253333e-01\n5518 -1.773333e-01\n5519  8.000000e-03\n5520  2.600000e-02\n5521 -8.466667e-02\n5522 -8.666667e-03\n5523 -4.666667e-02\n5524  2.000000e-02\n5525  1.746667e-01\n5526 -1.560000e-01\n5527 -1.593333e-01\n5528 -3.266667e-02\n5529  6.200000e-02\n5530 -4.000000e-03\n5531  2.040000e-01\n5532  9.400000e-02\n5533  2.126667e-01\n5534 -1.506667e-01\n5535 -1.006667e-01\n5536  8.066667e-02\n5537  3.266667e-02\n5538 -5.933333e-02\n5539  6.800000e-02\n5540  1.553333e-01\n5541  4.000000e-03\n5542  1.533333e-01\n5543  8.400000e-02\n5544  1.340000e-01\n5545 -1.933333e-02\n5546  1.893333e-01\n5547  6.200000e-02\n5548  1.013333e-01\n5549  4.733333e-02\n5550  5.266667e-02\n5551  1.833333e-01\n5552  6.000000e-03\n5553 -1.040000e-01\n5554 -4.666667e-02\n5555  4.933333e-02\n5556 -2.060000e-01\n5557 -1.160000e-01\n5558  5.066667e-02\n5559 -1.820000e-01\n5560  1.866667e-02\n5561 -7.800000e-02\n5562  2.100000e-01\n5563 -9.533333e-02\n5564 -5.666667e-02\n5565 -1.600000e-02\n5566  1.373333e-01\n5567  9.533333e-02\n5568  5.800000e-02\n5569  6.733333e-02\n5570  2.000000e-02\n5571 -1.880000e-01\n5572  7.066667e-02\n5573  3.933333e-02\n5574  1.140000e-01\n5575 -2.000000e-03\n5576  2.166667e-01\n5577 -4.733333e-02\n5578  1.066667e-01\n5579 -2.320000e-01\n5580 -5.666667e-02\n5581  6.333333e-02\n5582 -1.280000e-01\n5583  3.733333e-02\n5584 -1.040000e-01\n5585 -9.800000e-02\n5586  1.480000e-01\n5587 -2.266667e-02\n5588 -4.733333e-02\n5589  1.066667e-01\n5590 -1.813333e-01\n5591  3.933333e-02\n5592  5.933333e-02\n5593 -1.426667e-01\n5594  8.066667e-02\n5595  1.933333e-02\n5596 -3.400000e-02\n5597  3.000000e-02\n5598 -5.466667e-02\n5599 -3.933333e-02\n5600 -5.066667e-02\n5601 -1.333333e-01\n5602  1.246667e-01\n5603  1.413333e-01\n5604 -1.380000e-01\n5605 -1.413333e-01\n5606  9.000000e-02\n5607  1.353333e-01\n5608  8.533333e-02\n5609  8.866667e-02\n5610 -2.133333e-02\n5611 -2.933333e-02\n5612 -3.466667e-02\n5613 -3.333333e-02\n5614 -1.033333e-01\n5615 -2.100000e-01\n5616  2.600000e-02\n5617 -2.386667e-01\n5618 -2.780000e-01\n5619  1.333333e-01\n5620  5.933333e-02\n5621  2.266667e-02\n5622 -2.933333e-02\n5623 -7.200000e-02\n5624 -5.066667e-02\n5625  5.133333e-02\n5626  3.200000e-02\n5627 -1.333333e-03\n5628 -8.600000e-02\n5629  1.233333e-01\n5630 -6.733333e-02\n5631 -2.353333e-01\n5632 -1.733333e-02\n5633  2.220000e-01\n5634 -2.360000e-01\n5635  1.546667e-01\n5636 -1.320000e-01\n5637  1.766667e-01\n5638 -2.000000e-03\n5639  1.153333e-01\n5640 -8.200000e-02\n5641  5.666667e-02\n5642 -6.666667e-04\n5643 -2.400000e-01\n5644 -8.133333e-02\n5645  5.066667e-02\n5646  6.000000e-02\n5647 -7.400000e-02\n5648  2.206667e-01\n5649  7.333333e-02\n5650  1.006667e-01\n5651 -8.733333e-02\n5652 -1.406667e-01\n5653 -1.113333e-01\n5654 -4.600000e-02\n5655  1.040000e-01\n5656 -9.333333e-03\n5657  6.133333e-02\n5658  8.000000e-02\n5659 -3.400000e-02\n5660 -2.166667e-01\n5661  2.466667e-02\n5662 -1.600000e-02\n5663 -2.413333e-01\n5664 -2.800000e-02\n5665 -4.866667e-02\n5666  1.900000e-01\n5667 -4.333333e-02\n5668  2.426667e-01\n5669  2.200000e-02\n5670 -5.466667e-02\n5671  5.466667e-02\n5672 -1.060000e-01\n5673  1.126667e-01\n5674 -2.533333e-02\n5675 -1.626667e-01\n5676 -3.800000e-02\n5677  1.400000e-02\n5678 -5.333333e-03\n5679 -2.326667e-01\n5680  9.333333e-02\n5681  1.573333e-01\n5682 -1.353333e-01\n5683 -7.428535e-18\n5684  2.000000e-03\n5685  2.200000e-02\n5686  3.866667e-02\n5687 -1.413333e-01\n5688  8.933333e-02\n5689  1.720000e-01\n5690  4.600000e-02\n5691 -5.066667e-02\n5692  1.200000e-01\n5693  1.320000e-01\n5694 -5.866667e-02\n5695 -4.133333e-02\n5696 -2.333333e-02\n5697  1.046667e-01\n5698  3.733333e-02\n5699 -9.933333e-02\n5700  6.866667e-02\n5701  1.840000e-01\n5702  9.866667e-02\n5703 -1.446667e-01\n5704  1.100000e-01\n5705  1.080000e-01\n5706  2.300000e-01\n5707  1.053333e-01\n5708 -1.666667e-01\n5709  1.953333e-01\n5710 -1.146667e-01\n5711 -1.360000e-01\n5712 -1.253333e-01\n5713  2.420000e-01\n5714 -5.800000e-02\n5715 -1.353333e-01\n5716  1.400000e-02\n5717  9.266667e-02\n5718 -1.986667e-01\n5719 -1.520000e-01\n5720 -4.933333e-02\n5721  1.700000e-01\n5722  3.800000e-02\n5723  9.933333e-02\n5724 -5.200000e-02\n5725  2.800000e-02\n5726 -8.600000e-02\n5727 -5.600000e-02\n5728 -1.340000e-01\n5729 -1.380000e-01\n5730  1.500000e-01\n5731 -4.133333e-02\n5732 -1.066667e-02\n5733  6.400000e-02\n5734  1.520000e-01\n5735  8.266667e-02\n5736  1.986667e-01\n5737 -1.853333e-01\n5738 -1.066667e-01\n5739  2.333333e-02\n5740 -1.393333e-01\n5741  9.933333e-02\n5742  1.133333e-02\n5743  3.000000e-02\n5744 -7.866667e-02\n5745  1.320000e-01\n5746 -5.466667e-02\n5747 -1.360000e-01\n5748 -1.266667e-01\n5749 -3.866667e-02\n5750 -8.866667e-02\n5751  1.026667e-01\n5752  1.526667e-01\n5753 -1.106667e-01\n5754  1.506667e-01\n5755 -6.666667e-04\n5756 -2.380000e-01\n5757 -7.066667e-02\n5758  2.860000e-01\n5759 -1.700000e-01\n5760  1.120000e-01\n5761 -1.220000e-01\n5762 -1.240000e-01\n5763  2.173333e-01\n5764  2.140000e-01\n5765  1.493333e-01\n5766 -1.993333e-01\n5767  1.400000e-01\n5768  5.933333e-02\n5769 -2.126667e-01\n5770  2.240000e-01\n5771  1.653333e-01\n5772 -1.653333e-01\n5773 -9.333333e-03\n5774 -2.253333e-01\n5775 -2.400000e-02\n5776  7.733333e-02\n5777  1.133333e-01\n5778 -2.400000e-02\n5779 -2.006667e-01\n5780  1.513333e-01\n5781  1.553333e-01\n5782  1.700000e-01\n5783 -4.133333e-02\n5784 -1.333333e-03\n5785  4.666667e-03\n5786 -3.400000e-02\n5787 -1.846667e-01\n5788 -5.400000e-02\n5789 -2.333333e-02\n5790  3.698682e-17\n5791 -5.533333e-02\n5792 -1.973333e-01\n5793 -1.533333e-01\n5794 -8.000000e-03\n5795 -8.000000e-02\n5796  9.666667e-02\n5797  3.333333e-03\n5798  1.026667e-01\n5799 -3.333333e-02\n5800 -1.993333e-01\n5801 -1.393333e-01\n5802  1.346667e-01\n5803  1.080000e-01\n5804  3.333333e-02\n5805 -1.086667e-01\n5806 -7.533333e-02\n5807 -5.866667e-02\n5808 -4.533333e-02\n5809  2.033333e-01\n5810  1.000000e-02\n5811 -7.800000e-02\n5812  8.333333e-02\n5813 -1.626667e-01\n5814  1.000000e-01\n5815  1.133333e-02\n5816  9.533333e-02\n5817  1.373333e-01\n5818 -9.933333e-02\n5819 -1.126667e-01\n5820  2.800000e-02\n5821 -1.646667e-01\n5822 -2.446667e-01\n5823  2.273333e-01\n5824  1.020000e-01\n5825  2.133333e-02\n5826  7.466667e-02\n5827 -1.600000e-01\n5828 -1.213333e-01\n5829  1.040000e-01\n5830 -1.200000e-02\n5831 -3.466667e-02\n5832  1.080000e-01\n5833 -1.966667e-01\n5834  2.006667e-01\n5835  3.400000e-02\n5836 -1.746667e-01\n5837  1.446667e-01\n5838  1.560000e-01\n5839  1.600000e-01\n5840  7.200000e-02\n5841 -9.333333e-02\n5842  9.200000e-02\n5843 -2.020000e-01\n5844  4.066667e-02\n5845  4.000000e-03\n5846  7.933333e-02\n5847  8.200000e-02\n5848 -6.000000e-02\n5849  7.866667e-02\n5850 -1.266667e-01\n5851 -8.066667e-02\n5852  1.506667e-01\n5853 -3.800000e-02\n5854 -2.266667e-01\n5855 -2.533333e-02\n5856  1.640000e-01\n5857 -1.206667e-01\n5858  8.000000e-03\n5859  1.700000e-01\n5860  4.000000e-03\n5861  8.933333e-02\n5862  1.933333e-02\n5863  2.080000e-01\n5864  3.866667e-02\n5865  2.466667e-02\n5866  1.740000e-01\n5867  1.146667e-01\n5868  2.066667e-01\n5869 -8.800000e-02\n5870 -1.113333e-01\n5871  1.820000e-01\n5872 -9.866667e-02\n5873 -9.133333e-02\n5874 -2.133333e-02\n5875  1.153333e-01\n5876 -1.380000e-01\n5877 -8.333333e-02\n5878  1.180000e-01\n5879 -1.140000e-01\n5880 -1.933333e-02\n5881  1.353333e-01\n5882  1.460000e-01\n5883  1.520000e-01\n5884  7.133333e-02\n5885 -1.640000e-01\n5886  1.320000e-01\n5887 -1.006667e-01\n5888 -2.133333e-02\n5889 -1.220000e-01\n5890  1.153333e-01\n5891 -7.066667e-02\n5892 -1.960000e-01\n5893 -1.513333e-01\n5894  1.866667e-01\n5895  2.260000e-01\n5896 -1.340000e-01\n5897  1.033333e-01\n5898 -1.300000e-01\n5899 -1.533333e-02\n5900  5.333333e-03\n5901 -4.066667e-02\n5902 -1.666667e-02\n5903 -2.080000e-01\n5904 -1.200000e-01\n5905  9.600000e-02\n5906 -1.406667e-01\n5907  8.666667e-03\n5908  1.493333e-01\n5909 -3.466667e-02\n5910 -4.466667e-02\n5911  2.400000e-02\n5912 -9.800000e-02\n5913 -1.346667e-01\n5914 -1.120000e-01\n5915 -1.073333e-01\n5916 -5.200000e-02\n5917  1.613333e-01\n5918 -3.533333e-02\n5919  6.933333e-02\n5920  1.266667e-02\n5921  6.800000e-02\n5922 -1.546667e-01\n5923 -1.933333e-01\n5924  8.666667e-02\n5925  6.266667e-02\n5926 -6.466667e-02\n5927 -4.466667e-02\n5928 -6.200000e-02\n5929  7.403237e-18\n5930  1.266667e-02\n5931 -1.880000e-01\n5932  2.666667e-03\n5933  7.333333e-03\n5934  1.160000e-01\n5935 -1.800000e-02\n5936  6.200000e-02\n5937  1.713333e-01\n5938  7.866667e-02\n5939  7.466667e-02\n5940  1.293333e-01\n5941 -1.800000e-02\n5942  1.393333e-01\n5943  7.066667e-02\n5944  3.466667e-02\n5945  1.213333e-01\n5946  2.413333e-01\n5947  1.353333e-01\n5948 -1.220000e-01\n5949 -9.066667e-02\n5950 -1.666667e-01\n5951  1.313333e-01\n5952  2.200000e-02\n5953  5.133333e-02\n5954 -8.200000e-02\n5955 -6.933333e-02\n5956  1.153333e-01\n5957 -2.000000e-02\n5958 -1.420000e-01\n5959 -1.080000e-01\n5960 -1.566667e-01\n5961 -8.600000e-02\n5962 -2.466667e-02\n5963 -1.280000e-01\n5964  5.333333e-03\n5965 -2.066667e-02\n5966  7.400000e-02\n5967  1.746667e-01\n5968 -2.013333e-01\n5969 -1.346667e-01\n5970 -1.860000e-01\n5971 -1.240000e-01\n5972  2.666667e-03\n5973  5.333333e-03\n5974  1.853333e-01\n5975 -2.173333e-01\n5976 -2.060000e-01\n5977 -4.666667e-02\n5978 -5.200000e-02\n5979 -6.266667e-02\n5980 -2.533333e-02\n5981  1.566667e-01\n5982 -1.253333e-01\n5983 -2.666667e-03\n5984 -1.753333e-01\n5985 -6.333333e-02\n5986  1.740000e-01\n5987 -1.386667e-01\n5988 -2.333333e-02\n5989 -1.246667e-01\n5990  2.500000e-01\n5991  8.200000e-02\n5992 -1.566667e-01\n5993 -4.666667e-03\n5994  2.533333e-02\n5995 -1.486667e-01\n5996 -1.486667e-01\n5997 -5.133333e-02\n5998 -5.133333e-02\n5999  1.100000e-01\n6000 -4.200000e-02\n6001  5.400000e-02\n6002  1.333333e-02\n6003  1.266667e-02\n6004 -6.666667e-04\n6005 -1.320000e-01\n6006  6.000000e-03\n6007 -1.373333e-01\n6008 -1.233333e-01\n6009 -1.453333e-01\n6010 -1.666667e-01\n6011  7.666667e-02\n6012 -1.000000e-02\n6013  4.800000e-02\n6014  1.220000e-01\n6015 -8.066667e-02\n6016 -8.000000e-03\n6017 -6.266667e-02\n6018  1.786667e-01\n6019 -7.000000e-02\n6020 -8.200000e-02\n6021  1.193333e-01\n6022 -2.013333e-01\n6023  1.546667e-01\n6024  4.733333e-02\n6025 -7.133333e-02\n6026 -1.746667e-01\n6027  1.986667e-01\n6028 -6.933333e-02\n6029  3.600000e-02\n6030 -1.153333e-01\n6031 -1.900000e-01\n6032 -1.780000e-01\n6033  2.193333e-01\n6034  1.760000e-01\n6035 -3.533333e-02\n6036  2.080000e-01\n6037 -1.220000e-01\n6038  1.180000e-01\n6039  1.533333e-01\n6040  8.600000e-02\n6041 -7.800000e-02\n6042 -6.466667e-02\n6043  4.400000e-02\n6044 -2.486667e-01\n6045 -1.613333e-01\n6046  1.893333e-01\n6047  2.126667e-01\n6048 -5.666667e-02\n6049  4.666667e-03\n6050 -1.446667e-01\n6051 -7.666667e-02\n6052 -1.846667e-01\n6053 -1.833333e-01\n6054  8.466667e-02\n6055  1.446667e-01\n6056 -2.266667e-02\n6057  1.193333e-01\n6058 -1.653333e-01\n6059  4.133333e-02\n6060  2.286667e-01\n6061 -1.813333e-01\n6062  6.333333e-02\n6063 -4.000000e-02\n6064  1.666667e-01\n6065  3.733333e-02\n6066 -1.593333e-01\n6067  6.800000e-02\n6068  1.920000e-01\n6069 -7.200000e-02\n6070 -8.666667e-03\n6071  8.066667e-02\n6072  2.106667e-01\n6073 -1.493333e-01\n6074 -1.380000e-01\n6075 -2.020000e-01\n6076  2.533333e-02\n6077 -6.000000e-03\n6078 -1.700000e-01\n6079 -1.093333e-01\n6080  8.133333e-02\n6081 -9.000000e-02\n6082  8.000000e-03\n6083 -5.666667e-02\n6084  1.600000e-01\n6085  1.586667e-01\n6086 -8.133333e-02\n6087  5.800000e-02\n6088 -2.460000e-01\n6089  8.066667e-02\n6090  1.386667e-01\n6091  7.733333e-02\n6092  3.466667e-02\n6093 -7.133333e-02\n6094 -2.866667e-02\n6095 -1.573333e-01\n6096  1.486667e-01\n6097  1.466667e-02\n6098 -1.193333e-01\n6099  3.733333e-02\n6100 -1.800000e-02\n6101 -1.826667e-01\n6102 -1.733333e-01\n6103  1.120000e-01\n6104 -1.740000e-01\n6105  8.933333e-02\n6106  8.533333e-02\n6107  7.200000e-02\n6108 -1.653333e-01\n6109 -4.800000e-02\n6110 -5.400000e-02\n6111  2.000000e-01\n6112  4.000000e-02\n6113  3.600000e-02\n6114 -7.133333e-02\n6115  7.200000e-02\n6116  5.333333e-03\n6117 -3.333333e-02\n6118 -1.800000e-02\n6119 -2.033333e-01\n6120 -1.313333e-01\n6121 -2.933333e-02\n6122  1.386667e-01\n6123  1.826667e-01\n6124  1.346667e-01\n6125  9.600000e-02\n6126  4.000000e-02\n6127  2.406667e-01\n6128 -5.933333e-02\n6129  1.400000e-01\n6130 -3.666667e-02\n6131 -2.066667e-02\n6132  6.400000e-02\n6133  1.413333e-01\n6134 -1.800000e-01\n6135  1.080000e-01\n6136  6.733333e-02\n6137  7.933333e-02\n6138 -1.046667e-01\n6139 -7.466667e-02\n6140 -4.866667e-02\n6141 -1.213333e-01\n6142 -2.386667e-01\n6143  1.260000e-01\n6144 -6.666667e-03\n6145  1.620000e-01\n6146  2.153333e-01\n6147 -5.800000e-02\n6148 -2.066667e-01\n6149  2.233333e-01\n6150  2.140000e-01\n6151 -5.333333e-03\n6152  5.179691e-17\n6153 -1.800000e-02\n6154 -1.200000e-02\n6155  1.206667e-01\n6156  1.646667e-01\n6157 -1.006667e-01\n6158  6.933333e-02\n6159  1.600000e-01\n6160 -1.040000e-01\n6161  2.360000e-01\n6162  1.833333e-01\n6163  1.133333e-01\n6164  1.773333e-01\n6165  2.100000e-01\n6166  9.200000e-02\n6167  1.633333e-01\n6168 -2.406667e-01\n6169 -1.426667e-01\n6170 -2.600000e-02\n6171  1.466667e-01\n6172  1.986667e-01\n6173  1.633333e-01\n6174  3.333333e-02\n6175  5.066667e-02\n6176  1.353333e-01\n6177 -3.133333e-02\n6178 -4.066667e-02\n6179  1.393333e-01\n6180 -3.333333e-02\n6181 -1.066667e-02\n6182 -1.413333e-01\n6183 -8.400000e-02\n6184  8.200000e-02\n6185 -7.000000e-02\n6186  2.766667e-01\n6187 -1.600000e-02\n6188 -2.240000e-01\n6189  4.533333e-02\n6190  6.066667e-02\n6191  1.813333e-01\n6192  1.093333e-01\n6193  1.260000e-01\n6194 -9.733333e-02\n6195  2.200000e-02\n6196  1.940000e-01\n6197 -1.286667e-01\n6198  2.266667e-02\n6199 -1.546667e-01\n6200 -8.666667e-03\n6201 -4.133333e-02\n6202  1.206667e-01\n6203  3.400000e-02\n6204  7.333333e-02\n6205 -5.800000e-02\n6206 -1.420000e-01\n6207  1.200000e-01\n6208 -4.000000e-03\n6209  2.800000e-02\n6210 -1.866667e-02\n6211 -2.466667e-02\n6212  2.026667e-01\n6213  1.493333e-01\n6214 -2.266667e-01\n6215  3.600000e-02\n6216 -3.400000e-02\n6217  2.080000e-01\n6218  2.533333e-02\n6219  9.333333e-02\n6220 -2.086667e-01\n6221 -5.600000e-02\n6222  1.653333e-01\n6223  2.333333e-01\n6224 -1.600000e-02\n6225  2.093333e-01\n6226  1.800000e-02\n6227 -2.526667e-01\n6228 -2.466667e-02\n6229  1.333333e-03\n6230 -6.133333e-02\n6231 -4.000000e-02\n6232  1.000000e-01\n6233  5.466667e-02\n6234 -7.866667e-02\n6235 -6.666667e-03\n6236  8.866667e-02\n6237  1.900000e-01\n6238 -1.293333e-01\n6239  1.680000e-01\n6240  3.066667e-02\n6241 -7.933333e-02\n6242  9.666667e-02\n6243  1.393333e-01\n6244 -2.353333e-01\n6245 -1.340000e-01\n6246  2.346667e-01\n6247  8.800000e-02\n6248  1.480000e-01\n6249 -9.200000e-02\n6250 -1.266667e-01\n6251  1.086667e-01\n6252 -1.586667e-01\n6253 -2.666667e-02\n6254 -3.733333e-02\n6255 -3.733333e-02\n6256 -2.733333e-02\n6257  6.733333e-02\n6258 -1.013333e-01\n6259  2.380000e-01\n6260 -1.146667e-01\n6261 -1.386667e-01\n6262  7.866667e-02\n6263  1.060000e-01\n6264  8.533333e-02\n6265 -2.593333e-01\n6266 -1.013333e-01\n6267  1.013333e-01\n6268  8.666667e-03\n6269 -7.333333e-03\n6270  7.666667e-02\n6271 -1.933333e-02\n6272  2.000000e-02\n6273  2.266667e-02\n6274 -1.466667e-01\n6275  1.940000e-01\n6276  4.933333e-02\n6277  1.553333e-01\n6278  2.286667e-01\n6279  5.333333e-02\n6280 -1.640000e-01\n6281  2.866667e-02\n6282  2.000000e-02\n6283  9.866667e-02\n6284 -2.280000e-01\n6285 -7.733333e-02\n6286 -1.386667e-01\n6287  9.400000e-02\n6288  8.466667e-02\n6289 -1.000000e-01\n6290 -9.666667e-02\n6291  1.200000e-01\n6292 -1.333333e-01\n6293  3.000000e-02\n6294  1.100000e-01\n6295  4.266667e-02\n6296 -1.306667e-01\n6297 -2.066667e-02\n6298  2.733333e-02\n6299 -1.566667e-01\n6300  5.666667e-02\n6301  5.200000e-02\n6302  6.066667e-02\n6303  1.346667e-01\n6304 -2.326667e-01\n6305  5.733333e-02\n6306 -2.060000e-01\n6307  1.120000e-01\n6308 -8.000000e-02\n6309  2.160000e-01\n6310 -9.933333e-02\n6311  5.600000e-02\n6312 -4.666667e-02\n6313 -2.433333e-01\n6314  1.506667e-01\n6315  1.853333e-01\n6316 -1.400000e-01\n6317 -1.593333e-01\n6318  1.533333e-01\n6319 -1.346667e-01\n6320 -9.066667e-02\n6321 -7.666667e-02\n6322 -1.733333e-01\n6323 -1.933333e-01\n6324  6.266667e-02\n6325 -1.353333e-01\n6326  1.306667e-01\n6327  9.066667e-02\n6328  2.200000e-02\n6329  2.326667e-01\n6330 -1.013333e-01\n6331  9.333333e-02\n6332 -1.946667e-01\n6333 -1.566667e-01\n6334 -2.933333e-02\n6335 -1.046667e-01\n6336  4.466667e-02\n6337  1.760000e-01\n6338 -2.480000e-01\n6339  2.066667e-01\n6340 -5.133333e-02\n6341 -2.020000e-01\n6342  3.400000e-02\n6343  1.266667e-01\n6344 -4.866667e-02\n6345  1.906667e-01\n6346 -7.800000e-02\n6347  1.013333e-01\n6348 -4.133333e-02\n6349  1.360000e-01\n6350 -8.066667e-02\n6351  2.433333e-01\n6352  2.113333e-01\n6353  1.320000e-01\n6354  4.333333e-02\n6355  1.086667e-01\n6356  1.240000e-01\n6357 -7.400000e-02\n6358 -6.066667e-02\n6359  1.420000e-01\n6360 -8.866667e-02\n6361  3.600000e-02\n6362 -6.000000e-03\n6363 -7.933333e-02\n6364  1.400000e-01\n6365 -3.000000e-02\n6366 -7.866667e-02\n6367 -1.906667e-01\n6368  1.946667e-01\n6369  2.053333e-01\n6370 -1.926667e-01\n6371  2.200000e-02\n6372 -2.666667e-02\n6373  1.266667e-01\n6374  3.666667e-02\n6375  1.586667e-01\n6376  9.733333e-02\n6377  2.180000e-01\n6378 -2.553333e-01\n6379  1.533333e-02\n6380 -2.000000e-02\n6381 -7.733333e-02\n6382  9.933333e-02\n6383  2.180000e-01\n6384 -2.533333e-02\n6385  2.373333e-01\n6386 -4.333333e-02\n6387 -1.806667e-01\n6388 -1.600000e-02\n6389 -9.333333e-03\n6390 -1.546667e-01\n6391  2.293333e-01\n6392  2.280000e-01\n6393  1.866667e-02\n6394  1.100000e-01\n6395 -7.800000e-02\n6396 -1.473333e-01\n6397  2.800000e-02\n6398 -3.266667e-02\n6399 -5.466667e-02\n6400 -3.000000e-02\n6401  1.393333e-01\n6402 -2.533333e-02\n6403  7.533333e-02\n6404  2.686667e-01\n6405  6.000000e-03\n6406  6.400000e-02\n6407  1.080000e-01\n6408  6.666667e-04\n6409  7.266667e-02\n6410  1.200000e-01\n6411  1.480000e-01\n6412 -2.200000e-01\n6413  3.000000e-02\n6414  6.666667e-02\n6415  1.386667e-01\n6416 -9.866667e-02\n6417 -1.366667e-01\n6418  1.066667e-02\n6419  7.733333e-02\n6420 -2.133333e-02\n6421 -1.193333e-01\n6422 -1.673333e-01\n6423 -5.933333e-02\n6424  1.546667e-01\n6425  1.060000e-01\n6426 -6.000000e-02\n6427 -1.966667e-01\n6428 -1.226667e-01\n6429  4.000000e-02\n6430  1.800000e-01\n6431 -2.560000e-01\n6432 -1.233333e-01\n6433 -1.213333e-01\n6434 -3.666667e-02\n6435  1.253333e-01\n6436 -6.666667e-04\n6437 -9.666667e-02\n6438  8.533333e-02\n6439  2.666667e-03\n6440 -1.400000e-01\n6441  1.453333e-01\n6442 -1.180000e-01\n6443  2.933333e-02\n6444 -7.266667e-02\n6445 -1.173333e-01\n6446 -1.146667e-01\n6447 -8.800000e-02\n6448  5.600000e-02\n6449 -2.580000e-01\n6450  1.200000e-02\n6451 -2.233333e-01\n6452  3.600000e-02\n6453 -2.226667e-01\n6454  6.600000e-02\n6455 -5.000000e-02\n6456  1.666667e-02\n6457  4.000000e-02\n6458 -9.466667e-02\n6459 -6.266667e-02\n6460 -7.400000e-02\n6461  1.353333e-01\n6462 -4.200000e-02\n6463 -1.026667e-01\n6464 -1.646667e-01\n6465 -5.266667e-02\n6466 -2.040000e-01\n6467 -1.433333e-01\n6468  2.140000e-01\n6469 -1.200000e-01\n6470 -6.133333e-02\n6471 -2.800000e-02\n6472  2.666667e-02\n6473 -4.733333e-02\n6474 -1.713333e-01\n6475 -5.933333e-02\n6476  1.246667e-01\n6477  4.666667e-02\n6478  1.740000e-01\n6479 -1.420000e-01\n6480  1.393333e-01\n6481  9.600000e-02\n6482 -3.800000e-02\n6483 -1.653333e-01\n6484  8.666667e-03\n6485 -1.333333e-02\n6486 -1.600000e-02\n6487  2.800000e-02\n6488  1.180000e-01\n6489 -3.133333e-02\n6490 -1.253333e-01\n6491 -1.220000e-01\n6492 -1.733333e-02\n6493  4.000000e-03\n6494 -7.733333e-02\n6495 -7.266667e-02\n6496  1.786667e-01\n6497  6.000000e-02\n6498 -1.326667e-01\n6499  1.700000e-01\n6500  1.200000e-02\n6501  1.426667e-01\n6502  2.533333e-02\n6503  1.533333e-01\n6504 -1.073333e-01\n6505  8.466667e-02\n6506  1.066667e-02\n6507 -1.486667e-01\n6508 -2.300000e-01\n6509 -6.666667e-02\n6510 -3.133333e-02\n6511 -3.333333e-02\n6512 -1.286667e-01\n6513 -4.666667e-02\n6514  9.866667e-02\n6515  1.973333e-01\n6516  1.420000e-01\n6517  2.133333e-02\n6518 -6.400000e-02\n6519  1.800000e-02\n6520  1.680000e-01\n6521 -1.320000e-01\n6522  5.400000e-02\n6523  1.666667e-01\n6524 -1.380000e-01\n6525  3.600000e-02\n6526  4.000000e-02\n6527 -5.133333e-02\n6528 -3.000000e-02\n6529  6.000000e-03\n6530  6.400000e-02\n6531 -7.066667e-02\n6532  1.406667e-01\n6533  5.333333e-02\n6534 -9.866667e-02\n6535  1.866667e-02\n6536  1.340000e-01\n6537  1.746667e-01\n6538  1.133333e-02\n6539 -1.366667e-01\n6540 -8.733333e-02\n6541  1.720000e-01\n6542 -9.933333e-02\n6543 -4.333333e-02\n6544 -1.653333e-01\n6545 -7.333333e-03\n6546  1.266667e-02\n6547  1.733333e-02\n6548  2.260000e-01\n6549 -1.440000e-01\n6550  2.186667e-01\n6551 -2.200000e-02\n6552  1.193333e-01\n6553 -9.333333e-03\n6554  1.666667e-02\n6555  1.426667e-01\n6556 -1.953333e-01\n6557 -8.000000e-03\n6558 -4.933333e-02\n6559  9.200000e-02\n6560  7.066667e-02\n6561  3.266667e-02\n6562  1.066667e-02\n6563  1.266667e-02\n6564 -2.213333e-01\n6565 -1.780000e-01\n6566  1.153333e-01\n6567 -1.133333e-01\n6568  1.540000e-01\n6569 -3.533333e-02\n6570 -1.306667e-01\n6571  6.733333e-02\n6572 -1.746667e-01\n6573  1.120000e-01\n6574 -6.733333e-02\n6575  2.153333e-01\n6576 -3.733333e-02\n6577 -9.066667e-02\n6578  3.866667e-02\n6579 -9.333333e-02\n6580  1.140000e-01\n6581 -1.086667e-01\n6582 -4.000000e-02\n6583 -2.333333e-02\n6584  1.200000e-01\n6585  1.080000e-01\n6586 -8.933333e-02\n6587 -6.000000e-03\n6588 -1.940000e-01\n6589 -2.000000e-02\n6590 -8.133333e-02\n6591  1.800000e-02\n6592 -7.600000e-02\n6593 -1.866667e-02\n6594 -5.866667e-02\n6595  6.000000e-02\n6596  8.133333e-02\n6597  9.266667e-02\n6598  8.133333e-02\n6599 -6.666667e-03\n6600  1.200000e-02\n6601  6.333333e-02\n6602 -2.320000e-01\n6603  1.973333e-01\n6604  7.333333e-03\n6605  1.300000e-01\n6606 -1.793333e-01\n6607 -1.980000e-01\n6608  8.666667e-02\n6609  1.380000e-01\n6610 -1.006667e-01\n6611  7.466667e-02\n6612 -9.666667e-02\n6613 -1.066667e-02\n6614 -8.266667e-02\n6615 -8.333333e-02\n6616 -9.133333e-02\n6617  4.466667e-02\n6618 -1.000000e-02\n6619 -1.466667e-01\n6620 -4.533333e-02\n6621 -2.000000e-01\n6622  1.793333e-01\n6623  1.973333e-01\n6624  1.093333e-01\n6625  1.446667e-01\n6626  4.333333e-02\n6627 -5.066667e-02\n6628 -1.326667e-01\n6629 -1.646667e-01\n6630 -1.540000e-01\n6631 -1.006667e-01\n6632  1.933333e-01\n6633 -1.033333e-01\n6634  6.266667e-02\n6635 -6.733333e-02\n6636 -2.233333e-01\n6637 -8.933333e-02\n6638  2.333333e-02\n6639 -4.333333e-02\n6640 -1.420000e-01\n6641 -2.533333e-02\n6642  1.000000e-01\n6643  1.813333e-01\n6644 -1.633333e-01\n6645  1.326667e-01\n6646  6.600000e-02\n6647  1.853333e-01\n6648  1.446667e-01\n6649  1.293333e-01\n6650  1.626667e-01\n6651  1.680000e-01\n6652 -1.453333e-01\n6653 -6.800000e-02\n6654  1.780000e-01\n6655  7.933333e-02\n6656  1.106667e-01\n6657  5.733333e-02\n6658  1.246667e-01\n6659  1.100000e-01\n6660  1.573333e-01\n6661 -1.680000e-01\n6662  8.533333e-02\n6663  1.053333e-01\n6664 -8.133333e-02\n6665  1.806667e-01\n6666  5.466667e-02\n6667  1.600000e-02\n6668  1.740000e-01\n6669  1.593333e-01\n6670  1.873333e-01\n6671  1.020000e-01\n6672 -1.173333e-01\n6673 -1.406667e-01\n6674 -7.933333e-02\n6675  7.333333e-02\n6676 -1.460000e-01\n6677 -2.600000e-02\n6678  2.353333e-01\n6679 -7.800000e-02\n6680 -1.260000e-01\n6681 -2.933333e-02\n6682  1.406667e-01\n6683 -1.806667e-01\n6684  1.020000e-01\n6685  2.866667e-02\n6686 -9.533333e-02\n6687  4.666667e-03\n6688 -2.600000e-02\n6689 -1.533333e-02\n6690  1.840000e-01\n6691 -1.306667e-01\n6692  8.466667e-02\n6693 -7.866667e-02\n6694 -4.000000e-02\n6695 -5.333333e-02\n6696  1.040000e-01\n6697  1.180000e-01\n6698 -1.740000e-01\n6699 -2.113333e-01\n6700  1.720000e-01\n6701  9.933333e-02\n6702 -1.780000e-01\n6703 -4.200000e-02\n6704 -3.000000e-02\n6705 -1.506667e-01\n6706 -2.446667e-01\n6707  1.980000e-01\n6708 -1.853333e-01\n6709 -3.533333e-02\n6710 -2.066667e-02\n6711  5.733333e-02\n6712  2.633333e-01\n6713 -2.466667e-02\n6714  4.666667e-03\n6715 -9.600000e-02\n6716 -1.913333e-01\n6717  7.333333e-03\n6718 -8.266667e-02\n6719 -1.426667e-01\n6720  2.206667e-01\n6721  3.666667e-02\n6722 -1.666667e-02\n6723 -8.466667e-02\n6724  1.000000e-02\n6725  2.080000e-01\n6726 -2.440000e-01\n6727  1.666667e-01\n6728 -1.626667e-01\n6729 -2.266667e-02\n6730 -6.200000e-02\n6731 -5.066667e-02\n6732  4.133333e-02\n6733 -1.820000e-01\n6734 -8.400000e-02\n6735  1.173333e-01\n6736  4.933333e-02\n6737 -1.620000e-01\n6738 -6.266667e-02\n6739  2.300000e-01\n6740  3.800000e-02\n6741 -1.133333e-01\n6742  1.600000e-01\n6743 -1.240000e-01\n6744 -1.373333e-01\n6745 -8.000000e-03\n6746  1.433333e-01\n6747 -1.073333e-01\n6748 -4.800000e-02\n6749 -6.533333e-02\n6750 -3.000000e-02\n6751 -7.866667e-02\n6752  1.366667e-01\n6753  1.206667e-01\n6754 -1.673333e-01\n6755 -4.066667e-02\n6756  1.493333e-01\n6757 -2.480000e-01\n6758  1.466667e-02\n6759 -8.800000e-02\n6760 -3.600000e-02\n6761 -2.000000e-02\n6762 -1.053333e-01\n6763  2.113333e-01\n6764 -4.533333e-02\n6765 -1.093333e-01\n6766  6.866667e-02\n6767  9.266667e-02\n6768 -2.800000e-02\n6769 -2.266667e-02\n6770  6.000000e-02\n6771 -3.200000e-02\n6772 -7.200000e-02\n6773 -2.440000e-01\n6774  8.800000e-02\n6775  1.146667e-01\n6776 -1.133333e-01\n6777 -1.733333e-01\n6778  1.780000e-01\n6779  2.200000e-02\n6780  2.080000e-01\n6781 -1.246667e-01\n6782  1.300000e-01\n6783  1.266667e-01\n6784  1.653333e-01\n6785 -4.666667e-03\n6786 -6.266667e-02\n6787 -2.053333e-01\n6788  1.440000e-01\n6789  1.513333e-01\n6790 -1.826667e-01\n6791 -1.166667e-01\n6792  1.546667e-01\n6793  1.613333e-01\n6794 -1.446667e-01\n6795 -1.340000e-01\n6796 -7.400000e-02\n6797 -5.866667e-02\n6798  6.466667e-02\n6799  1.600000e-01\n6800  1.966667e-01\n6801 -6.466667e-02\n6802 -2.400000e-02\n6803 -6.000000e-03\n6804 -5.800000e-02\n6805 -2.380000e-01\n6806  1.220000e-01\n6807  2.393333e-01\n6808  1.880000e-01\n6809  1.160000e-01\n6810 -4.800000e-02\n6811 -5.066667e-02\n6812  6.733333e-02\n6813 -2.100000e-01\n6814  5.533333e-02\n6815 -1.673333e-01\n6816 -3.333333e-03\n6817 -9.333333e-03\n6818  1.226667e-01\n6819  5.066667e-02\n6820 -1.953333e-01\n6821  6.666667e-04\n6822 -9.666667e-02\n6823 -2.133333e-02\n6824 -1.340000e-01\n6825  1.780000e-01\n6826 -1.213333e-01\n6827 -1.533333e-01\n6828  2.000000e-03\n6829  6.200000e-02\n6830  7.666667e-02\n6831  7.133333e-02\n6832  1.400000e-02\n6833  1.593333e-01\n6834  2.333333e-02\n6835  1.593333e-01\n6836 -2.020000e-01\n6837 -2.266667e-02\n6838 -1.933333e-01\n6839 -3.200000e-02\n6840  1.400000e-02\n6841  1.513333e-01\n6842  1.560000e-01\n6843 -2.133333e-02\n6844 -9.866667e-02\n6845 -4.733333e-02\n6846 -2.333333e-02\n6847 -2.133333e-02\n6848  1.466667e-01\n6849 -2.666667e-02\n6850  1.733333e-01\n6851  5.666667e-02\n6852  1.300000e-01\n6853  1.046667e-01\n6854 -1.580000e-01\n6855  5.533333e-02\n6856  1.960000e-01\n6857 -6.000000e-03\n6858 -1.960000e-01\n6859  4.333333e-02\n6860  1.206667e-01\n6861 -1.500000e-01\n6862  2.286667e-01\n6863 -1.273333e-01\n6864  2.446667e-01\n6865  1.533333e-02\n6866 -1.613333e-01\n6867 -1.620000e-01\n6868  9.666667e-02\n6869  1.273333e-01\n6870  2.100000e-01\n6871  1.700000e-01\n6872 -8.200000e-02\n6873  4.933333e-02\n6874  2.933333e-02\n6875  9.200000e-02\n6876 -7.000000e-02\n6877  3.000000e-02\n6878 -8.466667e-02\n6879  6.000000e-03\n6880 -2.200000e-02\n6881  9.666667e-02\n6882  8.066667e-02\n6883  9.066667e-02\n6884 -8.666667e-02\n6885 -3.200000e-02\n6886  1.326667e-01\n6887  9.333333e-02\n6888 -3.400000e-02\n6889 -1.346667e-01\n6890 -2.733333e-02\n6891  1.333333e-02\n6892 -1.093333e-01\n6893 -2.146667e-01\n6894  2.133333e-02\n6895 -4.000000e-02\n6896 -1.306667e-01\n6897  2.000000e-02\n6898 -8.600000e-02\n6899 -7.400000e-02\n6900 -6.800000e-02\n6901 -6.933333e-02\n6902  1.493333e-01\n6903 -9.333333e-03\n6904 -1.720000e-01\n6905  1.160000e-01\n6906 -9.800000e-02\n6907  5.133333e-02\n6908 -1.293333e-01\n6909 -2.666667e-02\n6910  6.066667e-02\n6911 -3.933333e-02\n6912  2.133333e-02\n6913 -1.673333e-01\n6914 -1.460000e-01\n6915  5.000000e-02\n6916  1.066667e-01\n6917  1.940000e-01\n6918  1.640000e-01\n6919 -7.733333e-02\n6920  1.206667e-01\n6921 -2.213333e-01\n6922  1.866667e-02\n6923  8.400000e-02\n6924  1.713333e-01\n6925 -7.333333e-03\n6926  1.793333e-01\n6927 -3.600000e-02\n6928  1.093333e-01\n6929  1.620000e-01\n6930 -2.933333e-02\n6931  5.333333e-03\n6932 -2.413333e-01\n6933  6.600000e-02\n6934 -5.179691e-17\n6935  9.666667e-02\n6936 -2.140000e-01\n6937 -5.666667e-02\n6938 -1.686667e-01\n6939 -1.620000e-01\n6940 -2.466667e-02\n6941 -4.133333e-02\n6942  7.600000e-02\n6943 -6.466667e-02\n6944  3.666667e-02\n6945 -1.620000e-01\n6946  1.266667e-01\n6947  2.733333e-02\n6948 -1.626667e-01\n6949 -1.093333e-01\n6950  1.873333e-01\n6951  1.046667e-01\n6952 -2.100000e-01\n6953  2.066667e-02\n6954  8.866667e-02\n6955 -2.260000e-01\n6956 -1.586667e-01\n6957 -1.793333e-01\n6958  1.500000e-01\n6959  6.200000e-02\n6960 -1.933333e-02\n6961 -1.786667e-01\n6962 -7.800000e-02\n6963  1.826667e-01\n6964 -9.400000e-02\n6965 -8.000000e-03\n6966 -2.853333e-01\n6967  3.733333e-02\n6968  1.206667e-01\n6969 -4.266667e-02\n6970  3.200000e-02\n6971  1.186667e-01\n6972  3.333333e-03\n6973 -1.180000e-01\n6974  1.506667e-01\n6975  4.733333e-02\n6976  1.066667e-02\n6977  6.466667e-02\n6978  9.200000e-02\n6979 -2.120000e-01\n6980 -2.000000e-02\n6981  2.600000e-01\n6982 -2.286667e-01\n6983 -1.000000e-02\n6984 -1.300000e-01\n6985 -2.666667e-02\n6986 -1.393333e-01\n6987 -2.300000e-01\n6988 -6.333333e-02\n6989 -6.466667e-02\n6990  2.373333e-01\n6991  4.866667e-02\n6992  2.600000e-02\n6993  4.200000e-02\n6994  1.013333e-01\n6995  1.406667e-01\n6996 -8.666667e-02\n6997  2.013333e-01\n6998 -2.600000e-02\n6999  1.380000e-01\n7000  1.080000e-01\n7001  6.666667e-02\n7002 -1.733333e-02\n7003  1.333333e-01\n7004  1.233333e-01\n7005 -1.073333e-01\n7006 -1.006667e-01\n7007 -1.726667e-01\n7008 -1.320000e-01\n7009 -1.420000e-01\n7010  1.466667e-02\n7011  9.933333e-02\n7012  1.160000e-01\n7013 -9.600000e-02\n7014  2.093333e-01\n7015 -6.533333e-02\n7016 -6.000000e-02\n7017  6.466667e-02\n7018  1.606667e-01\n7019  2.466667e-02\n7020  2.246667e-01\n7021 -8.666667e-02\n7022  1.346667e-01\n7023  3.666667e-02\n7024  1.000000e-02\n7025 -4.800000e-02\n7026  1.600000e-01\n7027 -1.493333e-01\n7028  3.533333e-02\n7029 -9.666667e-02\n7030  8.666667e-03\n7031  5.600000e-02\n7032  7.000000e-02\n7033  2.733333e-02\n7034 -3.266667e-02\n7035  2.046667e-01\n7036 -1.406667e-01\n7037 -2.400000e-02\n7038  1.033333e-01\n7039  1.466667e-02\n7040  1.333333e-01\n7041 -1.173333e-01\n7042 -5.066667e-02\n7043 -2.866667e-02\n7044  1.080000e-01\n7045 -1.046667e-01\n7046 -8.333333e-02\n7047 -8.000000e-03\n7048  1.166667e-01\n7049 -8.533333e-02\n7050  1.773333e-01\n7051  1.013333e-01\n7052 -1.106667e-01\n7053 -2.460000e-01\n7054  1.280000e-01\n7055 -3.333333e-03\n7056  2.933333e-02\n7057  1.106667e-01\n7058  4.866667e-02\n7059 -7.266667e-02\n7060 -1.293333e-01\n7061  2.213333e-01\n7062  2.240000e-01\n7063 -1.320000e-01\n7064 -1.333333e-01\n7065  7.600000e-02\n7066  7.133333e-02\n7067  2.066667e-01\n7068 -7.533333e-02\n7069 -7.600000e-02\n7070  2.593333e-01\n7071 -6.666667e-03\n7072 -5.333333e-02\n7073  6.600000e-02\n7074  9.800000e-02\n7075  6.733333e-02\n7076  8.800000e-02\n7077 -1.153333e-01\n7078  9.866667e-02\n7079  4.133333e-02\n7080 -1.666667e-01\n7081 -6.666667e-04\n7082  4.400000e-02\n7083 -7.000000e-02\n7084 -1.793333e-01\n7085  7.733333e-02\n7086  2.393333e-01\n7087 -9.866667e-02\n7088  1.740000e-01\n7089  6.733333e-02\n7090 -8.000000e-02\n7091 -1.066667e-01\n7092 -1.200000e-01\n7093 -1.800000e-02\n7094  2.733333e-02\n7095  1.773333e-01\n7096 -8.066667e-02\n7097  2.600000e-02\n7098  1.346667e-01\n7099 -8.000000e-02\n7100  5.733333e-02\n7101 -2.306667e-01\n7102  3.200000e-02\n7103 -1.353333e-01\n7104  1.780000e-01\n7105 -5.600000e-02\n7106  9.466667e-02\n7107  1.320000e-01\n7108 -7.133333e-02\n7109 -7.333333e-02\n7110 -7.533333e-02\n7111  1.066667e-01\n7112 -8.466667e-02\n7113 -1.440000e-01\n7114 -8.800000e-02\n7115 -9.866667e-02\n7116 -1.193333e-01\n7117 -1.213333e-01\n7118  2.226667e-01\n7119 -1.666667e-02\n7120 -1.553333e-01\n7121  8.933333e-02\n7122  1.166667e-01\n7123 -7.266667e-02\n7124  1.333333e-01\n7125 -3.266667e-02\n7126 -5.066667e-02\n7127  1.753333e-01\n7128  2.533333e-02\n7129 -2.220971e-17\n7130  6.000000e-02\n7131 -7.933333e-02\n7132 -9.533333e-02\n7133 -3.666667e-02\n7134  1.906667e-01\n7135  2.160000e-01\n7136 -5.666667e-02\n7137 -1.546667e-01\n7138 -4.266667e-02\n7139 -9.866667e-02\n7140 -9.533333e-02\n7141 -1.060000e-01\n7142  1.466667e-02\n7143  1.106667e-01\n7144  3.533333e-02\n7145 -8.400000e-02\n7146  1.080000e-01\n7147 -1.046667e-01\n7148  3.533333e-02\n7149  2.180000e-01\n7150 -3.866667e-02\n7151 -1.233333e-01\n7152  3.933333e-02\n7153  1.033333e-01\n7154 -1.066667e-02\n7155 -3.699405e-17\n7156 -1.220000e-01\n7157  1.426667e-01\n7158 -1.366667e-01\n7159 -7.933333e-02\n7160 -1.333333e-02\n7161  2.333333e-02\n7162  5.266667e-02\n7163 -1.646667e-01\n7164  2.933333e-02\n7165  2.300000e-01\n7166  1.546667e-01\n7167  1.726667e-01\n7168 -1.300000e-01\n7169  1.233333e-01\n7170  6.933333e-02\n7171 -9.600000e-02\n7172  2.460000e-01\n7173 -8.133333e-02\n7174  9.333333e-03\n7175  7.333333e-02\n7176  5.400000e-02\n7177 -2.800000e-02\n7178 -1.313333e-01\n7179  1.440000e-01\n7180  1.513333e-01\n7181 -1.086667e-01\n7182  1.700000e-01\n7183  2.266667e-02\n7184 -6.533333e-02\n7185  2.000000e-03\n7186 -9.000000e-02\n7187 -4.666667e-03\n7188  1.733333e-02\n7189  4.466667e-02\n7190 -2.533333e-02\n7191  7.466667e-02\n7192  9.000000e-02\n7193  1.293333e-01\n7194 -1.700000e-01\n7195  1.100000e-01\n7196  9.600000e-02\n7197  1.333333e-01\n7198 -1.613333e-01\n7199 -5.866667e-02\n7200  1.593333e-01\n7201  1.080000e-01\n7202 -3.933333e-02\n7203 -7.333333e-02\n7204 -1.113333e-01\n7205 -1.613333e-01\n7206  2.266667e-02\n7207 -6.533333e-02\n7208  3.800000e-02\n7209  1.820000e-01\n7210 -1.806667e-01\n7211 -6.266667e-02\n7212  1.980000e-01\n7213 -1.653333e-01\n7214 -1.173333e-01\n7215 -4.533333e-02\n7216  1.333333e-01\n7217 -7.133333e-02\n7218  4.200000e-02\n7219 -5.266667e-02\n7220 -4.600000e-02\n7221  3.400000e-02\n7222 -1.640000e-01\n7223 -2.186667e-01\n7224 -1.453333e-01\n7225  2.666667e-02\n7226  1.206667e-01\n7227 -9.666667e-02\n7228  1.813333e-01\n7229  6.466667e-02\n7230  1.140000e-01\n7231  8.800000e-02\n7232  2.013333e-01\n7233  5.800000e-02\n7234 -1.286667e-01\n7235 -1.153333e-01\n7236  1.746667e-01\n7237  2.266667e-01\n7238 -1.333333e-02\n7239  2.000000e-02\n7240  1.486667e-01\n7241  2.066667e-02\n7242 -1.073333e-01\n7243  1.300000e-01\n7244 -2.260000e-01\n7245 -1.333333e-03\n7246 -5.600000e-02\n7247 -1.066667e-02\n7248 -1.306667e-01\n7249  8.866667e-02\n7250 -8.866667e-02\n7251  1.446667e-01\n7252  1.060000e-01\n7253  2.206667e-01\n7254 -6.866667e-02\n7255  1.533333e-01\n7256 -1.166667e-01\n7257 -1.726667e-01\n7258 -1.166667e-01\n7259  1.646667e-01\n7260  8.933333e-02\n7261 -5.400000e-02\n7262  6.666667e-03\n7263 -1.040000e-01\n7264  1.333333e-03\n7265 -2.053333e-01\n7266 -1.326667e-01\n7267  2.000000e-02\n7268 -1.386667e-01\n7269  1.393333e-01\n7270  1.700000e-01\n7271 -4.133333e-02\n7272  1.386667e-01\n7273 -6.866667e-02\n7274  2.026667e-01\n7275  1.046667e-01\n7276  2.066667e-02\n7277  5.933333e-02\n7278 -8.400000e-02\n7279  1.413333e-01\n7280 -1.753333e-01\n7281  4.466667e-02\n7282  1.260000e-01\n7283  7.866667e-02\n7284 -8.400000e-02\n7285 -5.133333e-02\n7286  5.333333e-03\n7287 -9.866667e-02\n7288 -1.300000e-01\n7289  7.066667e-02\n7290  2.166667e-01\n7291 -4.400000e-02\n7292 -5.666667e-02\n7293 -5.266667e-02\n7294 -2.000000e-02\n7295 -1.846667e-01\n7296 -3.666667e-02\n7297  1.273333e-01\n7298 -8.933333e-02\n7299 -5.200000e-02\n7300  1.800000e-01\n7301 -1.600000e-01\n7302  1.153333e-01\n7303 -6.533333e-02\n7304 -1.333333e-02\n7305 -8.666667e-02\n7306  1.286667e-01\n7307  1.513333e-01\n7308 -1.133333e-02\n7309 -1.653333e-01\n7310 -4.066667e-02\n7311  7.333333e-02\n7312  6.466667e-02\n7313  6.200000e-02\n7314 -1.806667e-01\n7315 -2.153333e-01\n7316 -5.666667e-02\n7317  1.933333e-02\n7318 -1.873333e-01\n7319 -1.406667e-01\n7320 -1.493333e-01\n7321  1.586667e-01\n7322  4.800000e-02\n7323  3.699767e-17\n7324  8.733333e-02\n7325  1.800000e-02\n7326  3.466667e-02\n7327 -2.026667e-01\n7328  7.066667e-02\n7329  1.146667e-01\n7330  6.400000e-02\n7331  7.133333e-02\n7332 -6.400000e-02\n7333  1.700000e-01\n7334 -8.600000e-02\n7335  6.933333e-02\n7336  1.340000e-01\n7337  1.240000e-01\n7338 -1.713333e-01\n7339  1.153333e-01\n7340 -1.086667e-01\n7341  1.306667e-01\n7342  3.200000e-02\n7343 -7.133333e-02\n7344  4.000000e-03\n7345  5.933333e-02\n7346  2.626667e-01\n7347  1.180000e-01\n7348  1.166667e-01\n7349  1.426667e-01\n7350  1.546667e-01\n7351  5.133333e-02\n7352 -6.533333e-02\n7353  1.873333e-01\n7354  2.866667e-02\n7355 -1.480000e-01\n7356 -9.600000e-02\n7357  6.333333e-02\n7358  1.586667e-01\n7359 -8.266667e-02\n7360  1.100000e-01\n7361  1.693333e-01\n7362 -3.533333e-02\n7363 -1.640000e-01\n7364  1.560000e-01\n7365 -1.333333e-02\n7366  8.133333e-02\n7367  1.606667e-01\n7368  7.000000e-02\n7369  7.533333e-02\n7370 -8.000000e-03\n7371 -1.793333e-01\n7372 -1.413333e-01\n7373 -1.666667e-02\n7374 -3.133333e-02\n7375  1.926667e-01\n7376 -7.866667e-02\n7377 -2.466667e-02\n7378  1.666667e-02\n7379  4.466667e-02\n7380  1.266667e-02\n7381 -5.666667e-02\n7382  2.600000e-02\n7383 -5.533333e-02\n7384 -9.600000e-02\n7385  9.933333e-02\n7386  1.133333e-02\n7387  2.800000e-02\n7388  2.933333e-02\n7389 -5.333333e-02\n7390  1.000000e-02\n7391 -1.700000e-01\n7392  1.026667e-01\n7393 -7.533333e-02\n7394 -1.540000e-01\n7395  1.313333e-01\n7396 -1.773333e-01\n7397  1.626667e-01\n7398 -1.726667e-01\n7399  1.480000e-01\n7400  2.613333e-01\n7401  8.333333e-02\n7402  1.726667e-01\n7403  9.333333e-03\n7404 -1.706667e-01\n7405  7.333333e-03\n7406 -1.360000e-01\n7407 -1.266667e-02\n7408  7.866667e-02\n7409  1.360000e-01\n7410  5.333333e-02\n7411 -4.666667e-02\n7412  3.666667e-02\n7413  5.133333e-02\n7414 -1.840000e-01\n7415 -1.206667e-01\n7416 -9.000000e-02\n7417 -7.866667e-02\n7418 -6.000000e-03\n7419 -3.699767e-17\n7420 -1.153333e-01\n7421 -1.733333e-01\n7422 -3.333333e-02\n7423 -1.100000e-01\n7424  6.733333e-02\n7425  6.333333e-02\n7426 -2.140000e-01\n7427  5.600000e-02\n7428  1.420000e-01\n7429 -5.066667e-02\n7430 -8.200000e-02\n7431  5.866667e-02\n7432  6.333333e-02\n7433  2.753333e-01\n7434  2.000000e-03\n7435 -7.266667e-02\n7436  1.213333e-01\n7437  8.000000e-03\n7438  3.800000e-02\n7439 -1.273333e-01\n7440  1.213333e-01\n7441 -1.313333e-01\n7442 -9.266667e-02\n7443 -2.400000e-02\n7444 -3.200000e-02\n7445 -3.066667e-02\n7446 -1.166667e-01\n7447 -1.453333e-01\n7448 -6.933333e-02\n7449  1.426667e-01\n7450  1.506667e-01\n7451  9.933333e-02\n7452 -1.746667e-01\n7453  1.060000e-01\n7454  1.446667e-01\n7455 -8.666667e-03\n7456  2.866667e-02\n7457 -1.086667e-01\n7458  2.333333e-02\n7459  5.600000e-02\n7460 -9.333333e-03\n7461  3.933333e-02\n7462  8.000000e-02\n7463  1.280000e-01\n7464 -7.933333e-02\n7465  1.580000e-01\n7466  8.600000e-02\n7467  1.673333e-01\n7468  2.173333e-01\n7469 -1.466667e-01\n7470  1.466667e-02\n7471  1.886667e-01\n7472  1.413333e-01\n7473  1.720000e-01\n7474 -2.066667e-02\n7475 -1.626667e-01\n7476 -2.053333e-01\n7477 -1.593333e-01\n7478  1.866667e-01\n7479 -5.266667e-02\n7480 -7.733333e-02\n7481  1.673333e-01\n7482 -1.093333e-01\n7483 -1.486667e-01\n7484 -1.446667e-01\n7485 -1.246667e-01\n7486  6.466667e-02\n7487  4.000000e-02\n7488 -1.660000e-01\n7489  1.040000e-01\n7490  1.666667e-02\n7491  1.273333e-01\n7492  7.417693e-18\n7493  1.153333e-01\n7494  2.013333e-01\n7495 -1.420000e-01\n7496 -1.533333e-01\n7497 -1.740000e-01\n7498 -1.633333e-01\n7499  9.666667e-02\n7500  1.640000e-01\n7501 -1.200000e-02\n7502 -4.733333e-02\n7503  1.186667e-01\n7504  1.160000e-01\n7505  6.066667e-02\n7506 -1.220000e-01\n7507 -1.406667e-01\n7508  2.733333e-02\n7509  1.833333e-01\n7510  1.000000e-02\n7511  6.333333e-02\n7512  4.400000e-02\n7513  1.406667e-01\n7514 -1.826667e-01\n7515  1.020000e-01\n7516  3.666667e-02\n7517  2.493333e-01\n7518  1.226667e-01\n7519 -5.733333e-02\n7520  3.933333e-02\n7521 -8.800000e-02\n7522 -2.180000e-01\n7523  3.466667e-02\n7524 -5.133333e-02\n7525 -2.040000e-01\n7526  1.260000e-01\n7527  1.533333e-02\n7528  1.713333e-01\n7529 -2.293333e-01\n7530 -9.733333e-02\n7531  1.453333e-01\n7532 -1.066667e-01\n7533 -2.426667e-01\n7534 -1.600000e-02\n7535  1.386667e-01\n7536  1.320000e-01\n7537 -1.186667e-01\n7538 -6.733333e-02\n7539 -7.406851e-18\n7540  1.640000e-01\n7541  3.933333e-02\n7542 -2.666667e-02\n7543 -8.000000e-02\n7544 -1.186667e-01\n7545 -8.000000e-03\n7546  8.666667e-03\n7547 -6.800000e-02\n7548 -5.333333e-03\n7549  2.400000e-02\n7550  1.753333e-01\n7551  2.600000e-02\n7552  1.333333e-02\n7553 -9.333333e-02\n7554 -8.400000e-02\n7555  4.066667e-02\n7556  1.580000e-01\n7557  1.500000e-01\n7558  5.466667e-02\n7559 -7.933333e-02\n7560 -1.806667e-01\n7561 -1.940000e-01\n7562  4.666667e-03\n7563  8.133333e-02\n7564 -1.920000e-01\n7565  1.126667e-01\n7566 -1.733333e-02\n7567  4.266667e-02\n7568  1.226667e-01\n7569  6.466667e-02\n7570 -1.533333e-02\n7571 -2.000000e-02\n7572  1.913333e-01\n7573 -1.633333e-01\n7574  4.666667e-03\n7575  1.200000e-01\n7576 -1.066667e-02\n7577  4.200000e-02\n7578 -1.893333e-01\n7579 -2.666667e-03\n7580  1.246667e-01\n7581 -4.400000e-02\n7582  1.200000e-01\n7583  4.466667e-02\n7584  6.733333e-02\n7585 -2.733333e-02\n7586 -1.306667e-01\n7587 -2.933333e-02\n7588  1.133333e-02\n7589  1.173333e-01\n7590 -4.000000e-02\n7591 -9.600000e-02\n7592 -5.800000e-02\n7593  2.733333e-02\n7594 -1.000000e-02\n7595  3.200000e-02\n7596  7.333333e-03\n7597 -1.573333e-01\n7598 -5.333333e-02\n7599  5.333333e-02\n7600 -9.266667e-02\n7601  2.060000e-01\n7602 -1.753333e-01\n7603  1.200000e-02\n7604  1.206667e-01\n7605  8.066667e-02\n7606 -1.226667e-01\n7607  1.180000e-01\n7608  1.440000e-01\n7609  2.446667e-01\n7610 -2.666667e-03\n7611 -1.606667e-01\n7612 -1.800000e-02\n7613 -1.266667e-01\n7614  6.200000e-02\n7615  1.120000e-01\n7616  2.193333e-01\n7617 -8.000000e-03\n7618  1.393333e-01\n7619 -7.666667e-02\n7620 -9.200000e-02\n7621 -1.340000e-01\n7622  1.906667e-01\n7623  4.066667e-02\n7624 -9.266667e-02\n7625  7.333333e-02\n7626  6.400000e-02\n7627 -4.666667e-02\n7628  6.800000e-02\n7629 -1.933333e-02\n7630 -1.640000e-01\n7631  8.266667e-02\n7632  1.913333e-01\n7633  1.066667e-02\n7634  1.573333e-01\n7635 -5.666667e-02\n7636 -4.133333e-02\n7637 -1.506667e-01\n7638 -6.066667e-02\n7639 -1.573333e-01\n7640  1.993333e-01\n7641  1.946667e-01\n7642  4.400000e-02\n7643  9.533333e-02\n7644  6.133333e-02\n7645  1.393333e-01\n7646  1.126667e-01\n7647  1.800000e-01\n7648  1.853333e-01\n7649  1.180000e-01\n7650  1.360000e-01\n7651  2.186667e-01\n7652  4.466667e-02\n7653 -1.633333e-01\n7654 -1.626667e-01\n7655  7.200000e-02\n7656  1.340000e-01\n7657 -1.846667e-01\n7658  1.820000e-01\n7659 -2.406667e-01\n7660  1.753333e-01\n7661 -6.933333e-02\n7662 -4.733333e-02\n7663 -8.200000e-02\n7664  1.586667e-01\n7665  7.800000e-02\n7666 -5.866667e-02\n7667 -3.333333e-03\n7668 -1.520000e-01\n7669  1.133333e-02\n7670  9.800000e-02\n7671 -1.280000e-01\n7672  7.266667e-02\n7673  9.733333e-02\n7674  1.146667e-01\n7675 -7.866667e-02\n7676  2.213333e-01\n7677 -5.800000e-02\n7678 -1.033333e-01\n7679  7.466667e-02\n7680 -1.880000e-01\n7681  2.253333e-01\n7682 -1.320000e-01\n7683 -6.000000e-03\n7684  1.480000e-01\n7685  1.006667e-01\n7686 -1.800000e-02\n7687 -6.800000e-02\n7688  1.293333e-01\n7689 -2.000000e-03\n7690 -2.006667e-01\n7691 -1.226667e-01\n7692  2.026667e-01\n7693 -6.866667e-02\n7694  9.000000e-02\n7695  2.666667e-03\n7696  1.986667e-01\n7697 -1.746667e-01\n7698  5.666667e-02\n7699  1.506667e-01\n7700  2.373333e-01\n7701 -1.320000e-01\n7702  1.040000e-01\n7703 -1.080000e-01\n7704  7.333333e-02\n7705  1.780000e-01\n7706 -1.420000e-01\n7707 -1.980000e-01\n7708  3.533333e-02\n7709 -1.393333e-01\n7710  1.933333e-01\n7711  1.853333e-01\n7712 -1.066667e-01\n7713 -6.000000e-02\n7714 -6.400000e-02\n7715 -2.400000e-02\n7716  1.873333e-01\n7717 -1.566667e-01\n7718 -9.066667e-02\n7719  8.533333e-02\n7720 -1.133333e-02\n7721 -1.586667e-01\n7722 -1.720000e-01\n7723 -1.366667e-01\n7724  1.693333e-01\n7725 -3.533333e-02\n7726 -6.533333e-02\n7727  1.966667e-01\n7728  2.026667e-01\n7729 -9.400000e-02\n7730 -1.460000e-01\n7731 -1.380000e-01\n7732 -1.086667e-01\n7733  2.246667e-01\n7734 -4.133333e-02\n7735 -1.013333e-01\n7736  1.006667e-01\n7737  1.900000e-01\n7738  1.273333e-01\n7739  1.860000e-01\n7740  8.066667e-02\n7741 -1.740000e-01\n7742  9.466667e-02\n7743 -6.200000e-02\n7744 -5.600000e-02\n7745  1.640000e-01\n7746 -1.246667e-01\n7747  1.773333e-01\n7748 -8.066667e-02\n7749 -2.333333e-02\n7750 -1.533333e-02\n7751 -1.566667e-01\n7752  1.500000e-01\n7753 -7.866667e-02\n7754 -1.460000e-01\n7755  2.400000e-02\n7756 -8.533333e-02\n7757  7.800000e-02\n7758  1.300000e-01\n7759 -9.666667e-02\n7760 -7.466667e-02\n7761 -1.380000e-01\n7762 -2.280000e-01\n7763  1.266667e-02\n7764  7.600000e-02\n7765 -2.266667e-01\n7766  1.933333e-01\n7767  2.666667e-02\n7768  1.606667e-01\n7769 -1.353333e-01\n7770  6.333333e-02\n7771  2.380000e-01\n7772  3.600000e-02\n7773  3.933333e-02\n7774  3.466667e-02\n7775  3.866667e-02\n7776 -8.466667e-02\n7777  1.600000e-02\n7778  1.946667e-01\n7779 -8.000000e-02\n7780 -6.333333e-02\n7781  4.066667e-02\n7782  6.933333e-02\n7783  1.980000e-01\n7784  1.526667e-01\n7785  1.400000e-01\n7786 -6.533333e-02\n7787  8.133333e-02\n7788  1.320000e-01\n7789 -1.433333e-01\n7790 -1.333333e-03\n7791 -6.666667e-02\n7792  3.000000e-02\n7793  8.533333e-02\n7794 -3.400000e-02\n7795 -1.480000e-01\n7796  1.546667e-01\n7797 -4.800000e-02\n7798  1.066667e-02\n7799 -9.333333e-02\n7800  1.980000e-01\n7801 -5.200000e-02\n7802  8.533333e-02\n7803  1.413333e-01\n7804  7.800000e-02\n7805 -1.733333e-02\n7806 -6.533333e-02\n7807 -1.313333e-01\n7808 -4.800000e-02\n7809  2.106667e-01\n7810 -4.666667e-02\n7811  7.866667e-02\n7812 -1.373333e-01\n7813  2.306667e-01\n7814 -1.513333e-01\n7815 -5.333333e-02\n7816  4.466667e-02\n7817  6.666667e-04\n7818 -1.466667e-01\n7819  1.300000e-01\n7820 -7.266667e-02\n7821 -1.093333e-01\n7822 -5.466667e-02\n7823 -2.220000e-01\n7824 -1.000000e-01\n7825  9.533333e-02\n7826 -1.833333e-01\n7827  1.086667e-01\n7828  7.000000e-02\n7829  4.000000e-03\n7830  1.940000e-01\n7831  1.780000e-01\n7832 -5.066667e-02\n7833  4.000000e-03\n7834 -4.866667e-02\n7835 -4.666667e-02\n7836 -7.421307e-18\n7837 -1.713333e-01\n7838  7.200000e-02\n7839 -1.793333e-01\n7840  1.673333e-01\n7841 -1.173333e-01\n7842 -1.840000e-01\n7843 -1.666667e-02\n7844  9.000000e-02\n7845  9.066667e-02\n7846 -6.666667e-02\n7847  2.306667e-01\n7848 -8.466667e-02\n7849 -8.666667e-02\n7850 -1.153333e-01\n7851 -2.266667e-02\n7852  2.420000e-01\n7853  2.800000e-02\n7854 -2.073333e-01\n7855  1.700000e-01\n7856  7.466667e-02\n7857  4.266667e-02\n7858 -1.726667e-01\n7859  2.866667e-02\n7860  1.620000e-01\n7861  1.800000e-02\n7862  1.013333e-01\n7863  3.133333e-02\n7864 -9.333333e-02\n7865  6.000000e-03\n7866 -1.740000e-01\n7867 -9.400000e-02\n7868 -1.586667e-01\n7869  3.333333e-02\n7870  9.200000e-02\n7871 -1.440000e-01\n7872  8.266667e-02\n7873  1.000000e-02\n7874 -1.193333e-01\n7875 -1.606667e-01\n7876  9.866667e-02\n7877 -9.733333e-02\n7878 -3.533333e-02\n7879  1.446667e-01\n7880  8.466667e-02\n7881 -1.886667e-01\n7882 -4.133333e-02\n7883 -3.000000e-02\n7884  1.573333e-01\n7885 -7.266667e-02\n7886 -9.066667e-02\n7887  1.093333e-01\n7888 -2.393333e-01\n7889  2.000000e-02\n7890  1.086667e-01\n7891 -1.580000e-01\n7892  1.186667e-01\n7893 -8.400000e-02\n7894  1.526667e-01\n7895 -8.600000e-02\n7896 -4.466667e-02\n7897 -1.413333e-01\n7898 -6.933333e-02\n7899 -1.266667e-01\n7900 -5.933333e-02\n7901  1.486667e-01\n7902  4.133333e-02\n7903  8.066667e-02\n7904  9.400000e-02\n7905  4.266667e-02\n7906 -2.000000e-01\n7907  3.800000e-02\n7908 -2.206667e-01\n7909 -1.046667e-01\n7910 -1.086667e-01\n7911  1.133333e-02\n7912  1.493333e-01\n7913  6.666667e-02\n7914  1.060000e-01\n7915  1.046667e-01\n7916 -1.666667e-02\n7917 -7.333333e-03\n7918 -1.833333e-01\n7919  4.066667e-02\n7920  1.240000e-01\n7921 -6.000000e-03\n7922  5.333333e-03\n7923  8.800000e-02\n7924 -1.620000e-01\n7925 -4.866667e-02\n7926  3.400000e-02\n7927  7.333333e-03\n7928 -1.273333e-01\n7929 -2.126667e-01\n7930 -1.280000e-01\n7931 -3.800000e-02\n7932  5.533333e-02\n7933 -1.240000e-01\n7934  1.426667e-01\n7935 -4.066667e-02\n7936  5.200000e-02\n7937  1.293333e-01\n7938  1.773333e-01\n7939  7.266667e-02\n7940  1.220000e-01\n7941  1.366667e-01\n7942  2.546667e-01\n7943  1.000000e-01\n7944  1.386667e-01\n7945 -5.200000e-02\n7946  1.400000e-02\n7947  2.006667e-01\n7948  5.266667e-02\n7949  6.666667e-02\n7950 -9.333333e-02\n7951 -1.353333e-01\n7952 -1.460000e-01\n7953  9.866667e-02\n7954  1.666667e-01\n7955 -8.066667e-02\n7956 -7.933333e-02\n7957 -6.400000e-02\n7958  2.133333e-01\n7959 -9.400000e-02\n7960  5.133333e-02\n7961 -1.280000e-01\n7962  2.066667e-01\n7963  1.226667e-01\n7964  1.200000e-01\n7965  8.533333e-02\n7966 -1.480000e-01\n7967 -1.846667e-01\n7968  1.806667e-01\n7969  1.800000e-01\n7970 -7.421307e-18\n7971 -1.213333e-01\n7972 -1.293333e-01\n7973  9.600000e-02\n7974  1.040000e-01\n7975  1.933333e-02\n7976 -3.733333e-02\n7977  1.046667e-01\n7978  1.493333e-01\n7979  1.426667e-01\n7980 -4.666667e-03\n7981 -1.306667e-01\n7982  9.466667e-02\n7983 -4.000000e-03\n7984  3.800000e-02\n7985  9.133333e-02\n7986  6.866667e-02\n7987  1.000000e-02\n7988  1.113333e-01\n7989  1.726667e-01\n7990 -1.266667e-01\n7991  6.466667e-02\n7992 -7.533333e-02\n7993 -1.866667e-02\n7994  1.433333e-01\n7995 -1.506667e-01\n7996 -2.000000e-02\n7997  2.333333e-02\n7998  4.000000e-02\n7999  8.000000e-02\n8000 -2.100000e-01\n8001 -1.640000e-01\n8002 -5.600000e-02\n8003 -7.333333e-03\n8004  1.320000e-01\n8005  1.600000e-02\n8006 -1.340000e-01\n8007  1.940000e-01\n8008  3.333333e-02\n8009 -1.266667e-01\n8010  1.873333e-01\n8011 -2.220000e-01\n8012  2.600000e-02\n8013  7.800000e-02\n8014 -1.920000e-01\n8015  1.953333e-01\n8016  5.333333e-02\n8017 -1.840000e-01\n8018 -2.206667e-01\n8019  1.420000e-01\n8020 -1.186667e-01\n8021 -4.800000e-02\n8022  1.586667e-01\n8023 -4.000000e-02\n8024 -6.866667e-02\n8025  1.033333e-01\n8026 -2.333333e-01\n8027  2.400000e-02\n8028 -8.400000e-02\n8029 -1.600000e-01\n8030 -2.100000e-01\n8031  1.073333e-01\n8032 -1.800000e-02\n8033  1.820000e-01\n8034 -1.653333e-01\n8035 -1.186667e-01\n8036 -2.333333e-02\n8037 -1.000000e-02\n8038  2.146667e-01\n8039  1.700000e-01\n8040 -2.566667e-01\n8041 -1.280000e-01\n8042 -1.133333e-01\n8043  1.726667e-01\n8044 -1.333333e-03\n8045  1.593333e-01\n8046  1.820000e-01\n8047  1.200000e-01\n8048 -8.533333e-02\n8049  1.066667e-01\n8050  1.393333e-01\n8051  1.473333e-01\n8052  2.466667e-02\n8053  2.333333e-02\n8054 -3.200000e-02\n8055 -1.473333e-01\n8056  1.593333e-01\n8057  7.333333e-02\n8058  6.933333e-02\n8059 -1.846667e-01\n8060 -2.666667e-03\n8061 -9.800000e-02\n8062  1.533333e-01\n8063 -1.380000e-01\n8064 -1.360000e-01\n8065 -1.173333e-01\n8066 -1.186667e-01\n8067  5.333333e-02\n8068  1.013333e-01\n8069 -5.266667e-02\n8070 -1.300000e-01\n8071  7.933333e-02\n8072 -2.600000e-02\n8073 -1.733333e-02\n8074 -7.333333e-02\n8075 -3.266667e-02\n8076 -5.533333e-02\n8077  1.806667e-01\n8078  1.980000e-01\n8079  5.333333e-02\n8080 -9.866667e-02\n8081  4.000000e-03\n8082  7.666667e-02\n8083  7.333333e-03\n8084 -1.353333e-01\n8085 -7.533333e-02\n8086  6.400000e-02\n8087  5.800000e-02\n8088  1.933333e-02\n8089 -8.133333e-02\n8090  3.733333e-02\n8091  1.160000e-01\n8092 -1.040000e-01\n8093  1.273333e-01\n8094  7.333333e-02\n8095  7.000000e-02\n8096  5.800000e-02\n8097 -8.933333e-02\n8098  1.140000e-01\n8099  1.200000e-02\n8100  1.680000e-01\n8101 -8.533333e-02\n8102 -2.013333e-01\n8103 -8.933333e-02\n8104  9.066667e-02\n8105  1.186667e-01\n8106  1.260000e-01\n8107 -4.400000e-02\n8108 -1.173333e-01\n8109  1.220000e-01\n8110  3.466667e-02\n8111 -9.933333e-02\n8112 -2.866667e-02\n8113 -3.133333e-02\n8114 -1.046667e-01\n8115  2.333333e-01\n8116  8.933333e-02\n8117 -5.133333e-02\n8118  1.666667e-02\n8119  6.200000e-02\n8120 -1.466667e-01\n8121 -3.000000e-02\n8122 -3.133333e-02\n8123 -1.320000e-01\n8124  6.666667e-02\n8125  7.333333e-03\n8126 -2.133333e-02\n8127 -8.666667e-03\n8128  1.100000e-01\n8129 -3.333333e-02\n8130 -9.333333e-03\n8131 -1.093333e-01\n8132 -1.813333e-01\n8133  1.986667e-01\n8134  1.333333e-03\n8135  1.100000e-01\n8136 -1.586667e-01\n8137 -1.333333e-03\n8138 -1.206667e-01\n8139 -2.066667e-01\n8140  1.013333e-01\n8141 -8.800000e-02\n8142 -1.706667e-01\n8143  5.533333e-02\n8144 -6.933333e-02\n8145  1.466667e-02\n8146  1.246667e-01\n8147  1.040000e-01\n8148 -2.466667e-02\n8149  1.666667e-01\n8150  1.466667e-02\n8151 -1.326667e-01\n8152  1.146667e-01\n8153 -1.306667e-01\n8154 -1.700000e-01\n8155 -1.940000e-01\n8156  5.666667e-02\n8157  9.000000e-02\n8158 -7.333333e-02\n8159  1.986667e-01\n8160  1.126667e-01\n8161  9.266667e-02\n8162 -1.793333e-01\n8163  2.213333e-01\n8164 -1.466667e-02\n8165  1.926667e-01\n8166 -4.400000e-02\n8167 -2.133333e-02\n8168  5.600000e-02\n8169 -6.800000e-02\n8170  5.466667e-02\n8171  6.666667e-03\n8172 -1.593333e-01\n8173 -6.266667e-02\n8174 -9.600000e-02\n8175  1.306667e-01\n8176 -1.820000e-01\n8177 -1.213333e-01\n8178 -1.186667e-01\n8179  2.460000e-01\n8180 -6.733333e-02\n8181  1.680000e-01\n8182 -6.466667e-02\n8183 -1.766667e-01\n8184  8.466667e-02\n8185 -6.000000e-02\n8186  8.466667e-02\n8187  1.266667e-01\n8188  8.666667e-03\n8189  2.133333e-02\n8190  1.733333e-02\n8191  1.466667e-02\n8192 -7.533333e-02\n8193  1.686667e-01\n8194 -6.666667e-03\n8195 -6.666667e-02\n8196  4.866667e-02\n8197 -3.000000e-02\n8198  2.193333e-01\n8199 -2.060000e-01\n8200  7.400000e-02\n8201  1.540000e-01\n8202  2.400000e-01\n8203 -1.520000e-01\n8204 -5.933333e-02\n8205 -2.040000e-01\n8206  2.086667e-01\n8207  8.066667e-02\n8208 -2.666667e-03\n8209 -1.693333e-01\n8210  7.933333e-02\n8211  4.666667e-03\n8212  7.866667e-02\n8213 -9.733333e-02\n8214  1.533333e-01\n8215 -5.800000e-02\n8216  1.406667e-01\n8217  1.033333e-01\n8218  1.900000e-01\n8219 -1.540000e-01\n8220  8.200000e-02\n8221 -6.666667e-04\n8222 -1.866667e-02\n8223 -9.266667e-02\n8224  1.480000e-01\n8225  1.806667e-01\n8226 -5.866667e-02\n8227  2.000000e-02\n8228 -1.906667e-01\n8229 -1.420000e-01\n8230  2.933333e-02\n8231  5.000000e-02\n8232 -8.666667e-03\n8233  1.006667e-01\n8234 -6.666667e-04\n8235  3.266667e-02\n8236 -6.800000e-02\n8237  1.733333e-01\n8238 -8.466667e-02\n8239 -1.153333e-01\n8240  5.933333e-02\n8241 -2.800000e-02\n8242  8.266667e-02\n8243  9.000000e-02\n8244  2.666667e-03\n8245 -1.460000e-01\n8246  1.393333e-01\n8247  2.720000e-01\n8248 -1.853333e-01\n8249  3.333333e-02\n8250  1.760000e-01\n8251  1.466667e-01\n8252 -2.586667e-01\n8253 -1.466667e-02\n8254 -1.720000e-01\n8255 -5.733333e-02\n8256  6.066667e-02\n8257  2.340000e-01\n8258  1.646667e-01\n8259  9.000000e-02\n8260  1.260000e-01\n8261 -2.266667e-02\n8262  8.333333e-02\n8263  1.073333e-01\n8264  7.333333e-02\n8265  1.280000e-01\n8266 -1.646667e-01\n8267  7.866667e-02\n8268  7.866667e-02\n8269  2.133333e-02\n8270  1.846667e-01\n8271  1.806667e-01\n8272 -1.333333e-01\n8273  1.226667e-01\n8274 -4.800000e-02\n8275 -1.386667e-01\n8276  3.600000e-02\n8277  1.280000e-01\n8278  1.400000e-02\n8279 -1.473333e-01\n8280  4.600000e-02\n8281 -2.033333e-01\n8282  6.666667e-03\n8283 -2.286667e-01\n8284  1.493333e-01\n8285  1.146667e-01\n8286 -1.806667e-01\n8287 -1.206667e-01\n8288 -1.666667e-02\n8289 -1.053333e-01\n8290 -1.166667e-01\n8291 -9.666667e-02\n8292  2.086667e-01\n8293 -5.866667e-02\n8294  1.593333e-01\n8295 -4.600000e-02\n8296 -2.273333e-01\n8297 -1.353333e-01\n8298 -8.600000e-02\n8299 -9.333333e-03\n8300 -6.000000e-03\n8301  1.133333e-02\n8302  1.373333e-01\n8303  2.466667e-02\n8304  2.000000e-02\n8305  1.273333e-01\n8306 -1.666667e-02\n8307  1.006667e-01\n8308  3.933333e-02\n8309  1.180000e-01\n8310  2.666667e-02\n8311  1.500000e-01\n8312  6.200000e-02\n8313 -9.466667e-02\n8314 -1.333333e-01\n8315  1.886667e-01\n8316  1.040000e-01\n8317  4.200000e-02\n8318  1.113333e-01\n8319  7.600000e-02\n8320 -1.666667e-01\n8321  8.466667e-02\n8322  8.000000e-03\n8323 -7.403237e-18\n8324  1.013333e-01\n8325 -1.553333e-01\n8326 -2.053333e-01\n8327  4.466667e-02\n8328 -4.066667e-02\n8329 -2.380000e-01\n8330 -1.293333e-01\n8331 -5.200000e-02\n8332 -1.960000e-01\n8333  3.600000e-02\n8334  1.380000e-01\n8335  5.533333e-02\n8336 -9.333333e-02\n8337 -1.646667e-01\n8338 -2.906667e-01\n8339  2.566667e-01\n8340 -9.866667e-02\n8341  1.600000e-02\n8342  1.273333e-01\n8343 -9.733333e-02\n8344  4.066667e-02\n8345  1.260000e-01\n8346 -1.180000e-01\n8347 -4.800000e-02\n8348  1.893333e-01\n8349 -1.086667e-01\n8350 -6.666667e-03\n8351  6.400000e-02\n8352  1.206667e-01\n8353  5.266667e-02\n8354  9.333333e-03\n8355  1.740000e-01\n8356 -1.446667e-01\n8357 -1.486667e-01\n8358 -6.933333e-02\n8359 -4.000000e-02\n8360 -2.166667e-01\n8361 -8.933333e-02\n8362  5.933333e-02\n8363  1.206667e-01\n8364 -1.826667e-01\n8365  2.266667e-01\n8366 -1.260000e-01\n8367 -1.906667e-01\n8368  8.066667e-02\n8369 -1.080000e-01\n8370 -7.933333e-02\n8371  1.073333e-01\n8372 -1.060000e-01\n8373 -4.800000e-02\n8374  4.933333e-02\n8375  2.133333e-02\n8376  1.593333e-01\n8377 -3.333333e-02\n8378  4.400000e-02\n8379  9.266667e-02\n8380  2.120000e-01\n8381  4.533333e-02\n8382  1.220000e-01\n8383  8.800000e-02\n8384 -1.893333e-01\n8385  1.600000e-01\n8386  1.933333e-02\n8387 -1.740000e-01\n8388 -1.333333e-01\n8389  4.933333e-02\n8390 -1.000000e-02\n8391  4.600000e-02\n8392 -1.733333e-01\n8393  2.533333e-02\n8394 -1.986667e-01\n8395  5.333333e-03\n8396  7.133333e-02\n8397 -2.060000e-01\n8398 -1.686667e-01\n8399 -1.840000e-01\n8400  3.933333e-02\n8401  1.066667e-01\n8402 -1.666667e-02\n8403  7.533333e-02\n8404  6.200000e-02\n8405  1.466667e-02\n8406  6.866667e-02\n8407  2.406667e-01\n8408 -7.666667e-02\n8409  2.720000e-01\n8410  6.200000e-02\n8411 -2.126667e-01\n8412  1.733333e-02\n8413  1.333333e-01\n8414  6.333333e-02\n8415  1.246667e-01\n8416 -1.060000e-01\n8417  1.513333e-01\n8418  6.666667e-04\n8419  2.120000e-01\n8420  2.666667e-02\n8421  1.213333e-01\n8422  1.653333e-01\n8423 -4.666667e-02\n8424 -1.720000e-01\n8425  2.026667e-01\n8426 -1.333333e-02\n8427 -7.600000e-02\n8428 -1.186667e-01\n8429  2.000000e-02\n8430  2.173333e-01\n8431 -1.786667e-01\n8432 -2.733333e-02\n8433 -7.666667e-02\n8434 -1.286667e-01\n8435 -6.533333e-02\n8436 -3.866667e-02\n8437 -8.600000e-02\n8438 -2.306667e-01\n8439 -7.400000e-02\n8440  1.620000e-01\n8441 -1.833333e-01\n8442  2.233333e-01\n8443  8.333333e-02\n8444 -1.633333e-01\n8445  1.713333e-01\n8446 -1.733333e-01\n8447  1.500000e-01\n8448  1.693333e-01\n8449  9.733333e-02\n8450  1.386667e-01\n8451 -7.200000e-02\n8452 -1.573333e-01\n8453  1.453333e-01\n8454  1.326667e-01\n8455  7.066667e-02\n8456  1.733333e-02\n8457 -3.333333e-02\n8458  6.933333e-02\n8459 -4.933333e-02\n8460 -2.380000e-01\n8461  1.186667e-01\n8462  6.933333e-02\n8463 -2.093333e-01\n8464  3.466667e-02\n8465  9.333333e-03\n8466  4.600000e-02\n8467  8.933333e-02\n8468 -9.666667e-02\n8469  2.013333e-01\n8470 -2.666667e-02\n8471  1.753333e-01\n8472 -1.600000e-02\n8473  1.846667e-01\n8474  1.666667e-01\n8475  9.266667e-02\n8476 -4.333333e-02\n8477 -1.733333e-02\n8478  1.946667e-01\n8479  1.173333e-01\n8480  4.200000e-02\n8481 -1.600000e-01\n8482  1.780000e-01\n8483 -2.193333e-01\n8484 -3.066667e-02\n8485  1.100000e-01\n8486  1.533333e-02\n8487 -9.533333e-02\n8488  2.406667e-01\n8489  7.066667e-02\n8490 -1.640000e-01\n8491  1.600000e-01\n8492  1.773333e-01\n8493  1.846667e-01\n8494 -5.933333e-02\n8495 -2.126667e-01\n8496 -9.333333e-02\n8497 -2.393333e-01\n8498 -6.200000e-02\n8499 -1.680000e-01\n8500 -2.666667e-03\n8501  7.400000e-02\n8502  4.400000e-02\n8503 -1.513333e-01\n8504 -6.866667e-02\n8505  1.920000e-01\n8506  1.466667e-01\n8507  8.133333e-02\n8508 -2.433333e-01\n8509 -1.926667e-01\n8510 -2.666667e-03\n8511  1.726667e-01\n8512 -3.533333e-02\n8513 -5.666667e-02\n8514  1.546667e-01\n8515  2.586667e-01\n8516  1.520000e-01\n8517 -1.413333e-01\n8518 -1.246667e-01\n8519 -7.533333e-02\n8520  7.533333e-02\n8521  1.653333e-01\n8522  1.040000e-01\n8523 -1.093333e-01\n8524 -4.600000e-02\n8525  1.000000e-01\n8526 -4.666667e-02\n8527 -1.900000e-01\n8528  2.933333e-02\n8529 -1.600000e-02\n8530 -1.793333e-01\n8531 -6.666667e-02\n8532  1.133333e-01\n8533  1.260000e-01\n8534 -1.180000e-01\n8535 -3.533333e-02\n8536  1.126667e-01\n8537 -1.226667e-01\n8538 -9.066667e-02\n8539  7.200000e-02\n8540  6.266667e-02\n8541 -6.133333e-02\n8542  1.573333e-01\n8543 -1.633333e-01\n8544  2.000000e-02\n8545  1.973333e-01\n8546 -8.000000e-03\n8547  1.366667e-01\n8548  1.580000e-01\n8549  1.500000e-01\n8550 -1.093333e-01\n8551  4.266667e-02\n8552 -1.146667e-01\n8553 -1.540000e-01\n8554 -6.866667e-02\n8555  7.933333e-02\n8556  8.066667e-02\n8557 -1.786667e-01\n8558 -2.386667e-01\n8559 -9.400000e-02\n8560  2.600000e-02\n8561 -1.840000e-01\n8562 -3.533333e-02\n8563 -3.533333e-02\n8564 -1.206667e-01\n8565  4.266667e-02\n8566 -1.953333e-01\n8567 -1.860000e-01\n8568 -2.033333e-01\n8569  6.000000e-02\n8570  2.000000e-03\n8571  5.800000e-02\n8572 -1.840000e-01\n8573  1.740000e-01\n8574 -6.733333e-02\n8575  2.313333e-01\n8576 -5.400000e-02\n8577 -1.313333e-01\n8578  7.466667e-02\n8579 -6.666667e-03\n8580 -7.666667e-02\n8581 -4.333333e-02\n8582 -3.600000e-02\n8583  9.866667e-02\n8584  3.333333e-02\n8585 -5.200000e-02\n8586  1.726667e-01\n8587 -4.266667e-02\n8588 -1.426667e-01\n8589 -1.840000e-01\n8590  2.126667e-01\n8591 -8.266667e-02\n8592 -1.713333e-01\n8593 -1.500000e-01\n8594 -1.400000e-02\n8595 -1.833333e-01\n8596 -2.533333e-02\n8597  1.020000e-01\n8598  3.133333e-02\n8599 -1.613333e-01\n8600  8.666667e-02\n8601 -1.266667e-01\n8602 -2.013333e-01\n8603 -7.066667e-02\n8604 -2.466667e-02\n8605  1.760000e-01\n8606 -4.266667e-02\n8607 -1.613333e-01\n8608 -1.366667e-01\n8609  1.080000e-01\n8610  2.000000e-03\n8611 -1.866667e-01\n8612  1.613333e-01\n8613  9.733333e-02\n8614  2.286667e-01\n8615 -3.800000e-02\n8616  2.600000e-02\n8617  2.120000e-01\n8618  7.266667e-02\n8619  3.866667e-02\n8620 -6.933333e-02\n8621  1.680000e-01\n8622  2.113333e-01\n8623  2.620000e-01\n8624  1.633333e-01\n8625  5.866667e-02\n8626  1.053333e-01\n8627 -8.333333e-02\n8628 -1.066667e-01\n8629 -1.306667e-01\n8630  1.033333e-01\n8631 -1.406667e-01\n8632 -4.666667e-02\n8633  6.066667e-02\n8634 -1.606667e-01\n8635 -1.606667e-01\n8636  4.800000e-02\n8637 -9.466667e-02\n8638 -8.866667e-02\n8639 -2.400000e-02\n8640  2.933333e-02\n8641  9.333333e-02\n8642  1.120000e-01\n8643  7.266667e-02\n8644 -1.140000e-01\n8645 -1.693333e-01\n8646  9.933333e-02\n8647  1.500000e-01\n8648 -2.513333e-01\n8649 -8.733333e-02\n8650  1.453333e-01\n8651  1.866667e-01\n8652  4.933333e-02\n8653 -1.933333e-01\n8654 -6.266667e-02\n8655  1.720000e-01\n8656  3.200000e-02\n8657  5.733333e-02\n8658  1.380000e-01\n8659  7.800000e-02\n8660 -9.400000e-02\n8661 -6.066667e-02\n8662 -9.533333e-02\n8663 -1.700000e-01\n8664  1.200000e-01\n8665 -1.173333e-01\n8666 -6.533333e-02\n8667  1.306667e-01\n8668  4.666667e-02\n8669  5.533333e-02\n8670 -1.000000e-01\n8671  1.540000e-01\n8672 -7.200000e-02\n8673  1.400000e-02\n8674 -9.333333e-02\n8675 -2.600000e-02\n8676 -1.740000e-01\n8677 -1.366667e-01\n8678 -9.733333e-02\n8679 -4.600000e-02\n8680  8.000000e-03\n8681 -7.466667e-02\n8682 -9.733333e-02\n8683 -1.753333e-01\n8684  9.666667e-02\n8685  1.286667e-01\n8686 -7.933333e-02\n8687 -1.053333e-01\n8688 -5.266667e-02\n8689 -2.200000e-02\n8690  2.666667e-03\n8691  2.400000e-02\n8692  9.866667e-02\n8693 -3.733333e-02\n8694  2.720000e-01\n8695  1.673333e-01\n8696  1.220000e-01\n8697 -3.133333e-02\n8698  1.120000e-01\n8699  1.653333e-01\n8700  1.880000e-01\n8701  1.106667e-01\n8702 -6.600000e-02\n8703  1.946667e-01\n8704 -4.333333e-02\n8705 -2.126667e-01\n8706  2.066667e-01\n8707  5.333333e-03\n8708  1.946667e-01\n8709  1.713333e-01\n8710 -1.886667e-01\n8711 -1.293333e-01\n8712  5.000000e-02\n8713  1.206667e-01\n8714 -1.260000e-01\n8715  8.600000e-02\n8716  8.533333e-02\n8717 -1.653333e-01\n8718 -5.800000e-02\n8719 -3.600000e-02\n8720 -2.133333e-02\n8721  1.400000e-01\n8722  5.866667e-02\n8723 -1.433333e-01\n8724 -7.600000e-02\n8725 -1.533333e-02\n8726 -1.253333e-01\n8727  1.966667e-01\n8728 -5.533333e-02\n8729  1.420000e-01\n8730 -2.180000e-01\n8731 -1.833333e-01\n8732  1.706667e-01\n8733 -1.353333e-01\n8734 -7.533333e-02\n8735 -1.473333e-01\n8736  1.433333e-01\n8737 -2.073333e-01\n8738  2.533333e-02\n8739 -1.000000e-01\n8740 -6.733333e-02\n8741  1.320000e-01\n8742  1.666667e-02\n8743  1.293333e-01\n8744 -1.386667e-01\n8745  2.053333e-01\n8746 -1.233333e-01\n8747 -1.353333e-01\n8748 -1.366667e-01\n8749 -6.200000e-02\n8750 -1.626667e-01\n8751  1.333333e-03\n8752  7.733333e-02\n8753  1.500000e-01\n8754 -1.926667e-01\n8755  3.666667e-02\n8756 -6.666667e-03\n8757 -2.733333e-02\n8758  6.000000e-03\n8759  4.533333e-02\n8760 -2.126667e-01\n8761 -1.313333e-01\n8762  1.286667e-01\n8763  6.533333e-02\n8764  2.733333e-02\n8765 -1.666667e-02\n8766 -1.613333e-01\n8767  2.933333e-02\n8768 -1.333333e-03\n8769  1.833333e-01\n8770  1.000000e-01\n8771 -1.253333e-01\n8772 -1.086667e-01\n8773  1.586667e-01\n8774  1.320000e-01\n8775  1.926667e-01\n8776 -8.200000e-02\n8777 -1.073333e-01\n8778  4.000000e-02\n8779 -1.553333e-01\n8780  1.440000e-01\n8781  2.026667e-01\n8782  9.600000e-02\n8783  1.620000e-01\n8784  2.666667e-03\n8785  2.133333e-02\n8786  1.533333e-02\n8787  6.000000e-02\n8788 -1.240000e-01\n8789 -6.000000e-03\n8790  9.866667e-02\n8791  4.800000e-02\n8792 -6.133333e-02\n8793 -3.600000e-02\n8794 -1.786667e-01\n8795  1.400000e-01\n8796  2.600000e-02\n8797 -5.333333e-03\n8798 -1.660000e-01\n8799 -1.066667e-01\n8800 -5.866667e-02\n8801  2.080000e-01\n8802  7.466667e-02\n8803  2.353333e-01\n8804 -1.033333e-01\n8805 -3.133333e-02\n8806  9.933333e-02\n8807  3.466667e-02\n8808 -2.033333e-01\n8809  2.186667e-01\n8810  1.626667e-01\n8811  7.666667e-02\n8812 -6.733333e-02\n8813 -1.506667e-01\n8814  1.026667e-01\n8815 -1.600000e-02\n8816  1.033333e-01\n8817  1.226667e-01\n8818  2.013333e-01\n8819  2.266667e-02\n8820 -5.200000e-02\n8821  7.800000e-02\n8822 -7.133333e-02\n8823  1.726667e-01\n8824 -5.200000e-02\n8825  1.940000e-01\n8826 -1.220000e-01\n8827  4.733333e-02\n8828  7.333333e-02\n8829  9.066667e-02\n8830  1.140000e-01\n8831  1.813333e-01\n8832 -8.666667e-02\n8833  1.333333e-03\n8834  1.100000e-01\n8835 -1.933333e-01\n8836  3.000000e-02\n8837 -4.666667e-03\n8838 -8.400000e-02\n8839 -2.086667e-01\n8840 -1.080000e-01\n8841 -8.733333e-02\n8842  1.246667e-01\n8843  2.120000e-01\n8844 -1.673333e-01\n8845 -3.200000e-02\n8846  2.026667e-01\n8847 -8.933333e-02\n8848 -7.066667e-02\n8849  1.900000e-01\n8850  1.733333e-01\n8851 -1.106667e-01\n8852 -1.066667e-02\n8853 -2.866667e-02\n8854  2.000000e-03\n8855  8.466667e-02\n8856  2.400000e-02\n8857  4.000000e-02\n8858  9.866667e-02\n8859 -1.466667e-01\n8860 -6.133333e-02\n8861  1.000000e-01\n8862  1.853333e-01\n8863  5.466667e-02\n8864  5.600000e-02\n8865 -1.346667e-01\n8866 -4.066667e-02\n8867  8.933333e-02\n8868 -1.133333e-02\n8869 -1.633333e-01\n8870  1.273333e-01\n8871 -7.066667e-02\n8872 -6.266667e-02\n8873 -1.946667e-01\n8874 -6.666667e-02\n8875  1.673333e-01\n8876  7.866667e-02\n8877  9.400000e-02\n8878 -1.400000e-02\n8879  6.666667e-02\n8880 -1.860000e-01\n8881 -1.200000e-02\n8882 -1.833333e-01\n8883 -1.080000e-01\n8884  8.800000e-02\n8885  1.166667e-01\n8886 -2.626667e-01\n8887 -2.666667e-02\n8888 -9.400000e-02\n8889 -2.060000e-01\n8890  6.666667e-04\n8891  1.773333e-01\n8892  2.080000e-01\n8893 -1.086667e-01\n8894 -1.133333e-01\n8895 -1.073333e-01\n8896  2.400000e-02\n8897  1.466667e-01\n8898 -1.333333e-01\n8899 -1.600000e-02\n8900  5.866667e-02\n8901 -1.013333e-01\n8902 -7.733333e-02\n8903  6.400000e-02\n8904 -6.933333e-02\n8905  1.406667e-01\n8906 -7.533333e-02\n8907  4.400000e-02\n8908  1.553333e-01\n8909  7.733333e-02\n8910 -2.213333e-01\n8911 -4.866667e-02\n8912  8.466667e-02\n8913  4.066667e-02\n8914 -1.866667e-02\n8915 -1.866667e-02\n8916 -1.493333e-01\n8917 -7.666667e-02\n8918  3.133333e-02\n8919 -9.266667e-02\n8920  1.060000e-01\n8921 -1.360000e-01\n8922  7.666667e-02\n8923 -2.800000e-02\n8924 -8.600000e-02\n8925 -3.533333e-02\n8926 -5.733333e-02\n8927  1.813333e-01\n8928  6.800000e-02\n8929  1.720000e-01\n8930 -1.400000e-02\n8931  9.933333e-02\n8932  8.800000e-02\n8933 -3.866667e-02\n8934  4.333333e-02\n8935  1.400000e-01\n8936 -2.260000e-01\n8937 -7.800000e-02\n8938  1.160000e-01\n8939  7.000000e-02\n8940 -1.600000e-02\n8941  1.100000e-01\n8942  1.013333e-01\n8943 -1.460000e-01\n8944 -7.600000e-02\n8945  1.013333e-01\n8946 -1.606667e-01\n8947 -1.706667e-01\n8948  1.726667e-01\n8949  1.320000e-01\n8950  2.220000e-01\n8951  2.006667e-01\n8952  1.180000e-01\n8953  1.160000e-01\n8954 -8.000000e-03\n8955 -1.913333e-01\n8956 -6.600000e-02\n8957  8.200000e-02\n8958  1.453333e-01\n8959 -2.066667e-02\n8960 -6.000000e-03\n8961 -1.240000e-01\n8962  5.600000e-02\n8963  1.666667e-02\n8964 -6.666667e-03\n8965 -7.666667e-02\n8966  1.053333e-01\n8967 -1.513333e-01\n8968 -1.500000e-01\n8969 -8.066667e-02\n8970 -2.666667e-03\n8971 -3.466667e-02\n8972 -1.080000e-01\n8973  6.600000e-02\n8974 -1.106667e-01\n8975 -1.920000e-01\n8976 -2.293333e-01\n8977  9.733333e-02\n8978  2.000000e-02\n8979  1.746667e-01\n8980  1.700000e-01\n8981 -8.600000e-02\n8982 -1.060000e-01\n8983 -9.066667e-02\n8984 -1.533333e-02\n8985  9.533333e-02\n8986  6.666667e-03\n8987  1.466667e-01\n8988 -2.466667e-02\n8989 -4.466667e-02\n8990  7.600000e-02\n8991  1.066667e-01\n8992 -1.493333e-01\n8993 -3.400000e-02\n8994  1.493333e-01\n8995  1.020000e-01\n8996 -7.066667e-02\n8997  4.933333e-02\n8998  8.533333e-02\n8999  8.866667e-02\n9000 -4.533333e-02\n9001 -1.033333e-01\n9002  1.300000e-01\n9003  1.486667e-01\n9004  1.200000e-02\n9005 -1.200000e-02\n9006 -1.440000e-01\n9007 -1.653333e-01\n9008 -3.000000e-02\n9009 -1.060000e-01\n9010 -1.446667e-01\n9011  6.466667e-02\n9012  1.606667e-01\n9013 -7.333333e-02\n9014 -7.600000e-02\n9015  6.733333e-02\n9016 -1.933333e-02\n9017 -3.733333e-02\n9018 -1.106667e-01\n9019  1.800000e-01\n9020  1.500000e-01\n9021  3.333333e-02\n9022  1.080000e-01\n9023 -3.466667e-02\n9024  8.466667e-02\n9025  1.153333e-01\n9026 -1.893333e-01\n9027  5.666667e-02\n9028  6.000000e-03\n9029 -1.086667e-01\n9030 -4.066667e-02\n9031  1.300000e-01\n9032 -1.533333e-01\n9033  1.460000e-01\n9034 -1.026667e-01\n9035 -5.000000e-02\n9036 -9.600000e-02\n9037 -1.486667e-01\n9038 -7.400000e-02\n9039  9.200000e-02\n9040  1.066667e-01\n9041  1.573333e-01\n9042 -9.733333e-02\n9043 -1.206667e-01\n9044  4.466667e-02\n9045 -1.000000e-02\n9046  1.933333e-02\n9047  1.446667e-01\n9048  1.140000e-01\n9049 -3.866667e-02\n9050  3.200000e-02\n9051 -1.320000e-01\n9052 -7.200000e-02\n9053 -1.806667e-01\n9054  2.666667e-03\n9055  1.613333e-01\n9056 -7.533333e-02\n9057 -1.540000e-01\n9058  2.506667e-01\n9059 -8.200000e-02\n9060  1.400000e-02\n9061  1.353333e-01\n9062 -9.333333e-02\n9063 -5.333333e-02\n9064  5.200000e-02\n9065 -7.200000e-02\n9066 -4.666667e-02\n9067  1.406667e-01\n9068 -1.826667e-01\n9069  1.073333e-01\n9070  3.466667e-02\n9071 -2.060000e-01\n9072 -9.200000e-02\n9073  1.853333e-01\n9074  1.100000e-01\n9075  1.693333e-01\n9076  7.333333e-02\n9077  1.200000e-02\n9078  8.266667e-02\n9079  8.666667e-02\n9080  4.866667e-02\n9081 -1.233333e-01\n9082  1.333333e-02\n9083 -1.520000e-01\n9084  6.333333e-02\n9085  2.153333e-01\n9086 -2.126667e-01\n9087  3.333333e-02\n9088  1.766667e-01\n9089 -1.860000e-01\n9090 -2.800000e-02\n9091  1.153333e-01\n9092 -1.346667e-01\n9093  1.173333e-01\n9094 -1.646667e-01\n9095  5.000000e-02\n9096 -8.133333e-02\n9097 -1.126667e-01\n9098 -1.800000e-01\n9099  1.046667e-01\n9100  2.206667e-01\n9101  1.193333e-01\n9102 -8.266667e-02\n9103  9.666667e-02\n9104  9.600000e-02\n9105 -1.740000e-01\n9106  5.133333e-02\n9107 -1.406667e-01\n9108  4.000000e-03\n9109 -3.400000e-02\n9110 -8.333333e-02\n9111  3.733333e-02\n9112  4.333333e-02\n9113  1.246667e-01\n9114 -2.720000e-01\n9115 -1.066667e-01\n9116 -6.800000e-02\n9117 -3.200000e-02\n9118  4.066667e-02\n9119 -2.060000e-01\n9120  1.593333e-01\n9121  1.066667e-02\n9122  1.226667e-01\n9123 -8.266667e-02\n9124 -1.380000e-01\n9125 -1.200000e-02\n9126  1.093333e-01\n9127  4.533333e-02\n9128  8.400000e-02\n9129  1.993333e-01\n9130 -9.266667e-02\n9131 -4.133333e-02\n9132  1.080000e-01\n9133  6.533333e-02\n9134 -8.733333e-02\n9135 -1.840000e-01\n9136  2.000000e-03\n9137 -4.000000e-03\n9138  9.066667e-02\n9139  1.113333e-01\n9140 -1.033333e-01\n9141  3.800000e-02\n9142 -1.613333e-01\n9143 -9.266667e-02\n9144  1.600000e-01\n9145 -1.346667e-01\n9146 -1.820000e-01\n9147 -5.000000e-02\n9148  1.046667e-01\n9149  3.533333e-02\n9150 -1.253333e-01\n9151  4.666667e-03\n9152 -1.100000e-01\n9153  7.533333e-02\n9154 -2.160000e-01\n9155 -7.000000e-02\n9156 -3.533333e-02\n9157  2.693333e-01\n9158  2.000000e-03\n9159 -4.800000e-02\n9160 -2.600000e-02\n9161  4.466667e-02\n9162 -1.533333e-02\n9163  2.333333e-02\n9164 -7.333333e-02\n9165 -4.800000e-02\n9166  2.373333e-01\n9167  3.733333e-02\n9168  1.220000e-01\n9169 -9.400000e-02\n9170  7.066667e-02\n9171 -1.333333e-03\n9172  1.893333e-01\n9173 -7.333333e-02\n9174 -9.400000e-02\n9175 -2.006667e-01\n9176 -1.866667e-02\n9177 -1.600000e-02\n9178  5.266667e-02\n9179 -4.866667e-02\n9180  6.466667e-02\n9181 -7.666667e-02\n9182 -2.220000e-01\n9183 -1.400000e-01\n9184  6.866667e-02\n9185 -1.680000e-01\n9186 -1.733333e-02\n9187 -3.600000e-02\n9188  1.086667e-01\n9189  4.533333e-02\n9190  2.280000e-01\n9191 -1.166667e-01\n9192  2.053333e-01\n9193 -1.760000e-01\n9194  2.140000e-01\n9195 -3.200000e-02\n9196  1.900000e-01\n9197 -5.333333e-03\n9198  1.446667e-01\n9199  1.560000e-01\n9200 -1.786667e-01\n9201  2.066667e-01\n9202 -5.333333e-02\n9203 -2.220000e-01\n9204 -1.666667e-02\n9205 -4.866667e-02\n9206  2.000000e-02\n9207 -1.473333e-01\n9208  5.000000e-02\n9209 -6.733333e-02\n9210 -1.186667e-01\n9211  8.666667e-02\n9212  1.333333e-01\n9213  1.533333e-01\n9214  1.600000e-02\n9215 -1.933333e-02\n9216  2.400000e-02\n9217 -2.266667e-02\n9218 -6.466667e-02\n9219 -1.013333e-01\n9220  1.193333e-01\n9221 -1.553333e-01\n9222  6.000000e-03\n9223 -4.800000e-02\n9224 -1.813333e-01\n9225  1.246667e-01\n9226 -1.440000e-01\n9227 -7.133333e-02\n9228  7.333333e-03\n9229 -2.400000e-02\n9230  4.533333e-02\n9231 -1.800000e-02\n9232 -1.480000e-01\n9233  6.800000e-02\n9234 -1.200000e-02\n9235 -1.500000e-01\n9236 -1.613333e-01\n9237  2.180000e-01\n9238  4.466667e-02\n9239 -9.733333e-02\n9240 -1.493333e-01\n9241  9.933333e-02\n9242  1.420000e-01\n9243 -4.133333e-02\n9244  4.000000e-02\n9245 -2.933333e-02\n9246  1.786667e-01\n9247 -2.000000e-02\n9248  9.933333e-02\n9249 -1.020000e-01\n9250 -2.113333e-01\n9251 -8.466667e-02\n9252 -9.866667e-02\n9253 -2.466667e-02\n9254 -1.346667e-01\n9255  5.266667e-02\n9256 -5.866667e-02\n9257 -1.906667e-01\n9258 -6.466667e-02\n9259  2.933333e-02\n9260 -1.613333e-01\n9261  8.666667e-03\n9262  1.493333e-01\n9263  1.580000e-01\n9264  1.266667e-02\n9265  1.153333e-01\n9266 -1.460000e-01\n9267  4.333333e-02\n9268  8.733333e-02\n9269 -3.066667e-02\n9270  1.766667e-01\n9271 -1.733333e-02\n9272 -8.266667e-02\n9273 -1.686667e-01\n9274  1.233333e-01\n9275  7.266667e-02\n9276 -1.993333e-01\n9277  1.613333e-01\n9278  5.333333e-02\n9279 -7.933333e-02\n9280 -8.466667e-02\n9281  1.566667e-01\n9282 -7.600000e-02\n9283 -9.733333e-02\n9284 -4.666667e-03\n9285  9.800000e-02\n9286 -7.466667e-02\n9287 -8.866667e-02\n9288 -1.600000e-01\n9289  1.573333e-01\n9290  1.440000e-01\n9291  1.100000e-01\n9292  1.880000e-01\n9293  1.926667e-01\n9294 -1.033333e-01\n9295 -5.266667e-02\n9296 -2.180000e-01\n9297  1.086667e-01\n9298  1.933333e-02\n9299  6.666667e-03\n9300 -1.473333e-01\n9301 -5.466667e-02\n9302 -5.533333e-02\n9303 -1.680000e-01\n9304  4.266667e-02\n9305 -1.933333e-01\n9306  8.733333e-02\n9307 -1.306667e-01\n9308 -1.733333e-02\n9309  6.533333e-02\n9310 -1.646667e-01\n9311 -1.033333e-01\n9312 -1.353333e-01\n9313 -1.906667e-01\n9314 -5.000000e-02\n9315  8.466667e-02\n9316 -4.733333e-02\n9317  1.313333e-01\n9318 -1.680000e-01\n9319  1.060000e-01\n9320  7.133333e-02\n9321  5.933333e-02\n9322  4.066667e-02\n9323  7.000000e-02\n9324 -8.933333e-02\n9325 -1.120000e-01\n9326  5.466667e-02\n9327  3.200000e-02\n9328  9.600000e-02\n9329  1.333333e-03\n9330  2.466667e-02\n9331 -7.421307e-18\n9332  7.266667e-02\n9333  1.040000e-01\n9334 -9.533333e-02\n9335  8.333333e-02\n9336  1.333333e-01\n9337 -1.586667e-01\n9338 -8.466667e-02\n9339 -1.460000e-01\n9340 -8.466667e-02\n9341  2.180000e-01\n9342  1.560000e-01\n9343  2.133333e-02\n9344  1.553333e-01\n9345  2.053333e-01\n9346 -6.133333e-02\n9347  1.526667e-01\n9348 -2.200000e-02\n9349  3.333333e-02\n9350 -1.866667e-02\n9351 -2.020000e-01\n9352 -4.666667e-02\n9353 -6.800000e-02\n9354  1.326667e-01\n9355 -2.086667e-01\n9356 -8.666667e-03\n9357 -3.800000e-02\n9358 -1.873333e-01\n9359 -2.613333e-01\n9360 -1.093333e-01\n9361  8.200000e-02\n9362 -8.600000e-02\n9363  7.266667e-02\n9364 -4.466667e-02\n9365 -1.326667e-01\n9366 -2.626667e-01\n9367  2.206667e-01\n9368 -1.126667e-01\n9369  1.266667e-01\n9370  6.666667e-03\n9371  9.333333e-03\n9372 -1.073333e-01\n9373 -3.333333e-03\n9374  5.466667e-02\n9375 -1.886667e-01\n9376  1.913333e-01\n9377  1.646667e-01\n9378  8.000000e-03\n9379 -4.333333e-02\n9380  6.666667e-02\n9381  7.333333e-02\n9382 -1.053333e-01\n9383  3.133333e-02\n9384 -1.946667e-01\n9385  8.800000e-02\n9386  1.273333e-01\n9387 -5.533333e-02\n9388 -1.353333e-01\n9389  5.000000e-02\n9390 -4.400000e-02\n9391  2.386667e-01\n9392  6.466667e-02\n9393 -2.426667e-01\n9394  4.666667e-03\n9395 -8.800000e-02\n9396 -1.400000e-01\n9397  4.200000e-02\n9398 -8.333333e-02\n9399  4.533333e-02\n9400  1.406667e-01\n9401 -1.966667e-01\n9402  2.186667e-01\n9403  1.160000e-01\n9404  1.780000e-01\n9405  1.020000e-01\n9406 -6.200000e-02\n9407  1.133333e-01\n9408 -1.293333e-01\n9409  1.520000e-01\n9410  1.800000e-02\n9411  2.113333e-01\n9412  1.173333e-01\n9413 -1.413333e-01\n9414 -5.933333e-02\n9415  1.826667e-01\n9416 -1.520000e-01\n9417  6.466667e-02\n9418 -1.486667e-01\n9419  2.433333e-01\n9420  1.600000e-02\n9421 -4.600000e-02\n9422  1.106667e-01\n9423  2.006667e-01\n9424  1.560000e-01\n9425 -3.866667e-02\n9426  4.133333e-02\n9427  5.933333e-02\n9428  5.400000e-02\n9429 -1.193333e-01\n9430 -3.466667e-02\n9431 -2.060000e-01\n9432  2.106667e-01\n9433 -4.800000e-02\n9434 -2.026667e-01\n9435  1.566667e-01\n9436 -5.200000e-02\n9437  1.000000e-02\n9438  8.533333e-02\n9439 -9.266667e-02\n9440 -1.520000e-01\n9441  8.333333e-02\n9442 -6.600000e-02\n9443  1.346667e-01\n9444  1.066667e-02\n9445  8.133333e-02\n9446  1.853333e-01\n9447  2.133333e-02\n9448 -1.920000e-01\n9449  1.133333e-02\n9450 -8.066667e-02\n9451  1.906667e-01\n9452  1.113333e-01\n9453  1.120000e-01\n9454  2.100000e-01\n9455 -2.466667e-02\n9456  1.013333e-01\n9457 -6.266667e-02\n9458 -5.800000e-02\n9459  1.200000e-01\n9460  6.933333e-02\n9461 -1.520000e-01\n9462  9.066667e-02\n9463  1.453333e-01\n9464  1.940000e-01\n9465  1.720000e-01\n9466  7.466667e-02\n9467 -6.000000e-02\n9468 -1.600000e-02\n9469 -1.026667e-01\n9470  1.506667e-01\n9471 -1.833333e-01\n9472 -7.466667e-02\n9473 -7.733333e-02\n9474 -9.200000e-02\n9475 -6.400000e-02\n9476  5.933333e-02\n9477 -1.206667e-01\n9478 -1.233333e-01\n9479 -1.066667e-01\n9480 -1.653333e-01\n9481  2.093333e-01\n9482  1.493333e-01\n9483  1.180000e-01\n9484  2.046667e-01\n9485  1.446667e-01\n9486  1.026667e-01\n9487 -4.466667e-02\n9488 -1.873333e-01\n9489  8.400000e-02\n9490  1.540000e-01\n9491  1.340000e-01\n9492 -1.273333e-01\n9493  5.466667e-02\n9494 -5.400000e-02\n9495  1.340000e-01\n9496  1.973333e-01\n9497  1.333333e-01\n9498 -9.600000e-02\n9499 -2.866667e-02\n9500 -1.380000e-01\n9501 -1.440000e-01\n9502 -1.873333e-01\n9503  1.080000e-01\n9504  9.333333e-02\n9505 -2.666667e-02\n9506  6.333333e-02\n9507  1.566667e-01\n9508 -5.400000e-02\n9509 -1.506667e-01\n9510  1.060000e-01\n9511  1.280000e-01\n9512 -1.460000e-01\n9513  1.913333e-01\n9514  1.126667e-01\n9515  8.733333e-02\n9516 -1.886667e-01\n9517  6.533333e-02\n9518  4.133333e-02\n9519  2.020000e-01\n9520  1.346667e-01\n9521 -1.333333e-03\n9522  1.333333e-02\n9523 -1.606667e-01\n9524 -1.646667e-01\n9525  1.053333e-01\n9526  1.593333e-01\n9527  8.466667e-02\n9528 -6.666667e-03\n9529  4.666667e-02\n9530  1.493333e-01\n9531 -2.000000e-02\n9532 -1.940000e-01\n9533  2.000000e-03\n9534 -2.733333e-02\n9535 -9.200000e-02\n9536 -1.546667e-01\n9537 -6.200000e-02\n9538 -1.833333e-01\n9539  1.026667e-01\n9540  7.600000e-02\n9541  1.453333e-01\n9542  1.613333e-01\n9543  8.200000e-02\n9544 -7.133333e-02\n9545 -1.666667e-01\n9546 -1.606667e-01\n9547  7.533333e-02\n9548 -1.113333e-01\n9549 -1.266667e-02\n9550 -9.600000e-02\n9551 -2.233333e-01\n9552  1.546667e-01\n9553  1.320000e-01\n9554 -7.933333e-02\n9555 -7.266667e-02\n9556  1.200000e-01\n9557  2.466667e-02\n9558  1.700000e-01\n9559  2.006667e-01\n9560  1.353333e-01\n9561  1.266667e-02\n9562  1.760000e-01\n9563  7.133333e-02\n9564  2.693333e-01\n9565  1.486667e-01\n9566 -6.000000e-03\n9567  1.800000e-02\n9568 -2.006667e-01\n9569  1.480000e-01\n9570 -1.053333e-01\n9571 -4.200000e-02\n9572 -1.113333e-01\n9573  1.133333e-02\n9574  9.666667e-02\n9575 -1.260000e-01\n9576 -5.000000e-02\n9577  1.240000e-01\n9578 -1.386667e-01\n9579  1.253333e-01\n9580  3.400000e-02\n9581 -1.126667e-01\n9582  5.266667e-02\n9583 -1.200000e-01\n9584 -2.266667e-02\n9585 -1.233333e-01\n9586 -1.006667e-01\n9587  1.580000e-01\n9588  7.414079e-18\n9589  8.000000e-03\n9590 -9.266667e-02\n9591 -9.266667e-02\n9592  3.933333e-02\n9593  1.466667e-02\n9594 -1.306667e-01\n9595 -1.660000e-01\n9596  1.793333e-01\n9597  2.133333e-02\n9598  1.486667e-01\n9599 -1.026667e-01\n9600  5.333333e-03\n9601  3.133333e-02\n9602  1.386667e-01\n9603  1.653333e-01\n9604 -1.053333e-01\n9605  1.526667e-01\n9606  9.733333e-02\n9607  1.520000e-01\n9608  9.466667e-02\n9609  1.400000e-02\n9610 -1.266667e-02\n9611 -1.333333e-02\n9612 -1.926667e-01\n9613  1.046667e-01\n9614  8.200000e-02\n9615 -1.333333e-02\n9616 -1.486667e-01\n9617  9.600000e-02\n9618  1.460000e-01\n9619  5.133333e-02\n9620 -9.800000e-02\n9621  4.733333e-02\n9622 -1.586667e-01\n9623  2.253333e-01\n9624  4.733333e-02\n9625 -7.866667e-02\n9626 -2.040000e-01\n9627  8.000000e-02\n9628 -1.880000e-01\n9629 -5.000000e-02\n9630  1.160000e-01\n9631 -2.220610e-17\n9632 -2.053333e-01\n9633  1.580000e-01\n9634  1.000000e-02\n9635  7.466667e-02\n9636 -4.333333e-02\n9637  1.233333e-01\n9638 -1.260000e-01\n9639  1.026667e-01\n9640 -2.280000e-01\n9641 -1.220000e-01\n9642  9.600000e-02\n9643  8.133333e-02\n9644  8.733333e-02\n9645  1.300000e-01\n9646 -6.133333e-02\n9647 -1.346667e-01\n9648  1.506667e-01\n9649  6.133333e-02\n9650  2.160000e-01\n9651  2.533333e-02\n9652 -1.753333e-01\n9653 -6.000000e-03\n9654  1.553333e-01\n9655  2.286667e-01\n9656 -1.933333e-02\n9657  1.566667e-01\n9658 -1.780000e-01\n9659  9.733333e-02\n9660  6.200000e-02\n9661  9.066667e-02\n9662  8.333333e-02\n9663 -6.666667e-04\n9664  1.186667e-01\n9665  1.106667e-01\n9666  8.000000e-03\n9667  1.066667e-02\n9668  8.866667e-02\n9669 -1.200000e-02\n9670 -2.200000e-02\n9671  1.020000e-01\n9672  1.260000e-01\n9673  8.800000e-02\n9674  2.533333e-02\n9675  9.800000e-02\n9676  2.000000e-02\n9677  1.253333e-01\n9678 -1.533333e-02\n9679 -1.206667e-01\n9680 -1.333333e-03\n9681  6.066667e-02\n9682 -2.293333e-01\n9683  1.266667e-01\n9684 -1.126667e-01\n9685 -1.733333e-01\n9686  1.986667e-01\n9687  5.333333e-02\n9688 -2.120000e-01\n9689  1.946667e-01\n9690  7.000000e-02\n9691 -5.666667e-02\n9692  7.000000e-02\n9693 -1.133333e-02\n9694  1.966667e-01\n9695 -1.620000e-01\n9696  1.526667e-01\n9697  1.266667e-01\n9698  2.666667e-02\n9699  1.226667e-01\n9700  1.713333e-01\n9701 -1.520000e-01\n9702 -3.866667e-02\n9703 -7.333333e-02\n9704  1.046667e-01\n9705 -6.266667e-02\n9706 -3.666667e-02\n9707  3.333333e-02\n9708  7.866667e-02\n9709  7.066667e-02\n9710  2.200000e-01\n9711 -2.866667e-02\n9712 -1.933333e-02\n9713 -4.533333e-02\n9714 -4.733333e-02\n9715  2.206667e-01\n9716 -6.666667e-03\n9717  8.000000e-02\n9718  1.126667e-01\n9719  1.666667e-02\n9720 -3.533333e-02\n9721 -7.066667e-02\n9722  1.126667e-01\n9723  1.233333e-01\n9724  7.066667e-02\n9725 -1.066667e-01\n9726 -2.120000e-01\n9727 -3.733333e-02\n9728  1.266667e-02\n9729  8.000000e-03\n9730 -2.326667e-01\n9731  7.466667e-02\n9732 -1.033333e-01\n9733  2.466667e-02\n9734 -8.533333e-02\n9735 -2.733333e-02\n9736  1.640000e-01\n9737  1.500000e-01\n9738 -1.440000e-01\n9739  1.153333e-01\n9740 -1.940000e-01\n9741  2.400000e-01\n9742  5.666667e-02\n9743  1.246667e-01\n9744 -3.666667e-02\n9745 -5.800000e-02\n9746  1.566667e-01\n9747  1.400000e-01\n9748  1.933333e-02\n9749 -2.000000e-03\n9750 -3.133333e-02\n9751  2.766667e-01\n9752 -1.433333e-01\n9753 -2.000000e-01\n9754 -4.933333e-02\n9755 -2.393333e-01\n9756  1.280000e-01\n9757 -1.693333e-01\n9758 -1.046667e-01\n9759  2.933333e-02\n9760 -4.200000e-02\n9761 -1.346667e-01\n9762  1.793333e-01\n9763  1.826667e-01\n9764  1.346667e-01\n9765  9.066667e-02\n9766 -2.406667e-01\n9767 -8.800000e-02\n9768  3.800000e-02\n9769  7.333333e-02\n9770  9.600000e-02\n9771  1.533333e-02\n9772 -1.613333e-01\n9773  2.013333e-01\n9774  2.733333e-02\n9775  1.386667e-01\n9776 -4.533333e-02\n9777  1.053333e-01\n9778  2.133333e-02\n9779 -1.886667e-01\n9780 -2.400000e-02\n9781  6.933333e-02\n9782  3.800000e-02\n9783  7.733333e-02\n9784  3.133333e-02\n9785  8.800000e-02\n9786  2.800000e-02\n9787 -2.386667e-01\n9788 -1.000000e-02\n9789  1.126667e-01\n9790 -1.786667e-01\n9791  1.466667e-01\n9792 -1.373333e-01\n9793 -2.026667e-01\n9794  5.000000e-02\n9795 -1.866667e-02\n9796 -1.300000e-01\n9797 -1.920000e-01\n9798 -1.400000e-02\n9799 -9.333333e-03\n9800 -5.600000e-02\n9801  2.413333e-01\n9802  1.740000e-01\n9803  8.800000e-02\n9804  1.793333e-01\n9805  1.780000e-01\n9806 -1.240000e-01\n9807  1.606667e-01\n9808  3.333333e-03\n9809 -3.200000e-02\n9810 -4.333333e-02\n9811  1.106667e-01\n9812  3.733333e-02\n9813  4.533333e-02\n9814 -9.333333e-03\n9815  1.060000e-01\n9816 -2.600000e-02\n9817  3.600000e-02\n9818 -1.626667e-01\n9819 -2.666667e-03\n9820 -1.066667e-01\n9821 -3.533333e-02\n9822 -1.680000e-01\n9823 -1.126667e-01\n9824  3.933333e-02\n9825 -1.373333e-01\n9826 -3.200000e-02\n9827 -4.200000e-02\n9828 -1.506667e-01\n9829 -1.813333e-01\n9830  1.333333e-01\n9831  1.360000e-01\n9832 -8.400000e-02\n9833  3.666667e-02\n9834 -1.193333e-01\n9835  6.133333e-02\n9836  1.493333e-01\n9837  2.066667e-02\n9838 -1.720000e-01\n9839 -7.933333e-02\n9840 -1.466667e-02\n9841 -1.546667e-01\n9842  1.713333e-01\n9843  6.333333e-02\n9844 -3.200000e-02\n9845  2.073333e-01\n9846  1.126667e-01\n9847  2.466667e-02\n9848 -6.133333e-02\n9849 -5.400000e-02\n9850  1.106667e-01\n9851 -8.533333e-02\n9852 -1.626667e-01\n9853 -1.086667e-01\n9854 -9.133333e-02\n9855 -8.266667e-02\n9856 -1.753333e-01\n9857  3.200000e-02\n9858  2.313333e-01\n9859 -7.000000e-02\n9860  4.000000e-02\n9861 -3.266667e-02\n9862  9.333333e-03\n9863 -1.313333e-01\n9864  9.000000e-02\n9865 -8.866667e-02\n9866 -6.666667e-02\n9867  8.866667e-02\n9868 -1.426667e-01\n9869  1.946667e-01\n9870 -3.000000e-02\n9871 -2.386667e-01\n9872  1.273333e-01\n9873 -8.333333e-02\n9874 -6.000000e-03\n9875 -5.000000e-02\n9876  7.066667e-02\n9877 -8.400000e-02\n9878  1.880000e-01\n9879 -2.800000e-02\n9880  5.600000e-02\n9881  3.266667e-02\n9882  2.146667e-01\n9883  1.546667e-01\n9884  1.626667e-01\n9885  6.133333e-02\n9886 -1.806667e-01\n9887 -1.493333e-01\n9888  9.666667e-02\n9889 -1.266667e-02\n9890 -1.226667e-01\n9891 -1.206667e-01\n9892 -2.173333e-01\n9893  2.613333e-01\n9894  1.553333e-01\n9895  1.573333e-01\n9896 -3.133333e-02\n9897  9.266667e-02\n9898 -8.066667e-02\n9899 -6.933333e-02\n9900 -8.000000e-03\n9901  4.333333e-02\n9902  6.733333e-02\n9903 -1.140000e-01\n9904 -8.666667e-03\n9905 -1.133333e-02\n9906 -8.133333e-02\n9907 -1.520000e-01\n9908 -8.666667e-02\n9909  2.733333e-02\n9910  1.080000e-01\n9911 -1.186667e-01\n9912  4.466667e-02\n9913 -6.466667e-02\n9914  3.666667e-02\n9915  6.666667e-04\n9916  1.420000e-01\n9917 -2.013333e-01\n9918 -9.000000e-02\n9919  4.666667e-03\n9920  2.066667e-01\n9921  8.600000e-02\n9922 -1.480000e-01\n9923  6.400000e-02\n9924 -1.160000e-01\n9925  2.266667e-02\n9926 -2.800000e-02\n9927 -1.600000e-02\n9928 -1.320000e-01\n9929  4.800000e-02\n9930 -1.526667e-01\n9931 -7.000000e-02\n9932 -2.420000e-01\n9933  5.466667e-02\n9934 -7.600000e-02\n9935  1.340000e-01\n9936  3.666667e-02\n9937 -8.533333e-02\n9938 -1.066667e-02\n9939 -1.280000e-01\n9940  1.466667e-01\n9941  1.380000e-01\n9942  2.246667e-01\n9943  9.800000e-02\n9944 -1.133333e-01\n9945  1.566667e-01\n9946 -7.933333e-02\n9947  8.866667e-02\n9948  8.200000e-02\n9949 -4.666667e-03\n9950  9.066667e-02\n9951 -7.733333e-02\n9952 -3.800000e-02\n9953  1.580000e-01\n9954  1.160000e-01\n9955  1.620000e-01\n9956 -1.400000e-02\n9957 -7.533333e-02\n9958 -1.473333e-01\n9959 -7.266667e-02\n9960  1.060000e-01\n9961  2.606667e-01\n9962 -1.780000e-01\n9963 -3.066667e-02\n9964  1.393333e-01\n9965 -7.333333e-02\n9966 -3.266667e-02\n9967  1.186667e-01\n9968 -1.740000e-01\n9969 -2.206667e-01\n9970 -1.000000e-02\n9971  2.733333e-02\n9972 -2.100000e-01\n9973 -9.533333e-02\n9974 -3.533333e-02\n9975  2.313333e-01\n9976 -4.600000e-02\n9977  5.666667e-02\n9978 -1.526667e-01\n9979  8.333333e-02\n9980 -1.246667e-01\n9981  2.066667e-01\n9982 -1.680000e-01\n9983  1.133333e-02\n9984 -1.066667e-01\n9985  2.186667e-01\n9986  1.440000e-01\n9987 -4.733333e-02\n9988  1.553333e-01\n9989 -1.113333e-01\n9990  1.533333e-02\n9991  1.560000e-01\n9992  1.400000e-01\n9993 -7.733333e-02\n9994 -1.280000e-01\n9995  6.133333e-02\n9996  1.373333e-01\n9997 -3.400000e-02\n9998 -4.800000e-02\n9999 -9.000000e-02\n\n\nThis code performs a permutation test to analyze the difference in grocery prices between Walmart and Target. The polarity vector is used to randomly shuffle the data between the two stores (Target and Walmart) to simulate the null distribution, where no real difference between the stores exists. The do(9999) function is used to generate 9,999 resamples, and the mean difference between the two stores is calculated for each resample. The output shows the distribution of these simulated mean differences, with values both positive and negative, suggesting random variations around the null hypothesis of no difference between the two stores.\n\n\n\n\ngf_histogram(data = null_dist_price, ~mean) %&gt;%\n  gf_vline(xintercept = obs_diff_price, colour = \"red\")\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThis plot shows the null distribution of the mean differences in grocery prices between Target and Walmart from the permutation test. The histogram represents the distribution of the simulated mean differences when the null hypothesis is assumed (no real price difference between the stores). The red vertical line indicates the observed mean price difference (approximately 0.0567) between Walmart and Target. This line’s position relative to the null distribution helps visualize whether the observed difference is extreme or typical under the null hypothesis, aiding in the determination of statistical significance.\n\n\n\n\nprop1(~mean, data = null_dist_price)\n\nprop_-0.292 \n      2e-04 \n\n\nThis calculates the proportion of values in the null distribution that are less than or equal to the observed mean difference. The result shows that approximately 0.0292% (2e-04) of the simulated null distribution values are less than the observed difference. This small proportion suggests that the observed difference is quite extreme under the null hypothesis, potentially indicating statistical significance depending on the context of the test.\n\n\n\n\nmosaic::t_test(Groceries$Walmart, Groceries$Target, paired = TRUE) %&gt;%\n  broom::tidy() %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"cyan\"),\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"t.test\")\n\n\n\n\n\n\n\nt.test\n\n\nestimate\nstatistic\np.value\nparameter\nconf.low\nconf.high\nmethod\nalternative\n\n\n\n\n-0.05666667\n-0.4704556\n0.6415488\n29\n-0.3030159\n0.1896825\nPaired t-test\ntwo.sided\n\n\n\n\n\n\nlm(Target - Walmart ~ 1, data = Groceries) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95) %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"cyan\"),\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"Linear Model\")\n\n\n\n\n\n\n\nLinear Model\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\nconf.low\nconf.high\n\n\n\n\n(Intercept)\n0.05666667\n0.1204506\n0.4704556\n0.6415488\n-0.1896825\n0.3030159\n\n\n\n\n\n\nwilcox.test(Groceries$Walmart, Groceries$Target,\n  digits.rank = 7,\n  paired = TRUE,\n  conf.int = TRUE,\n  conf.level = 0.95\n) %&gt;%\n  broom::tidy() %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"palegreen\"),\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"Wilcoxon Test\")\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, digits.rank\n= 7, : cannot compute exact p-value with ties\n\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, digits.rank\n= 7, : cannot compute exact confidence interval with ties\n\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, digits.rank\n= 7, : cannot compute exact p-value with zeroes\n\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, digits.rank\n= 7, : cannot compute exact confidence interval with zeroes\n\n\n\n\n\n\n\n\nWilcoxon Test\n\n\nestimate\nstatistic\np.value\nconf.low\nconf.high\nmethod\nalternative\n\n\n\n\n-0.104966\n95\n0.01431746\n-0.1750051\n-0.03005987\nWilcoxon signed rank test with continuity correction\ntwo.sided\n\n\n\n\n\n\nlm(signed_rank(Target - Walmart) ~ 1,\n  data = Groceries\n) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95) %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"palegreen\"),\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"Linear Model with Sign.Ranks\")\n\n\n\n\n\n\n\nLinear Model with Sign.Ranks\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\nconf.low\nconf.high\n\n\n\n\n(Intercept)\n8.533333\n2.888834\n2.953902\n0.006167464\n2.625004\n14.44166\n\n\n\n\n\n\n\nThe analysis includes different statistical methods comparing grocery prices at Walmart and Target. The paired t-test and linear model both returned high p-values (0.6415), indicating no significant difference between the prices at the two stores. However, the non-parametric Wilcoxon test (p-value = 0.0143) and the linear model with signed ranks (p-value = 0.0062) both show significant differences, suggesting that there is indeed a notable price difference between Walmart and Target. The contrast in results implies that the t-test and standard linear model may not be suitable due to possible violations of assumptions like normality, which the Wilcoxon and signed rank models effectively account for, leading to more reliable results in this case.\n\n\n\n\ntheme_set(new = theme_custom())\n\nset.seed(12345)\nGroceries_less &lt;- Groceries %&gt;%\n  filter(Product != \"Quaker Oats Life Cereal Original\")\n\nGroceries_less_long &lt;- Groceries_less %&gt;%\n  pivot_longer(\n    cols = c(Target, Walmart),\n    names_to = \"store\",\n    values_to = \"prices\"\n  )\n\nwilcox.test(Groceries_less$Walmart,\n  Groceries_less$Target,\n  paired = TRUE, digits.rank = 7,\n  conf.int = TRUE,\n  conf.level = 0.95\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(Groceries_less$Walmart, Groceries_less$Target, :\ncannot compute exact p-value with ties\n\n\nWarning in wilcox.test.default(Groceries_less$Walmart, Groceries_less$Target, :\ncannot compute exact confidence interval with ties\n\n\nWarning in wilcox.test.default(Groceries_less$Walmart, Groceries_less$Target, :\ncannot compute exact p-value with zeroes\n\n\nWarning in wilcox.test.default(Groceries_less$Walmart, Groceries_less$Target, :\ncannot compute exact confidence interval with zeroes\n\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low conf.high method               alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;      \n1   -0.110        67 0.00349   -0.190   -0.0450 Wilcoxon signed ran… two.sided  \n\nobs_diff_price_less &lt;-\n  mean(~ (Target - Walmart), data = Groceries_less)\nobs_diff_price_less\n\n[1] 0.1558621\n\npolarity_less &lt;- c(rep(1, 15), rep(-1, 14))\n\nnull_dist_price_less &lt;-\n  do(9999) * mean(\n    data = Groceries_less,\n    ~ (Target - Walmart) * resample(polarity_less, replace = TRUE)\n  )\n\ngf_histogram(data = null_dist_price_less, ~mean) %&gt;%\n  gf_vline(\n    xintercept = obs_diff_price_less,\n    colour = \"red\"\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nmean(null_dist_price_less &gt;= obs_diff_price_less)\n\n[1] 0.01390139\n\n\nThe code focuses on analysing the price difference between Target and Walmart after removing “Quaker Oats Life Cereal Original” using a Wilcoxon signed rank test. The data is reshaped into a long format for comparison between the two stores. The Wilcoxon signed rank test shows a statistically significant result with an estimate of -0.1102, a p-value of 0.00349, and confidence intervals ranging from -0.1899 to -0.0450. A permutation test is also conducted, generating a null distribution of the mean differences between the two stores. The observed difference (marked by a red line) is plotted on a histogram of the null distribution, suggesting the observed difference is greater than expected under the null hypothesis. Overall, the analysis indicates that Target prices are significantly lower than Walmart prices for this specific product.\n\n\n\n\nlibrary(tidyverse) \nlibrary(ggformula) \nlibrary(mosaic) \nlibrary(broom) \nlibrary(infer) \n\n\nAttaching package: 'infer'\n\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\nlibrary(patchwork) \nlibrary(ggprism) \nlibrary(supernova) \n\n\n\n\n\nfrogs_orig &lt;- read_csv(\"../../data/frogs.csv\")\n\nRows: 60 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (4): Frogspawn sample id, Temperature13, Temperature18, Temperature25\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nfrogs_orig\n\n# A tibble: 60 × 4\n   `Frogspawn sample id` Temperature13 Temperature18 Temperature25\n                   &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n 1                     1            24            NA            NA\n 2                     2            NA            21            NA\n 3                     3            NA            NA            18\n 4                     4            26            NA            NA\n 5                     5            NA            22            NA\n 6                     6            NA            NA            14\n 7                     7            27            NA            NA\n 8                     8            NA            22            NA\n 9                     9            NA            NA            15\n10                    10            27            NA            NA\n# ℹ 50 more rows\n\n\nThe dataset displayed in the image titled “Frogs” contains frogspawn sample data with three different temperature measurements (13°C, 18°C, and 25°C). The dataset comprises 60 rows and 4 columns, with the columns labeled “Frogspawn sample,” “Temperature13,” “Temperature18,” and “Temperature25.” The “Frogspawn sample” column represents the sample IDs, while the temperature columns show frogspawn counts or measurements recorded at each respective temperature. The dataset includes missing values, represented by “NA,” across the temperature columns, indicating incomplete data for certain samples at specific temperatures.\n\n\n\n\nfrogs_orig %&gt;%\n  pivot_longer(\n    .,\n    cols = starts_with(\"Temperature\"),\n    cols_vary = \"fastest\",\n    \n    names_to = \"Temp\",\n    values_to = \"Time\"\n  ) %&gt;%\n  drop_na() %&gt;%\n  \n  separate_wider_regex(\n    cols = Temp,\n    patterns = c(\"Temperature\", TempFac = \"\\\\d+\"),\n    cols_remove = TRUE\n  ) %&gt;%\n## Convert Temp into TempFac, a 3-level factor\n  mutate(TempFac = factor(\n    x = TempFac,\n    levels = c(13, 18, 25),\n    labels = c(\"13\", \"18\", \"25\")\n  )) %&gt;%\n  rename(\"Id\" = `Frogspawn sample id`) -&gt; frogs_long\nfrogs_long\n\n# A tibble: 60 × 3\n      Id TempFac  Time\n   &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;\n 1     1 13         24\n 2     2 18         21\n 3     3 25         18\n 4     4 13         26\n 5     5 18         22\n 6     6 25         14\n 7     7 13         27\n 8     8 18         22\n 9     9 25         15\n10    10 13         27\n# ℹ 50 more rows\n\nfrogs_long %&gt;% count(TempFac)\n\n# A tibble: 3 × 2\n  TempFac     n\n  &lt;fct&gt;   &lt;int&gt;\n1 13         20\n2 18         20\n3 25         20\n\n\nThe dataset on frogs consists of observations of frogspawn samples at various temperatures (13°C, 18°C, and 25°C). The data cleaning process involves restructuring the dataset into a long format, renaming and separating columns to create a temperature factor variable (TempFac) with three levels representing the different temperatures. Missing values are dropped, and the cleaned dataset contains 60 observations, 20 for each temperature level. The table shows frogspawn sample IDs, the corresponding temperature factors, and the time recorded at each temperature. Finally, a count confirms that each temperature factor has exactly 20 observations.\n\n\n\n\ntheme_set(new = theme_custom())\n\ngf_histogram(~Time,\n  fill = ~TempFac,\n  data = frogs_long, alpha = 0.5\n) %&gt;%\n  gf_vline(xintercept = ~ mean(Time)) %&gt;%\n  gf_labs(\n    title = \"Histograms of Hatching Time Distributions vs Temperature\",\n    x = \"Hatching Time\", y = \"Count\"\n  ) %&gt;%\n  gf_text(7 ~ (mean(Time) + 2),\n    label = \"Overall Mean\"\n  ) %&gt;%\n  gf_refine(guides(fill = guide_legend(title = \"Temperature level (°C)\")))\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe plot presented shows histograms of hatching times across these temperature levels, with a vertical line representing the overall mean hatching time. The plot highlights the distribution of hatching times for each temperature level, revealing different patterns in hatching time depending on the temperature. The overall mean is marked for comparison.\n\n\n\n\ntheme_set(new = theme_custom())\n\ngf_boxplot(\n  data = frogs_long,\n  Time ~ TempFac,\n  fill = ~TempFac,\n  alpha = 0.5\n) %&gt;%\n  gf_vline(xintercept = ~ mean(Time)) %&gt;%\n  gf_labs(\n    title = \"Boxplots of Hatching Time Distributions vs Temperature\",\n    x = \"Temperature\", y = \"Hatching Time\",\n    caption = \"Using ggprism\"\n  ) %&gt;%\n  gf_refine(\n    scale_x_discrete(guide = \"prism_bracket\"),\n    guides(fill = guide_legend(title = \"Temperature level (°C)\"))\n  )\n\nWarning: The S3 guide system was deprecated in ggplot2 3.5.0.\nℹ It has been replaced by a ggproto system that can be extended.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe boxplot visualisation compares the distribution of hatching times across the different temperature levels. At 13°C, the median hatching time is higher, around 27–28 days, with a slight outlier. At 18°C, the hatching time decreases with a median around 21 days. At 25°C, the hatching time is the shortest, with the median around 17 days. The variation in hatching time reduces as the temperature increases, reflecting a clearer distinction in the relationship between temperature and hatching time. This trend demonstrates that higher temperatures result in shorter hatching periods.\n\n\n\n\nfrogs_anova &lt;- aov(Time ~ TempFac, data = frogs_long)\n\nThis creates an ANOVA model object, called frogs_anova.\n\n\n\n\ntheme_set(new = theme_custom())\n\nsupernova::pairwise(frogs_anova,\n  correction = \"Bonferroni\", \n  alpha = 0.05, \n  var_equal = TRUE, \n  plot = TRUE\n)\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n── Pairwise t-tests with Bonferroni correction ─────────────────────────────────\n\n\nModel: Time ~ TempFac\n\n\nTempFac\n\n\nLevels: 3\n\n\nFamily-wise error-rate: 0.049\n\n\n\n  group_1 group_2    diff pooled_se       t    df   lower  upper p_adj\n  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 18      13       -5.300     0.257 -20.608    57  -5.861 -4.739 .0000\n2 25      13      -10.100     0.257 -39.272    57 -10.661 -9.539 .0000\n3 25      18       -4.800     0.257 -18.664    57  -5.361 -4.239 .0000\n\n\nThe error bar plot provides a comparison of the differences in hatching times between three temperature groups (13°C, 18°C, and 25°C), with confidence intervals based on Bonferroni correction. The differences between these groups are statistically significant (all p-values are less than 0.05), as shown by the pairwise comparisons of the group means. The intervals for each comparison do not overlap the zero line, indicating clear distinctions between the temperature groups’ effects on hatching time. For example, the difference between 25°C and 13°C is about -10.1 with a confidence interval from -10.66 to -9.54. These findings suggest that temperature significantly affects the hatching time, with higher temperatures generally leading to faster hatching.\n\n\n\n\nsupernova::supernova(frogs_anova)\n\n Analysis of Variance Table (Type III SS)\n Model: Time ~ TempFac\n\n                               SS df      MS       F   PRE     p\n ----- --------------- | -------- -- ------- ------- ----- -----\n Model (error reduced) | 1020.933  2 510.467 385.897 .9312 .0000\n Error (from model)    |   75.400 57   1.323                    \n ----- --------------- | -------- -- ------- ------- ----- -----\n Total (empty model)   | 1096.333 59  18.582                    \n\n\nThe analysis of variance (ANOVA) table provides insight into the model’s effectiveness in explaining the variation in hatching time as a function of temperature levels (TempFac). The table shows the following:\n\nModel (error reduced): The sum of squares (SS) for the model is 1020.933, with 2 degrees of freedom (df). The mean square (MS) is 510.467. The F-statistic is 385.897, with a p-value of 0.0000, indicating strong statistical significance. This suggests that the temperature factor explains a significant portion of the variance in hatching time.\nError (from model): The error SS is 75.400 with 57 degrees of freedom, giving an MS of 1.323. This reflects the variance not explained by the temperature levels.\nTotal (empty model): The total sum of squares is 1096.333, which is the sum of explained and unexplained variation in the model.\n\nOverall, the model is highly significant, with a p-value close to zero, confirming that temperature has a strong impact on the frogs’ hatching time.\n\n\n\n\nfrogs_overall &lt;- frogs_long %&gt;%\n  summarise(\n    overall_mean_time = mean(Time),\n\n    SST = sum((Time - overall_mean_time)^2),\n    n = n()\n  ) \nfrogs_overall\n\n# A tibble: 1 × 3\n  overall_mean_time   SST     n\n              &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1              21.2 1096.    60\n\n\nThis table calculates the overall sum of squares for the frogs’ hatching time data. The overall mean hatching time is 21.17 units, and the sum of squares total (SST) is 1096.333. This SST represents the total variation in hatching time that the model will attempt to explain. The sample size (n) consists of 60 frogspawn samples. This value of SST matches the total variation from the previous ANOVA table, which confirms the accuracy of the sum of squares calculation in the dataset.\n\n\n\n\nSST &lt;- frogs_overall$SST\nSST\n\n[1] 1096.333\n\n\nThis output displays the Sum of Squares Total (SST) value, which is calculated as 1096.333. This value represents the total variability in the dataset for the frogs’ hatching time. The SST reflects the overall variation that the model will partition into components explained by the temperature factors and those left unexplained by the model (residuals). This calculation is consistent with the overall SST value observed in the ANOVA table earlier.\n\n\n\n\nfrogs_within_groups &lt;- frogs_long %&gt;%\n  group_by(TempFac) %&gt;%\n  summarise(\n    grouped_mean_time = mean(Time),\n    grouped_variance_time = var(Time),\n    group_error_squares = sum((Time - grouped_mean_time)^2),\n    n = n()\n  )\nfrogs_within_groups\n\n# A tibble: 3 × 5\n  TempFac grouped_mean_time grouped_variance_time group_error_squares     n\n  &lt;fct&gt;               &lt;dbl&gt;                 &lt;dbl&gt;               &lt;dbl&gt; &lt;int&gt;\n1 13                   26.3                  1.27                24.2    20\n2 18                   21                    1.26                24      20\n3 25                   16.2                  1.43                27.2    20\n\nfrogs_SSE &lt;- frogs_within_groups %&gt;%\n  summarise(SSE = sum(group_error_squares))\n\nSSE &lt;- frogs_SSE$SSE\nSSE\n\n[1] 75.4\n\n\nThe analysis shows the calculation of sums of square errors (SSE) within each group of frogspawn samples across three different temperature levels (13°C, 18°C, and 25°C). The grouped mean time (average hatching time) for each temperature level was calculated: 26.3 for 13°C, 21.0 for 18°C, and 16.2 for 25°C. Each group’s variance and sum of square errors (the total variation within each group from the group mean) were also calculated. The total SSE was found to be 75.4, which quantifies the variation within the groups.\n\n\n\n\nSST\n\n[1] 1096.333\n\nSSE\n\n[1] 75.4\n\nSSA &lt;- SST - SSE\nSSA\n\n[1] 1020.933\n\n\nThis computes the sum of squares between groups (SSA) for the frog hatching time analysis. The total sum of squares (SST) is 1096.333, which represents the overall variation in the hatching times. The sum of square errors (SSE), which measures the variation within the temperature groups, was calculated to be 75.4. Finally, the sum of squares among groups (SSA), representing the variation between the different temperature levels, was found to be 1020.933 by subtracting SSE from SST. This indicates that most of the variation in hatching time is due to differences in the temperature levels.\n\n\n\n\ndf_SSE &lt;- frogs_long %&gt;%\n  \n  group_by(TempFac) %&gt;%\n  summarise(per_group_df_SSE = n() - 1) %&gt;%\n  summarise(df_SSE = sum(per_group_df_SSE)) %&gt;%\n  as.numeric()\n\ndf_SST &lt;- frogs_long %&gt;%\n  summarise(df_SST = n() - 1) %&gt;%\n  as.integer()\n\nk &lt;- length(unique(frogs_long$TempFac))\ndf_SSA &lt;- k - 1\n\n\ndf_SST\n\n[1] 59\n\ndf_SSE\n\n[1] 57\n\ndf_SSA\n\n[1] 2\n\n\nThe degrees of freedom (df) for the sum of squares are calculated as follows: for the total sum of squares (SST), the degrees of freedom are 59. For the sum of square errors (SSE), the degrees of freedom are 57, which represents the number of data points minus the number of groups. Finally, for the sum of squares among groups (SSA), the degrees of freedom are 2, reflecting the number of temperature groups minus 1.\n\n\n\n\nMSE &lt;- frogs_within_groups %&gt;%\n  summarise(mean_square_error = sum(group_error_squares / df_SSE)) %&gt;%\n  as.numeric()\nMSE\n\n[1] 1.322807\n\n\nThe code calculates the Mean Square Error (MSE) from the frog dataset. It first takes the group_error_squares (which are the sum of squared differences from the group means) and divides them by the degrees of freedom for the error term (df_SSE). The result, 1.322807, represents the average variation within the groups. MSE is a key component in an ANOVA analysis, as it quantifies the variance within each group and is used in hypothesis testing to compare the means across different groups.\n\n\n\n\nMSA &lt;- SSA / df_SSA \nMSA\n\n[1] 510.4667\n\n\nThis computes the Mean Square for the Factor (MSA) by dividing the sum of squares for the factor (SSA) by its degrees of freedom (df_SSA). The resulting value, 510.4667, represents the average variation between the group means. This MSA value is essential in the ANOVA calculation as it is used to determine the F-statistic, comparing the variation between the groups (due to the factor) to the variation within the groups (from the MSE) to assess if the differences between group means are statistically significant.\n\n\n\n\nF_stat &lt;- MSA / MSE\nF_stat\n\n[1] 385.8966\n\n\nThe code calculates the F-statistic for the ANOVA test by dividing the Mean Square for the Factor (MSA) by the Mean Square for Error (MSE). The resulting F-statistic value is 385.8966. This value helps determine whether there is a statistically significant difference between the group means. A higher F-statistic generally indicates that the variation between the groups is more significant than the variation within the groups, leading to stronger evidence against the null hypothesis that all group means are equal.\n\n\n\n\nF_crit &lt;-\n  qf(\n    p = (1 - 0.05 / 3), \n    df1 = df_SSA, \n    df2 = df_SSE \n  )\nF_crit\n\n[1] 4.403048\n\nF_stat\n\n[1] 385.8966\n\n\nThe code calculates the critical F-value (F_crit) for an ANOVA test, given a significance level adjusted for multiple comparisons (0.05/3) and the degrees of freedom for both the factor (df_SSA) and error (df_SSE). The F_crit value is 4.403048. The F_stat, calculated earlier, is 385.8966. Since the F_stat is much larger than the F_crit, this suggests a significant difference between the groups, providing strong evidence to reject the null hypothesis.\n\n\n\n\ntheme_set(new = theme_custom())\n\nmosaic::xpf(\n  q = F_crit,\n  df1 = df_SSA, df2 = df_SSE, method = \"gg\",\n  log.p = FALSE, lower.tail = TRUE,\n  return = \"plot\"\n) %&gt;%\n  gf_vline(xintercept = F_crit) %&gt;%\n  gf_label(0.75 ~ 5,\n    label = \"F_critical\",\n    inherit = F, show.legend = F\n  ) %&gt;%\n  gf_labs(\n    title = \"F distribution for Frogs Data\",\n    subtitle = \"F_critical = 4.403\"\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe F distribution plot for the frog data, with the calculated critical F value of 4.403, visually illustrates the density distribution of F values under the null hypothesis. The plot shows a steep decrease in probability density as F values increase, with most of the probability mass concentrated near zero. The shaded area in purple (A: 0.983) represents the region where the observed F-statistic is less than the critical F value, while the small green area (B: 0.017) represents the region beyond the critical value. Since the calculated F-statistic (385.897) is far beyond the critical value, we reject the null hypothesis, suggesting that temperature levels significantly impact hatching time. This conclusion is based on the comparison of the observed F-statistic with the critical threshold in the F distribution.\n\n\n\n\nsupernova::equation(frogs_anova)\n\nFitted equation:\nTime = 26.3 + -5.3*TempFac18 + -10.1*TempFac25 + e\n\n\nThe linear equation suggests that at a baseline temperature (13°C), the average hatching time is 26.3 days. When the temperature increases to 18°C (TempFac18), the hatching time decreases by 5.3 days, and when the temperature reaches 25°C (TempFac25), the hatching time decreases further by 10.1 days. The residual error is represented by eee, accounting for any variation not explained by the temperature levels. This equation illustrates a clear negative relationship between temperature and hatching time: as temperature increases, hatching time decreases.\n\n\n\n\nshapiro.test(x = frogs_long$Time)\n\n\n    Shapiro-Wilk normality test\n\ndata:  frogs_long$Time\nW = 0.92752, p-value = 0.001561\n\n\nThe Shapiro-Wilk normality test was conducted on the variable “Time” from the “frogs_long” dataset to check whether the data follows a normal distribution. The test result produced a W statistic of 0.92752 and a p-value of 0.001561. Since the p-value is below the typical significance threshold of 0.05, we reject the null hypothesis that the data is normally distributed. Therefore, the “Time” data does not follow a normal distribution, indicating potential skewness or deviation from normality.\n\n\n\n\nfrogs_long %&gt;%\n  group_by(TempFac) %&gt;%\n  group_modify(~ .x %&gt;%\n    select(Time) %&gt;%\n    as_vector() %&gt;%\n    shapiro.test() %&gt;%\n    broom::tidy())\n\n# A tibble: 3 × 4\n# Groups:   TempFac [3]\n  TempFac statistic p.value method                     \n  &lt;fct&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                      \n1 13          0.890  0.0264 Shapiro-Wilk normality test\n2 18          0.925  0.126  Shapiro-Wilk normality test\n3 25          0.898  0.0377 Shapiro-Wilk normality test\n\n\nThe Shapiro-Wilk normality test was conducted on the “Time” data across different temperature levels (TempFac) of 13°C, 18°C, and 25°C. The results show that for TempFac 13°C, the W statistic is 0.8895 with a p-value of 0.0264, suggesting a deviation from normality as the p-value is less than 0.05. For TempFac 18°C, the W statistic is 0.9254 with a p-value of 0.1261, which indicates no significant departure from normality at the 0.05 level. Similarly, for TempFac 25°C, the W statistic is 0.8979 with a p-value of 0.0377, also showing a marginal deviation from normality. Overall, while TempFac 18°C appears to be normally distributed, the other two temperature levels show some departure from normality.\n\ntheme_set(new = theme_custom())\n\nfrogs_anova$residuals %&gt;%\n  as_tibble() %&gt;%\n  gf_dhistogram(~value, data = .) %&gt;%\n  gf_fitdistr()\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nfrogs_anova$residuals %&gt;%\n  as_tibble() %&gt;%\n  gf_qq(~value, data = .) %&gt;%\n  gf_qqstep() %&gt;%\n  gf_qqline()\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nshapiro.test(frogs_anova$residuals)\n\n\n    Shapiro-Wilk normality test\n\ndata:  frogs_anova$residuals\nW = 0.94814, p-value = 0.01275\n\n\nThis checks the normality of residuals from an ANOVA model (frogs_anova$residuals) by using both graphical and statistical methods. First, a histogram with a fitted distribution is created, which visualizes the residuals to check if they approximately follow a normal distribution. Next, a QQ plot (Quantile-Quantile plot) is generated with the gf_qq function to further assess the normality of the residuals by comparing the observed quantiles of the residuals with the expected quantiles from a standard normal distribution. Finally, a Shapiro-Wilk test is conducted on the residuals to provide a formal test of normality, where the null hypothesis is that the data is normally distributed. The results of the Shapiro-Wilk test and the plots together help determine whether the residuals meet the assumption of normality, which is important for validating the ANOVA model.\n\n\n\n\nfrogs_long %&gt;%\n  group_by(TempFac) %&gt;%\n  summarise(variance = var(Time))\n\n# A tibble: 3 × 2\n  TempFac variance\n  &lt;fct&gt;      &lt;dbl&gt;\n1 13          1.27\n2 18          1.26\n3 25          1.43\n\nDescTools::LeveneTest(Time ~ TempFac, data = frogs_long)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  2  0.3931 0.6768\n      57               \n\nfligner.test(Time ~ TempFac, data = frogs_long)\n\n\n    Fligner-Killeen test of homogeneity of variances\n\ndata:  Time by TempFac\nFligner-Killeen:med chi-squared = 0.53898, df = 2, p-value = 0.7638\n\n\nThe data being analysed involves three temperature levels (13°C, 18°C, and 25°C) and their impact on hatching times of frogspawn samples. A variance test was conducted to check for homogeneity across the temperature groups. The variance values for the groups were approximately 1.27, 1.26, and 1.43, respectively. Two statistical tests, Levene’s test and the Fligner-Killeen test, were performed to check if variances between the groups are statistically equal. The Levene’s test returned a p-value of 0.6768, and the Fligner-Killeen test gave a p-value of 0.7638, both of which are greater than 0.05, indicating that the assumption of equal variances holds across the temperature groups. This justifies the use of ANOVA or similar tests under the assumption of homogeneity of variance.\n\n\n\n\ntheme_set(new = theme_custom())\n\nfrogs_supernova &lt;-\n  supernova::pairwise(frogs_anova,\n    plot = TRUE,\n    alpha = 0.05,\n    correction = \"Bonferroni\"\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThis applies the Bonferroni correction in a pairwise comparison of the ANOVA model for frog data, using the supernova::pairwise function. The output plot represents 95.1% confidence intervals (CI) for pairwise comparisons between the temperature levels (13°C, 18°C, and 25°C). The error bars indicate the confidence intervals for the differences in hatching times between these temperatures. The confidence intervals help to determine whether the differences between groups are statistically significant; intervals that do not overlap zero indicate significant differences.\n\n\n\n\nfrogs_supernova\n\n\n\n\n── Pairwise t-tests with Bonferroni correction ─────────────────────────────────\n\n\nModel: Time ~ TempFac\n\n\nTempFac\n\n\nLevels: 3\n\n\nFamily-wise error-rate: 0.049\n\n\n\n  group_1 group_2    diff pooled_se       t    df   lower  upper p_adj\n  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 18      13       -5.300     0.257 -20.608    57  -5.861 -4.739 .0000\n2 25      13      -10.100     0.257 -39.272    57 -10.661 -9.539 .0000\n3 25      18       -4.800     0.257 -18.664    57  -5.361 -4.239 .0000\n\n\nThe results from the pairwise t-tests with Bonferroni correction provide insights into the comparison of hatching times across three temperature levels (13°C, 18°C, and 25°C). The family-wise error rate is set at 0.049 to account for multiple comparisons. The table displays differences between groups, their pooled standard errors, t-values, degrees of freedom (df), and adjusted p-values. All comparisons between the temperature groups are significant (p_adj = 0.000), suggesting that the hatching times significantly differ between the temperature levels, with higher t-values indicating stronger evidence against the null hypothesis.\n\n\n\n\nobserved_infer &lt;-\n  frogs_long %&gt;%\n  specify(Time ~ TempFac) %&gt;%\n  hypothesise(null = \"independence\") %&gt;%\n  calculate(stat = \"F\")\nobserved_infer\n\nResponse: Time (numeric)\nExplanatory: TempFac (factor)\nNull Hypothesis: independence\n# A tibble: 1 × 1\n   stat\n  &lt;dbl&gt;\n1  386.\n\n\nThe output shows the result of calculating the observed F-statistic for testing the independence between the variables Time and TempFac (temperature factor). The F-statistic calculated is approximately 385.8966, indicating a strong deviation from the null hypothesis of independence. This value suggests that there is a significant difference between the means of the hatching times across the different temperature levels. This high F-statistic provides further evidence that temperature has a substantial effect on the hatching time.\n\n\n\n\nnull_dist_infer &lt;- frogs_long %&gt;%\n  specify(Time ~ TempFac) %&gt;%\n  hypothesise(null = \"independence\") %&gt;%\n  generate(reps = 4999, type = \"permute\") %&gt;%\n  calculate(stat = \"F\")\n\nnull_dist_infer\n\nResponse: Time (numeric)\nExplanatory: TempFac (factor)\nNull Hypothesis: independence\n# A tibble: 4,999 × 2\n   replicate   stat\n       &lt;int&gt;  &lt;dbl&gt;\n 1         1 1.08  \n 2         2 3.30  \n 3         3 5.51  \n 4         4 3.85  \n 5         5 0.189 \n 6         6 0.412 \n 7         7 2.75  \n 8         8 1.54  \n 9         9 0.0974\n10        10 2.92  \n# ℹ 4,989 more rows\n\n\nThe output represents a permutation test to generate a null distribution of F-statistics. The hypothesis test involves shuffling the data 4,999 times to simulate what the F-statistics would be if the null hypothesis of independence between hatching time and temperature levels (TempFac) were true. The results show a wide range of F-statistic values, starting with values such as 2.40, 3.47, and 4.28. These values serve as a basis to compare the observed F-statistic (385.8966). If the observed F-statistic significantly exceeds these values, it provides strong evidence against the null hypothesis.\n\n\n\n\nnull_dist_infer %&gt;%\n  visualise(method = \"simulation\") +\n  shade_p_value(obs_stat = observed_infer$stat, direction = \"right\") +\n  scale_x_continuous(trans = \"log10\", expand = c(0, 0)) +\n  coord_cartesian(xlim = c(0.2, 500), clip = \"off\") +\n  annotation_logticks(outside = FALSE) +\n  theme_custom()\n\nWarning in transformation$transform(x): NaNs produced\n\n\nWarning in scale_x_continuous(trans = \"log10\", expand = c(0, 0)): log-10\ntransformation introduced infinite values.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThis visualizes the null distribution of the F-statistic generated through simulation. The plot shows the frequency distribution of F-statistics under the null hypothesis of independence between hatching time and temperature levels. The x-axis is displayed on a logarithmic scale, and the observed F-statistic (indicated by the red line) is far to the right, well beyond the range of most simulated F-values. This suggests that the observed F-statistic is highly significant and unlikely to occur under the null hypothesis, providing strong evidence against it."
  },
  {
    "objectID": "posts/Day 7/index.html#introduction",
    "href": "posts/Day 7/index.html#introduction",
    "title": "Day 7",
    "section": "",
    "text": "We are looking at Inference for Comparing Two Paired Means.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(broom) \nlibrary(resampledata3)\n\n\nAttaching package: 'resampledata3'\n\nThe following object is masked from 'package:datasets':\n\n    Titanic\n\nlibrary(gt) \n\n\n\n\nknitr::opts_chunk$set(\n  fig.width = 7,\n## Sets the default width of figures to 7 inches.\n  fig.asp = 0.618, \n## Sets the aspect ratio of the figure to approximately the golden ratio.\n  fig.align = \"center\"\n## Centers the alignment of the figure output.\n)\ntheme_custom &lt;- function() {\n## defines a custom theme for ggplot2 plots, using the font \"Roboto Condensed\" and modifying certain visual elements like the plot title, subtitles, captions, axis titles, and text.\n  font &lt;- \"Roboto Condensed\" \n  theme_classic(base_size = 14) %+replace% ## used to replace elements from the base theme with custom settings.\n    theme(\n      panel.grid.minor = element_blank(), \n      text = element_text(family = font),\n      plot.title = element_text( \n        family = font, \n        face = \"bold\", \n        hjust = 0, \n        margin = margin(0, 0, 10, 0)\n      ),\n      plot.subtitle = element_text( \n        family = font,                \n        hjust = 0,\n        margin = margin(2, 0, 5, 0)\n      ),\n      plot.caption = element_text( \n        family = font, \n        size = 8, \n        hjust = 1\n      ), \n\n      axis.title = element_text( \n        family = font,\n        size = 10\n      ),\n      axis.text = element_text(\n        family = font, \n        size = 8\n      ) \n    )\n}\n\n\ntheme_set(new = theme_custom())\n\n\n\n\n\ndata(\"Diving2017\", package = \"resampledata3\")\nDiving2017\n\n                     Name     Country Semifinal  Final\n1        CHEONG Jun Hoong    Malaysia    325.50 397.50\n2                SI Yajie       China    382.80 396.00\n3                REN Qian       China    367.50 391.95\n4              KIM Mi Rae North Korea    346.00 385.55\n5              WU Melissa   Australia    318.70 370.20\n6           KIM Kuk Hyang North Korea    360.85 360.00\n7         ITAHASHI Minami       Japan    313.70 357.85\n8        BENFEITO Meaghan      Canada    355.15 331.40\n9          PAMG Pandelela    Malaysia    322.75 322.40\n10        CHAMANDY Olivia      Canada    320.55 307.15\n11       PARRATTO Jessica         USA    322.75 302.35\n12 MURILLO URREA Carolina    Colombia    325.75 283.35\n\nDiving2017_inspect &lt;- inspect(Diving2017)\nDiving2017_inspect$categorical\n\n# A tibble: 2 × 6\n  name    class  levels     n missing distribution                              \n  &lt;chr&gt;   &lt;chr&gt;   &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                                     \n1 Name    factor     12    12       0 \" SI Yajie (8.3%) ...                    …\n2 Country factor      8    12       0 \"Canada (16.7%), China (16.7%) ...       …\n\nDiving2017_inspect$quantitative\n\n# A tibble: 2 × 11\n  name      class     min    Q1 median    Q3   max  mean    sd     n missing\n* &lt;chr&gt;     &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;\n1 Semifinal numeric  314.  322.   326.  357.  383.  338.  22.9    12       0\n2 Final     numeric  283.  319.   359.  387.  398.  350.  40.0    12       0\n\n\nThe dataset from the Diving2017 championship includes results from 12 divers across 8 countries, with no missing data. The semifinal scores ranged from 313.7 to 382.8, with a median of 325.63 and a standard deviation of 22.95, indicating a relatively consistent performance among divers. The final scores showed more variation, ranging from 283.35 to 397.5, with a higher median of 358.93 and a larger standard deviation of 40.02, suggesting greater performance differences in the final round. Overall, most divers improved their scores in the final compared to the semifinals.\n\n\n\n\ntheme_set(new = theme_custom())\n\nDiving2017_long &lt;- Diving2017 %&gt;%\n  pivot_longer(\n    cols = c(Final, Semifinal),\n    names_to = \"race\",\n    values_to = \"scores\"\n  )\nDiving2017_long\n\n# A tibble: 24 × 4\n   Name               Country     race      scores\n   &lt;fct&gt;              &lt;fct&gt;       &lt;chr&gt;      &lt;dbl&gt;\n 1 \"CHEONG Jun Hoong\" Malaysia    Final       398.\n 2 \"CHEONG Jun Hoong\" Malaysia    Semifinal   326.\n 3 \" SI Yajie\"        China       Final       396 \n 4 \" SI Yajie\"        China       Semifinal   383.\n 5 \"REN Qian\"         China       Final       392.\n 6 \"REN Qian\"         China       Semifinal   368.\n 7 \"KIM Mi Rae\"       North Korea Final       386.\n 8 \"KIM Mi Rae\"       North Korea Semifinal   346 \n 9 \"WU Melissa\"       Australia   Final       370.\n10 \"WU Melissa\"       Australia   Semifinal   319.\n# ℹ 14 more rows\n\n\nIn the transformed long-format dataset from the Diving2017 championship, each diver now has two rows: one for their semifinal score and one for their final score, making a total of 24 rows. The columns include the diver’s Name, Country, Race (indicating whether the score is from the semifinal or final), and Scores. This reshaping of the data makes it easier to compare semifinal and final performance for each diver. The scores range from a low of 307.15 in the final to a high of 397.5, reflecting varying levels of improvement or decline between the semifinal and final rounds.\n\n\n\n\nDiving2017_long %&gt;%\n  gf_density(~scores,\n    fill = ~race,\n    alpha = 0.5,\n    title = \"Diving Scores\"\n  ) %&gt;%\n  gf_facet_grid(~race) %&gt;%\n  gf_fitdistr(dist = \"dnorm\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe density plot visualizes the distribution of scores from the Diving2017 championship, separated into semifinal and final rounds. The semifinal scores (in blue) show a slightly more concentrated distribution, with a peak around 350, indicating that most divers scored close to this value. The final scores (in pink) are more widely spread, peaking around 375, but with a flatter distribution, suggesting a greater variability in performance. The normal distribution curve is fitted for both sets of scores, showing that while the semifinal scores are more normally distributed, the final scores have a wider range and less symmetry.\n\n\n\n\nDiving2017_long %&gt;%\n  gf_col(\n    fct_reorder(Name, scores) ~ scores,\n    fill = ~race,\n    alpha = 0.5,\n    position = \"dodge\",\n    xlab = \"Scores\",\n    ylab = \"Name\",\n    title = \"Diving Scores\"\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe plot shows that top performers like SI Yajie and REN Qian from China consistently scored higher in both rounds, while other divers, such as KIM Mi Rae and CHEONG Jun Hoong, also performed well but with slight variations between the two rounds. Notably, some divers, like BENFEITO Meaghan and MURILLO URREA Carolina, experienced a drop in their final scores compared to the semifinals. The plot, with its clear distinction between semifinal and final scores through color coding, makes it easy to see changes in individual performances across the rounds.\n\n\n\n\nDiving2017_long %&gt;%\n  gf_boxplot(\n    scores ~ race,\n    fill = ~race,\n    alpha = 0.5,\n    xlab = \"Race\",\n    ylab = \"Scores\",\n    title = \"Diving Scores\"\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe boxplot visualizes the distribution of diving scores for the semifinal and final rounds. The box for the final scores (in pink) is positioned higher overall, indicating that final scores tend to be higher than semifinal scores. The median score in the final round is higher, around 375, compared to the semifinal’s median of about 350. The final scores also show more variability, with a wider interquartile range (IQR) and longer whiskers, reflecting a broader spread of scores. The semifinal scores (in blue) are more concentrated, with a smaller IQR and whiskers, indicating less variation in scores. This plot emphasizes that divers generally performed better and with more variability in the final round than in the semifinal.\n\n\n\n\nshapiro.test(Diving2017$Final)\n\n\n    Shapiro-Wilk normality test\n\ndata:  Diving2017$Final\nW = 0.9184, p-value = 0.273\n\nshapiro.test(Diving2017$Semifinal)\n\n\n    Shapiro-Wilk normality test\n\ndata:  Diving2017$Semifinal\nW = 0.86554, p-value = 0.05738\n\n\nThe Shapiro-Wilk normality test was performed on the semifinal and final diving scores to assess whether the data is normally distributed.\n\nFinal scores: The test statistic W=0.9184 and the p-value is 0.273. Since the p-value is greater than the typical significance level of 0.05, we fail to reject the null hypothesis, indicating that the final scores do not significantly deviate from a normal distribution.\nSemifinal scores: The test statistic W=0.86554 and the p-value is 0.05738. Although the p-value is close to 0.05, it is still slightly higher, so we also fail to reject the null hypothesis for the semifinal scores. This suggests that the semifinal scores are approximately normally distributed, but with a slightly stronger deviation from normality compared to the final scores.\n\nIn summary, both the semifinal and final scores are not significantly different from a normal distribution based on the Shapiro-Wilk test results.\n\n\n\n\ntheme_set(new = theme_custom())\n\nset.rseed(1234)\nDiving2017 %&gt;%\n  mutate(\n    Final_norm = rnorm(\n      n = 12,\n      mean = mean(Final),\n      sd = sd(Final)\n    ),\n    Semifinal_norm = rnorm(\n      n = 12,\n      mean = mean(Semifinal),\n      sd = sd(Semifinal)\n    )\n  ) %&gt;%\n  pivot_longer(\n    cols =\n      c(Semifinal, Final, Semifinal_norm, Final_norm),\n    names_to = \"score_type\", values_to = \"value\"\n  ) %&gt;%\n  gf_boxplot(value ~ score_type,\n    fill = ~score_type,\n    show.legend = FALSE\n  ) %&gt;%\n  gf_labs(title = \"Comparing Data and Normal Boxplots\")\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nDiving2017_long %&gt;%\n  gf_qq(~ scores | race, size = 2) %&gt;%\n  gf_qqline(ylab = \"scores\", xlab = \"theoretical normal\")\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n## set.rseed(1234)-This ensures reproducibility by setting a seed for random number generation. The seed ensures that random numbers generated in the next step will be the same every time the code is run.\n## gf_qq() generates the QQ plot for the scores variable, grouped by race (semifinal and final).\n## gf_qqline() adds a reference line to the QQ plot, which helps to assess how closely the actual data follows a normal distribution.\n\nIn the boxplots comparing the actual and simulated normal scores for the diving championship data, the Final and Semifinal scores are shown alongside their respective normally generated counterparts. The actual final scores exhibit a wider range with a slightly higher median compared to the simulated normal distribution, which is narrower. Similarly, the semifinal scores display more variability than the corresponding simulated normal distribution, but they are closer in range compared to the finals. The normal simulations serve as a baseline for comparison, highlighting the greater variability in actual scores, especially in the finals.\nIn the QQ plot (Quantile-Quantile plot), the actual scores for both the final and semifinal rounds are plotted against a theoretical normal distribution. While the semifinal scores mostly follow the expected straight-line pattern of a normal distribution, the final scores deviate more significantly, particularly at the higher end, where outliers appear above the theoretical line. This confirms that the final scores show more variation from normality, whereas the semifinal scores are closer to a normal distribution.\n\n\n\n\nvar.test(scores ~ race,\n  data = Diving2017_long,\n  ratio = 1, \n  conf.int = TRUE,\n  conf.level = 0.95\n) %&gt;%\n  broom::tidy()\n\nMultiple parameters; naming those columns num.df, den.df\n\n\n# A tibble: 1 × 9\n  estimate num.df den.df statistic p.value conf.low conf.high method alternative\n     &lt;dbl&gt;  &lt;int&gt;  &lt;int&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      \n1     3.04     11     11      3.04  0.0783    0.876      10.6 F tes… two.sided  \n\n## The var.test() function is used to conduct the F-test for equality of variances between two groups (semifinal and final scores in this case).\n## ratio = 1: Specifies the null hypothesis that the ratio of the variances is equal to 1, meaning both groups have the same variance.\n\nThe F-test for variances was performed to compare the variability between the final and semifinal scores in the Diving2017 dataset. The test statistic is 3.041, with a p-value of 0.0783. Since the p-value is greater than the typical significance level of 0.05, we fail to reject the null hypothesis, suggesting that the variances between the two groups (final and semifinal scores) are not significantly different.\nThe confidence interval for the variance ratio is (0.8755, 10.5644), which includes 1, further supporting the conclusion that there is no significant difference in variance between the semifinal and final scores. Thus, the variability in scores is approximately the same in both rounds.\n\n\n\n\nobs_diff_swim &lt;- diffmean(scores ~ race,\n  data = Diving2017_long,\n  only.2 = FALSE\n)\nobs_diff_swim\n\ndiffmean \n -11.975 \n\n## diffmean(scores ~ race): This calculates the difference in the mean scores between the two groups defined by the race variable (semifinal and final).\n## only.2 = FALSE: This argument specifies that the comparison should be made between the two groups in race (semifinal and final), even if there are more than two categories. Here, it ensures the comparison is made between exactly these two categories.\n\nThis calculates that the mean score in the semifinal is about 11.975 points lower than the mean score in the final. This negative value suggests that divers generally performed better in the final round compared to the semifinal.\n\n\n\n\nmosaic::t.test(\n  x = Diving2017$Semifinal,\n  y = Diving2017$Final,\n  paired = TRUE, var.equal = FALSE\n) %&gt;% broom::tidy()\n\n# A tibble: 1 × 8\n  estimate statistic p.value parameter conf.low conf.high method     alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      \n1    -12.0     -1.19   0.259        11    -34.1      10.2 Paired t-… two.sided  \n\n\nThe paired t-test comparing the semifinal and final diving scores reveals that the average score difference is -11.975, with semifinal scores being lower than final scores. However, the p-value of 0.259 indicates that this difference is not statistically significant, meaning the observed difference could be due to random variation. The 95% confidence interval for the mean difference, ranging from -34.11 to 10.17, includes zero, further supporting that there is no meaningful difference between the two rounds. Overall, there is no significant evidence to suggest that scores significantly improved from the semifinals to the finals.\n\n\n\n\nwilcox.test(\n  x = Diving2017$Semifinal,\n  y = Diving2017$Final,\n  mu = 0,\n  alternative = \"two.sided\", \n  paired = TRUE,\n  conf.int = TRUE,\n  conf.level = 0.95\n) %&gt;%\n  broom::tidy()\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low conf.high method               alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;      \n1    -12.0        27   0.380    -35.8      12.3 Wilcoxon signed ran… two.sided  \n\n\nThe Wilcoxon signed-rank test was conducted to compare the semifinal and final diving scores. The estimated difference between the median semifinal and final scores is -11.96, suggesting that semifinal scores are lower. However, the p-value of 0.38 indicates that this difference is not statistically significant at the 95% confidence level. The 95% confidence interval for the median difference ranges from -35.83 to 12.3, which includes zero, further supporting the conclusion that there is no significant difference between the scores in the semifinal and final rounds. This test confirms that the score differences could be due to random variation.\n\n\n\n\nlm(Semifinal - Final ~ 1, data = Diving2017) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95)\n\n# A tibble: 1 × 7\n  term        estimate std.error statistic p.value conf.low conf.high\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)    -12.0      10.1     -1.19   0.259    -34.1      10.2\n\nsigned_rank &lt;- function(x) {\n  sign(x) * rank(abs(x))\n}\n\nlm(signed_rank(Semifinal - Final) ~ 1,\n  data = Diving2017\n) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95)\n\n# A tibble: 1 × 7\n  term        estimate std.error statistic p.value conf.low conf.high\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)       -2      2.14    -0.937   0.369    -6.70      2.70\n\n## lm(Semifinal - Final ~ 1, data = Diving2017)- This part fits a simple linear model to the difference between Semifinal and Final scores, essentially calculating the mean difference between the two. ~ 1 means that the model is fitting just the intercept, which represents the average difference between semifinal and final scores.\n## signed_rank &lt;- function(x) \n## This function applies a signed rank transformation to the difference between Semifinal and Final scores.\n## sign(x) returns the sign of each element in x (positive or negative).\n## rank(abs(x)) computes the ranks of the absolute values of x.\n## The result is a vector where each difference is replaced by its signed rank.\n## lm(signed_rank(Semifinal - Final) ~ 1, data = Diving2017)- After applying the signed rank transformation, the code fits another linear model (just like the first one) but with the signed ranks instead of the raw differences.\n\nThe first linear model estimates the mean difference between semifinal and final scores. The estimate of -11.975 indicates that the semifinal scores are, on average, 11.975 points lower than the final scores. However, the p-value of 0.259 suggests that this difference is not statistically significant.\nThe second linear model, based on the signed ranks, estimates a mean difference of -2, which is also not statistically significant (p = 0.369). The confidence interval ranges from -6.7 to 2.7, indicating that the mean rank difference is not meaningfully different from zero.\n\n\n\n\npolarity &lt;- c(rep(1, 6), rep(-1, 6))\n\npolarity\n\n [1]  1  1  1  1  1  1 -1 -1 -1 -1 -1 -1\n\nnull_dist_swim &lt;- do(4999) *\n  mean(\n    data = Diving2017,\n    ~ (Final - Semifinal) * \n      mosaic::resample(polarity, \n        replace = TRUE\n      )\n  )\n\nnull_dist_swim\n\n              mean\n1     1.866667e+00\n2    -3.733333e+00\n3    -1.234167e+01\n4    -2.058333e+00\n5     8.783333e+00\n6     1.296667e+01\n7    -1.440833e+01\n8     1.409167e+01\n9    -1.263333e+01\n10   -1.440833e+01\n11   -1.033333e+01\n12    1.044167e+01\n13   -5.916667e-01\n14   -1.078333e+01\n15    2.350000e+00\n16   -7.508333e+00\n17   -1.018333e+01\n18   -9.491667e+00\n19   -1.344167e+01\n20   -1.462500e+01\n21   -1.629167e+01\n22   -1.870000e+01\n23    2.758333e+00\n24   -8.550000e+00\n25    2.833333e-01\n26    2.916667e+00\n27   -4.033333e+00\n28    5.083333e-01\n29    1.121667e+01\n30    3.083333e+00\n31   -1.942500e+01\n32   -1.725000e+00\n33   -1.733333e+00\n34   -2.162500e+01\n35   -3.283333e+00\n36    9.725000e+00\n37   -3.200000e+00\n38   -3.333333e-02\n39   -1.397500e+01\n40   -1.060000e+01\n41   -1.383333e+00\n42    3.333333e+00\n43    6.166667e+00\n44   -7.100000e+00\n45   -8.100000e+00\n46   -1.799167e+01\n47   -8.916667e-01\n48    1.308333e+00\n49   -6.375000e+00\n50    5.683333e+00\n51    7.083333e+00\n52    2.700000e+00\n53    1.400000e+00\n54    6.508333e+00\n55   -1.416667e-01\n56    1.276667e+01\n57   -1.045000e+01\n58    1.039167e+01\n59   -1.128333e+01\n60    9.916667e+00\n61    5.750000e-01\n62    8.816667e+00\n63   -1.503333e+01\n64   -4.850000e+00\n65   -1.393333e+01\n66   -3.416667e-01\n67   -9.358333e+00\n68   -1.781667e+01\n69    3.941667e+00\n70    9.566667e+00\n71    1.052500e+01\n72    7.900000e+00\n73   -1.578333e+01\n74   -2.075000e+00\n75   -1.488333e+01\n76   -8.400000e+00\n77   -2.566667e+00\n78    2.232500e+01\n79   -7.408333e+00\n80    8.841667e+00\n81   -6.616667e+00\n82    1.678333e+01\n83   -1.692500e+01\n84    1.250000e+00\n85    5.808333e+00\n86    1.182500e+01\n87   -7.158333e+00\n88   -3.000000e+00\n89    5.633333e+00\n90    4.500000e-01\n91    2.250000e-01\n92   -2.858333e+00\n93    1.320000e+01\n94   -2.473333e+01\n95   -2.080000e+01\n96    1.265000e+01\n97   -8.333333e-03\n98    2.000000e+00\n99    6.825000e+00\n100   2.010833e+01\n101  -2.916667e-01\n102   3.675000e+00\n103  -8.100000e+00\n104   4.850000e+00\n105   1.549167e+01\n106  -8.316667e+00\n107   1.236667e+01\n108  -1.216667e+00\n109   2.341667e+00\n110   4.183333e+00\n111   5.416667e+00\n112   1.277500e+01\n113   3.716667e+00\n114   5.183333e+00\n115  -9.625000e+00\n116   1.640833e+01\n117   1.675000e+00\n118  -1.856667e+01\n119   6.075000e+00\n120  -1.622500e+01\n121   1.262500e+01\n122   1.280000e+01\n123  -1.476667e+01\n124   1.045833e+01\n125   5.333333e+00\n126   7.291667e+00\n127  -1.727500e+01\n128   6.708333e+00\n129  -1.895833e+01\n130  -8.008333e+00\n131   8.316667e+00\n132  -1.514167e+01\n133   3.125000e+00\n134  -4.616667e+00\n135  -1.383333e+01\n136   1.343333e+01\n137   3.591667e+00\n138   4.358333e+00\n139   5.466667e+00\n140  -1.525833e+01\n141   9.383333e+00\n142  -6.791667e+00\n143  -1.163333e+01\n144   5.875000e+00\n145   1.122500e+01\n146  -1.365833e+01\n147  -7.983333e+00\n148  -6.791667e+00\n149   1.816667e+01\n150   2.863333e+01\n151   1.474167e+01\n152   1.901667e+01\n153  -8.808333e+00\n154   6.350000e+00\n155  -6.908333e+00\n156  -1.171667e+01\n157   3.816667e+00\n158   7.608333e+00\n159  -7.841667e+00\n160   2.133333e+01\n161  -9.483333e+00\n162   1.708333e+00\n163  -1.388333e+01\n164   1.333333e+00\n165  -1.191667e+01\n166   2.500000e+00\n167  -1.800000e+00\n168   1.317500e+01\n169  -5.091667e+00\n170   3.425000e+00\n171  -6.433333e+00\n172   8.333333e-01\n173  -2.741667e+00\n174  -1.692500e+01\n175  -1.103333e+01\n176   5.350000e+00\n177   9.583333e+00\n178  -5.300000e+00\n179  -3.866667e+00\n180  -1.220000e+01\n181   9.983333e+00\n182   7.091667e+00\n183   2.650000e+00\n184  -2.583333e-01\n185   6.166667e+00\n186   9.541667e+00\n187   7.358333e+00\n188   6.000000e-01\n189  -3.600000e+00\n190   1.600000e+00\n191  -7.141667e+00\n192   1.933333e+01\n193  -2.516667e+00\n194   1.125833e+01\n195   1.567500e+01\n196  -9.666667e-01\n197   5.683333e+00\n198   1.130000e+01\n199  -3.908333e+00\n200   7.041667e+00\n201  -4.700000e+00\n202  -3.791667e+00\n203   4.416667e+00\n204  -1.075000e+00\n205   7.091667e+00\n206  -4.216667e+00\n207   3.050000e+00\n208   6.933333e+00\n209  -7.350000e+00\n210  -1.409167e+01\n211  -6.016667e+00\n212   1.261667e+01\n213   1.296667e+01\n214  -3.433333e+00\n215  -1.787500e+01\n216  -7.558333e+00\n217   6.316667e+00\n218   1.858333e+00\n219  -5.391667e+00\n220  -1.157500e+01\n221  -8.933333e+00\n222  -1.913333e+01\n223  -1.374167e+01\n224  -2.475000e+00\n225  -2.127500e+01\n226  -1.910000e+01\n227  -2.500000e+00\n228  -1.067500e+01\n229   2.320000e+01\n230  -4.725000e+00\n231   1.275000e+00\n232  -5.441667e+00\n233  -8.333333e-01\n234   1.171667e+01\n235  -1.850833e+01\n236  -1.308333e+00\n237  -2.065833e+01\n238  -1.555000e+01\n239   8.608333e+00\n240  -1.207500e+01\n241  -2.141667e+01\n242  -1.263333e+01\n243  -1.740000e+01\n244   2.775000e+00\n245  -8.608333e+00\n246  -1.366667e+00\n247  -5.066667e+00\n248   1.557500e+01\n249   5.908333e+00\n250  -1.655000e+01\n251  -6.175000e+00\n252   2.566667e+00\n253   1.083333e+00\n254  -1.520000e+01\n255   1.135833e+01\n256   3.700000e+00\n257   3.933333e+00\n258   4.000000e-01\n259   4.791667e+00\n260  -1.065833e+01\n261  -1.359167e+01\n262   1.511667e+01\n263  -3.941667e+00\n264   1.045833e+01\n265  -1.603333e+01\n266  -1.445833e+01\n267   5.566667e+00\n268   9.833333e+00\n269   1.858333e+00\n270  -4.000000e+00\n271   5.150000e+00\n272  -3.308333e+00\n273   4.533333e+00\n274   8.516667e+00\n275   1.050000e+00\n276  -8.633333e+00\n277  -2.833333e+00\n278   1.316667e+00\n279  -2.066667e+00\n280   1.474167e+01\n281  -1.858333e+00\n282  -3.491667e+00\n283   9.983333e+00\n284   1.845833e+01\n285   9.525000e+00\n286  -1.517500e+01\n287  -1.122500e+01\n288   1.053333e+01\n289   8.333333e-01\n290   9.008333e+00\n291  -5.033333e+00\n292   8.550000e+00\n293   4.741667e+00\n294   1.810833e+01\n295   2.558333e+00\n296   3.541667e+00\n297   1.027500e+01\n298  -1.570000e+01\n299  -7.350000e+00\n300   2.121667e+01\n301   4.300000e+00\n302  -4.408333e+00\n303  -2.261667e+01\n304   4.025000e+00\n305  -9.225000e+00\n306   1.394167e+01\n307  -8.041667e+00\n308   1.785000e+01\n309   5.875000e+00\n310  -1.510833e+01\n311   1.391667e+00\n312  -1.120000e+01\n313   1.921667e+01\n314   7.500000e-01\n315   9.983333e+00\n316   1.283333e+01\n317  -1.520000e+01\n318   1.257500e+01\n319  -7.325000e+00\n320   5.266667e+00\n321  -1.836667e+01\n322   3.433333e+00\n323   6.375000e+00\n324  -5.441667e+00\n325  -1.522500e+01\n326  -8.050000e+00\n327   1.488333e+01\n328   1.799167e+01\n329   7.275000e+00\n330   1.067500e+01\n331  -7.558333e+00\n332  -1.791667e+00\n333   3.816667e+00\n334  -1.665000e+01\n335  -8.341667e+00\n336   8.808333e+00\n337  -2.141667e+00\n338   4.616667e+00\n339   4.733333e+00\n340   1.092500e+01\n341   4.666667e-01\n342   8.458333e+00\n343  -4.675000e+00\n344   6.491667e+00\n345   6.908333e+00\n346  -8.608333e+00\n347  -8.041667e+00\n348   4.766667e+00\n349  -8.950000e+00\n350   3.816667e+00\n351   3.333333e+00\n352   2.150000e+00\n353   3.416667e-01\n354  -6.125000e+00\n355   5.808333e+00\n356  -1.051667e+01\n357  -1.100000e+01\n358  -1.245000e+01\n359   1.525833e+01\n360   1.458333e+00\n361   1.174167e+01\n362   1.095000e+01\n363  -8.433333e+00\n364  -1.373333e+01\n365  -2.025000e+00\n366   1.038333e+01\n367  -9.666667e-01\n368  -6.025000e+00\n369   2.708333e+00\n370   1.686667e+01\n371  -8.808333e+00\n372  -1.953333e+01\n373  -4.500000e+00\n374   8.808333e+00\n375  -5.258333e+00\n376   1.457500e+01\n377  -1.255833e+01\n378   6.675000e+00\n379  -1.300000e+00\n380   7.616667e+00\n381   2.283333e+00\n382  -7.675000e+00\n383  -1.854167e+01\n384   5.875000e+00\n385   4.925000e+00\n386  -5.000000e+00\n387   5.166667e-01\n388  -3.908333e+00\n389   3.908333e+00\n390   1.373333e+01\n391   1.658333e+00\n392   3.166667e+00\n393   6.250000e-01\n394  -1.415000e+01\n395   1.801667e+01\n396   1.379167e+01\n397  -1.750000e+00\n398  -7.116667e+00\n399   5.708333e+00\n400  -8.108333e+00\n401  -9.400000e+00\n402   7.208333e+00\n403  -2.537500e+01\n404   1.084167e+01\n405  -1.476667e+01\n406   1.115000e+01\n407  -1.866667e+00\n408  -1.435000e+01\n409   4.416667e+00\n410  -2.016667e+00\n411   3.333333e+00\n412   9.358333e+00\n413  -7.383333e+00\n414   2.558333e+00\n415   2.255833e+01\n416   9.833333e-01\n417  -2.891667e+00\n418   4.233333e+00\n419   8.933333e+00\n420   2.625000e+00\n421  -1.370833e+01\n422   3.225000e+00\n423   4.116667e+00\n424  -8.666667e+00\n425  -1.191667e+00\n426  -7.783333e+00\n427   2.758333e+00\n428  -7.783333e+00\n429  -1.220000e+01\n430   2.204167e+01\n431   3.483333e+00\n432  -1.426667e+01\n433   6.558333e+00\n434   4.300000e+00\n435  -1.508333e+01\n436   1.461667e+01\n437  -4.583333e-01\n438  -5.083333e-01\n439   6.525000e+00\n440  -1.233333e+01\n441   1.420833e+01\n442  -2.000000e+00\n443  -1.511667e+01\n444  -3.425000e+00\n445   5.833333e-02\n446   6.991667e+00\n447   1.426667e+01\n448   2.833333e+00\n449  -7.200000e+00\n450   1.400000e+00\n451  -3.675000e+00\n452  -1.496667e+01\n453   4.675000e+00\n454   2.024167e+01\n455  -2.416667e+00\n456  -5.475000e+00\n457   1.597500e+01\n458  -6.016667e+00\n459   4.066667e+00\n460  -5.116667e+00\n461   6.933333e+00\n462   2.891667e+00\n463   6.733333e+00\n464   1.741667e+00\n465  -3.266667e+00\n466   1.415000e+01\n467   6.400000e+00\n468   1.406667e+01\n469   3.566667e+00\n470   1.441667e+00\n471   3.166667e-01\n472   3.325000e+00\n473   1.545833e+01\n474  -8.458333e+00\n475   1.517500e+01\n476  -4.783333e+00\n477  -4.533333e+00\n478  -1.916667e+00\n479   1.115833e+01\n480   2.141667e+00\n481  -1.043333e+01\n482   2.060000e+01\n483  -4.941667e+00\n484  -1.790833e+01\n485   1.760833e+01\n486  -7.533333e+00\n487   1.596667e+01\n488  -6.525000e+00\n489  -5.758333e+00\n490   8.333333e-03\n491  -1.221667e+01\n492   1.142500e+01\n493   8.866667e+00\n494   5.350000e+00\n495  -1.468333e+01\n496  -3.416667e-01\n497  -2.500000e-02\n498   1.086667e+01\n499   1.316667e+00\n500  -1.394167e+01\n501  -2.075000e+00\n502   3.533333e+00\n503  -4.641667e+00\n504  -3.975000e+00\n505   8.575000e+00\n506  -9.841667e+00\n507  -1.808333e+00\n508   4.183333e+00\n509  -2.083333e+00\n510   2.083333e-01\n511  -7.933333e+00\n512  -3.075000e+00\n513  -9.366667e+00\n514   1.139167e+01\n515  -1.166667e-01\n516  -1.066667e+01\n517  -1.125000e+00\n518  -7.358333e+00\n519   1.004167e+01\n520  -8.100000e+00\n521   1.591667e+00\n522   6.016667e+00\n523   6.416667e+00\n524   6.525000e+00\n525  -1.329167e+01\n526  -5.475000e+00\n527   1.388333e+01\n528  -9.475000e+00\n529  -5.125000e+00\n530   9.491667e+00\n531  -2.683333e+00\n532   1.575833e+01\n533   7.616667e+00\n534  -6.141667e+00\n535  -5.758333e+00\n536   1.916667e+00\n537  -5.841667e+00\n538  -4.166667e+00\n539   8.183333e+00\n540  -8.375000e+00\n541   3.175000e+00\n542   2.425000e+00\n543   1.282500e+01\n544  -7.641667e+00\n545   1.591667e+00\n546   5.091667e+00\n547   1.250833e+01\n548   2.950000e+00\n549   1.308333e+00\n550  -1.203333e+01\n551  -5.208333e+00\n552  -6.675000e+00\n553  -1.268333e+01\n554  -1.255833e+01\n555   9.383333e+00\n556  -5.825000e+00\n557   3.425000e+00\n558  -1.367500e+01\n559  -8.241667e+00\n560  -7.866667e+00\n561  -7.841667e+00\n562   5.875000e+00\n563   1.666667e+00\n564  -1.241667e+00\n565   8.166667e-01\n566   3.975000e+00\n567   1.616667e+01\n568  -5.608333e+00\n569   2.291667e+00\n570   3.533333e+00\n571   9.000000e-01\n572  -1.836667e+01\n573   9.625000e+00\n574  -5.341667e+00\n575  -9.250000e+00\n576   3.933333e+00\n577  -4.325000e+00\n578  -5.275000e+00\n579  -1.124167e+01\n580  -8.808333e+00\n581   1.904167e+01\n582   2.250000e+01\n583  -6.508333e+00\n584   9.166667e+00\n585   4.883333e+00\n586  -2.741667e+00\n587   6.433333e+00\n588  -2.877500e+01\n589  -4.441667e+00\n590   1.517500e+01\n591  -5.750000e-01\n592  -2.500000e+00\n593  -1.211667e+01\n594  -9.716667e+00\n595   3.875000e+00\n596  -7.066667e+00\n597  -1.069167e+01\n598  -1.080833e+01\n599  -1.468333e+01\n600   3.683333e+00\n601   6.416667e+00\n602   1.025833e+01\n603  -4.616667e+00\n604   2.246667e+01\n605   4.558333e+00\n606   3.041667e+00\n607  -2.416667e+00\n608  -4.850000e+00\n609   1.133333e+00\n610   8.108333e+00\n611  -1.597500e+01\n612  -4.650000e+00\n613   2.275000e+00\n614  -4.166667e+00\n615  -5.833333e-02\n616   4.983333e+00\n617  -4.275000e+00\n618   1.030833e+01\n619  -9.641667e+00\n620  -2.660000e+01\n621  -1.597500e+01\n622  -8.758333e+00\n623   1.950833e+01\n624   7.841667e+00\n625   1.482500e+01\n626  -2.333333e-01\n627   8.100000e+00\n628  -7.916667e-01\n629   2.475000e+00\n630   1.220833e+01\n631   5.583333e-01\n632  -3.058333e+00\n633  -3.058333e+00\n634   1.027500e+01\n635   5.400000e+00\n636   1.600000e+00\n637  -1.267500e+01\n638   6.791667e+00\n639  -2.583333e-01\n640  -1.741667e+00\n641   2.080000e+01\n642   5.666667e+00\n643   1.225833e+01\n644  -1.854167e+01\n645  -1.508333e+00\n646   1.557500e+01\n647  -2.358333e+00\n648   4.008333e+00\n649  -5.408333e+00\n650  -1.142500e+01\n651   1.644167e+01\n652  -5.325000e+00\n653  -1.037500e+01\n654  -4.091667e+00\n655   1.072500e+01\n656  -7.166667e-01\n657   7.550000e+00\n658   4.791667e+00\n659   7.500000e-02\n660  -9.566667e+00\n661  -9.383333e+00\n662   9.441667e+00\n663   6.850000e+00\n664   2.916667e-01\n665   1.916667e-01\n666  -1.459167e+01\n667  -1.600000e+00\n668  -4.591667e+00\n669  -1.236667e+01\n670   8.333333e-02\n671   1.380000e+01\n672   1.866667e+00\n673   8.016667e+00\n674   1.678333e+01\n675  -4.416667e+00\n676   4.050000e+00\n677  -5.766667e+00\n678  -9.191667e+00\n679   2.208333e+00\n680  -1.262500e+01\n681   5.175000e+00\n682   4.658333e+00\n683   7.500000e+00\n684   9.775000e+00\n685  -1.666667e+00\n686  -5.683333e+00\n687   8.733333e+00\n688  -5.416667e+00\n689  -7.416667e-01\n690   3.050000e+00\n691   5.316667e+00\n692   3.716667e+00\n693  -5.275000e+00\n694  -1.065833e+01\n695   2.869167e+01\n696   5.391667e+00\n697  -1.405833e+01\n698  -1.807500e+01\n699   4.558333e+00\n700  -5.358333e+00\n701  -8.550000e+00\n702  -8.716667e+00\n703  -4.733333e+00\n704  -7.383333e+00\n705  -8.775000e+00\n706  -1.294167e+01\n707   1.529167e+01\n708   1.913333e+01\n709   1.990000e+01\n710  -1.053333e+01\n711  -1.802500e+01\n712  -1.312500e+01\n713  -2.916667e+00\n714   4.550000e+00\n715   9.916667e-01\n716  -1.670833e+01\n717   6.675000e+00\n718   3.475000e+00\n719  -1.551667e+01\n720  -9.816667e+00\n721   5.916667e-01\n722  -1.078333e+01\n723  -6.500000e-01\n724  -4.250000e-01\n725   4.658333e+00\n726  -2.450000e+00\n727   7.475000e+00\n728   1.100833e+01\n729  -7.533333e+00\n730  -4.066667e+00\n731  -1.720000e+01\n732  -1.158333e+00\n733  -9.875000e+00\n734   1.791667e+00\n735   1.901667e+01\n736  -8.750000e+00\n737   9.875000e+00\n738   5.533333e+00\n739   1.168333e+01\n740  -1.206667e+01\n741   1.150000e+01\n742  -1.511667e+01\n743   1.105833e+01\n744   6.458333e+00\n745  -5.008333e+00\n746   2.261667e+01\n747  -1.098333e+01\n748  -9.916667e-01\n749  -2.741667e+00\n750  -4.166667e+00\n751   1.200000e+00\n752   3.916667e-01\n753  -1.110000e+01\n754  -9.333333e+00\n755  -1.239167e+01\n756   1.189167e+01\n757   6.025000e+00\n758  -6.158333e+00\n759  -2.058333e+00\n760  -1.171667e+01\n761   2.683333e+00\n762  -9.841667e+00\n763   1.508333e+01\n764   1.175000e+00\n765   7.200000e+00\n766  -9.841667e+00\n767  -1.242500e+01\n768   3.850000e+00\n769   9.625000e+00\n770   7.816667e+00\n771  -8.808333e+00\n772   1.383333e+01\n773   8.383333e+00\n774  -1.591667e+00\n775   1.497500e+01\n776   2.500000e-02\n777   1.591667e+00\n778  -5.208333e+00\n779  -1.581667e+01\n780  -7.000000e+00\n781   1.525833e+01\n782   6.016667e+00\n783  -2.660000e+01\n784  -7.825000e+00\n785  -2.558333e+00\n786  -8.933333e+00\n787   1.912500e+01\n788   1.203333e+01\n789   5.208333e+00\n790  -4.050000e+00\n791  -3.933333e+00\n792   4.500000e+00\n793   2.741667e+00\n794   1.120833e+01\n795  -5.258333e+00\n796   2.091667e+00\n797   5.825000e+00\n798   2.083333e-01\n799   2.150000e+00\n800   6.316667e+00\n801  -1.913333e+01\n802  -4.816667e+00\n803  -8.041667e+00\n804  -1.289167e+01\n805  -6.391667e+00\n806   3.366667e+00\n807  -5.666667e+00\n808   2.250000e+01\n809   7.025000e+00\n810   1.258333e+00\n811   5.350000e+00\n812  -7.000000e+00\n813   1.704167e+01\n814  -1.517500e+01\n815  -1.197500e+01\n816   4.250000e+00\n817   6.416667e+00\n818  -8.333333e-01\n819  -1.755000e+01\n820  -1.308333e+01\n821   5.625000e+00\n822  -1.358333e+01\n823  -2.166667e+00\n824   2.633333e+00\n825   5.475000e+00\n826  -1.719167e+01\n827   8.633333e+00\n828   1.239167e+01\n829   9.025000e+00\n830  -2.244167e+01\n831   5.616667e+00\n832   2.645833e+01\n833  -2.000000e-01\n834   2.247500e+01\n835   9.508333e+00\n836   5.625000e+00\n837   4.500000e+00\n838   4.383333e+00\n839   9.583333e+00\n840   6.016667e+00\n841   2.150000e+00\n842   8.858333e+00\n843  -2.266667e+00\n844  -6.783333e+00\n845   5.266667e+00\n846  -6.516667e+00\n847   2.261667e+01\n848   7.783333e+00\n849  -1.261667e+01\n850  -1.124167e+01\n851  -8.266667e+00\n852  -7.616667e+00\n853   2.224167e+01\n854  -6.533333e+00\n855  -2.408333e+00\n856   5.825000e+00\n857   1.046667e+01\n858   1.500000e-01\n859  -8.675000e+00\n860  -4.783333e+00\n861   1.400000e+01\n862  -1.217500e+01\n863  -5.758333e+00\n864  -7.183333e+00\n865  -8.216667e+00\n866  -1.115000e+01\n867  -1.666667e-02\n868  -4.025000e+00\n869   2.166667e-01\n870  -8.333333e-02\n871   1.441667e+00\n872   7.275000e+00\n873   2.566667e+00\n874   1.177500e+01\n875   5.200000e+00\n876   6.833333e-01\n877   2.883333e+00\n878  -2.314167e+01\n879   4.500000e+00\n880  -1.050000e+00\n881   9.875000e+00\n882   1.878333e+01\n883   3.350000e+00\n884  -1.546667e+01\n885  -9.358333e+00\n886   5.958333e+00\n887  -8.816667e+00\n888  -7.783333e+00\n889  -2.663333e+01\n890  -9.916667e-01\n891  -7.241667e+00\n892   8.866667e+00\n893  -2.166667e+00\n894  -8.691667e+00\n895   1.379167e+01\n896  -1.385833e+01\n897   7.275000e+00\n898   3.133333e+00\n899   1.927500e+01\n900   1.200833e+01\n901   1.858333e+00\n902   1.275000e+01\n903  -1.850000e+00\n904   1.780833e+01\n905  -4.325000e+00\n906   1.019167e+01\n907   1.341667e+00\n908  -3.758333e+00\n909   1.400000e+01\n910  -5.608333e+00\n911   2.305833e+01\n912  -2.716667e+00\n913   7.325000e+00\n914   1.221667e+01\n915   8.516667e+00\n916   1.435000e+01\n917   5.583333e+00\n918   7.491667e+00\n919  -7.900000e+00\n920   9.016667e+00\n921   1.153333e+01\n922   2.750000e+00\n923   1.122500e+01\n924   1.060833e+01\n925  -2.208333e+00\n926   5.266667e+00\n927  -3.116667e+00\n928  -1.808333e+00\n929  -2.375000e+00\n930   6.458333e+00\n931   8.516667e+00\n932  -4.000000e+00\n933  -1.397500e+01\n934  -3.125000e+00\n935   1.566667e+00\n936  -1.704167e+01\n937   6.241667e+00\n938  -1.476667e+01\n939   2.441667e+00\n940  -4.616667e+00\n941  -1.160000e+01\n942  -6.433333e+00\n943  -1.080833e+01\n944   1.416667e-01\n945   1.646667e+01\n946  -2.983333e+00\n947  -5.208333e+00\n948  -4.983333e+00\n949   1.802500e+01\n950  -7.966667e+00\n951  -2.244167e+01\n952   8.675000e+00\n953  -1.139167e+01\n954  -3.383333e+00\n955   4.925000e+00\n956  -2.650000e+00\n957  -1.465000e+01\n958   7.816667e+00\n959   2.100000e+01\n960   6.850000e+00\n961  -1.567500e+01\n962  -7.233333e+00\n963  -1.277500e+01\n964  -5.683333e+00\n965   1.060000e+01\n966   2.283333e+00\n967   4.791667e+00\n968  -8.750000e+00\n969  -7.666667e-01\n970  -2.250000e+01\n971  -5.325000e+00\n972  -2.516667e+00\n973  -1.024167e+01\n974  -1.045000e+01\n975  -1.051667e+01\n976  -7.408333e+00\n977   1.359167e+01\n978  -1.180833e+01\n979   2.094167e+01\n980  -7.041667e+00\n981  -2.166667e-01\n982  -7.508333e+00\n983  -1.333333e-01\n984   6.925000e+00\n985  -1.415000e+01\n986  -1.830833e+01\n987   1.065833e+01\n988   7.500000e+00\n989   5.425000e+00\n990   1.397500e+01\n991  -4.816667e+00\n992  -4.650000e+00\n993   7.666667e+00\n994  -2.225000e+00\n995  -3.108333e+00\n996  -4.441667e+00\n997   6.558333e+00\n998   7.116667e+00\n999   1.089167e+01\n1000 -8.966667e+00\n1001 -5.750000e+00\n1002  1.120000e+01\n1003  7.333333e+00\n1004  1.364167e+01\n1005 -1.864167e+01\n1006 -8.866667e+00\n1007 -1.359167e+01\n1008 -8.333333e-01\n1009 -2.825000e+00\n1010  7.933333e+00\n1011  1.921667e+01\n1012 -9.858333e+00\n1013 -5.008333e+00\n1014  5.416667e+00\n1015  4.091667e+00\n1016 -3.166667e-01\n1017 -2.543333e+01\n1018  1.380000e+01\n1019  2.645833e+01\n1020  1.500000e+01\n1021 -3.475000e+00\n1022  2.309167e+01\n1023 -7.675000e+00\n1024  4.737241e-15\n1025 -7.950000e+00\n1026  2.833333e-01\n1027 -6.391667e+00\n1028 -9.225000e+00\n1029  6.158333e+00\n1030 -7.416667e-01\n1031  1.124167e+01\n1032 -3.050000e+00\n1033 -6.241667e+00\n1034  5.766667e+00\n1035 -9.750000e-01\n1036  5.558333e+00\n1037 -1.555000e+01\n1038 -8.816667e+00\n1039  1.216667e+00\n1040 -9.433333e+00\n1041  4.850000e+00\n1042 -4.800000e+00\n1043 -1.503333e+01\n1044 -1.107500e+01\n1045 -1.185833e+01\n1046  8.408333e+00\n1047  4.883333e+00\n1048  5.550000e+00\n1049 -5.000000e+00\n1050  4.858333e+00\n1051  1.197500e+01\n1052  4.383333e+00\n1053 -5.750000e+00\n1054 -5.416667e+00\n1055 -8.550000e+00\n1056  1.067500e+01\n1057 -4.358333e+00\n1058 -4.983333e+00\n1059 -7.783333e+00\n1060 -1.257500e+01\n1061 -1.337500e+01\n1062  6.958333e+00\n1063  5.266667e+00\n1064  3.241667e+00\n1065  8.691667e+00\n1066 -1.216667e+00\n1067  1.561667e+01\n1068 -9.225000e+00\n1069 -1.503333e+01\n1070 -2.232500e+01\n1071  2.216667e+00\n1072  1.458333e+00\n1073 -1.177500e+01\n1074 -6.175000e+00\n1075 -4.583333e+00\n1076 -4.650000e+00\n1077 -8.408333e+00\n1078  5.333333e+00\n1079 -3.316667e+00\n1080 -5.425000e+00\n1081 -8.141667e+00\n1082 -4.641667e+00\n1083 -3.166667e-01\n1084 -6.566667e+00\n1085 -2.434167e+01\n1086  1.500000e-01\n1087  7.441667e+00\n1088 -3.325000e+00\n1089 -5.166667e-01\n1090 -1.750000e+00\n1091 -7.700000e+00\n1092  5.583333e+00\n1093 -1.980833e+01\n1094  1.359167e+01\n1095  9.583333e+00\n1096 -3.016667e+00\n1097  1.200833e+01\n1098  3.416667e-01\n1099 -1.245000e+01\n1100  4.250000e+00\n1101 -1.910000e+01\n1102 -6.525000e+00\n1103 -4.866667e+00\n1104 -1.341667e+00\n1105  2.156667e+01\n1106  1.529167e+01\n1107  2.441667e+00\n1108 -2.083333e-01\n1109 -2.708333e+00\n1110 -7.858333e+00\n1111  1.808333e+01\n1112 -1.221667e+01\n1113  6.400000e+00\n1114 -1.320000e+01\n1115 -1.259167e+01\n1116 -5.933333e+00\n1117 -1.980833e+01\n1118 -1.658333e+00\n1119  1.675000e+00\n1120  4.100000e+00\n1121  1.516667e+01\n1122 -1.435000e+01\n1123  6.666667e-02\n1124  4.391667e+00\n1125 -9.566667e+00\n1126  2.133333e+01\n1127  8.733333e+00\n1128 -1.533333e+00\n1129  3.175000e+00\n1130 -2.660000e+01\n1131 -1.177500e+01\n1132  1.030833e+01\n1133 -1.037500e+01\n1134  6.475000e+00\n1135  8.966667e+00\n1136 -8.866667e+00\n1137  8.075000e+00\n1138  2.558333e+00\n1139  1.312500e+01\n1140  1.074167e+01\n1141  7.200000e+00\n1142  6.475000e+00\n1143  2.316667e+00\n1144 -1.030833e+01\n1145 -1.163333e+01\n1146  2.267500e+01\n1147 -1.044167e+01\n1148  2.323333e+01\n1149  1.288333e+01\n1150 -8.808333e+00\n1151  9.441667e+00\n1152 -2.158333e+00\n1153 -5.691667e+00\n1154  7.491667e+00\n1155  1.030833e+01\n1156 -1.750000e+00\n1157  7.275000e+00\n1158  1.180000e+01\n1159 -2.250000e+01\n1160 -5.091667e+00\n1161  9.241667e+00\n1162 -7.550000e+00\n1163  8.333333e-01\n1164 -1.666667e+00\n1165  1.950833e+01\n1166 -1.650000e+00\n1167 -4.391667e+00\n1168  2.900000e+00\n1169 -7.133333e+00\n1170  8.375000e+00\n1171 -1.750000e+00\n1172  1.054167e+01\n1173  2.032500e+01\n1174  5.616667e+00\n1175  1.389167e+01\n1176  3.100000e+00\n1177 -1.203333e+01\n1178 -1.233333e+00\n1179 -3.316667e+00\n1180 -1.201667e+01\n1181 -1.856667e+01\n1182  2.833333e-01\n1183 -1.130000e+01\n1184 -5.608333e+00\n1185 -1.505833e+01\n1186  2.616667e+00\n1187  8.808333e+00\n1188 -4.250000e+00\n1189  4.275000e+00\n1190 -5.875000e+00\n1191  2.583333e-01\n1192 -9.166667e+00\n1193  1.579167e+01\n1194 -4.737241e-15\n1195 -1.078333e+01\n1196  8.258333e+00\n1197 -1.666667e-01\n1198 -5.483333e+00\n1199  1.781667e+01\n1200  3.225000e+00\n1201 -4.333333e-01\n1202  6.791667e+00\n1203  1.704167e+01\n1204  2.032500e+01\n1205  2.658333e+00\n1206 -7.300000e+00\n1207 -1.833333e+00\n1208 -1.052500e+01\n1209  1.377500e+01\n1210 -3.216667e+00\n1211  1.916667e+00\n1212  9.541667e+00\n1213 -5.825000e+00\n1214 -7.900000e+00\n1215  8.283333e+00\n1216 -1.215000e+01\n1217 -5.200000e+00\n1218  1.725000e+00\n1219 -1.153333e+01\n1220 -2.350000e+00\n1221  5.841667e+00\n1222 -6.350000e+00\n1223 -5.625000e+00\n1224  7.583333e+00\n1225  1.458333e+00\n1226  1.373333e+01\n1227 -3.966667e+00\n1228 -7.416667e-01\n1229  1.517500e+01\n1230 -1.174167e+01\n1231 -8.466667e+00\n1232  3.841667e+00\n1233 -1.333333e+00\n1234 -1.350000e+01\n1235 -1.048333e+01\n1236 -4.000000e-01\n1237 -1.483333e+00\n1238 -3.866667e+00\n1239  1.323333e+01\n1240 -1.511667e+01\n1241  5.666667e+00\n1242 -9.166667e+00\n1243 -1.305833e+01\n1244 -1.171667e+01\n1245  3.608333e+00\n1246  3.283333e+00\n1247 -8.691667e+00\n1248 -6.841667e+00\n1249 -6.016667e+00\n1250 -9.575000e+00\n1251  5.275000e+00\n1252  7.275000e+00\n1253 -5.458333e+00\n1254 -3.041667e+00\n1255  2.210000e+01\n1256 -5.383333e+00\n1257 -8.941667e+00\n1258  6.616667e+00\n1259 -9.083333e-01\n1260 -7.750000e-01\n1261  8.608333e+00\n1262 -3.333333e+00\n1263 -3.866667e+00\n1264  1.546667e+01\n1265 -7.325000e+00\n1266  6.908333e+00\n1267 -5.475000e+00\n1268  5.125000e+00\n1269  5.208333e+00\n1270  1.323333e+01\n1271 -9.100000e+00\n1272  1.359167e+01\n1273  4.725000e+00\n1274  1.037500e+01\n1275 -7.408333e+00\n1276  1.883333e+00\n1277  2.425833e+01\n1278  1.353333e+01\n1279  8.816667e+00\n1280  4.816667e+00\n1281 -3.425000e+00\n1282  8.808333e+00\n1283  6.666667e-02\n1284  1.236667e+01\n1285 -1.095000e+01\n1286  5.516667e+00\n1287 -8.433333e+00\n1288  3.116667e+00\n1289  6.333333e-01\n1290 -9.158333e+00\n1291 -5.325000e+00\n1292 -1.488333e+01\n1293 -1.575833e+01\n1294 -1.514167e+01\n1295  2.467500e+01\n1296  5.500000e+00\n1297 -9.166667e+00\n1298 -3.741667e+00\n1299 -5.841667e+00\n1300  1.755000e+01\n1301 -1.018333e+01\n1302  1.750000e-01\n1303  1.160000e+01\n1304  1.140000e+01\n1305  1.420833e+01\n1306  9.916667e-01\n1307  5.150000e+00\n1308  6.316667e+00\n1309 -2.275000e+00\n1310 -2.566667e+00\n1311  7.500000e-02\n1312  1.488333e+01\n1313 -2.158333e+00\n1314  1.458333e+00\n1315 -1.287500e+01\n1316  9.525000e+00\n1317  1.075000e+01\n1318  3.275000e+00\n1319  1.045833e+01\n1320  1.684167e+01\n1321  4.166667e+00\n1322  1.248333e+01\n1323  1.366667e+00\n1324  1.052500e+01\n1325  3.925000e+00\n1326 -8.100000e+00\n1327  3.133333e+00\n1328  2.741667e+00\n1329  3.225000e+00\n1330 -1.343333e+01\n1331  8.750000e+00\n1332 -6.016667e+00\n1333 -1.741667e+00\n1334  4.641667e+00\n1335  9.416667e-01\n1336 -3.391667e+00\n1337  5.825000e+00\n1338 -1.531667e+01\n1339 -2.500000e-02\n1340  3.591667e+00\n1341  9.025000e+00\n1342  7.533333e+00\n1343 -2.316667e+00\n1344 -1.033333e+01\n1345 -8.816667e+00\n1346 -1.191667e+00\n1347 -7.533333e+00\n1348  3.241667e+00\n1349  1.658333e+00\n1350 -1.901667e+01\n1351  2.303333e+01\n1352  1.098333e+01\n1353  4.241667e+00\n1354 -4.025000e+00\n1355  8.550000e+00\n1356  2.033333e+00\n1357 -1.341667e+00\n1358  1.426667e+01\n1359  1.344167e+01\n1360  8.050000e+00\n1361  3.750000e+00\n1362 -1.051667e+01\n1363  1.947500e+01\n1364  1.296667e+01\n1365  1.379167e+01\n1366  3.333333e+00\n1367  1.543333e+01\n1368 -1.250833e+01\n1369  2.083333e-01\n1370  7.241667e+00\n1371 -1.458333e+00\n1372 -5.550000e+00\n1373  8.691667e+00\n1374  2.591667e+00\n1375 -8.783333e+00\n1376  1.206667e+01\n1377  1.104167e+01\n1378  1.760833e+01\n1379 -9.425000e+00\n1380  1.250000e+00\n1381  7.566667e+00\n1382  1.203333e+01\n1383  5.683333e+00\n1384 -8.875000e+00\n1385  4.233333e+00\n1386  1.267500e+01\n1387 -8.666667e+00\n1388 -7.900000e+00\n1389  7.383333e+00\n1390 -1.083333e-01\n1391 -7.675000e+00\n1392  9.925000e+00\n1393  1.160000e+01\n1394 -5.750000e+00\n1395  8.250000e-01\n1396  1.034167e+01\n1397  1.581667e+01\n1398 -8.725000e+00\n1399  3.566667e+00\n1400 -3.141667e+00\n1401  7.158333e+00\n1402 -1.115000e+01\n1403  2.091667e+00\n1404  3.275000e+00\n1405  5.175000e+00\n1406 -2.683333e+00\n1407  1.168333e+01\n1408  4.358333e+00\n1409 -9.083333e-01\n1410  1.522500e+01\n1411  9.416667e+00\n1412  4.500000e+00\n1413 -1.373333e+01\n1414 -1.197500e+01\n1415 -6.991667e+00\n1416  1.358333e+01\n1417 -2.420000e+01\n1418  2.877500e+01\n1419 -9.000000e-01\n1420 -1.415000e+01\n1421  3.333333e-02\n1422 -1.107500e+01\n1423  5.583333e+00\n1424  6.933333e+00\n1425 -8.950000e+00\n1426  1.828333e+01\n1427 -4.275000e+00\n1428  8.316667e+00\n1429  1.250833e+01\n1430 -2.091667e+00\n1431 -5.475000e+00\n1432 -4.800000e+00\n1433 -2.975000e+00\n1434  1.953333e+01\n1435 -1.133333e+00\n1436  1.013333e+01\n1437 -2.833333e+00\n1438  7.933333e+00\n1439  1.543333e+01\n1440 -1.790833e+01\n1441 -4.183333e+00\n1442  5.833333e-02\n1443 -6.441667e+00\n1444 -3.875000e+00\n1445 -1.858333e+00\n1446 -8.633333e+00\n1447 -1.359167e+01\n1448 -7.408333e+00\n1449  1.186667e+01\n1450  1.591667e+00\n1451 -1.183333e+00\n1452 -5.000000e-02\n1453 -1.400000e+01\n1454 -8.916667e-01\n1455 -2.750000e+00\n1456 -1.162500e+01\n1457 -6.875000e+00\n1458 -1.344167e+01\n1459 -5.500000e+00\n1460  5.150000e+00\n1461  1.166667e-01\n1462 -2.032500e+01\n1463  9.625000e+00\n1464 -6.283333e+00\n1465  1.690000e+01\n1466  1.775000e+00\n1467 -1.611667e+01\n1468  1.725833e+01\n1469 -2.176667e+01\n1470  1.120000e+01\n1471 -1.075000e+00\n1472  2.166667e-01\n1473 -1.050000e+01\n1474 -5.416667e+00\n1475 -1.045000e+01\n1476  1.918333e+01\n1477 -1.426667e+01\n1478 -1.425000e+00\n1479 -5.008333e+00\n1480  7.025000e+00\n1481 -1.411667e+01\n1482 -1.800000e+00\n1483  8.500000e-01\n1484  8.041667e+00\n1485  2.317500e+01\n1486 -9.916667e-01\n1487  1.068333e+01\n1488  1.617500e+01\n1489 -1.517500e+01\n1490 -8.408333e+00\n1491 -4.441667e+00\n1492  1.733333e+00\n1493 -1.250833e+01\n1494 -6.425000e+00\n1495  1.360000e+01\n1496  6.925000e+00\n1497  1.125000e+00\n1498 -4.066667e+00\n1499 -1.367500e+01\n1500  1.275833e+01\n1501 -5.458333e+00\n1502  1.956667e+01\n1503  1.043333e+01\n1504  1.808333e+00\n1505 -1.791667e+00\n1506 -5.150000e+00\n1507  1.168333e+01\n1508 -1.275833e+01\n1509  1.525833e+01\n1510  1.560833e+01\n1511 -1.221667e+01\n1512  3.333333e-02\n1513  7.391667e+00\n1514  2.100000e+00\n1515 -1.733333e+00\n1516  1.277500e+01\n1517 -1.320000e+01\n1518  2.537500e+01\n1519 -2.858333e+00\n1520  1.468333e+01\n1521 -8.300000e+00\n1522  5.683333e+00\n1523 -1.025000e+01\n1524 -1.367500e+01\n1525 -2.516667e+00\n1526 -9.375000e+00\n1527 -1.300000e+00\n1528 -1.457500e+01\n1529 -2.004167e+01\n1530 -9.583333e-01\n1531 -5.841667e+00\n1532  3.425000e+00\n1533 -2.309167e+01\n1534 -6.908333e+00\n1535  1.573333e+01\n1536  7.208333e+00\n1537  7.041667e+00\n1538 -5.583333e-01\n1539  1.158333e+00\n1540 -1.383333e+01\n1541 -7.208333e+00\n1542  3.908333e+00\n1543 -1.265000e+01\n1544 -1.749167e+01\n1545  8.875000e+00\n1546 -8.550000e+00\n1547  1.808333e+00\n1548  9.016667e+00\n1549 -1.302500e+01\n1550 -1.016667e+00\n1551  8.433333e+00\n1552 -1.174167e+01\n1553 -1.458333e+00\n1554 -7.383333e+00\n1555  8.441667e+00\n1556  1.133333e+00\n1557  1.123333e+01\n1558 -2.044167e+01\n1559  2.891667e+00\n1560  7.558333e+00\n1561  9.508333e+00\n1562  2.500000e-02\n1563 -8.633333e+00\n1564  1.055833e+01\n1565  1.941667e+00\n1566  5.125000e+00\n1567 -1.901667e+01\n1568  6.641667e+00\n1569 -1.629167e+01\n1570 -2.030000e+01\n1571 -1.197500e+01\n1572 -1.148333e+01\n1573  1.280000e+01\n1574 -8.333333e-03\n1575 -4.741667e+00\n1576 -1.075000e+01\n1577 -4.066667e+00\n1578  6.441667e+00\n1579 -1.801667e+01\n1580 -1.440833e+01\n1581  2.127500e+01\n1582  1.267500e+01\n1583 -7.833333e-01\n1584 -1.308333e+00\n1585 -1.030833e+01\n1586  3.066667e+00\n1587  7.075000e+00\n1588 -2.650000e+00\n1589  1.858333e+00\n1590 -1.496667e+01\n1591 -3.125000e+00\n1592  1.458333e+00\n1593  3.391667e+00\n1594  7.533333e+00\n1595 -1.503333e+01\n1596  3.191667e+00\n1597  8.333333e-02\n1598 -4.500000e+00\n1599  6.100000e+00\n1600 -1.180000e+01\n1601  8.333333e-01\n1602 -5.425000e+00\n1603 -2.156667e+01\n1604 -1.388333e+01\n1605 -2.467500e+01\n1606 -3.483333e+00\n1607  8.250000e-01\n1608  1.337500e+01\n1609  8.200000e+00\n1610 -1.850833e+01\n1611  1.216667e+00\n1612  1.593333e+01\n1613  1.734167e+01\n1614  8.166667e-01\n1615  2.650000e+00\n1616 -3.941667e+00\n1617  1.766667e+01\n1618 -6.666667e-02\n1619  7.208333e+00\n1620  1.550000e+00\n1621 -5.358333e+00\n1622 -1.907500e+01\n1623 -3.941667e+00\n1624  5.316667e+00\n1625  3.050000e+00\n1626  1.131667e+01\n1627  9.433333e+00\n1628  3.425000e+00\n1629  1.317500e+01\n1630 -1.749167e+01\n1631 -4.591667e+00\n1632 -4.675000e+00\n1633  1.274167e+01\n1634  6.083333e+00\n1635 -6.533333e+00\n1636 -1.510833e+01\n1637  2.019167e+01\n1638  7.900000e+00\n1639  8.458333e+00\n1640 -1.291667e+01\n1641 -1.277500e+01\n1642  7.816667e+00\n1643  1.800000e+00\n1644 -1.250000e+00\n1645  5.133333e+00\n1646  5.033333e+00\n1647  9.833333e+00\n1648 -9.833333e-01\n1649  2.425000e+00\n1650  6.675000e+00\n1651  1.599167e+01\n1652  6.991667e+00\n1653 -5.766667e+00\n1654  6.616667e+00\n1655  3.225000e+00\n1656 -1.915833e+01\n1657 -8.958333e+00\n1658 -1.316667e+00\n1659  7.900000e+00\n1660 -3.125000e+00\n1661  2.950000e+00\n1662 -4.216667e+00\n1663  1.034167e+01\n1664 -5.875000e+00\n1665 -5.766667e+00\n1666  2.267500e+01\n1667  1.463333e+01\n1668 -4.041667e+00\n1669 -2.833333e+00\n1670 -1.822500e+01\n1671  2.566667e+00\n1672  1.131667e+01\n1673 -9.416667e-01\n1674  5.258333e+00\n1675 -1.921667e+01\n1676 -6.850000e+00\n1677  7.750000e+00\n1678  7.408333e+00\n1679 -2.074167e+01\n1680 -1.065833e+01\n1681 -1.078333e+01\n1682  4.616667e+00\n1683  7.275000e+00\n1684  6.500000e-01\n1685  1.801667e+01\n1686  3.850000e+00\n1687  4.000000e-01\n1688 -7.608333e+00\n1689 -1.016667e+00\n1690  2.025000e+01\n1691 -7.466667e+00\n1692  1.084167e+01\n1693  1.250833e+01\n1694 -3.741667e+00\n1695 -9.358333e+00\n1696 -6.233333e+00\n1697 -1.209167e+01\n1698 -8.008333e+00\n1699 -1.323333e+01\n1700  4.241667e+00\n1701  8.133333e+00\n1702  1.150000e+01\n1703 -4.308333e+00\n1704  1.068333e+01\n1705  1.176667e+01\n1706  9.241667e+00\n1707 -3.158333e+00\n1708  3.958333e+00\n1709  2.566667e+00\n1710  1.403333e+01\n1711 -6.783333e+00\n1712 -1.250000e+00\n1713  8.400000e+00\n1714 -2.583333e-01\n1715 -1.420833e+01\n1716  1.462500e+01\n1717  5.550000e+00\n1718  3.550000e+00\n1719  1.420833e+01\n1720 -1.858333e+00\n1721 -1.474167e+01\n1722  7.783333e+00\n1723 -6.733333e+00\n1724 -9.716667e+00\n1725 -1.290833e+01\n1726 -6.241667e+00\n1727  1.191667e+01\n1728 -7.675000e+00\n1729  7.533333e+00\n1730 -5.266667e+00\n1731 -8.608333e+00\n1732 -7.158333e+00\n1733  1.345833e+01\n1734  7.158333e+00\n1735 -7.325000e+00\n1736  8.250000e+00\n1737  1.719167e+01\n1738 -1.816667e+01\n1739 -1.531667e+01\n1740  1.074167e+01\n1741  1.337500e+01\n1742  1.790833e+01\n1743 -1.600000e+00\n1744  6.125000e+00\n1745 -1.242500e+01\n1746  3.541667e+00\n1747 -4.050000e+00\n1748  1.636667e+01\n1749  5.625000e+00\n1750 -5.691667e+00\n1751  5.583333e+00\n1752 -1.904167e+01\n1753  1.234167e+01\n1754  1.191667e+00\n1755  2.162500e+01\n1756  1.443333e+01\n1757  8.100000e+00\n1758 -8.758333e+00\n1759  8.933333e+00\n1760  7.125000e+00\n1761  1.241667e+00\n1762  5.041667e+00\n1763  1.200833e+01\n1764  8.916667e-01\n1765 -1.275000e+01\n1766 -7.025000e+00\n1767  2.252500e+01\n1768  9.225000e+00\n1769 -1.420833e+01\n1770 -5.300000e+00\n1771  1.176667e+01\n1772  1.100833e+01\n1773 -4.141667e+00\n1774  6.416667e-01\n1775 -3.600000e+00\n1776  9.716667e+00\n1777 -4.166667e-01\n1778  1.584167e+01\n1779 -1.590833e+01\n1780  1.287500e+01\n1781  4.175000e+00\n1782 -9.800000e+00\n1783 -1.455833e+01\n1784  1.426667e+01\n1785  1.941667e+00\n1786  1.075000e+01\n1787 -1.750000e+00\n1788  7.533333e+00\n1789 -1.217500e+01\n1790 -5.508333e+00\n1791  3.541667e+00\n1792 -9.083333e-01\n1793 -2.235833e+01\n1794  2.083333e+00\n1795  1.051667e+01\n1796 -3.900000e+00\n1797  5.166667e-01\n1798 -1.625000e+00\n1799 -5.150000e+00\n1800 -1.854167e+01\n1801  3.866667e+00\n1802 -1.379167e+01\n1803  1.866667e+00\n1804  1.540833e+01\n1805  3.041667e+00\n1806  3.566667e+00\n1807  2.558333e+00\n1808  4.983333e+00\n1809  6.641667e+00\n1810  1.365000e+01\n1811  1.587500e+01\n1812  2.204167e+01\n1813  5.416667e+00\n1814  1.019167e+01\n1815  1.345833e+01\n1816  8.333333e-01\n1817  8.816667e+00\n1818  4.041667e+00\n1819  6.425000e+00\n1820  1.064167e+01\n1821  1.666667e+00\n1822 -2.983333e+00\n1823  5.266667e+00\n1824  1.533333e+00\n1825 -1.583333e+00\n1826  8.575000e+00\n1827  4.791667e+00\n1828  5.083333e-01\n1829  3.133333e+00\n1830  9.250000e+00\n1831 -1.075000e+00\n1832  7.050000e+00\n1833 -9.750000e-01\n1834  3.033333e+00\n1835  7.933333e+00\n1836  5.750000e-01\n1837  1.511667e+01\n1838  4.183333e+00\n1839  1.359167e+01\n1840  1.075000e+01\n1841 -8.041667e+00\n1842  1.047500e+01\n1843  2.420000e+01\n1844 -1.063333e+01\n1845  1.567500e+01\n1846  1.050000e+00\n1847  1.134167e+01\n1848 -7.241667e+00\n1849  1.690000e+01\n1850  7.933333e+00\n1851 -1.048333e+01\n1852  2.825000e+00\n1853  1.541667e+00\n1854  1.049167e+01\n1855 -1.660833e+01\n1856 -1.142500e+01\n1857 -2.350000e+00\n1858  1.380000e+01\n1859  6.908333e+00\n1860  7.100000e+00\n1861  1.482500e+01\n1862  3.416667e-01\n1863 -4.500000e+00\n1864  5.391667e+00\n1865  4.708333e+00\n1866 -9.841667e+00\n1867  4.008333e+00\n1868  2.094167e+01\n1869 -7.958333e+00\n1870 -1.516667e+00\n1871 -1.785000e+01\n1872 -8.833333e-01\n1873 -1.470833e+01\n1874 -9.583333e-01\n1875 -8.258333e+00\n1876 -1.440833e+01\n1877 -1.394167e+01\n1878  6.666667e-02\n1879 -3.758333e+00\n1880 -4.616667e+00\n1881  1.942500e+01\n1882  3.033333e+00\n1883  3.283333e+00\n1884  7.866667e+00\n1885 -1.921667e+01\n1886 -3.816667e+00\n1887 -1.522500e+01\n1888  4.558333e+00\n1889  6.583333e+00\n1890 -8.216667e+00\n1891  1.585000e+01\n1892  1.265000e+01\n1893  1.287500e+01\n1894  2.883333e+01\n1895  1.775000e+01\n1896 -1.582500e+01\n1897 -7.991667e+00\n1898 -1.013333e+01\n1899 -1.128333e+01\n1900  9.833333e-01\n1901 -6.850000e+00\n1902  2.038333e+01\n1903 -3.366667e+00\n1904  7.816667e+00\n1905 -7.408333e+00\n1906  4.908333e+00\n1907  2.883333e+01\n1908  1.415000e+01\n1909  3.366667e+00\n1910 -1.990000e+01\n1911 -2.255833e+01\n1912 -5.341667e+00\n1913 -6.708333e+00\n1914  1.308333e+01\n1915 -7.783333e+00\n1916 -5.266667e+00\n1917  2.250000e+01\n1918 -2.127500e+01\n1919 -2.233333e+00\n1920  1.274167e+01\n1921 -1.180000e+01\n1922  1.660833e+01\n1923 -7.425000e+00\n1924  1.183333e+00\n1925 -1.191667e+01\n1926 -2.640000e+01\n1927 -2.408333e+00\n1928 -7.833333e-01\n1929  1.733333e+00\n1930 -5.458333e+00\n1931  7.666667e+00\n1932 -2.166667e+00\n1933  1.397500e+01\n1934  1.535000e+01\n1935  5.150000e+00\n1936 -1.365000e+01\n1937 -4.758333e+00\n1938  2.416667e+00\n1939 -8.775000e+00\n1940  3.883333e+00\n1941 -8.950000e+00\n1942  1.180833e+01\n1943  4.175000e+00\n1944  7.833333e-01\n1945  3.741667e+00\n1946 -6.333333e-01\n1947  1.123333e+01\n1948  2.741667e+00\n1949 -7.750000e-01\n1950  6.983333e+00\n1951  1.089167e+01\n1952 -3.591667e+00\n1953  2.645833e+01\n1954 -2.320000e+01\n1955 -3.425000e+00\n1956 -9.083333e-01\n1957  1.983333e+00\n1958  8.008333e+00\n1959 -6.908333e+00\n1960 -1.608333e+00\n1961  5.133333e+00\n1962  3.158333e+00\n1963  9.425000e+00\n1964 -7.950000e+00\n1965 -1.550000e+00\n1966 -5.983333e+00\n1967  1.086667e+01\n1968 -3.016667e+00\n1969 -6.791667e+00\n1970  8.500000e-01\n1971  5.908333e+00\n1972 -5.166667e-01\n1973 -1.731667e+01\n1974  7.408333e+00\n1975  2.425000e+00\n1976 -6.908333e+00\n1977  1.383333e+00\n1978 -7.325000e+00\n1979  2.333333e-01\n1980 -9.083333e+00\n1981 -2.900000e+00\n1982  3.091667e+00\n1983 -1.468333e+01\n1984 -1.400000e+01\n1985  2.425833e+01\n1986 -6.791667e+00\n1987 -1.209167e+01\n1988 -5.475000e+00\n1989 -2.267500e+01\n1990  5.900000e+00\n1991  6.616667e+00\n1992 -2.267500e+01\n1993 -5.350000e+00\n1994 -1.039167e+01\n1995 -1.207500e+01\n1996  1.050000e+00\n1997 -8.866667e+00\n1998  2.019167e+01\n1999 -2.166667e-01\n2000 -6.850000e+00\n2001 -1.142500e+01\n2002  3.733333e+00\n2003  1.921667e+01\n2004  1.745833e+01\n2005  1.160000e+01\n2006  3.000000e+00\n2007  5.608333e+00\n2008  7.025000e+00\n2009  1.916667e+00\n2010 -1.045833e+01\n2011  9.483333e+00\n2012 -1.664167e+01\n2013  3.091667e+00\n2014 -1.998333e+01\n2015  1.200000e+00\n2016 -8.750000e+00\n2017 -4.908333e+00\n2018  3.308333e+00\n2019 -2.434167e+01\n2020  1.055000e+01\n2021  1.063333e+01\n2022 -1.860000e+01\n2023 -1.241667e+00\n2024 -1.391667e+01\n2025 -3.825000e+00\n2026 -1.468333e+01\n2027 -4.141667e+00\n2028 -2.258333e+01\n2029 -2.583333e-01\n2030 -3.450000e+00\n2031 -5.625000e+00\n2032  6.366667e+00\n2033 -3.683333e+00\n2034  1.269167e+01\n2035 -6.875000e+00\n2036 -1.098333e+01\n2037  3.475000e+00\n2038 -3.308333e+00\n2039 -9.683333e+00\n2040  9.475000e+00\n2041  2.441667e+00\n2042 -6.508333e+00\n2043 -6.375000e+00\n2044  1.488333e+01\n2045 -1.027500e+01\n2046 -6.250000e-01\n2047 -1.727500e+01\n2048  7.725000e+00\n2049  6.841667e+00\n2050 -5.000000e-02\n2051 -7.900000e+00\n2052 -7.500000e-01\n2053  7.100000e+00\n2054  5.608333e+00\n2055 -3.216667e+00\n2056 -2.208333e+00\n2057 -8.458333e+00\n2058  5.533333e+00\n2059 -2.266667e+00\n2060 -5.475000e+00\n2061  5.091667e+00\n2062 -2.883333e+00\n2063  1.121667e+01\n2064  3.750000e-01\n2065  1.276667e+01\n2066  1.075000e+00\n2067  1.248333e+01\n2068  2.208333e+00\n2069 -9.300000e+00\n2070 -5.008333e+00\n2071 -1.171667e+01\n2072 -3.991667e+00\n2073 -1.250833e+01\n2074 -8.725000e+00\n2075  6.241667e+00\n2076 -1.191667e+00\n2077  9.583333e+00\n2078  6.733333e+00\n2079  3.675000e+00\n2080 -1.921667e+01\n2081  6.666667e+00\n2082 -7.466667e+00\n2083 -1.892500e+01\n2084  2.075000e+00\n2085 -4.850000e+00\n2086 -2.208333e+00\n2087  9.958333e+00\n2088  1.664167e+01\n2089 -1.400000e+00\n2090 -1.450833e+01\n2091  1.058333e+00\n2092  1.216667e+00\n2093 -2.300000e+01\n2094  8.516667e+00\n2095 -3.333333e-01\n2096  3.325000e+00\n2097  1.162500e+01\n2098 -1.933333e+01\n2099  1.046667e+01\n2100 -1.913333e+01\n2101 -3.750000e-01\n2102  1.725000e+00\n2103 -1.005833e+01\n2104 -1.468333e+01\n2105 -1.191667e+01\n2106  1.206667e+01\n2107 -2.475000e+00\n2108  1.107500e+01\n2109 -1.177500e+01\n2110 -1.318333e+01\n2111  1.508333e+00\n2112  1.613333e+01\n2113 -8.400000e+00\n2114 -3.550000e+00\n2115  1.465000e+01\n2116 -1.870000e+01\n2117  1.294167e+01\n2118  3.450000e+00\n2119 -1.215000e+01\n2120 -7.725000e+00\n2121 -5.683333e+00\n2122  9.433333e+00\n2123  1.741667e+00\n2124  2.000833e+01\n2125  8.658333e+00\n2126 -2.100000e+00\n2127 -1.675000e+00\n2128  1.124167e+01\n2129  3.241667e+00\n2130  1.394167e+01\n2131  7.841667e+00\n2132  1.505833e+01\n2133  1.288333e+01\n2134 -9.766667e+00\n2135  1.176667e+01\n2136  7.183333e+00\n2137  1.379167e+01\n2138 -5.083333e-01\n2139  2.916667e+00\n2140  6.225000e+00\n2141 -1.796667e+01\n2142  3.516667e+00\n2143 -2.133333e+01\n2144 -1.191667e+01\n2145 -1.005833e+01\n2146  2.000833e+01\n2147 -1.454167e+01\n2148  8.108333e+00\n2149  2.210000e+01\n2150  1.233333e+01\n2151  1.296667e+01\n2152 -7.041667e+00\n2153  2.583333e-01\n2154 -5.816667e+00\n2155 -5.150000e+00\n2156 -2.303333e+01\n2157 -1.049167e+01\n2158  5.825000e+00\n2159 -2.000000e+00\n2160  2.966667e+00\n2161  6.083333e-01\n2162  1.058333e+00\n2163 -1.531667e+01\n2164 -3.316667e+00\n2165  2.475000e+00\n2166  1.913333e+01\n2167 -5.150000e+00\n2168 -8.050000e+00\n2169 -5.633333e+00\n2170 -9.050000e+00\n2171 -6.158333e+00\n2172 -1.516667e+01\n2173  1.465000e+01\n2174 -1.220833e+01\n2175  3.908333e+00\n2176  1.801667e+01\n2177  1.799167e+01\n2178 -7.808333e+00\n2179 -2.210000e+01\n2180 -1.766667e+01\n2181  1.039167e+01\n2182 -7.016667e+00\n2183 -7.216667e+00\n2184  2.261667e+01\n2185 -1.904167e+01\n2186 -8.633333e+00\n2187  5.333333e+00\n2188 -1.858333e+00\n2189 -1.078333e+01\n2190  6.333333e-01\n2191  1.235833e+01\n2192 -2.004167e+01\n2193 -1.537500e+01\n2194 -1.130000e+01\n2195  2.660000e+01\n2196 -2.133333e+01\n2197  9.783333e+00\n2198 -6.183333e+00\n2199  2.200000e+00\n2200  7.275000e+00\n2201 -1.641667e+00\n2202 -5.525000e+00\n2203  1.393333e+01\n2204  6.500000e-01\n2205 -8.100000e+00\n2206 -7.750000e-01\n2207 -1.133333e+01\n2208 -1.065833e+01\n2209  4.783333e+00\n2210  1.311667e+01\n2211 -5.750000e+00\n2212  1.259167e+01\n2213 -5.325000e+00\n2214  1.075000e+00\n2215  1.045000e+01\n2216  8.333333e-03\n2217  5.875000e+00\n2218 -7.500000e+00\n2219  1.221667e+01\n2220 -2.080000e+01\n2221 -5.416667e-01\n2222  7.841667e+00\n2223  8.925000e+00\n2224 -9.050000e+00\n2225 -5.150000e+00\n2226 -1.027500e+01\n2227  1.090000e+01\n2228  3.125000e+00\n2229  4.975000e+00\n2230 -4.558333e+00\n2231  1.763333e+01\n2232  9.341667e+00\n2233 -5.150000e+00\n2234  1.389167e+01\n2235  9.975000e+00\n2236 -2.080000e+01\n2237  1.781667e+01\n2238 -3.783333e+00\n2239  9.783333e+00\n2240  4.308333e+00\n2241 -9.558333e+00\n2242 -1.594167e+01\n2243  1.787500e+01\n2244 -2.416667e+00\n2245  1.393333e+01\n2246  7.641667e+00\n2247 -8.333333e-02\n2248 -1.373333e+01\n2249 -9.008333e+00\n2250 -6.616667e+00\n2251 -5.608333e+00\n2252  1.239167e+01\n2253  2.663333e+01\n2254  1.045000e+01\n2255 -8.466667e+00\n2256  1.054167e+01\n2257  3.125000e+00\n2258  7.050000e+00\n2259 -1.415000e+01\n2260  4.591667e+00\n2261  3.225000e+00\n2262  3.050000e+00\n2263  1.233333e+00\n2264  9.858333e+00\n2265 -1.866667e+00\n2266  2.775000e+00\n2267  4.166667e-01\n2268  3.116667e+00\n2269 -1.092500e+01\n2270 -4.675000e+00\n2271  6.616667e+00\n2272 -5.458333e+00\n2273  1.836667e+01\n2274  6.916667e-01\n2275 -4.358333e+00\n2276  1.183333e+01\n2277 -3.116667e+00\n2278  3.375000e+00\n2279  5.766667e+00\n2280  6.566667e+00\n2281 -3.175000e+00\n2282 -8.133333e+00\n2283 -7.383333e+00\n2284 -1.807500e+01\n2285  6.175000e+00\n2286  3.050000e+00\n2287 -5.825000e+00\n2288 -1.296667e+01\n2289 -1.211667e+01\n2290  1.683333e+01\n2291 -2.038333e+01\n2292  1.248333e+01\n2293  6.075000e+00\n2294 -1.750000e-01\n2295  1.288333e+01\n2296  1.067500e+01\n2297  5.400000e+00\n2298  1.775000e+01\n2299  2.500000e+00\n2300  5.083333e-01\n2301  5.841667e+00\n2302  1.850000e+00\n2303  4.141667e+00\n2304  1.283333e+01\n2305  1.337500e+01\n2306  2.300000e+00\n2307  1.600000e+00\n2308  4.358333e+00\n2309 -2.208333e+00\n2310 -8.791667e+00\n2311 -1.013333e+01\n2312  6.541667e+00\n2313  6.500000e-01\n2314 -2.166667e+00\n2315 -7.833333e-01\n2316  7.050000e+00\n2317 -1.895833e+01\n2318 -1.174167e+01\n2319  1.080833e+01\n2320 -1.830833e+01\n2321  1.233333e+01\n2322  4.500000e+00\n2323  1.320000e+01\n2324 -6.158333e+00\n2325 -6.425000e+00\n2326  3.283333e+00\n2327 -1.176667e+01\n2328 -5.350000e+00\n2329  8.550000e+00\n2330  1.629167e+01\n2331  1.027500e+01\n2332 -4.816667e+00\n2333 -4.941667e+00\n2334 -1.170833e+01\n2335  5.875000e+00\n2336  1.800000e+00\n2337 -3.366667e+00\n2338  2.645833e+01\n2339  3.925000e+00\n2340  1.394167e+01\n2341  5.383333e+00\n2342  6.908333e+00\n2343 -1.261667e+01\n2344 -1.440833e+01\n2345  1.387500e+01\n2346  4.250000e-01\n2347 -3.750000e-01\n2348  1.510833e+01\n2349 -1.030833e+01\n2350 -3.333333e-02\n2351  5.458333e+00\n2352 -1.666667e+00\n2353  7.725000e+00\n2354  9.433333e+00\n2355 -8.616667e+00\n2356 -3.541667e+00\n2357 -3.333333e+00\n2358  7.216667e+00\n2359 -8.316667e+00\n2360  8.333333e-01\n2361 -1.405833e+01\n2362 -2.300000e+00\n2363 -6.916667e-01\n2364  7.350000e+00\n2365 -3.966667e+00\n2366  4.858333e+00\n2367  4.041667e+00\n2368 -1.045833e+01\n2369 -1.364167e+01\n2370  5.683333e+00\n2371 -3.083333e+00\n2372 -1.316667e+00\n2373 -5.833333e-02\n2374  8.841667e+00\n2375 -1.359167e+01\n2376 -2.058333e+00\n2377  2.566667e+00\n2378 -2.127500e+01\n2379  1.830833e+01\n2380  4.800000e+00\n2381 -4.708333e+00\n2382  2.291667e+00\n2383 -7.583333e+00\n2384  1.391667e+01\n2385  9.816667e+00\n2386 -1.206667e+01\n2387 -3.075000e+00\n2388 -2.450000e+00\n2389 -1.590833e+01\n2390  2.204167e+01\n2391  6.075000e+00\n2392  5.341667e+00\n2393 -2.267500e+01\n2394  6.433333e+00\n2395 -6.366667e+00\n2396 -4.175000e+00\n2397  1.061667e+01\n2398 -1.391667e+01\n2399 -6.291667e+00\n2400  7.341667e+00\n2401  3.450000e+00\n2402  5.625000e+00\n2403 -1.291667e+01\n2404  1.750000e-01\n2405  1.275000e+01\n2406  2.083333e-01\n2407  4.900000e+00\n2408 -1.092500e+01\n2409  8.550000e+00\n2410 -7.900000e+00\n2411  4.500000e+00\n2412 -1.033333e+01\n2413  2.350000e+00\n2414  1.051667e+01\n2415 -5.625000e+00\n2416 -1.616667e+01\n2417  3.416667e-01\n2418 -4.616667e+00\n2419  2.075000e+00\n2420 -7.500000e+00\n2421 -1.373333e+01\n2422 -1.065833e+01\n2423  1.617500e+01\n2424  3.333333e+00\n2425  1.177500e+01\n2426 -7.525000e+00\n2427 -1.020000e+01\n2428 -1.984167e+01\n2429 -1.114167e+01\n2430 -7.933333e+00\n2431 -1.125833e+01\n2432  4.766667e+00\n2433  6.783333e+00\n2434  1.984167e+01\n2435  1.787500e+01\n2436  1.916667e+00\n2437 -7.100000e+00\n2438 -2.645833e+01\n2439  4.675000e+00\n2440 -6.991667e+00\n2441 -8.166667e-01\n2442  7.500000e-02\n2443  1.403333e+01\n2444 -3.258333e+00\n2445  3.666667e-01\n2446 -4.183333e+00\n2447 -9.433333e+00\n2448  1.704167e+01\n2449  1.566667e+00\n2450 -1.186667e+01\n2451 -1.750000e-01\n2452 -3.175000e+00\n2453  1.810833e+01\n2454 -1.625000e+00\n2455  5.066667e+00\n2456 -1.924167e+01\n2457  1.733333e+00\n2458  1.200000e+01\n2459 -2.583333e-01\n2460 -1.525833e+01\n2461 -1.191667e+01\n2462  8.841667e+00\n2463  3.425000e+00\n2464  3.066667e+00\n2465 -1.250833e+01\n2466  4.241667e+00\n2467  1.117500e+01\n2468 -3.308333e+00\n2469 -2.841667e+00\n2470 -3.241667e+00\n2471  3.891667e+00\n2472 -8.416667e-01\n2473 -4.325000e+00\n2474  7.300000e+00\n2475  5.633333e+00\n2476  1.101667e+01\n2477  8.875000e+00\n2478  6.833333e-01\n2479 -1.921667e+01\n2480  2.235833e+01\n2481 -3.333333e-02\n2482  8.800000e+00\n2483 -1.541667e+00\n2484  1.025000e+01\n2485  1.183333e+01\n2486 -6.350000e+00\n2487 -3.716667e+00\n2488 -1.641667e+00\n2489 -4.300000e+00\n2490  1.098333e+01\n2491 -1.810833e+01\n2492  2.341667e+00\n2493  8.416667e-01\n2494 -1.217500e+01\n2495 -1.678333e+01\n2496  1.156667e+01\n2497  1.221667e+01\n2498  1.670833e+01\n2499 -1.092500e+01\n2500 -2.625000e+00\n2501  1.027500e+01\n2502  6.375000e+00\n2503 -2.225000e+00\n2504 -1.325833e+01\n2505 -6.566667e+00\n2506 -5.983333e+00\n2507 -1.998333e+01\n2508  1.704167e+01\n2509  1.116667e+00\n2510 -7.283333e+00\n2511  1.892500e+01\n2512 -1.275000e+01\n2513  3.875000e+00\n2514  3.900000e+00\n2515  1.168333e+01\n2516  2.833333e+00\n2517 -7.125000e+00\n2518 -4.500000e+00\n2519  5.150000e+00\n2520  5.091667e+00\n2521 -1.426667e+01\n2522 -1.066667e+01\n2523 -5.341667e+00\n2524 -5.483333e+00\n2525 -1.975000e+00\n2526  1.690000e+01\n2527  8.983333e+00\n2528 -4.550000e+00\n2529  2.408333e+00\n2530 -2.458333e+00\n2531  1.440833e+01\n2532 -7.441667e+00\n2533 -1.613333e+01\n2534 -3.275000e+00\n2535 -9.225000e+00\n2536 -5.900000e+00\n2537 -7.383333e+00\n2538 -3.158333e+00\n2539  1.858333e+00\n2540 -3.266667e+00\n2541  1.953333e+01\n2542  6.175000e+00\n2543  4.675000e+00\n2544 -2.305833e+01\n2545  7.200000e+00\n2546  3.200000e+00\n2547 -2.543333e+01\n2548 -1.128333e+01\n2549 -3.925000e+00\n2550  8.516667e+00\n2551 -1.320000e+01\n2552  1.719167e+01\n2553  4.916667e+00\n2554 -1.546667e+01\n2555  2.416667e+00\n2556  1.308333e+01\n2557  1.329167e+01\n2558 -1.483333e+00\n2559  1.317500e+01\n2560 -2.558333e+00\n2561 -1.416667e-01\n2562  1.465000e+01\n2563  3.350000e+00\n2564 -2.500000e-02\n2565  6.558333e+00\n2566  6.666667e-01\n2567  1.365000e+01\n2568  1.189167e+01\n2569  1.061667e+01\n2570 -3.391667e+00\n2571  7.275000e+00\n2572 -2.575000e+00\n2573  1.104167e+01\n2574 -2.116667e+00\n2575  7.200000e+00\n2576 -5.516667e+00\n2577 -2.416667e+00\n2578  7.666667e-01\n2579 -9.166667e+00\n2580  8.841667e+00\n2581 -5.558333e+00\n2582  1.600000e+00\n2583  5.875000e+00\n2584  3.333333e-01\n2585 -3.025000e+00\n2586 -7.641667e+00\n2587  2.708333e+00\n2588  1.020000e+01\n2589  1.388333e+01\n2590 -4.358333e+00\n2591  1.183333e+00\n2592 -1.517500e+01\n2593 -1.600000e+00\n2594 -3.241667e+00\n2595 -1.790833e+01\n2596  7.158333e+00\n2597 -2.983333e+00\n2598  6.383333e+00\n2599 -6.041667e+00\n2600 -5.750000e-01\n2601 -1.124167e+01\n2602  6.558333e+00\n2603 -1.051667e+01\n2604 -2.633333e+00\n2605 -9.775000e+00\n2606  9.083333e+00\n2607 -5.200000e+00\n2608  1.267500e+01\n2609 -2.041667e+00\n2610  1.331667e+01\n2611  1.646667e+01\n2612  2.657500e+01\n2613 -4.725000e+00\n2614  2.441667e+00\n2615  1.154167e+01\n2616  7.841667e+00\n2617 -1.234167e+01\n2618  9.775000e+00\n2619 -5.875000e+00\n2620  7.491667e+00\n2621  8.000000e-01\n2622 -1.027500e+01\n2623  2.450000e+00\n2624  5.033333e+00\n2625  1.217500e+01\n2626  8.941667e+00\n2627 -6.791667e+00\n2628  4.500000e+00\n2629  2.323333e+01\n2630  1.365833e+01\n2631  2.244167e+01\n2632  1.927500e+01\n2633 -1.258333e+00\n2634  4.650000e+00\n2635 -2.156667e+01\n2636  2.650000e+00\n2637 -1.808333e+00\n2638 -3.483333e+00\n2639 -9.875000e+00\n2640  6.933333e+00\n2641 -4.675000e+00\n2642  4.900000e+00\n2643  2.833333e-01\n2644 -1.365000e+01\n2645  1.035833e+01\n2646 -1.816667e+01\n2647  5.850000e+00\n2648  1.066667e+01\n2649 -9.775000e+00\n2650  8.016667e+00\n2651 -8.800000e+00\n2652  1.298333e+01\n2653 -9.475000e+00\n2654 -3.600000e+00\n2655  8.608333e+00\n2656 -1.658333e+01\n2657 -4.733333e+00\n2658  8.025000e+00\n2659  2.300000e+01\n2660 -3.925000e+00\n2661  2.166667e-01\n2662 -3.091667e+00\n2663 -9.083333e+00\n2664  2.091667e+00\n2665  4.708333e+00\n2666  3.316667e+00\n2667 -2.461667e+01\n2668  1.050000e+00\n2669  1.394167e+01\n2670 -1.142500e+01\n2671 -4.041667e+00\n2672  4.308333e+00\n2673  6.383333e+00\n2674 -4.383333e+00\n2675  3.425000e+00\n2676 -8.333333e-01\n2677  1.359167e+01\n2678 -1.235833e+01\n2679 -1.514167e+01\n2680  1.850833e+01\n2681 -9.583333e+00\n2682  6.883333e+00\n2683  5.550000e+00\n2684 -9.275000e+00\n2685  1.323333e+01\n2686  3.925000e+00\n2687 -1.690000e+01\n2688  7.441667e+00\n2689  1.268333e+01\n2690 -6.025000e+00\n2691 -6.850000e+00\n2692  7.566667e+00\n2693 -1.449167e+01\n2694 -1.590833e+01\n2695 -1.394167e+01\n2696 -4.366667e+00\n2697  1.503333e+01\n2698 -8.516667e+00\n2699 -4.733333e+00\n2700 -6.300000e+00\n2701 -5.566667e+00\n2702  9.625000e+00\n2703 -4.858333e+00\n2704 -5.958333e+00\n2705 -7.841667e+00\n2706 -8.108333e+00\n2707  2.741667e+00\n2708  1.168333e+01\n2709  9.900000e+00\n2710 -7.525000e+00\n2711 -1.840000e+01\n2712 -3.941667e+00\n2713  1.191667e+00\n2714 -1.854167e+01\n2715  1.380000e+01\n2716 -1.516667e+01\n2717 -5.358333e+00\n2718  2.250000e-01\n2719 -4.900000e+00\n2720  5.900000e+00\n2721 -1.375000e+00\n2722  1.441667e+01\n2723  3.866667e+00\n2724 -6.500000e-01\n2725 -6.850000e+00\n2726  3.125000e+00\n2727 -9.400000e+00\n2728 -1.808333e+01\n2729 -8.816667e+00\n2730 -2.461667e+01\n2731  5.133333e+00\n2732  4.833333e-01\n2733  3.041667e+00\n2734  1.253333e+01\n2735 -3.675000e+00\n2736  1.672500e+01\n2737 -1.550000e+00\n2738  1.766667e+01\n2739  1.593333e+01\n2740 -1.441667e+00\n2741 -1.195000e+01\n2742 -6.375000e+00\n2743  1.174167e+01\n2744 -7.241667e+00\n2745 -1.588333e+01\n2746 -9.416667e-01\n2747 -3.391667e+00\n2748 -8.458333e+00\n2749  6.825000e+00\n2750  1.800000e+00\n2751  1.454167e+01\n2752 -7.166667e-01\n2753  6.175000e+00\n2754 -2.000000e+00\n2755 -2.775000e+00\n2756  1.517500e+01\n2757  4.858333e+00\n2758 -4.100000e+00\n2759  7.750000e-01\n2760 -3.450000e+00\n2761  1.158333e+00\n2762 -5.333333e-01\n2763  5.475000e+00\n2764  1.807500e+01\n2765  6.108333e+00\n2766  3.925000e+00\n2767 -6.508333e+00\n2768 -4.766667e+00\n2769 -1.270000e+01\n2770 -6.916667e-01\n2771  7.750000e+00\n2772 -9.008333e+00\n2773 -6.675000e+00\n2774 -3.250000e+00\n2775  1.041667e+00\n2776 -1.608333e+00\n2777 -7.500000e+00\n2778  6.175000e+00\n2779 -1.866667e+00\n2780 -7.058333e+00\n2781 -2.241667e+01\n2782  1.625000e+00\n2783  1.350000e+01\n2784  1.907500e+01\n2785 -1.666667e+00\n2786  7.041667e+00\n2787 -1.282500e+01\n2788 -6.650000e+00\n2789 -5.300000e+00\n2790  4.366667e+00\n2791 -7.100000e+00\n2792 -1.443333e+01\n2793 -1.049167e+01\n2794  2.066667e+00\n2795 -5.958333e+00\n2796 -1.435000e+01\n2797  4.000000e-01\n2798 -6.233333e+00\n2799 -1.755000e+01\n2800 -9.833333e-01\n2801 -2.083333e-01\n2802  8.933333e+00\n2803  1.500000e+01\n2804  8.758333e+00\n2805 -1.001667e+01\n2806 -7.425000e+00\n2807  1.034167e+01\n2808  1.075000e+00\n2809 -4.100000e+00\n2810 -1.400000e+00\n2811 -8.000000e-01\n2812  3.966667e+00\n2813 -8.458333e+00\n2814  8.800000e+00\n2815 -8.866667e+00\n2816  3.433333e+00\n2817 -2.158333e+00\n2818  2.224167e+01\n2819  1.799167e+01\n2820  8.550000e+00\n2821  1.092500e+01\n2822 -7.150000e+00\n2823 -1.483333e+00\n2824  6.666667e+00\n2825  7.350000e+00\n2826  6.458333e+00\n2827  1.046667e+01\n2828 -4.175000e+00\n2829  2.135833e+01\n2830 -1.275000e+01\n2831  8.600000e+00\n2832  7.866667e+00\n2833 -8.041667e+00\n2834 -1.189167e+01\n2835 -1.233333e+01\n2836  1.148333e+01\n2837 -1.058333e+01\n2838 -1.010000e+01\n2839 -6.433333e+00\n2840 -2.320000e+01\n2841 -5.550000e+00\n2842 -9.241667e+00\n2843  1.054167e+01\n2844  1.755000e+01\n2845 -1.379167e+01\n2846  9.433333e+00\n2847  3.600000e+00\n2848  1.583333e+00\n2849 -3.125000e+00\n2850  2.683333e+00\n2851 -2.775000e+00\n2852 -7.408333e+00\n2853 -4.583333e-01\n2854  9.508333e+00\n2855  2.246667e+01\n2856  1.377500e+01\n2857  6.308333e+00\n2858  4.358333e+00\n2859 -1.666667e+00\n2860 -5.758333e+00\n2861 -1.035833e+01\n2862 -1.520000e+01\n2863 -1.936667e+01\n2864  1.769167e+01\n2865 -2.833333e-01\n2866  1.324167e+01\n2867  3.383333e+00\n2868 -1.394167e+01\n2869 -7.808333e+00\n2870  1.933333e+01\n2871  6.533333e+00\n2872  1.385000e+01\n2873  1.090000e+01\n2874 -6.250000e-01\n2875 -6.816667e+00\n2876  7.391667e+00\n2877 -2.266667e+00\n2878 -2.583333e-01\n2879 -4.791667e+00\n2880 -4.741667e+00\n2881 -1.234167e+01\n2882  8.908333e+00\n2883  3.908333e+00\n2884  6.316667e+00\n2885 -2.250000e-01\n2886  1.737500e+01\n2887  2.640000e+01\n2888 -5.900000e+00\n2889  9.916667e+00\n2890 -6.375000e+00\n2891  2.640000e+01\n2892  5.683333e+00\n2893  2.529167e+01\n2894  2.024167e+01\n2895  9.958333e+00\n2896  1.800000e+00\n2897 -2.127500e+01\n2898  1.075000e+00\n2899 -2.416667e+00\n2900  2.916667e-01\n2901  5.350000e+00\n2902  1.263333e+01\n2903  6.883333e+00\n2904 -3.400000e+00\n2905 -1.535000e+01\n2906 -1.276667e+01\n2907  5.125000e+00\n2908 -1.019167e+01\n2909 -1.191667e+01\n2910  1.550000e+00\n2911  2.025000e+00\n2912  2.583333e-01\n2913 -1.380000e+01\n2914 -1.845833e+01\n2915  9.000000e-01\n2916 -7.325000e+00\n2917 -1.041667e+00\n2918  4.158333e+00\n2919  1.270000e+01\n2920  1.268333e+01\n2921  1.215000e+01\n2922 -2.458333e+00\n2923  4.791667e+00\n2924  1.200833e+01\n2925 -2.019167e+01\n2926  7.550000e+00\n2927  1.271667e+01\n2928 -5.125000e+00\n2929  6.316667e+00\n2930 -6.491667e+00\n2931 -2.258333e+01\n2932 -4.916667e+00\n2933  1.263333e+01\n2934  1.220833e+01\n2935  3.700000e+00\n2936  9.158333e+00\n2937  1.698333e+01\n2938  7.233333e+00\n2939  4.500000e+00\n2940  6.533333e+00\n2941  4.950000e+00\n2942  2.320000e+01\n2943 -6.158333e+00\n2944 -3.125000e+00\n2945 -1.215000e+01\n2946  1.488333e+01\n2947 -3.025000e+00\n2948  1.459167e+01\n2949  1.525833e+01\n2950 -1.034167e+01\n2951 -1.998333e+01\n2952 -8.266667e+00\n2953  1.458333e+00\n2954  8.758333e+00\n2955 -6.316667e+00\n2956 -2.166667e-01\n2957  1.283333e+01\n2958 -2.529167e+01\n2959 -1.561667e+01\n2960 -5.666667e+00\n2961  1.049167e+01\n2962  1.373333e+01\n2963 -1.296667e+01\n2964 -9.008333e+00\n2965 -2.232500e+01\n2966  4.841667e+00\n2967  2.625000e+00\n2968  1.391667e+01\n2969 -3.508333e+00\n2970  4.191667e+00\n2971  1.540000e+01\n2972  5.266667e+00\n2973 -6.383333e+00\n2974  9.375000e+00\n2975 -6.433333e+00\n2976 -2.100000e+01\n2977 -7.491667e+00\n2978 -1.916667e+00\n2979 -8.216667e+00\n2980  5.841667e+00\n2981  6.241667e+00\n2982  9.925000e+00\n2983 -1.397500e+01\n2984  5.175000e+00\n2985  6.991667e+00\n2986 -9.025000e+00\n2987 -5.916667e-01\n2988 -9.700000e+00\n2989 -3.908333e+00\n2990 -7.416667e-01\n2991 -5.441667e+00\n2992  1.461667e+01\n2993  1.663333e+01\n2994 -3.583333e-01\n2995 -4.850000e+00\n2996  8.241667e+00\n2997 -2.204167e+01\n2998 -1.060000e+01\n2999  5.408333e+00\n3000  4.333333e+00\n3001  9.925000e+00\n3002  7.583333e-01\n3003 -1.593333e+01\n3004 -5.208333e+00\n3005  1.597500e+01\n3006 -8.458333e+00\n3007  1.380000e+01\n3008 -5.808333e+00\n3009 -1.248333e+01\n3010 -5.983333e+00\n3011 -1.215833e+01\n3012 -1.541667e+00\n3013  3.175000e+00\n3014  2.291667e+00\n3015  3.100000e+00\n3016  1.250833e+01\n3017 -2.233333e+00\n3018  1.144167e+01\n3019  1.261667e+01\n3020  8.666667e+00\n3021  1.075000e+01\n3022  1.020000e+01\n3023  1.060833e+01\n3024  1.449167e+01\n3025 -9.925000e+00\n3026 -1.910000e+01\n3027 -1.133333e+01\n3028  1.750000e-01\n3029  8.008333e+00\n3030  1.666667e+00\n3031 -1.051667e+01\n3032  4.383333e+00\n3033  1.379167e+01\n3034  3.750000e+00\n3035 -1.270000e+01\n3036 -5.416667e-01\n3037 -8.250000e+00\n3038  6.783333e+00\n3039  1.603333e+01\n3040  3.333333e-02\n3041  1.488333e+01\n3042  2.467500e+01\n3043  1.191667e+00\n3044  7.525000e+00\n3045  1.171667e+01\n3046 -2.033333e+00\n3047 -9.841667e+00\n3048 -2.080000e+01\n3049 -1.684167e+01\n3050  1.468333e+01\n3051 -5.083333e-01\n3052 -8.400000e+00\n3053  1.049167e+01\n3054 -4.041667e+00\n3055 -1.810833e+01\n3056  8.333333e-03\n3057 -1.531667e+01\n3058 -5.150000e+00\n3059  5.616667e+00\n3060  4.183333e+00\n3061  8.500000e-01\n3062 -1.170833e+01\n3063  9.366667e+00\n3064 -7.725000e+00\n3065 -6.108333e+00\n3066 -4.758333e+00\n3067 -2.125000e+00\n3068  1.115000e+01\n3069  6.475000e+00\n3070 -3.850000e+00\n3071 -9.633333e+00\n3072 -7.783333e+00\n3073  4.591667e+00\n3074 -9.800000e+00\n3075  1.025000e+01\n3076  4.708333e+00\n3077  1.933333e+01\n3078 -5.291667e+00\n3079 -5.825000e+00\n3080 -9.083333e-01\n3081  1.488333e+01\n3082 -2.916667e+00\n3083  4.733333e+00\n3084  2.408333e+00\n3085 -7.000000e-01\n3086 -3.741667e+00\n3087 -1.265000e+01\n3088 -9.641667e+00\n3089 -1.282500e+01\n3090 -1.740000e+01\n3091  3.433333e+00\n3092 -1.420833e+01\n3093 -2.863333e+01\n3094 -8.316667e+00\n3095  1.291667e+01\n3096  1.781667e+01\n3097  8.316667e+00\n3098  5.091667e+00\n3099 -1.450000e+00\n3100 -1.148333e+01\n3101  1.116667e+00\n3102  7.500000e+00\n3103  1.833333e+00\n3104  1.308333e+01\n3105  5.125000e+00\n3106  6.583333e+00\n3107  6.233333e+00\n3108  5.458333e+00\n3109 -5.266667e+00\n3110 -1.810833e+01\n3111  3.325000e+00\n3112 -5.983333e+00\n3113  1.191667e+00\n3114  6.733333e+00\n3115  2.420000e+01\n3116 -1.365000e+01\n3117  4.916667e+00\n3118  2.508333e+00\n3119  4.108333e+00\n3120 -8.383333e+00\n3121 -1.528333e+01\n3122 -1.389167e+01\n3123 -8.408333e+00\n3124 -1.110000e+01\n3125  6.158333e+00\n3126 -2.375000e+00\n3127 -3.783333e+00\n3128  1.377500e+01\n3129 -8.075000e+00\n3130  4.441667e+00\n3131  1.064167e+01\n3132 -8.816667e+00\n3133 -1.197500e+01\n3134  5.358333e+00\n3135  9.775000e+00\n3136  1.567500e+01\n3137  1.365833e+01\n3138 -9.400000e+00\n3139  9.558333e+00\n3140 -5.683333e+00\n3141 -1.261667e+01\n3142  6.291667e+00\n3143  4.175000e+00\n3144  1.856667e+01\n3145 -7.808333e+00\n3146 -2.250000e-01\n3147  3.800000e+00\n3148 -9.716667e+00\n3149 -9.166667e+00\n3150  6.491667e+00\n3151 -1.725000e+00\n3152  1.516667e+01\n3153 -5.616667e+00\n3154  1.566667e+00\n3155  2.133333e+01\n3156  3.700000e+00\n3157 -2.640000e+01\n3158 -1.379167e+01\n3159 -2.450000e+00\n3160  3.433333e+00\n3161 -4.858333e+00\n3162  1.541667e+00\n3163  3.333333e+00\n3164 -2.645833e+01\n3165  6.916667e-01\n3166 -1.183333e+00\n3167  2.775000e+00\n3168  1.463333e+01\n3169  7.883333e+00\n3170 -3.166667e-01\n3171 -2.450000e+00\n3172 -1.725000e+00\n3173 -4.508333e+00\n3174 -9.858333e+00\n3175  5.416667e-01\n3176 -1.045000e+01\n3177 -1.018333e+01\n3178 -1.234167e+01\n3179 -6.941667e+00\n3180  1.201667e+01\n3181 -1.344167e+01\n3182 -7.841667e+00\n3183  1.195000e+01\n3184  1.116667e+00\n3185  5.150000e+00\n3186 -1.308333e+01\n3187  1.254167e+01\n3188  7.391667e+00\n3189  2.026667e+01\n3190 -6.108333e+00\n3191 -1.801667e+01\n3192  6.791667e+00\n3193 -7.833333e-01\n3194  2.900000e+00\n3195 -7.166667e-01\n3196  2.156667e+01\n3197 -1.655000e+01\n3198 -7.441667e+00\n3199  6.583333e+00\n3200 -1.128333e+01\n3201  8.216667e+00\n3202  2.775000e+00\n3203  1.496667e+01\n3204 -4.650000e+00\n3205 -1.791667e+00\n3206  1.613333e+01\n3207 -5.208333e+00\n3208 -8.041667e+00\n3209  4.583333e-01\n3210  1.605000e+01\n3211 -5.691667e+00\n3212 -1.316667e+00\n3213 -3.533333e+00\n3214  2.455833e+01\n3215  7.425000e+00\n3216 -2.233333e+00\n3217 -1.528333e+01\n3218  5.900000e+00\n3219 -7.416667e-01\n3220  2.891667e+00\n3221 -2.030000e+01\n3222 -1.051667e+01\n3223 -1.583333e-01\n3224  8.058333e+00\n3225  7.750000e-01\n3226 -2.010833e+01\n3227 -4.558333e+00\n3228 -3.991667e+00\n3229 -7.333333e+00\n3230 -6.650000e+00\n3231 -7.116667e+00\n3232  2.130000e+01\n3233 -8.800000e+00\n3234  1.906667e+01\n3235 -2.863333e+01\n3236  1.051667e+01\n3237 -8.108333e+00\n3238  4.333333e-01\n3239 -2.491667e+00\n3240 -3.716667e+00\n3241  4.008333e+00\n3242 -5.000000e-02\n3243  8.791667e+00\n3244  5.150000e+00\n3245 -1.258333e+00\n3246  2.891667e+00\n3247  6.241667e+00\n3248 -5.258333e+00\n3249 -7.166667e-01\n3250  1.294167e+01\n3251 -6.933333e+00\n3252 -8.916667e-01\n3253  8.608333e+00\n3254  7.166667e-01\n3255  2.025000e+00\n3256 -3.900000e+00\n3257 -2.147500e+01\n3258  1.403333e+01\n3259 -6.791667e+00\n3260 -2.200000e+00\n3261 -2.975000e+00\n3262  3.316667e+00\n3263 -1.095833e+01\n3264  4.708333e+00\n3265 -9.483333e+00\n3266 -5.266667e+00\n3267  2.408333e+00\n3268 -1.591667e+00\n3269  3.116667e+00\n3270  8.383333e+00\n3271  1.468333e+01\n3272  2.080000e+01\n3273 -1.936667e+01\n3274 -2.643333e+01\n3275 -5.000000e-02\n3276  1.074167e+01\n3277  1.298333e+01\n3278  1.157500e+01\n3279  6.708333e+00\n3280  1.573333e+01\n3281  2.127500e+01\n3282  6.366667e+00\n3283  1.049167e+01\n3284 -9.050000e+00\n3285 -8.016667e+00\n3286  2.264167e+01\n3287  1.174167e+01\n3288 -1.331667e+01\n3289  1.380000e+01\n3290  1.227500e+01\n3291 -1.109167e+01\n3292  4.908333e+00\n3293 -8.858333e+00\n3294 -1.078333e+01\n3295  7.500000e-01\n3296  4.650000e+00\n3297  7.266667e+00\n3298 -4.075000e+00\n3299  1.850833e+01\n3300  1.585000e+01\n3301 -5.000000e-01\n3302  2.100000e+01\n3303 -2.640000e+01\n3304  5.550000e+00\n3305 -3.175000e+00\n3306 -1.870000e+01\n3307  3.816667e+00\n3308 -1.391667e+01\n3309 -1.166667e-01\n3310 -3.675000e+00\n3311 -1.287500e+01\n3312 -1.290833e+01\n3313 -1.177500e+01\n3314 -2.258333e+01\n3315  4.308333e+00\n3316  8.258333e+00\n3317 -8.758333e+00\n3318  3.166667e+00\n3319 -7.783333e+00\n3320 -6.316667e+00\n3321  1.032500e+01\n3322 -1.910000e+01\n3323  1.388333e+01\n3324 -5.608333e+00\n3325 -8.858333e+00\n3326 -1.160000e+01\n3327 -1.737500e+01\n3328 -8.733333e+00\n3329  2.016667e+00\n3330 -2.625000e+00\n3331 -2.645833e+01\n3332  1.508333e+01\n3333 -1.047500e+01\n3334 -1.502500e+01\n3335  1.013333e+01\n3336  9.333333e+00\n3337  2.058333e+00\n3338 -1.100833e+01\n3339 -2.323333e+01\n3340  5.475000e+00\n3341 -1.698333e+01\n3342  3.183333e+00\n3343 -2.283333e+00\n3344 -4.508333e+00\n3345  1.924167e+01\n3346 -9.166667e-01\n3347 -4.858333e+00\n3348  9.525000e+00\n3349 -1.144167e+01\n3350  1.185833e+01\n3351  1.075000e+00\n3352  4.408333e+00\n3353 -8.658333e+00\n3354 -5.391667e+00\n3355  1.870000e+01\n3356  4.616667e+00\n3357 -1.441667e+01\n3358  3.491667e+00\n3359  3.141667e+00\n3360 -1.733333e+00\n3361  1.775000e+01\n3362 -5.766667e+00\n3363 -1.684167e+01\n3364 -9.700000e+00\n3365  6.966667e+00\n3366  2.026667e+01\n3367  4.558333e+00\n3368 -2.475000e+00\n3369  1.162500e+01\n3370 -1.947500e+01\n3371 -2.038333e+01\n3372  4.408333e+00\n3373 -1.317500e+01\n3374 -1.057500e+01\n3375 -5.958333e+00\n3376  8.466667e+00\n3377  7.141667e+00\n3378  1.136667e+01\n3379 -1.460000e+01\n3380 -4.333333e-01\n3381  5.466667e+00\n3382 -2.975000e+00\n3383  1.395000e+01\n3384 -3.133333e+00\n3385 -3.991667e+00\n3386  6.850000e+00\n3387 -3.333333e+00\n3388 -1.240000e+01\n3389 -8.491667e+00\n3390 -3.391667e+00\n3391 -7.183333e+00\n3392 -1.842500e+01\n3393 -1.269167e+01\n3394 -2.543333e+01\n3395 -1.216667e+00\n3396 -2.916667e+00\n3397  1.267500e+01\n3398  1.257500e+01\n3399  1.483333e+00\n3400 -1.080833e+01\n3401 -1.215833e+01\n3402 -7.883333e+00\n3403  7.166667e-01\n3404 -1.529167e+01\n3405  9.775000e+00\n3406  7.000000e+00\n3407  5.375000e+00\n3408 -4.650000e+00\n3409 -2.975000e+00\n3410  1.692500e+01\n3411 -1.200833e+01\n3412 -1.416667e-01\n3413 -1.456667e+01\n3414 -5.150000e+00\n3415  3.383333e+00\n3416  6.233333e+00\n3417 -8.158333e+00\n3418  4.783333e+00\n3419  8.375000e+00\n3420  2.166667e-01\n3421  1.866667e+00\n3422 -6.308333e+00\n3423  9.583333e-01\n3424  8.125000e+00\n3425 -5.325000e+00\n3426  3.125000e+00\n3427 -1.053333e+01\n3428 -6.641667e+00\n3429 -2.074167e+01\n3430 -1.010000e+01\n3431  7.350000e+00\n3432  1.203333e+01\n3433  3.933333e+00\n3434 -2.975000e+00\n3435  7.616667e+00\n3436 -1.860000e+01\n3437 -4.841667e+00\n3438  1.617500e+01\n3439 -3.250000e+00\n3440  8.675000e+00\n3441 -2.537500e+01\n3442  1.341667e+00\n3443 -8.316667e+00\n3444  9.900000e+00\n3445 -2.026667e+01\n3446  8.250000e-01\n3447 -6.641667e+00\n3448 -6.766667e+00\n3449 -1.884167e+01\n3450  3.141667e+00\n3451 -1.191667e+00\n3452 -2.975000e+00\n3453  1.426667e+01\n3454  1.596667e+01\n3455  9.633333e+00\n3456 -9.416667e+00\n3457 -6.833333e-01\n3458  7.325000e+00\n3459  4.083333e+00\n3460 -4.816667e+00\n3461 -1.180000e+01\n3462  7.416667e-01\n3463 -1.039167e+01\n3464 -1.058333e+01\n3465  3.483333e+00\n3466  7.833333e-01\n3467  1.333333e+00\n3468 -7.491667e+00\n3469 -2.825000e+00\n3470 -1.895833e+01\n3471  5.233333e+00\n3472  2.225000e+00\n3473  1.420833e+01\n3474 -3.591667e+00\n3475 -5.166667e-01\n3476 -9.833333e+00\n3477 -2.183333e+00\n3478  1.543333e+01\n3479 -8.266667e+00\n3480  9.491667e+00\n3481 -1.665000e+01\n3482 -1.415000e+01\n3483  1.092500e+01\n3484 -1.166667e-01\n3485 -2.481667e+01\n3486 -1.305833e+01\n3487 -8.933333e+00\n3488  1.136667e+01\n3489 -1.593333e+01\n3490  7.091667e+00\n3491 -1.242500e+01\n3492  9.050000e+00\n3493  4.675000e+00\n3494  6.533333e+00\n3495 -3.791667e+00\n3496  6.991667e+00\n3497 -3.733333e+00\n3498  1.927500e+01\n3499  1.426667e+01\n3500 -1.836667e+01\n3501  1.567500e+01\n3502 -1.686667e+01\n3503  5.066667e+00\n3504  1.275833e+01\n3505  1.174167e+01\n3506 -6.375000e+00\n3507  7.583333e-01\n3508 -9.916667e+00\n3509  1.750000e-01\n3510  2.246667e+01\n3511 -8.375000e+00\n3512 -2.133333e+01\n3513 -3.333333e-02\n3514  8.241667e+00\n3515 -1.808333e+00\n3516 -3.666667e-01\n3517  8.950000e+00\n3518 -9.025000e+00\n3519  3.716667e+00\n3520  8.691667e+00\n3521  4.250000e-01\n3522 -2.115833e+01\n3523  1.180000e+01\n3524 -2.008333e+00\n3525  1.796667e+01\n3526  7.166667e-01\n3527 -1.052500e+01\n3528  9.416667e-01\n3529  1.383333e+00\n3530  2.025000e+01\n3531  5.550000e+00\n3532 -5.550000e+00\n3533  2.121667e+01\n3534 -6.783333e+00\n3535 -7.066667e+00\n3536  6.791667e+00\n3537 -1.910000e+01\n3538  1.110000e+01\n3539 -9.433333e+00\n3540 -4.816667e+00\n3541 -1.510833e+01\n3542 -1.318333e+01\n3543  1.268333e+01\n3544 -2.966667e+00\n3545  3.941667e+00\n3546 -6.833333e-01\n3547 -6.575000e+00\n3548 -1.460000e+01\n3549  1.045833e+01\n3550  1.227500e+01\n3551 -5.150000e+00\n3552 -3.808333e+00\n3553  4.833333e-01\n3554 -9.050000e+00\n3555 -5.691667e+00\n3556 -1.910000e+01\n3557 -4.900000e+00\n3558 -1.441667e+00\n3559  3.991667e+00\n3560 -9.558333e+00\n3561  6.175000e+00\n3562  6.583333e+00\n3563 -8.258333e+00\n3564  4.500000e-01\n3565 -7.100000e+00\n3566  8.966667e+00\n3567 -1.599167e+01\n3568 -2.566667e+00\n3569 -5.033333e+00\n3570 -1.125833e+01\n3571  1.597500e+01\n3572  6.541667e+00\n3573 -2.529167e+01\n3574 -5.091667e+00\n3575 -6.791667e+00\n3576 -1.066667e+01\n3577  7.166667e-01\n3578 -7.300000e+00\n3579 -1.615000e+01\n3580 -2.000000e-01\n3581 -1.440000e+01\n3582 -7.016667e+00\n3583 -1.065833e+01\n3584 -1.666667e+00\n3585  3.850000e+00\n3586  9.916667e+00\n3587  7.916667e-01\n3588  1.379167e+01\n3589 -1.906667e+01\n3590 -1.482500e+01\n3591  1.725000e+00\n3592  4.591667e+00\n3593 -1.385833e+01\n3594  5.816667e+00\n3595  5.200000e+00\n3596  1.373333e+01\n3597  1.166667e-01\n3598 -2.833333e-01\n3599  7.816667e+00\n3600  1.800000e+00\n3601 -2.025000e+00\n3602 -5.825000e+00\n3603 -8.000000e+00\n3604 -1.557500e+01\n3605 -1.840000e+01\n3606  6.441667e+00\n3607 -9.416667e-01\n3608  4.091667e+00\n3609  6.875000e+00\n3610  1.708333e+00\n3611 -2.877500e+01\n3612 -7.125000e+00\n3613  1.065833e+01\n3614  1.247500e+01\n3615  2.358333e+00\n3616 -6.383333e+00\n3617 -2.000833e+01\n3618  8.400000e+00\n3619 -1.195000e+01\n3620  1.550000e+00\n3621  2.708333e+00\n3622 -2.025000e+00\n3623 -1.289167e+01\n3624 -2.575000e+00\n3625  1.041667e+01\n3626 -1.496667e+01\n3627  6.916667e-01\n3628  3.666667e-01\n3629 -5.008333e+00\n3630  7.900000e+00\n3631  3.625000e+00\n3632 -1.576667e+01\n3633 -2.130000e+01\n3634 -1.135833e+01\n3635 -5.350000e+00\n3636  3.625000e+00\n3637 -1.416667e-01\n3638 -1.174167e+01\n3639 -4.408333e+00\n3640  2.433333e+00\n3641 -2.005000e+01\n3642 -2.645833e+01\n3643  5.750000e+00\n3644  8.666667e+00\n3645  2.210000e+01\n3646  2.044167e+01\n3647  1.796667e+01\n3648 -4.500000e-01\n3649 -1.533333e+00\n3650  5.333333e+00\n3651  1.365833e+01\n3652  1.775000e+01\n3653  1.440833e+01\n3654 -3.141667e+00\n3655 -7.350000e+00\n3656 -9.050000e+00\n3657  1.440833e+01\n3658 -5.758333e+00\n3659  2.183333e+00\n3660  9.658333e+00\n3661 -4.250000e-01\n3662  2.966667e+00\n3663  4.716667e+00\n3664  3.333333e+00\n3665 -2.877500e+01\n3666 -4.416667e+00\n3667 -1.854167e+01\n3668 -6.416667e-01\n3669 -1.333333e+00\n3670 -1.590833e+01\n3671  4.166667e+00\n3672  5.208333e+00\n3673 -8.325000e+00\n3674 -8.200000e+00\n3675 -2.012500e+01\n3676  5.750000e+00\n3677 -2.916667e-01\n3678  7.500000e-01\n3679  5.966667e+00\n3680 -9.583333e+00\n3681 -5.125000e+00\n3682 -5.091667e+00\n3683  1.755000e+01\n3684 -9.858333e+00\n3685 -5.150000e+00\n3686 -9.975000e+00\n3687  1.290833e+01\n3688 -4.216667e+00\n3689 -3.425000e+00\n3690 -7.158333e+00\n3691 -1.483333e+00\n3692  2.255833e+01\n3693  4.041667e+00\n3694 -1.283333e+01\n3695  5.375000e+00\n3696 -3.450000e+00\n3697 -4.866667e+00\n3698 -9.858333e+00\n3699 -1.265000e+01\n3700  8.325000e+00\n3701 -1.063333e+01\n3702 -1.990000e+01\n3703  1.217500e+01\n3704  3.450000e+00\n3705 -2.658333e+00\n3706 -4.850000e+00\n3707  1.503333e+01\n3708  1.808333e+01\n3709 -5.900000e+00\n3710  7.666667e-01\n3711  1.602500e+01\n3712 -4.183333e+00\n3713 -3.933333e+00\n3714  7.241667e+00\n3715  6.983333e+00\n3716 -2.000000e+00\n3717 -7.750000e-01\n3718  7.050000e+00\n3719 -3.750000e-01\n3720 -9.383333e+00\n3721 -1.123333e+01\n3722  1.465000e+01\n3723  1.257500e+01\n3724 -3.133333e+00\n3725 -5.825000e+00\n3726  5.275000e+00\n3727 -1.086667e+01\n3728 -7.325000e+00\n3729  8.616667e+00\n3730 -4.366667e+00\n3731  1.055000e+01\n3732 -6.708333e+00\n3733  8.958333e+00\n3734  1.557500e+01\n3735  2.030000e+01\n3736 -1.013333e+01\n3737 -2.825000e+00\n3738 -4.150000e+00\n3739 -1.150000e+01\n3740 -1.608333e+00\n3741  3.425000e+00\n3742 -3.133333e+00\n3743 -1.990000e+01\n3744  1.186667e+01\n3745  8.183333e+00\n3746 -2.266667e+00\n3747 -1.927500e+01\n3748  5.258333e+00\n3749  3.366667e+00\n3750  1.980833e+01\n3751 -6.966667e+00\n3752  8.400000e+00\n3753  4.858333e+00\n3754  1.543333e+01\n3755  2.708333e+00\n3756  2.475000e+00\n3757 -1.858333e+00\n3758  6.575000e+00\n3759 -4.550000e+00\n3760  5.216667e+00\n3761 -2.065833e+01\n3762 -2.246667e+01\n3763  4.008333e+00\n3764 -1.110000e+01\n3765  8.716667e+00\n3766 -5.191667e+00\n3767 -1.115833e+01\n3768  6.466667e+00\n3769  3.333333e-02\n3770  7.125000e+00\n3771 -6.375000e+00\n3772 -1.275833e+01\n3773  1.385833e+01\n3774 -1.630833e+01\n3775  3.841667e+00\n3776  2.350000e+00\n3777 -3.116667e+00\n3778  5.416667e+00\n3779 -2.425000e+00\n3780 -4.983333e+00\n3781 -3.025000e+00\n3782  2.060000e+01\n3783 -1.268333e+01\n3784 -8.916667e-01\n3785 -1.755000e+01\n3786  2.375000e+00\n3787 -9.300000e+00\n3788  8.916667e-01\n3789  1.360000e+01\n3790  5.875000e+00\n3791 -1.084167e+01\n3792 -7.233333e+00\n3793  1.984167e+01\n3794 -1.516667e+01\n3795 -9.275000e+00\n3796 -6.791667e+00\n3797 -7.750000e-01\n3798 -5.383333e+00\n3799  7.866667e+00\n3800  1.594167e+01\n3801 -9.800000e+00\n3802 -1.445000e+01\n3803  4.841667e+00\n3804  3.041667e+00\n3805 -3.191667e+00\n3806 -2.008333e+00\n3807 -1.904167e+01\n3808  1.878333e+01\n3809 -1.918333e+01\n3810  5.250000e-01\n3811 -1.323333e+01\n3812  9.583333e-01\n3813 -6.233333e+00\n3814 -1.426667e+01\n3815  8.333333e-03\n3816 -1.822500e+01\n3817  3.791667e+00\n3818  3.000000e+00\n3819  2.044167e+01\n3820  3.275000e+00\n3821 -2.218333e+01\n3822 -8.325000e+00\n3823 -2.358333e+00\n3824  6.791667e+00\n3825  3.908333e+00\n3826 -8.000000e-01\n3827 -5.841667e+00\n3828  1.836667e+01\n3829  1.160000e+01\n3830  5.175000e+00\n3831 -1.658333e+00\n3832  1.108333e+00\n3833  8.108333e+00\n3834  5.408333e+00\n3835  9.366667e+00\n3836  5.966667e+00\n3837  9.875000e+00\n3838  3.791667e+00\n3839  5.708333e+00\n3840  2.133333e+01\n3841  6.050000e+00\n3842 -4.358333e+00\n3843  1.255833e+01\n3844 -1.130000e+01\n3845  3.166667e+00\n3846  2.408333e+00\n3847 -7.750000e-01\n3848 -1.060833e+01\n3849  3.333333e-01\n3850 -3.575000e+00\n3851  2.000833e+01\n3852 -9.158333e+00\n3853 -6.083333e-01\n3854 -5.833333e-02\n3855  7.350000e+00\n3856  1.611667e+01\n3857  7.166667e-01\n3858  5.266667e+00\n3859 -7.166667e-01\n3860 -1.304167e+01\n3861  3.666667e-01\n3862  1.704167e+01\n3863  1.856667e+01\n3864 -1.860000e+01\n3865  3.741667e+00\n3866 -2.433333e+00\n3867 -1.560833e+01\n3868 -3.200000e+00\n3869  4.066667e+00\n3870 -2.025000e+01\n3871  4.083333e+00\n3872 -7.408333e+00\n3873 -5.666667e-01\n3874 -1.337500e+01\n3875 -7.833333e-01\n3876  1.613333e+01\n3877 -1.296667e+01\n3878 -5.150000e+00\n3879  2.869167e+01\n3880  2.176667e+01\n3881 -5.416667e-01\n3882 -8.041667e+00\n3883  7.275000e+00\n3884 -5.041667e+00\n3885 -3.625000e+00\n3886 -4.650000e+00\n3887  6.575000e+00\n3888  7.241667e+00\n3889 -4.791667e+00\n3890 -8.458333e+00\n3891  2.116667e+00\n3892 -4.925000e+00\n3893 -1.450000e+00\n3894 -2.877500e+01\n3895  2.758333e+00\n3896 -7.758333e+00\n3897 -4.475000e+00\n3898  8.433333e+00\n3899  7.258333e+00\n3900 -6.875000e+00\n3901 -8.158333e+00\n3902  5.916667e-01\n3903 -1.220833e+01\n3904  7.900000e+00\n3905 -7.841667e+00\n3906  5.625000e+00\n3907  1.573333e+01\n3908 -8.933333e+00\n3909 -1.308333e+00\n3910  6.666667e-02\n3911 -1.583333e-01\n3912  1.025000e+01\n3913  1.171667e+01\n3914  2.204167e+01\n3915  4.383333e+00\n3916  9.166667e-02\n3917  9.416667e-01\n3918 -8.816667e+00\n3919  2.616667e+00\n3920  7.675000e+00\n3921  2.537500e+01\n3922  1.658333e+00\n3923  8.608333e+00\n3924 -4.300000e+00\n3925  3.641667e+00\n3926  2.141667e+01\n3927 -1.672500e+01\n3928 -4.358333e+00\n3929  7.666667e+00\n3930 -1.052500e+01\n3931 -2.116667e+00\n3932  1.200833e+01\n3933  6.108333e+00\n3934 -1.166667e-01\n3935  7.500000e-01\n3936 -6.441667e+00\n3937 -1.675000e+00\n3938 -1.060000e+01\n3939  5.150000e+00\n3940  6.108333e+00\n3941 -1.984167e+01\n3942 -1.476667e+01\n3943  8.008333e+00\n3944 -2.916667e-01\n3945  8.058333e+00\n3946  4.675000e+00\n3947  6.908333e+00\n3948 -6.583333e+00\n3949 -5.275000e+00\n3950 -3.325000e+00\n3951 -1.845833e+01\n3952 -3.758333e+00\n3953  8.800000e+00\n3954  8.258333e+00\n3955 -2.100000e+01\n3956  1.298333e+01\n3957  2.470000e+01\n3958 -2.775000e+00\n3959 -7.500000e+00\n3960  1.045833e+01\n3961 -2.425000e+00\n3962  7.100000e+00\n3963 -8.575000e+00\n3964 -1.323333e+01\n3965 -3.425000e+00\n3966  5.150000e+00\n3967  6.383333e+00\n3968 -5.416667e+00\n3969 -1.100833e+01\n3970 -1.133333e+01\n3971 -1.191667e+00\n3972  3.666667e-01\n3973 -4.675000e+00\n3974  1.209167e+01\n3975 -3.741667e+00\n3976 -1.095000e+01\n3977  1.895833e+01\n3978 -3.858333e+00\n3979 -1.822500e+01\n3980  1.603333e+01\n3981 -5.200000e+00\n3982  1.666667e+00\n3983  3.908333e+00\n3984 -6.908333e+00\n3985  9.716667e+00\n3986 -1.277500e+01\n3987  1.220833e+01\n3988 -3.808333e+00\n3989 -8.416667e-01\n3990 -2.500000e-02\n3991  1.262500e+01\n3992 -3.141667e+00\n3993 -8.250000e+00\n3994 -1.215000e+01\n3995 -8.983333e+00\n3996  7.058333e+00\n3997 -3.566667e+00\n3998 -7.100000e+00\n3999  2.508333e+00\n4000  2.643333e+01\n4001  7.141667e+00\n4002  7.566667e+00\n4003  1.217500e+01\n4004 -1.913333e+01\n4005 -5.900000e+00\n4006  5.316667e+00\n4007  1.100000e+00\n4008  1.795833e+01\n4009  2.083333e+00\n4010 -3.841667e+00\n4011  6.250000e-01\n4012 -3.750000e+00\n4013  3.166667e-01\n4014 -6.991667e+00\n4015  9.900000e+00\n4016 -4.708333e+00\n4017  7.083333e+00\n4018 -7.666667e-01\n4019  6.583333e+00\n4020  5.816667e+00\n4021 -8.716667e+00\n4022 -7.675000e+00\n4023 -1.216667e+00\n4024  1.166667e-01\n4025  5.825000e+00\n4026 -1.364167e+01\n4027 -1.165833e+01\n4028  5.583333e+00\n4029  1.075000e+00\n4030 -1.165833e+01\n4031 -1.406667e+01\n4032 -3.616667e+00\n4033 -1.045000e+01\n4034  5.816667e+00\n4035  5.475000e+00\n4036 -6.908333e+00\n4037  1.579167e+01\n4038  8.250000e-01\n4039 -1.095833e+01\n4040  8.941667e+00\n4041  8.075000e+00\n4042  4.908333e+00\n4043 -8.400000e+00\n4044  1.300000e+00\n4045  2.075000e+00\n4046  1.833333e+00\n4047  1.686667e+01\n4048 -1.207500e+01\n4049 -3.475000e+00\n4050  7.500000e+00\n4051 -1.933333e+01\n4052 -2.775000e+00\n4053 -1.435000e+01\n4054 -1.242500e+01\n4055 -2.708333e+00\n4056 -5.933333e+00\n4057  1.115833e+01\n4058 -3.258333e+00\n4059 -3.975000e+00\n4060  5.275000e+00\n4061 -1.128333e+01\n4062 -3.616667e+00\n4063  7.916667e-01\n4064 -1.787500e+01\n4065 -4.716667e+00\n4066 -4.408333e+00\n4067  6.983333e+00\n4068  1.615000e+01\n4069  3.925000e+00\n4070 -1.345833e+01\n4071 -7.641667e+00\n4072  3.383333e+00\n4073  2.283333e+00\n4074  7.566667e+00\n4075 -7.166667e-01\n4076 -3.816667e+00\n4077  9.625000e+00\n4078  1.318333e+01\n4079  1.615000e+01\n4080  4.133333e+00\n4081  1.658333e+01\n4082 -1.025000e+01\n4083 -5.616667e+00\n4084  1.189167e+01\n4085 -8.833333e-01\n4086 -2.000000e+00\n4087 -8.491667e+00\n4088 -9.833333e-01\n4089 -1.915833e+01\n4090  8.491667e+00\n4091  1.403333e+01\n4092 -1.822500e+01\n4093  9.275000e+00\n4094  9.541667e+00\n4095 -9.083333e+00\n4096  5.391667e+00\n4097  5.550000e+00\n4098 -6.175000e+00\n4099  7.966667e+00\n4100  1.291667e+01\n4101 -5.325000e+00\n4102 -5.683333e+00\n4103  1.045833e+01\n4104  2.467500e+01\n4105  1.760833e+01\n4106  7.166667e-01\n4107 -4.066667e+00\n4108  3.991667e+00\n4109  1.019167e+01\n4110  3.050000e+00\n4111 -8.375000e+00\n4112  1.084167e+01\n4113  4.850000e+00\n4114 -9.783333e+00\n4115 -9.833333e+00\n4116 -7.441667e+00\n4117  1.500000e+01\n4118 -4.250000e-01\n4119  8.875000e+00\n4120  3.325000e+00\n4121 -1.594167e+01\n4122 -8.666667e+00\n4123 -4.216667e+00\n4124 -4.166667e+00\n4125  1.275833e+01\n4126 -4.858333e+00\n4127  1.751667e+01\n4128  1.520000e+01\n4129 -1.255833e+01\n4130  1.065833e+01\n4131  1.666667e+00\n4132 -1.441667e+01\n4133  1.060000e+01\n4134 -8.691667e+00\n4135 -4.300000e+00\n4136  3.908333e+00\n4137  1.550000e+00\n4138  9.341667e+00\n4139  1.089167e+01\n4140  1.010000e+01\n4141  9.641667e+00\n4142  1.990000e+01\n4143 -2.116667e+00\n4144  5.258333e+00\n4145  2.683333e+00\n4146 -8.866667e+00\n4147 -4.383333e+00\n4148  1.597500e+01\n4149 -3.158333e+00\n4150  1.590833e+01\n4151 -1.581667e+01\n4152  1.061667e+01\n4153  5.991667e+00\n4154  5.525000e+00\n4155  1.698333e+01\n4156  8.333333e-01\n4157  1.500000e-01\n4158  2.883333e+00\n4159 -2.127500e+01\n4160 -1.394167e+01\n4161  1.814167e+01\n4162  7.350000e+00\n4163 -1.474167e+01\n4164 -6.025000e+00\n4165 -1.731667e+01\n4166  1.441667e+00\n4167 -2.708333e+00\n4168  1.037500e+01\n4169 -5.083333e-01\n4170 -5.358333e+00\n4171  3.541667e+00\n4172  4.500000e-01\n4173  2.085833e+01\n4174 -1.391667e+01\n4175 -9.708333e+00\n4176 -9.716667e+00\n4177 -6.441667e+00\n4178 -2.566667e+00\n4179 -6.475000e+00\n4180  5.033333e+00\n4181  2.481667e+01\n4182  1.704167e+01\n4183 -9.583333e+00\n4184 -2.058333e+00\n4185 -8.916667e-01\n4186  6.908333e+00\n4187 -2.026667e+01\n4188 -2.147500e+01\n4189 -3.425000e+00\n4190 -5.441667e+00\n4191 -1.941667e+00\n4192  5.416667e-01\n4193  2.025000e+01\n4194  1.691667e+00\n4195 -9.383333e+00\n4196 -1.254167e+01\n4197 -1.201667e+01\n4198 -1.191667e+00\n4199  6.125000e+00\n4200 -3.966667e+00\n4201  5.475000e+00\n4202 -3.816667e+00\n4203 -1.725000e+00\n4204  1.808333e+00\n4205 -1.162500e+01\n4206 -4.500000e-01\n4207  6.791667e+00\n4208  5.583333e-01\n4209 -5.491667e+00\n4210  3.266667e+00\n4211  3.200000e+00\n4212 -1.801667e+01\n4213 -2.127500e+01\n4214  6.075000e+00\n4215  9.833333e-01\n4216 -3.200000e+00\n4217  5.341667e+00\n4218  4.708333e+00\n4219 -1.800000e+00\n4220  1.200833e+01\n4221  1.019167e+01\n4222 -2.225000e+00\n4223 -1.531667e+01\n4224 -4.216667e+00\n4225  1.051667e+01\n4226  6.600000e+00\n4227 -7.150000e+00\n4228 -1.883333e+00\n4229  3.166667e-01\n4230 -4.708333e+00\n4231  4.100000e+00\n4232 -2.216667e+00\n4233 -1.139167e+01\n4234  1.616667e+01\n4235  8.733333e+00\n4236 -1.274167e+01\n4237  8.550000e+00\n4238  1.271667e+01\n4239 -1.557500e+01\n4240 -5.408333e+00\n4241 -4.100000e+00\n4242  1.206667e+01\n4243 -1.690000e+01\n4244 -2.516667e+00\n4245  2.425833e+01\n4246 -1.383333e+00\n4247 -1.397500e+01\n4248  2.224167e+01\n4249 -7.166667e-01\n4250  2.267500e+01\n4251  7.958333e+00\n4252  1.373333e+01\n4253 -9.166667e-01\n4254  8.666667e+00\n4255 -6.525000e+00\n4256  1.116667e+00\n4257 -8.191667e+00\n4258 -7.550000e+00\n4259 -7.408333e+00\n4260 -3.050000e+00\n4261 -3.758333e+00\n4262 -4.358333e+00\n4263  1.200833e+01\n4264  2.121667e+01\n4265  1.912500e+01\n4266  1.600000e+00\n4267 -1.445000e+01\n4268 -4.500000e+00\n4269  1.083333e+00\n4270 -1.924167e+01\n4271 -3.600000e+00\n4272 -7.933333e+00\n4273 -1.025000e+01\n4274 -8.666667e+00\n4275 -1.047500e+01\n4276  2.225000e+00\n4277  6.708333e+00\n4278  6.158333e+00\n4279  5.150000e+00\n4280 -7.241667e+00\n4281  5.766667e+00\n4282  5.508333e+00\n4283 -1.836667e+01\n4284 -1.107500e+01\n4285 -6.541667e+00\n4286 -9.216667e+00\n4287 -1.476667e+01\n4288  1.907500e+01\n4289  2.883333e+00\n4290 -6.541667e+00\n4291  2.500000e-02\n4292 -9.083333e+00\n4293 -1.148333e+01\n4294 -1.166667e-01\n4295 -1.906667e+01\n4296 -1.060833e+01\n4297  1.615000e+01\n4298 -7.841667e+00\n4299  3.216667e+00\n4300 -3.183333e+00\n4301  3.075000e+00\n4302  9.416667e+00\n4303  2.019167e+01\n4304  7.641667e+00\n4305  5.266667e+00\n4306  1.578333e+01\n4307 -3.400000e+00\n4308  6.400000e+00\n4309 -3.225000e+00\n4310  1.840000e+01\n4311  1.898333e+01\n4312 -5.008333e+00\n4313 -5.566667e+00\n4314 -1.391667e+01\n4315 -1.057500e+01\n4316  1.666667e+00\n4317 -6.850000e+00\n4318  1.308333e+01\n4319  9.575000e+00\n4320 -2.467500e+01\n4321  1.311667e+01\n4322  1.055000e+01\n4323  3.591667e+00\n4324 -3.250000e+00\n4325 -2.983333e+00\n4326 -8.691667e+00\n4327  6.050000e+00\n4328 -7.583333e-01\n4329  6.383333e+00\n4330  5.041667e+00\n4331 -8.191667e+00\n4332  6.791667e+00\n4333  9.291667e+00\n4334 -1.692500e+01\n4335  4.183333e+00\n4336 -8.400000e+00\n4337  6.450000e+00\n4338  3.083333e+00\n4339 -1.514167e+01\n4340  2.416667e+00\n4341 -1.135833e+01\n4342 -1.514167e+01\n4343  7.025000e+00\n4344 -1.211667e+01\n4345 -8.716667e+00\n4346  1.142500e+01\n4347  1.200000e+00\n4348 -1.027500e+01\n4349  5.850000e+00\n4350  5.341667e+00\n4351 -8.866667e+00\n4352  3.450000e+00\n4353 -1.133333e+01\n4354  1.250833e+01\n4355 -5.000000e-02\n4356 -1.691667e+00\n4357 -2.633333e+00\n4358 -3.841667e+00\n4359  1.775000e+01\n4360  7.900000e+00\n4361  1.128333e+01\n4362  1.775000e+00\n4363  1.128333e+01\n4364 -1.599167e+01\n4365  7.166667e-01\n4366 -7.958333e+00\n4367 -7.141667e+00\n4368 -5.625000e+00\n4369  1.502500e+01\n4370 -1.037500e+01\n4371 -7.441667e+00\n4372  2.000000e-01\n4373  1.227500e+01\n4374  2.566667e+00\n4375  1.608333e+00\n4376 -8.633333e+00\n4377 -1.066667e+01\n4378 -9.716667e+00\n4379  3.458333e+00\n4380  2.026667e+01\n4381  1.913333e+01\n4382  1.209167e+01\n4383  1.440000e+01\n4384  7.041667e+00\n4385 -2.266667e+00\n4386 -5.583333e+00\n4387  1.924167e+01\n4388 -3.533333e+00\n4389  2.100000e+01\n4390 -1.998333e+01\n4391  2.091667e+00\n4392 -1.294167e+01\n4393  5.458333e+00\n4394  2.966667e+00\n4395  2.032500e+01\n4396 -2.147500e+01\n4397 -3.450000e+00\n4398  8.783333e+00\n4399  2.166667e-01\n4400 -7.816667e+00\n4401 -3.925000e+00\n4402 -1.351667e+01\n4403 -7.466667e+00\n4404 -2.241667e+01\n4405 -7.183333e+00\n4406 -1.220833e+01\n4407 -9.366667e+00\n4408 -1.733333e+00\n4409  8.816667e+00\n4410 -4.591667e+00\n4411 -1.041667e+01\n4412 -1.395000e+01\n4413 -1.549167e+01\n4414  1.403333e+01\n4415 -1.133333e+01\n4416  2.012500e+01\n4417  8.750000e+00\n4418 -1.625000e+00\n4419  1.142500e+01\n4420 -6.158333e+00\n4421  1.927500e+01\n4422  6.183333e+00\n4423  4.091667e+00\n4424 -3.258333e+00\n4425  1.605000e+01\n4426  9.833333e-01\n4427  9.083333e-01\n4428 -6.558333e+00\n4429 -1.250000e+00\n4430  5.808333e+00\n4431  3.333333e+00\n4432 -8.550000e+00\n4433  3.483333e+00\n4434 -1.025833e+01\n4435  3.200000e+00\n4436  3.250000e+00\n4437  1.766667e+01\n4438 -1.514167e+01\n4439  2.916667e+00\n4440  3.200000e+00\n4441 -3.591667e+00\n4442  2.224167e+01\n4443  7.125000e+00\n4444  9.416667e-01\n4445  1.599167e+01\n4446 -6.475000e+00\n4447  1.514167e+01\n4448  5.416667e-01\n4449 -1.180000e+01\n4450 -1.283333e+01\n4451  1.984167e+01\n4452  6.458333e+00\n4453 -4.616667e+00\n4454 -1.281667e+01\n4455  3.866667e+00\n4456  1.248333e+01\n4457 -1.195000e+01\n4458  2.252500e+01\n4459 -2.166667e+00\n4460 -3.825000e+00\n4461 -1.503333e+01\n4462 -7.500000e-01\n4463 -4.791667e+00\n4464 -5.766667e+00\n4465  7.950000e+00\n4466 -1.907500e+01\n4467 -3.675000e+00\n4468 -1.080833e+01\n4469  1.440833e+01\n4470  7.466667e+00\n4471  5.841667e+00\n4472  1.083333e+00\n4473 -8.100000e+00\n4474 -6.100000e+00\n4475 -1.939167e+01\n4476  3.800000e+00\n4477  9.083333e+00\n4478  5.458333e+00\n4479  1.013333e+01\n4480 -2.080000e+01\n4481 -6.991667e+00\n4482 -1.525833e+01\n4483  3.991667e+00\n4484  2.025000e+01\n4485  1.567500e+01\n4486 -2.916667e+00\n4487 -4.533333e+00\n4488  6.500000e+00\n4489 -1.333333e-01\n4490 -4.300000e+00\n4491 -5.000000e+00\n4492  9.400000e+00\n4493 -6.850000e+00\n4494 -2.750000e-01\n4495  1.517500e+01\n4496 -2.250000e-01\n4497 -1.525833e+01\n4498 -1.027500e+01\n4499 -1.953333e+01\n4500 -2.500000e-02\n4501  1.441667e+01\n4502  1.013333e+01\n4503 -1.165833e+01\n4504 -1.468333e+01\n4505  2.766667e+00\n4506  1.514167e+01\n4507  3.391667e+00\n4508 -3.391667e+00\n4509  1.616667e+01\n4510  8.125000e+00\n4511 -1.660833e+01\n4512  2.600000e+00\n4513 -8.666667e+00\n4514 -1.503333e+01\n4515  7.425000e+00\n4516  1.858333e+00\n4517 -1.253333e+01\n4518 -3.425000e+00\n4519 -1.174167e+01\n4520 -1.163333e+01\n4521  5.291667e+00\n4522  4.008333e+00\n4523 -7.025000e+00\n4524  1.296667e+01\n4525 -2.083333e+00\n4526 -1.602500e+01\n4527 -4.750000e-01\n4528 -4.508333e+00\n4529 -1.165833e+01\n4530  2.833333e+00\n4531 -3.483333e+00\n4532  9.783333e+00\n4533 -6.125000e+00\n4534 -7.900000e+00\n4535  1.500000e+00\n4536  4.075000e+00\n4537  1.684167e+01\n4538  1.375000e+00\n4539 -9.250000e-01\n4540  1.163333e+01\n4541 -2.408333e+00\n4542  3.783333e+00\n4543  8.500000e-01\n4544 -8.608333e+00\n4545 -5.900000e+00\n4546 -6.108333e+00\n4547  1.445000e+01\n4548  6.791667e+00\n4549  1.171667e+01\n4550 -5.208333e+00\n4551 -1.924167e+01\n4552  5.650000e+00\n4553 -3.616667e+00\n4554  1.027500e+01\n4555  2.141667e+01\n4556  2.156667e+01\n4557  1.066667e+01\n4558 -2.000000e-01\n4559  1.830833e+01\n4560 -9.558333e+00\n4561 -5.441667e+00\n4562 -9.683333e+00\n4563 -6.650000e+00\n4564 -1.051667e+01\n4565 -1.898333e+01\n4566 -7.000000e+00\n4567  9.925000e+00\n4568 -5.583333e-01\n4569  1.333333e-01\n4570 -1.359167e+01\n4571  2.625000e+00\n4572  8.666667e+00\n4573 -9.666667e-01\n4574 -1.233333e+00\n4575 -2.135833e+01\n4576 -1.793333e+01\n4577 -2.255833e+01\n4578 -1.975000e+00\n4579  3.241667e+00\n4580 -5.291667e+00\n4581 -7.666667e-01\n4582  7.325000e+00\n4583 -3.250000e+00\n4584 -1.175000e+00\n4585  1.166667e-01\n4586  1.248333e+01\n4587 -5.766667e+00\n4588 -3.033333e+00\n4589  1.400833e+01\n4590  2.025000e+01\n4591 -7.666667e-01\n4592  5.766667e+00\n4593  4.816667e+00\n4594  5.008333e+00\n4595 -4.250000e-01\n4596 -2.320000e+01\n4597 -1.483333e+00\n4598  6.450000e+00\n4599  3.158333e+00\n4600 -8.333333e-02\n4601  8.875000e+00\n4602  4.791667e+00\n4603  8.325000e+00\n4604  1.983333e+00\n4605  8.316667e+00\n4606  9.983333e+00\n4607  1.587500e+01\n4608 -1.508333e+01\n4609  6.825000e+00\n4610 -4.233333e+00\n4611 -3.683333e+00\n4612  9.191667e+00\n4613  1.810833e+01\n4614 -9.083333e+00\n4615  6.616667e+00\n4616 -5.825000e+00\n4617 -6.783333e+00\n4618 -5.683333e+00\n4619  8.041667e+00\n4620 -1.610833e+01\n4621 -2.264167e+01\n4622 -1.395000e+01\n4623  2.633333e+00\n4624  1.617500e+01\n4625  3.158333e+00\n4626 -5.408333e+00\n4627  1.435000e+01\n4628  4.000000e-01\n4629 -9.800000e+00\n4630 -9.083333e-01\n4631 -4.750000e-01\n4632 -6.591667e+00\n4633  6.016667e+00\n4634 -1.367500e+01\n4635 -1.441667e+00\n4636 -6.425000e+00\n4637 -2.966667e+00\n4638 -7.166667e-01\n4639  1.108333e+00\n4640  2.026667e+01\n4641  9.500000e+00\n4642  5.566667e+00\n4643 -5.533333e+00\n4644 -1.393333e+01\n4645  6.816667e+00\n4646 -3.908333e+00\n4647 -1.570000e+01\n4648 -2.633333e+00\n4649 -1.854167e+01\n4650 -2.508333e+00\n4651 -6.575000e+00\n4652  3.541667e+00\n4653  4.091667e+00\n4654  1.781667e+01\n4655 -9.083333e+00\n4656 -4.616667e+00\n4657 -7.900000e+00\n4658 -2.425000e+00\n4659 -3.483333e+00\n4660  1.145833e+01\n4661 -3.116667e+00\n4662 -7.608333e+00\n4663 -4.000000e-01\n4664 -6.416667e-01\n4665  1.033333e+01\n4666  8.800000e+00\n4667 -8.633333e+00\n4668 -3.900000e+00\n4669 -1.333333e-01\n4670  1.166667e-01\n4671  2.416667e+00\n4672 -1.751667e+01\n4673  2.975000e+00\n4674 -1.128333e+01\n4675 -2.741667e+00\n4676  9.716667e+00\n4677 -5.691667e+00\n4678 -1.069167e+01\n4679  8.141667e+00\n4680  3.391667e+00\n4681 -1.011667e+01\n4682 -1.125000e+00\n4683 -6.466667e+00\n4684  2.425000e+00\n4685 -6.250000e-01\n4686  1.387500e+01\n4687  4.975000e+00\n4688  2.833333e+00\n4689 -9.416667e+00\n4690  1.725000e+00\n4691  7.500000e-01\n4692 -8.375000e+00\n4693  2.683333e+00\n4694 -9.541667e+00\n4695 -7.700000e+00\n4696 -1.105833e+01\n4697 -4.500000e-01\n4698 -1.617500e+01\n4699  6.333333e-01\n4700 -7.500000e+00\n4701  6.791667e+00\n4702  4.675000e+00\n4703 -1.383333e+00\n4704 -4.116667e+00\n4705 -9.016667e+00\n4706  4.641667e+00\n4707  1.215833e+01\n4708  4.841667e+00\n4709 -6.675000e+00\n4710 -1.866667e+00\n4711  5.266667e+00\n4712 -1.585000e+01\n4713  7.525000e+00\n4714  2.333333e-01\n4715 -1.289167e+01\n4716 -1.098333e+01\n4717  9.975000e+00\n4718  5.625000e+00\n4719 -1.665000e+01\n4720  1.807500e+01\n4721  1.611667e+01\n4722  1.039167e+01\n4723 -3.333333e-02\n4724 -1.600000e+00\n4725  5.000000e+00\n4726  1.275833e+01\n4727 -2.566667e+00\n4728  4.858333e+00\n4729 -2.869167e+01\n4730  9.566667e+00\n4731  1.153333e+01\n4732 -7.966667e+00\n4733 -7.883333e+00\n4734  7.100000e+00\n4735  2.267500e+01\n4736  1.261667e+01\n4737  2.264167e+01\n4738  6.525000e+00\n4739  4.500000e-01\n4740 -6.450000e+00\n4741  5.116667e+00\n4742 -1.584167e+01\n4743 -2.458333e+00\n4744  2.358333e+00\n4745 -9.083333e+00\n4746 -1.435000e+01\n4747 -2.141667e+01\n4748  5.058333e+00\n4749  7.383333e+00\n4750 -1.025833e+01\n4751 -2.440000e+01\n4752 -1.745833e+01\n4753 -1.691667e+00\n4754  2.841667e+00\n4755 -5.150000e+00\n4756 -2.891667e+00\n4757 -5.008333e+00\n4758 -1.405833e+01\n4759  1.254167e+01\n4760 -1.068333e+01\n4761 -8.666667e+00\n4762  2.649167e+01\n4763 -9.633333e+00\n4764  8.958333e+00\n4765 -1.641667e+00\n4766 -1.858333e+00\n4767  3.666667e-01\n4768  2.650000e+00\n4769 -1.458333e+00\n4770  1.916667e+00\n4771  1.013333e+01\n4772  1.221667e+01\n4773  1.415000e+01\n4774  6.766667e+00\n4775  4.758333e+00\n4776 -2.291667e+00\n4777 -4.708333e+00\n4778  3.950000e+00\n4779  1.420833e+01\n4780 -1.916667e+00\n4781 -5.175000e+00\n4782 -1.160000e+01\n4783 -6.083333e-01\n4784  1.760833e+01\n4785 -5.666667e+00\n4786 -2.030000e+01\n4787 -1.101667e+01\n4788  6.233333e+00\n4789  1.269167e+01\n4790  6.833333e-01\n4791 -5.400000e+00\n4792  5.333333e+00\n4793  6.441667e+00\n4794 -1.678333e+01\n4795 -7.916667e+00\n4796  3.325000e+00\n4797 -8.616667e+00\n4798 -8.608333e+00\n4799 -3.333333e-01\n4800  7.208333e+00\n4801  8.133333e+00\n4802  1.704167e+01\n4803  5.291667e+00\n4804  7.141667e+00\n4805  6.850000e+00\n4806  1.704167e+01\n4807 -1.133333e+00\n4808 -5.316667e+00\n4809 -9.641667e+00\n4810  1.866667e+00\n4811 -1.734167e+01\n4812 -1.276667e+01\n4813 -7.491667e+00\n4814  5.066667e+00\n4815  2.156667e+01\n4816  4.533333e+00\n4817 -8.333333e-01\n4818  8.716667e+00\n4819 -1.115000e+01\n4820 -1.283333e+01\n4821  1.050000e+00\n4822  1.610833e+01\n4823 -7.100000e+00\n4824  9.025000e+00\n4825 -9.333333e-01\n4826 -5.750000e+00\n4827  4.883333e+00\n4828  2.650000e+00\n4829  1.221667e+01\n4830 -2.166667e+00\n4831  6.591667e+00\n4832  5.183333e+00\n4833 -1.733333e+00\n4834 -1.241667e+00\n4835 -3.475000e+00\n4836  2.058333e+00\n4837  4.175000e+00\n4838  1.100000e+00\n4839 -9.833333e+00\n4840 -5.350000e+00\n4841  4.441667e+00\n4842  2.420000e+01\n4843 -1.360000e+01\n4844 -3.166667e-01\n4845 -1.423333e+01\n4846 -9.416667e+00\n4847 -4.091667e+00\n4848 -5.691667e+00\n4849 -8.950000e+00\n4850 -7.616667e+00\n4851  7.241667e+00\n4852 -6.016667e+00\n4853 -1.176667e+01\n4854 -1.385000e+01\n4855 -1.646667e+01\n4856 -3.625000e+00\n4857 -2.233333e+00\n4858 -1.441667e+01\n4859 -2.625000e+00\n4860  2.583333e-01\n4861  1.470833e+01\n4862  6.158333e+00\n4863 -1.373333e+01\n4864 -1.216667e+00\n4865 -1.245000e+01\n4866  3.600000e+00\n4867 -1.550000e+00\n4868  2.166667e-01\n4869 -7.900000e+00\n4870  7.833333e-01\n4871 -2.258333e+01\n4872  1.043333e+01\n4873 -2.266667e+00\n4874 -2.010833e+01\n4875 -4.416667e+00\n4876 -6.225000e+00\n4877  1.154167e+01\n4878 -1.145833e+01\n4879 -1.607500e+01\n4880  7.133333e+00\n4881 -1.171667e+01\n4882 -4.250000e-01\n4883 -1.183333e+01\n4884 -4.591667e+00\n4885  3.166667e-01\n4886  5.608333e+00\n4887 -7.266667e+00\n4888  9.250000e-01\n4889  1.203333e+01\n4890 -1.110000e+01\n4891 -1.300000e+00\n4892  1.125000e+00\n4893 -1.924167e+01\n4894  1.128333e+01\n4895 -1.165833e+01\n4896  1.160000e+01\n4897  1.294167e+01\n4898  9.000000e-01\n4899  2.434167e+01\n4900 -9.300000e+00\n4901  8.183333e+00\n4902  5.475000e+00\n4903 -1.072500e+01\n4904 -5.416667e-01\n4905  6.291667e+00\n4906  2.261667e+01\n4907  6.966667e+00\n4908  1.010000e+01\n4909  1.216667e+00\n4910 -6.641667e+00\n4911 -1.918333e+01\n4912 -8.666667e+00\n4913 -8.008333e+00\n4914  5.116667e+00\n4915  6.591667e+00\n4916 -3.191667e+00\n4917  1.546667e+01\n4918  1.933333e+01\n4919  1.075000e+00\n4920 -1.725000e+00\n4921  3.116667e+00\n4922 -6.083333e+00\n4923  1.719167e+01\n4924 -1.195000e+01\n4925 -2.434167e+01\n4926 -1.582500e+01\n4927  7.183333e+00\n4928 -7.241667e+00\n4929 -2.529167e+01\n4930  9.333333e+00\n4931 -6.416667e+00\n4932  9.433333e+00\n4933 -6.991667e+00\n4934 -1.733333e+00\n4935 -1.191667e+01\n4936  6.158333e+00\n4937 -3.333333e-02\n4938 -3.625000e+00\n4939  2.016667e+00\n4940  2.508333e+00\n4941 -1.698333e+01\n4942 -5.766667e+00\n4943 -4.416667e+00\n4944  3.091667e+00\n4945  7.833333e-01\n4946 -4.791667e+00\n4947 -1.549167e+01\n4948  1.030833e+01\n4949  6.250000e-01\n4950 -7.466667e+00\n4951  2.261667e+01\n4952 -7.666667e+00\n4953 -3.208333e+00\n4954 -9.633333e+00\n4955  6.591667e+00\n4956  1.916667e+00\n4957  9.000000e+00\n4958  4.983333e+00\n4959 -1.808333e+00\n4960  1.915833e+01\n4961  1.080833e+01\n4962  1.254167e+01\n4963 -4.100000e+00\n4964 -1.383333e+00\n4965  1.420833e+01\n4966  8.316667e+00\n4967 -6.025000e+00\n4968  4.591667e+00\n4969  3.941667e+00\n4970 -2.166667e-01\n4971  3.608333e+00\n4972 -7.900000e+00\n4973 -9.050000e+00\n4974  1.001667e+01\n4975 -1.268333e+01\n4976  2.758333e+00\n4977 -5.908333e+00\n4978 -1.288333e+01\n4979  1.805000e+01\n4980  1.025000e+01\n4981  6.141667e+00\n4982 -5.133333e+00\n4983  6.841667e+00\n4984 -3.450000e+00\n4985 -1.907500e+01\n4986 -2.416667e+00\n4987 -5.625000e+00\n4988 -3.091667e+00\n4989 -4.091667e+00\n4990  7.666667e+00\n4991  1.353333e+01\n4992  9.016667e+00\n4993 -7.816667e+00\n4994  9.433333e+00\n4995  1.587500e+01\n4996  7.991667e+00\n4997  1.455833e+01\n4998 -6.675000e+00\n4999  1.450000e+00\n\n## polarity &lt;- c(rep(1, 6), rep(-1, 6))- This creates a vector polarity that contains six 1s and six -1s. The 1s represent keeping the original sign of the difference between Final and Semifinal scores, while the -1s represent flipping the sign of the difference.\n## The do(4999) command runs the following process 4999 times to create a null distribution of resampled mean differences.\n## In each iteration, it calculates the mean of the differences between Final and Semifinal scores, with the polarity of the differences randomly flipped using mosaic::resample(polarity, replace = TRUE).\n## The null distribution simulates what the mean differences would look like under the null hypothesis, assuming no true difference between the scores.\n\nThis generates a null distribution of mean differences between Final and Semifinal scores by flipping the sign of the differences randomly and calculating the mean across 4999 iterations. This permutation test helps assess whether the observed difference in scores is statistically significant by comparing it against the generated null distribution. The results (e.g., 1.866, -3.733, etc.) represent the simulated mean differences under the assumption of no real difference between the scores.\n\n\n\n\ntheme_set(new = theme_custom())\n\ngf_histogram(data = null_dist_swim, ~mean) %&gt;%\n  gf_vline(\n    xintercept = obs_diff_swim,\n    colour = \"red\",\n    linewidth = 1\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\ngf_ecdf(data = null_dist_swim, ~mean, linewidth = 1) %&gt;%\n  gf_vline(\n    xintercept = obs_diff_swim,\n    colour = \"red\",\n    linewidth = 1\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nprop1(~ mean &lt;= obs_diff_swim, data = null_dist_swim)\n\nprop_TRUE \n   0.1272 \n\n## gf_ecdf(data = null_dist_swim, ~mean, linewidth = 1) %&gt;%\n## gf_vline(xintercept = obs_diff_swim, colour = \"red\", linewidth = 1)- This creates an ECDF plot, showing the cumulative proportion of mean values from the null distribution. Again, a red vertical line is added at the location of the observed mean difference (obs_diff_swim).\n## prop1(~ mean &lt;= obs_diff_swim, data = null_dist_swim)- This calculates the proportion of the values in the null distribution that are less than or equal to the observed mean difference (obs_diff_swim). This can be interpreted as a two-tailed p-value.\n\nThe code visualizes the null distribution of resampled mean differences between the final and semifinal diving scores, and compares it to the observed mean difference of -11.975. The histogram shows that the observed difference lies in the left tail of the null distribution, suggesting that such a difference is rare under the assumption of no true difference between rounds. The ECDF plot further highlights this by showing that only a small proportion of the null distribution is less than or equal to the observed difference. This visualization suggests that the observed difference may be statistically significant, as it deviates notably from the central values of the null distribution.\n\n\n\n\nmosaic::t.test(\n  x = Diving2017$Semifinal,\n  y = Diving2017$Final,\n  paired = TRUE\n) %&gt;%\n  broom::tidy() %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(cell_fill(color = \"cyan\"), cell_text(weight = \"bold\")),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"t.test\")\n\n\n\n\n\n\n\nt.test\n\n\nestimate\nstatistic\np.value\nparameter\nconf.low\nconf.high\nmethod\nalternative\n\n\n\n\n-11.975\n-1.190339\n0.2589684\n11\n-34.11726\n10.16726\nPaired t-test\ntwo.sided\n\n\n\n\n\n\nlm(Semifinal - Final ~ 1, data = Diving2017) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95) %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(cell_fill(color = \"cyan\"), cell_text(weight = \"bold\")),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"Linear Model\")\n\n\n\n\n\n\n\nLinear Model\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\nconf.low\nconf.high\n\n\n\n\n(Intercept)\n-11.975\n10.06016\n-1.190339\n0.2589684\n-34.11726\n10.16726\n\n\n\n\n\n\nwilcox.test(\n  x = Diving2017$Semifinal,\n  y = Diving2017$Final,\n  paired = TRUE\n) %&gt;%\n  broom::tidy() %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(cell_fill(color = \"palegreen\"), cell_text(weight = \"bold\")),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"Wilcoxon test\")\n\n\n\n\n\n\n\nWilcoxon test\n\n\nstatistic\np.value\nmethod\nalternative\n\n\n\n\n27\n0.3803711\nWilcoxon signed rank exact test\ntwo.sided\n\n\n\n\n\n\nlm(signed_rank(Semifinal - Final) ~ 1,\n  data = Diving2017\n) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95) %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(cell_fill(color = \"palegreen\"), cell_text(weight = \"bold\")),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"Linear Model with sign.rank\")\n\n\n\n\n\n\n\nLinear Model with sign.rank\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\nconf.low\nconf.high\n\n\n\n\n(Intercept)\n-2\n2.135558\n-0.9365236\n0.3691097\n-6.70033\n2.70033\n\n\n\n\n\n\n\nThe results from four different statistical tests, including the paired t-test, linear model, Wilcoxon signed-rank test, and linear model with signed ranks, all consistently show that there is no statistically significant difference between the semifinal and final diving scores. The p-values from all tests (ranging from 0.259 to 0.380) are well above the typical significance threshold of 0.05, indicating that any observed difference in scores could be due to random variation. The paired t-test and linear model both estimate a mean score difference of -11.975, while the Wilcoxon test and the signed-rank model yield slightly different estimates but ultimately lead to the same conclusion: the score difference is not significant. This suggests that the diving performances in the semifinal and final rounds are statistically similar.\n\n\n\n\ndata(\"Groceries\")\nGroceries &lt;- Groceries %&gt;%\n  mutate(Product = stringr::str_squish(Product)) # Knock off extra spaces\nGroceries\n\n                                                    Product     Size Target\n1                                   Kellogg NutriGrain Bars   8 bars   2.50\n2                          Quaker Oats Life Cereal Original     18oz   3.19\n3                                General Mills Lucky Charms   11.50z   3.19\n4                                 Quaker Oats Old Fashioned     18oz   2.82\n5                                      Nabisco Oreo Cookies  14.3oz    2.99\n6                                        Nabisco Chips Ahoy     13oz   2.64\n7                                Doritos Nacho Cheese Chips     10oz   3.99\n8                                   Cheez-it Original Baked     21oz   4.79\n9                                  Swiss Miss Hot Chocolate 10 count   1.49\n10                        Tazo Chai Classic Latte Black Tea   32 oz    3.49\n11                                Annie's Macaroni & Cheese      6oz   1.79\n12                                      Rice A Roni Chicken    6.9oz   1.00\n13                            Zatarain's Jambalaya Rice Mix      8oz   1.62\n14                                 SPAM Original Lunch Meat     12oz   2.79\n15                           Campbell's Chicken Noodle Soup  10.75oz   0.99\n16                       Dinty Moore Hearty Meals Beef Stew     15oz   1.99\n17                                  Hormel Chili with Beans     15oz   1.94\n18                                    Dole Pineapple Chunks    20 oz   1.59\n19                              Skippy Creamy Peanut Butter   16.3oz   2.59\n20                            Smucker's Strawberry Preserve     18oz   2.99\n21                                     Heinz Tomato Ketchup     32oz   2.99\n22                 Near East Couscous Toasted Pine Nuts mix    5.6oz   2.12\n23                                 Barilla Angel Hair Pasta     16oz   1.42\n24       Betty Crocker Super Moist Chocolate Fudge Cake Mix  15.25oz   1.22\n25                             Kraft Jet-Puffed Marshmllows     16oz   1.99\n26 Dunkin' Donuts Original Blend Medium Roast Ground Coffee     12oz   7.19\n27                             Dove Promises Milk Chocolate   8.87oz   3.19\n28                                                 Skittles     41oz   7.99\n29                         Vlasic Kosher Dill Pickle Spears     24oz   2.39\n30                          Vlasic Old Fashioned Sauerkraut     32oz   1.99\n   Walmart\n1     2.78\n2     6.01\n3     2.98\n4     2.68\n5     2.98\n6     1.98\n7     2.50\n8     4.79\n9     1.28\n10    2.98\n11    1.72\n12    1.00\n13    1.54\n14    2.64\n15    1.58\n16    1.98\n17    1.88\n18    1.47\n19    2.58\n20    2.84\n21    2.88\n22    1.98\n23    1.38\n24    1.17\n25    1.96\n26    6.98\n27    3.50\n28    6.98\n29    2.18\n30    1.97\n\nGroceries_inspect &lt;- inspect(Groceries)\nGroceries_inspect$categorical\n\n# A tibble: 2 × 6\n  name    class     levels     n missing distribution                           \n  &lt;chr&gt;   &lt;chr&gt;      &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                                  \n1 Product character     30    30       0 \"Annie's Macaroni & Cheese (3.3%) ... …\n2 Size    factor        24    30       0 \"18oz (10%), 12oz (6.7%) ...          …\n\nGroceries_inspect$quantitative\n\n# A tibble: 2 × 11\n  name    class     min    Q1 median    Q3   max  mean    sd     n missing\n* &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;\n1 Target  numeric  0.99  1.83   2.54  3.14  7.99  2.76  1.58    30       0\n2 Walmart numeric  1     1.76   2.34  2.96  6.98  2.71  1.56    30       0\n\n\nThe case study compares the prices of 30 grocery items between Walmart and Target. The dataset includes products such as cereals, cookies, and beverages with their respective sizes and prices at both stores. The summary statistics show that Target’s prices range from $0.99 to $7.99, with a median price of $2.545 and an average price of $2.76. On the other hand, Walmart’s prices range from $1.00 to $6.98, with a median price of $2.34 and an average price of $2.71. The standard deviations are quite similar for both stores (Target: 1.58, Walmart: 1.56), suggesting comparable price variability. Overall, Target tends to have slightly higher average prices than Walmart for the same products, though the difference is minimal.\n\n\n\n\ntheme_set(new = theme_custom())\n\nGroceries_long &lt;- Groceries %&gt;%\n  pivot_longer(\n    cols = c(Walmart, Target),\n    names_to = \"store\",\n    values_to = \"prices\"\n  ) %&gt;%\n  mutate(store = as_factor(store))\nGroceries_long\n\n# A tibble: 60 × 4\n   Product                          Size      store   prices\n   &lt;chr&gt;                            &lt;fct&gt;     &lt;fct&gt;    &lt;dbl&gt;\n 1 Kellogg NutriGrain Bars          \"8 bars\"  Walmart   2.78\n 2 Kellogg NutriGrain Bars          \"8 bars\"  Target    2.5 \n 3 Quaker Oats Life Cereal Original \"18oz\"    Walmart   6.01\n 4 Quaker Oats Life Cereal Original \"18oz\"    Target    3.19\n 5 General Mills Lucky Charms       \"11.50z\"  Walmart   2.98\n 6 General Mills Lucky Charms       \"11.50z\"  Target    3.19\n 7 Quaker Oats Old Fashioned        \"18oz\"    Walmart   2.68\n 8 Quaker Oats Old Fashioned        \"18oz\"    Target    2.82\n 9 Nabisco Oreo Cookies             \"14.3oz \" Walmart   2.98\n10 Nabisco Oreo Cookies             \"14.3oz \" Target    2.99\n# ℹ 50 more rows\n\n\nIn this analysis, the grocery prices from both Walmart and Target are reshaped into a long-form dataset for easier comparison. The data is structured to display each product, its size, the store (Walmart or Target), and the corresponding price at each store. This restructuring allows for clearer analysis by aligning the same products across both stores, making it easier to compare the price differences for each item. For example, Kellogg NutriGrain Bars are priced at $2.78 at Walmart and $2.50 at Target. Similarly, Quaker Oats Life Cereal is priced at $6.01 at Walmart and $3.19 at Target, highlighting significant variations in pricing between the two retailers for certain items.\n\n\n\n\nGroceries_long %&gt;%\n  gf_dhistogram(~prices,\n    fill = ~store,\n    alpha = 0.5,\n    title = \"Grocery Costs\"\n  ) %&gt;%\n  gf_facet_grid(~store) %&gt;%\n  gf_fitdistr(dist = \"dnorm\")\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThis visualisation compares the distribution of grocery prices at Walmart and Target using histograms and overlaying normal distribution curves. Each store’s prices are represented separately, with Walmart in red and Target in blue. The shapes of the distributions indicate that Walmart prices are more widely spread, with several items priced above $5, whereas Target has a higher concentration of items priced between $2 and $4. The fitted normal distribution curves further suggest that Walmart’s pricing has a wider range, while Target’s pricing is more clustered around the lower price range, making Target appear slightly more consistent in pricing across products.\n\n\n\n\nGroceries_long %&gt;%\n  gf_density(~prices,\n    fill = ~store,\n    alpha = 0.5,\n    title = \"Grocery Costs\"\n  ) %&gt;%\n  gf_facet_grid(~store) %&gt;%\n  gf_fitdistr(dist = \"dnorm\")\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThis density plot compares grocery prices between Walmart and Target. The red area represents Walmart prices, while the blue area shows Target prices. The graph suggests that Walmart has a higher concentration of lower-priced items around the $2 range, with a sharp peak and a gradual decline, showing a few products priced above $6. In contrast, Target has a more evenly distributed pricing structure, with a peak around $3 and more products priced consistently in the $2 to $4 range. The normal distribution curves indicate that Walmart’s prices are more dispersed, while Target’s prices are clustered closer to the lower range, with fewer high-priced items.\n\n\n\n\ntheme_set(new = theme_custom())\n\nGroceries_long %&gt;%\n  gf_boxplot(prices ~ store,\n    fill = ~store\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThis boxplot compares the prices of grocery items at Walmart and Target. The boxes represent the interquartile range (IQR) of prices, with the median price indicated by the thick horizontal line within each box. Both stores have a similar median price, with Walmart slightly lower than Target. Walmart’s prices appear to be more tightly clustered around the lower range, while Target has a wider range of prices. There are more outliers (higher-priced items) for both stores, but Target has more extreme price outliers above $6. This suggests that while the general pricing between the two stores is similar, Target has a slightly broader distribution of higher-priced items.\n\n\n\n\ntheme_set(new = theme_custom())\n\nGroceries_long %&gt;%\n  gf_col(fct_reorder(Product, prices) ~ prices,\n    fill = ~store,\n    alpha = 0.5,\n    position = \"dodge\",\n    xlab = \"Prices\",\n    ylab = \"\",\n    title = \"Grocery Costs\"\n  ) %&gt;%\n  gf_col(\n    data =\n      Groceries_long %&gt;%\n        filter(\n          Product == \"Quaker Oats Life Cereal Original\"\n        ),\n    fct_reorder(Product, prices) ~ prices,\n    fill = ~store,\n    position = \"dodge\"\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe bar plot compares the prices of various grocery items between Walmart and Target. Each product is listed on the y-axis, with the corresponding prices shown on the x-axis. The products are color-coded based on the store, with Walmart represented in red and Target in blue. The graph reveals that prices for similar items vary between the two stores. For example, products like Skittles and Cheez-it Original Baked show notable differences in price, with Target generally having higher prices in some categories while Walmart has higher prices in others. This visual comparison provides an effective way to see which store offers lower prices on particular products. The plot also emphasizes that certain items have similar pricing between both stores, highlighting the competitiveness in pricing strategies.\n\n\n\n\nobs_diff_price &lt;- diffmean(prices ~ store,\n  data = Groceries_long,\n  only.2 = FALSE\n)\nobs_diff_price\n\n  diffmean \n0.05666667 \n\n\nThis calculates the difference in mean prices between two stores (Walmart and Target) using the diffmean function. The result, shown as diffmean = 0.05666667, indicates that the average price difference between the stores is approximately 0.057. This small positive difference suggests that, on average, prices are marginally higher at Target compared to Walmart for the grocery items in the dataset. However, the difference is not substantial, implying that both stores have relatively similar pricing overall.\n\n\n\n\nshapiro.test(Groceries$Walmart)\n\n\n    Shapiro-Wilk normality test\n\ndata:  Groceries$Walmart\nW = 0.78662, p-value = 3.774e-05\n\nshapiro.test(Groceries$Target)\n\n\n    Shapiro-Wilk normality test\n\ndata:  Groceries$Target\nW = 0.79722, p-value = 5.836e-05\n\n\nThe Shapiro-Wilk normality tests were conducted for both Walmart and Target grocery prices to assess if the data follows a normal distribution. For Walmart, the W-value is 0.78662 with a p-value of 3.774e-05, and for Target, the W-value is 0.79722 with a p-value of 5.836e-05. In both cases, the very small p-values (much less than 0.05) indicate that the prices for groceries at both Walmart and Target do not follow a normal distribution. Therefore, these distributions are likely non-normal, and further analysis might require non-parametric methods or transformations.\n\n\n\n\nvar.test(Groceries$Walmart, Groceries$Target)\n\n\n    F test to compare two variances\n\ndata:  Groceries$Walmart and Groceries$Target\nF = 0.97249, num df = 29, denom df = 29, p-value = 0.9406\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.4628695 2.0431908\nsample estimates:\nratio of variances \n         0.9724868 \n\n\nThe F-test for comparing the variances between Walmart and Target grocery prices resulted in an F-value of 0.97249 with a p-value of 0.9406. Since the p-value is much greater than 0.05, we fail to reject the null hypothesis, which means there is no significant difference in the variances between the two stores. The ratio of the variances is approximately 0.9725, and the 95% confidence interval ranges from 0.4627 to 2.0439, further confirming that the variance in grocery prices between Walmart and Target is similar.\n\n\n\n\nmosaic::t_test(Groceries$Walmart, Groceries$Target, paired = TRUE) %&gt;%\n  broom::tidy()\n\n# A tibble: 1 × 8\n  estimate statistic p.value parameter conf.low conf.high method     alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      \n1  -0.0567    -0.470   0.642        29   -0.303     0.190 Paired t-… two.sided  \n\n\nThe paired t-test results comparing prices at Walmart and Target show a mean difference of -0.0567, with a t-statistic of -0.4704556 and a p-value of 0.6415488. The confidence interval for the difference ranges from -0.3030159 to 0.1896825. Since the p-value is quite large (greater than 0.05), the results suggest that there is no statistically significant difference between the grocery prices at Walmart and Target. The confidence interval further supports this, as it contains zero, indicating that the mean difference could be negligible or non-existent.\n\n\n\n\n## For stability reasons, it may be advisable to use rounded data or to set digits.rank = 7, say,\n## such that determination of ties does not depend on very small numeric differences (see the example).\n\nwilcox.test(Groceries$Walmart, Groceries$Target,\n  data = Groceries_long,\n  digits.rank = 7, paired = TRUE,\n  conf.int = TRUE, conf.level = 0.95\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, data =\nGroceries_long, : cannot compute exact p-value with ties\n\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, data =\nGroceries_long, : cannot compute exact confidence interval with ties\n\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, data =\nGroceries_long, : cannot compute exact p-value with zeroes\n\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, data =\nGroceries_long, : cannot compute exact confidence interval with zeroes\n\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low conf.high method               alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;      \n1   -0.105        95  0.0143   -0.175   -0.0301 Wilcoxon signed ran… two.sided  \n\n\nThe non-parametric paired Wilcoxon test compares the grocery prices between Walmart and Target. The test’s p-value is 0.0143, which is significant at a 0.05 level, suggesting that the difference in prices between the two stores is statistically significant. The confidence interval ranges from -0.1750051 to -0.03005987, and the estimate of the effect size is -0.104966. This implies that Walmart’s prices tend to be slightly lower than Target’s, with the test favoring the conclusion that there is a genuine difference between the two.\n\n\n\n\nlm(Target - Walmart ~ 1, data = Groceries) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95)\n\n# A tibble: 1 × 7\n  term        estimate std.error statistic p.value conf.low conf.high\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)   0.0567     0.120     0.470   0.642   -0.190     0.303\n\nsigned_rank &lt;- function(x) {\n  sign(x) * rank(abs(x))\n}\n\nlm(signed_rank(Target - Walmart) ~ 1,\n  data = Groceries\n) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95)\n\n# A tibble: 1 × 7\n  term        estimate std.error statistic p.value conf.low conf.high\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)     8.53      2.89      2.95 0.00617     2.63      14.4\n\n\nThe first model computes the difference between Target and Walmart prices directly, resulting in an estimate of around 0.0567, but with a p-value of 0.6415, indicating no statistically significant difference between prices. The second model uses a rank transformation (signed rank) of the price differences.\nThe second approach produces an estimate of around 8.53, with a highly significant p-value (0.006), suggesting that Target’s prices are notably higher than Walmart’s. The confidence interval for the estimate ranges from 2.625 to 14.44, further confirming this significant difference when using the rank-based method.\nThis suggests that while a simple linear model does not reveal a significant price difference, a rank-based approach indicates that Target prices tend to be higher than Walmart prices.\n\n\n\n\n# | layout: [[15, 85, 15]]\n\ntheme_set(new = theme_custom())\n\npolarity &lt;- c(rep(1, 15), rep(-1, 15))\n\nnull_dist_price &lt;- do(9999) *\n  mean(\n    data = Groceries,\n    ~ (Target - Walmart) *\n      resample(polarity, replace = TRUE)\n  )\nnull_dist_price\n\n              mean\n1    -1.413333e-01\n2    -2.253333e-01\n3    -1.193333e-01\n4    -1.160000e-01\n5     8.733333e-02\n6    -1.406667e-01\n7    -1.200000e-02\n8    -4.800000e-02\n9     8.133333e-02\n10    1.433333e-01\n11    8.333333e-02\n12   -4.000000e-02\n13   -1.426667e-01\n14   -5.466667e-02\n15   -1.493333e-01\n16    2.206667e-01\n17   -1.560000e-01\n18   -1.980000e-01\n19    1.800000e-02\n20   -1.260000e-01\n21    1.666667e-02\n22   -2.220000e-01\n23    1.920000e-01\n24   -1.100000e-01\n25   -6.533333e-02\n26   -1.120000e-01\n27   -6.666667e-02\n28    9.466667e-02\n29    2.000000e-02\n30   -1.066667e-01\n31   -3.866667e-02\n32    2.066667e-02\n33   -1.333333e-03\n34   -7.133333e-02\n35   -2.140000e-01\n36    1.546667e-01\n37    1.920000e-01\n38    9.666667e-02\n39    6.933333e-02\n40   -9.733333e-02\n41    5.533333e-02\n42   -6.533333e-02\n43   -5.400000e-02\n44    1.300000e-01\n45    4.533333e-02\n46   -4.666667e-03\n47    3.333333e-02\n48    1.333333e-01\n49    1.640000e-01\n50    9.533333e-02\n51   -7.866667e-02\n52    1.700000e-01\n53   -1.880000e-01\n54    6.666667e-02\n55   -1.433333e-01\n56   -2.733333e-02\n57   -1.840000e-01\n58    3.933333e-02\n59    1.786667e-01\n60   -5.066667e-02\n61    1.540000e-01\n62   -2.133333e-02\n63    1.400000e-02\n64   -1.066667e-01\n65    1.406667e-01\n66    1.400000e-02\n67   -4.933333e-02\n68    1.393333e-01\n69    2.466667e-01\n70    1.866667e-02\n71   -1.346667e-01\n72    6.066667e-02\n73   -9.800000e-02\n74    1.020000e-01\n75   -1.060000e-01\n76   -1.080000e-01\n77    1.186667e-01\n78   -1.453333e-01\n79    4.266667e-02\n80   -5.266667e-02\n81    1.073333e-01\n82   -6.866667e-02\n83   -6.266667e-02\n84    2.133333e-01\n85   -1.300000e-01\n86    1.300000e-01\n87    1.266667e-02\n88    1.580000e-01\n89    4.333333e-02\n90    3.266667e-02\n91    4.733333e-02\n92   -1.400000e-02\n93   -2.920000e-01\n94    8.400000e-02\n95   -5.533333e-02\n96    1.133333e-02\n97    6.266667e-02\n98   -5.533333e-02\n99   -4.733333e-02\n100  -7.533333e-02\n101   9.933333e-02\n102   1.340000e-01\n103  -8.266667e-02\n104   1.606667e-01\n105  -1.160000e-01\n106  -5.000000e-02\n107  -3.266667e-02\n108  -2.266667e-02\n109   2.100000e-01\n110   1.653333e-01\n111   3.333333e-03\n112  -5.333333e-02\n113  -6.600000e-02\n114   1.733333e-02\n115   1.680000e-01\n116  -2.466667e-01\n117   2.333333e-02\n118  -2.120000e-01\n119  -7.866667e-02\n120  -1.780000e-01\n121   1.333333e-02\n122   1.226667e-01\n123   8.933333e-02\n124   1.273333e-01\n125  -3.933333e-02\n126   2.666667e-02\n127  -6.133333e-02\n128   6.266667e-02\n129   2.866667e-02\n130   1.666667e-01\n131   1.733333e-02\n132   1.800000e-02\n133   4.200000e-02\n134   1.100000e-01\n135   9.400000e-02\n136  -1.026667e-01\n137  -1.066667e-02\n138  -1.326667e-01\n139  -1.280000e-01\n140  -1.133333e-02\n141  -1.613333e-01\n142  -1.113333e-01\n143  -6.000000e-03\n144   8.333333e-02\n145   1.506667e-01\n146  -1.640000e-01\n147   2.533333e-02\n148  -4.066667e-02\n149   3.466667e-02\n150  -1.806667e-01\n151   5.466667e-02\n152  -8.133333e-02\n153  -6.000000e-03\n154  -7.933333e-02\n155   1.333333e-02\n156  -1.313333e-01\n157  -3.066667e-02\n158   4.000000e-03\n159   1.133333e-01\n160  -6.466667e-02\n161  -1.333333e-01\n162  -3.266667e-02\n163   3.400000e-02\n164   7.733333e-02\n165   1.253333e-01\n166  -1.213333e-01\n167   1.933333e-02\n168   1.600000e-02\n169  -3.133333e-02\n170  -8.733333e-02\n171  -1.666667e-02\n172  -1.273333e-01\n173   1.560000e-01\n174  -1.686667e-01\n175   1.580000e-01\n176  -4.666667e-03\n177  -4.266667e-02\n178   1.706667e-01\n179   4.066667e-02\n180  -7.266667e-02\n181   1.733333e-02\n182  -7.066667e-02\n183  -1.513333e-01\n184   4.733333e-02\n185  -9.400000e-02\n186   2.466667e-02\n187  -1.840000e-01\n188  -1.500000e-01\n189   7.933333e-02\n190   1.533333e-02\n191  -4.533333e-02\n192   1.540000e-01\n193   1.420000e-01\n194   1.440000e-01\n195  -9.333333e-03\n196   8.000000e-02\n197  -4.400000e-02\n198   9.533333e-02\n199   1.333333e-02\n200  -4.866667e-02\n201   1.526667e-01\n202  -1.213333e-01\n203   4.533333e-02\n204   1.740000e-01\n205  -2.106667e-01\n206  -5.600000e-02\n207  -1.440000e-01\n208  -8.400000e-02\n209  -5.400000e-02\n210   8.866667e-02\n211  -1.360000e-01\n212  -2.260000e-01\n213   1.293333e-01\n214   1.420000e-01\n215   1.866667e-02\n216  -1.526667e-01\n217  -1.026667e-01\n218   2.020000e-01\n219   2.533333e-02\n220  -2.133333e-01\n221  -1.293333e-01\n222  -1.840000e-01\n223  -8.733333e-02\n224  -8.400000e-02\n225   1.000000e-02\n226  -1.506667e-01\n227  -2.706667e-01\n228  -3.933333e-02\n229   2.606667e-01\n230   9.800000e-02\n231  -8.266667e-02\n232   1.093333e-01\n233   3.200000e-02\n234  -1.206667e-01\n235  -2.193333e-01\n236  -3.066667e-02\n237   1.113333e-01\n238  -2.253333e-01\n239   2.400000e-01\n240   1.553333e-01\n241  -7.466667e-02\n242  -4.666667e-03\n243   2.360000e-01\n244   1.193333e-01\n245   2.733333e-01\n246   1.133333e-02\n247  -3.733333e-02\n248   7.600000e-02\n249  -9.200000e-02\n250   3.333333e-03\n251   1.266667e-01\n252   1.140000e-01\n253  -2.000000e-02\n254  -1.460000e-01\n255  -3.133333e-02\n256  -8.400000e-02\n257   3.400000e-02\n258   1.140000e-01\n259   8.466667e-02\n260  -1.280000e-01\n261  -5.600000e-02\n262  -2.666667e-02\n263  -9.333333e-03\n264  -1.486667e-01\n265  -9.800000e-02\n266   1.100000e-01\n267  -1.660000e-01\n268  -2.100000e-01\n269   1.733333e-01\n270  -5.800000e-02\n271  -7.400000e-02\n272  -1.073333e-01\n273  -5.866667e-02\n274   1.833333e-01\n275   6.733333e-02\n276   1.980000e-01\n277  -1.053333e-01\n278  -4.133333e-02\n279   1.166667e-01\n280   6.266667e-02\n281  -1.453333e-01\n282  -8.666667e-02\n283  -3.000000e-02\n284   2.133333e-02\n285   8.666667e-03\n286   1.186667e-01\n287  -1.720000e-01\n288  -1.753333e-01\n289   8.000000e-03\n290  -1.713333e-01\n291   8.666667e-02\n292  -1.113333e-01\n293   9.600000e-02\n294   1.240000e-01\n295   8.866667e-02\n296  -7.066667e-02\n297  -1.006667e-01\n298  -1.213333e-01\n299  -1.573333e-01\n300   1.160000e-01\n301   2.806667e-01\n302  -5.933333e-02\n303   1.046667e-01\n304   1.500000e-01\n305  -2.020000e-01\n306  -1.153333e-01\n307  -7.733333e-02\n308   1.826667e-01\n309   1.873333e-01\n310   2.800000e-02\n311  -1.680000e-01\n312   1.380000e-01\n313   7.866667e-02\n314  -1.533333e-01\n315  -1.193333e-01\n316   1.873333e-01\n317   6.666667e-03\n318   1.053333e-01\n319   1.613333e-01\n320   9.000000e-02\n321   2.800000e-02\n322   9.466667e-02\n323   2.086667e-01\n324   2.200000e-02\n325   4.466667e-02\n326  -1.626667e-01\n327  -9.200000e-02\n328   1.573333e-01\n329   2.666667e-03\n330  -2.866667e-02\n331   7.466667e-02\n332  -1.173333e-01\n333   1.333333e-01\n334   7.800000e-02\n335   1.866667e-02\n336  -1.680000e-01\n337  -2.333333e-02\n338  -1.333333e-02\n339   1.146667e-01\n340  -1.193333e-01\n341  -1.646667e-01\n342   6.800000e-02\n343  -6.600000e-02\n344  -2.246667e-01\n345  -1.226667e-01\n346   1.340000e-01\n347   1.506667e-01\n348   7.200000e-02\n349  -2.466667e-02\n350  -1.480000e-01\n351  -1.513333e-01\n352   1.666667e-02\n353  -1.060000e-01\n354  -1.273333e-01\n355  -4.600000e-02\n356   1.433333e-01\n357   9.466667e-02\n358  -1.226667e-01\n359  -1.100000e-01\n360  -1.566667e-01\n361   2.266667e-02\n362   1.940000e-01\n363   8.066667e-02\n364   9.266667e-02\n365   3.400000e-02\n366   6.333333e-02\n367  -1.533333e-02\n368  -1.260000e-01\n369   1.053333e-01\n370   3.933333e-02\n371  -1.640000e-01\n372  -2.146667e-01\n373  -2.733333e-02\n374   1.400000e-02\n375  -1.773333e-01\n376  -2.066667e-01\n377  -2.133333e-02\n378  -1.546667e-01\n379   7.666667e-02\n380  -1.246667e-01\n381  -2.066667e-02\n382  -1.166667e-01\n383  -7.266667e-02\n384  -1.553333e-01\n385  -1.326667e-01\n386   8.200000e-02\n387  -1.060000e-01\n388   1.200000e-01\n389  -2.140000e-01\n390  -8.666667e-02\n391  -5.066667e-02\n392  -1.700000e-01\n393  -2.300000e-01\n394  -1.653333e-01\n395  -9.333333e-03\n396   2.033333e-01\n397   5.200000e-02\n398   1.153333e-01\n399   8.133333e-02\n400  -2.026667e-01\n401  -2.133333e-01\n402  -2.386667e-01\n403  -1.040000e-01\n404  -1.706667e-01\n405   1.853333e-01\n406   1.400000e-02\n407  -1.366667e-01\n408   2.006667e-01\n409  -2.266667e-01\n410  -1.166667e-01\n411   2.800000e-02\n412  -1.473333e-01\n413   1.460000e-01\n414  -8.466667e-02\n415  -6.866667e-02\n416   1.200000e-01\n417   1.466667e-02\n418   1.113333e-01\n419  -6.000000e-02\n420  -1.380000e-01\n421   1.173333e-01\n422  -3.400000e-02\n423  -2.220971e-17\n424   3.133333e-02\n425  -1.006667e-01\n426   2.733333e-02\n427   1.320000e-01\n428   6.400000e-02\n429   1.813333e-01\n430   4.066667e-02\n431   2.140000e-01\n432   1.133333e-01\n433  -2.193333e-01\n434   2.353333e-01\n435  -9.600000e-02\n436   4.000000e-03\n437   1.060000e-01\n438   1.246667e-01\n439   7.066667e-02\n440   1.293333e-01\n441   8.600000e-02\n442   3.333333e-02\n443   5.733333e-02\n444   4.333333e-02\n445   7.600000e-02\n446  -1.013333e-01\n447   1.373333e-01\n448  -2.293333e-01\n449  -8.000000e-03\n450   1.133333e-02\n451   7.333333e-02\n452   1.066667e-02\n453   1.813333e-01\n454  -1.126667e-01\n455  -4.466667e-02\n456   1.360000e-01\n457   1.713333e-01\n458   1.506667e-01\n459  -8.733333e-02\n460   1.693333e-01\n461  -1.613333e-01\n462  -4.800000e-02\n463  -2.326667e-01\n464  -1.133333e-02\n465   1.166667e-01\n466  -1.400000e-02\n467  -9.066667e-02\n468   5.733333e-02\n469   1.866667e-01\n470  -9.333333e-02\n471  -1.560000e-01\n472  -1.580000e-01\n473  -7.066667e-02\n474   3.733333e-02\n475   1.886667e-01\n476   1.513333e-01\n477   2.233333e-01\n478   1.226667e-01\n479   8.200000e-02\n480  -1.240000e-01\n481  -2.733333e-02\n482   2.466667e-02\n483  -4.133333e-02\n484  -4.133333e-02\n485   2.600000e-02\n486  -1.433333e-01\n487  -7.933333e-02\n488   1.706667e-01\n489   2.080000e-01\n490  -2.200000e-02\n491   1.693333e-01\n492   1.266667e-02\n493  -3.333333e-03\n494  -2.400000e-02\n495  -2.466667e-01\n496   1.673333e-01\n497   3.333333e-03\n498   4.666667e-03\n499   6.600000e-02\n500  -9.066667e-02\n501   1.526667e-01\n502  -3.200000e-02\n503   1.126667e-01\n504   2.166667e-01\n505  -2.733333e-02\n506   8.000000e-03\n507   2.240000e-01\n508  -6.133333e-02\n509   4.400000e-02\n510  -5.466667e-02\n511   4.133333e-02\n512  -3.666667e-02\n513   1.460000e-01\n514   9.466667e-02\n515  -1.740000e-01\n516  -5.733333e-02\n517  -1.620000e-01\n518  -5.333333e-02\n519  -5.933333e-02\n520   1.880000e-01\n521   8.000000e-02\n522  -1.246667e-01\n523   5.000000e-02\n524   4.266667e-02\n525  -1.006667e-01\n526  -1.846667e-01\n527  -6.600000e-02\n528  -2.726667e-01\n529  -1.846667e-01\n530  -3.800000e-02\n531  -2.933333e-02\n532   1.926667e-01\n533  -1.013333e-01\n534  -2.113333e-01\n535  -1.933333e-02\n536   1.113333e-01\n537   4.066667e-02\n538   1.673333e-01\n539  -1.733333e-02\n540   6.666667e-03\n541  -1.866667e-02\n542   4.933333e-02\n543   6.066667e-02\n544  -1.553333e-01\n545   1.386667e-01\n546   1.433333e-01\n547  -7.600000e-02\n548  -1.580000e-01\n549   9.533333e-02\n550  -1.200000e-01\n551   1.533333e-02\n552   4.200000e-02\n553   1.480000e-01\n554  -9.333333e-02\n555  -1.146667e-01\n556  -2.733333e-02\n557  -1.660000e-01\n558   1.766667e-01\n559   1.173333e-01\n560  -1.593333e-01\n561  -1.120000e-01\n562  -1.266667e-01\n563  -8.000000e-02\n564   1.673333e-01\n565  -1.606667e-01\n566   1.133333e-02\n567   2.533333e-02\n568   2.473333e-01\n569   8.000000e-02\n570  -6.733333e-02\n571  -1.160000e-01\n572  -1.653333e-01\n573  -8.800000e-02\n574  -5.933333e-02\n575  -7.533333e-02\n576  -1.060000e-01\n577   2.666667e-03\n578   1.546667e-01\n579   1.213333e-01\n580   1.286667e-01\n581   1.553333e-01\n582   1.013333e-01\n583  -2.400000e-02\n584  -8.666667e-03\n585  -2.221333e-17\n586  -7.400000e-02\n587  -3.066667e-02\n588  -6.333333e-02\n589   1.406667e-01\n590   6.733333e-02\n591   2.400000e-02\n592   1.120000e-01\n593   2.000000e-03\n594   5.400000e-02\n595   1.320000e-01\n596   1.533333e-01\n597  -1.413333e-01\n598  -1.046667e-01\n599  -1.353333e-01\n600  -1.500000e-01\n601   1.166667e-01\n602   1.333333e-02\n603  -1.413333e-01\n604   3.000000e-02\n605  -1.133333e-01\n606  -2.160000e-01\n607  -1.573333e-01\n608  -9.733333e-02\n609  -1.106667e-01\n610  -7.066667e-02\n611  -5.333333e-03\n612   1.713333e-01\n613  -1.306667e-01\n614   1.106667e-01\n615   1.573333e-01\n616   1.706667e-01\n617   1.686667e-01\n618  -2.193333e-01\n619   1.273333e-01\n620   1.886667e-01\n621   5.733333e-02\n622   1.666667e-02\n623  -1.606667e-01\n624   1.173333e-01\n625   6.666667e-03\n626  -1.980000e-01\n627   5.400000e-02\n628   3.466667e-02\n629  -1.213333e-01\n630  -1.740000e-01\n631  -1.073333e-01\n632  -1.666667e-02\n633  -8.733333e-02\n634   1.300000e-01\n635  -1.133333e-02\n636   6.333333e-02\n637  -9.733333e-02\n638   5.933333e-02\n639   2.600000e-02\n640  -9.200000e-02\n641  -1.213333e-01\n642   1.220000e-01\n643   1.100000e-01\n644   2.000000e-02\n645   4.133333e-02\n646   2.140000e-01\n647   1.400000e-02\n648  -5.866667e-02\n649  -5.800000e-02\n650   7.800000e-02\n651   5.733333e-02\n652  -3.333333e-02\n653   1.820000e-01\n654   2.060000e-01\n655   2.333333e-02\n656  -1.533333e-01\n657   4.533333e-02\n658  -8.133333e-02\n659  -4.000000e-03\n660  -8.933333e-02\n661  -2.133333e-01\n662  -1.573333e-01\n663   2.086667e-01\n664   1.706667e-01\n665   1.200000e-02\n666  -2.800000e-02\n667   5.600000e-02\n668   4.533333e-02\n669  -6.666667e-02\n670   3.333333e-03\n671   1.246667e-01\n672   1.073333e-01\n673  -1.306667e-01\n674  -1.873333e-01\n675   5.866667e-02\n676  -2.033333e-01\n677   9.333333e-02\n678  -1.200000e-02\n679   8.266667e-02\n680  -1.373333e-01\n681   5.400000e-02\n682   2.280000e-01\n683  -1.033333e-01\n684  -1.246667e-01\n685  -1.426667e-01\n686   1.486667e-01\n687  -8.066667e-02\n688  -4.733333e-02\n689   7.533333e-02\n690   4.666667e-02\n691   3.333333e-03\n692   5.600000e-02\n693  -1.526667e-01\n694   1.353333e-01\n695   3.333333e-02\n696   1.746667e-01\n697   7.733333e-02\n698   4.066667e-02\n699   1.340000e-01\n700  -1.720000e-01\n701   1.206667e-01\n702   1.633333e-01\n703  -1.046667e-01\n704  -2.013333e-01\n705   1.886667e-01\n706   1.353333e-01\n707   1.580000e-01\n708  -1.266667e-01\n709  -1.213333e-01\n710   1.240000e-01\n711   1.300000e-01\n712   1.600000e-02\n713   1.693333e-01\n714   1.853333e-01\n715  -1.673333e-01\n716   1.480000e-01\n717   2.333333e-02\n718   1.746667e-01\n719   3.533333e-02\n720   9.333333e-03\n721   2.800000e-02\n722   1.353333e-01\n723  -1.773333e-01\n724  -9.933333e-02\n725   6.400000e-02\n726   8.733333e-02\n727   1.740000e-01\n728  -5.800000e-02\n729  -1.300000e-01\n730   1.300000e-01\n731   1.566667e-01\n732   3.000000e-02\n733  -3.333333e-03\n734  -1.680000e-01\n735   1.146667e-01\n736   9.066667e-02\n737  -1.333333e-02\n738   6.000000e-03\n739   8.800000e-02\n740   1.493333e-01\n741  -1.020000e-01\n742   4.333333e-02\n743   2.200000e-02\n744  -1.186667e-01\n745   7.666667e-02\n746   8.000000e-03\n747   1.560000e-01\n748  -1.420000e-01\n749   1.880000e-01\n750   3.866667e-02\n751   2.060000e-01\n752   4.666667e-03\n753   6.066667e-02\n754  -1.806667e-01\n755  -8.066667e-02\n756  -1.000000e-02\n757  -6.333333e-02\n758  -8.733333e-02\n759  -9.133333e-02\n760   7.400000e-02\n761   1.593333e-01\n762   1.940000e-01\n763  -1.060000e-01\n764  -4.466667e-02\n765   8.133333e-02\n766   1.406667e-01\n767   6.533333e-02\n768   1.973333e-01\n769  -7.066667e-02\n770  -2.386667e-01\n771   2.026667e-01\n772   1.740000e-01\n773  -8.066667e-02\n774  -7.933333e-02\n775   1.600000e-02\n776  -2.106667e-01\n777  -5.333333e-02\n778   1.333333e-02\n779  -3.333333e-03\n780  -7.733333e-02\n781   2.400000e-02\n782  -4.200000e-02\n783  -4.933333e-02\n784  -1.140000e-01\n785   8.400000e-02\n786   2.073333e-01\n787  -3.333333e-02\n788   3.400000e-02\n789   5.266667e-02\n790   6.000000e-02\n791  -1.813333e-01\n792  -1.140000e-01\n793   1.613333e-01\n794   9.866667e-02\n795   6.400000e-02\n796   2.273333e-01\n797  -1.886667e-01\n798  -2.033333e-01\n799  -1.646667e-01\n800   9.933333e-02\n801  -1.853333e-01\n802  -1.100000e-01\n803  -1.200000e-01\n804   2.800000e-02\n805   9.733333e-02\n806   8.333333e-02\n807  -2.266667e-02\n808  -4.133333e-02\n809  -1.646667e-01\n810  -1.566667e-01\n811   1.146667e-01\n812  -7.866667e-02\n813  -2.306667e-01\n814   2.446667e-01\n815  -1.733333e-02\n816   3.066667e-02\n817   3.733333e-02\n818  -5.733333e-02\n819  -2.200000e-02\n820   1.000000e-01\n821  -1.060000e-01\n822  -5.200000e-02\n823  -6.800000e-02\n824  -1.866667e-02\n825   1.060000e-01\n826   1.393333e-01\n827  -3.066667e-02\n828   7.733333e-02\n829  -6.800000e-02\n830  -6.600000e-02\n831   1.146667e-01\n832   1.666667e-01\n833   3.533333e-02\n834  -3.066667e-02\n835   1.340000e-01\n836   9.000000e-02\n837  -1.766667e-01\n838  -6.866667e-02\n839  -2.193333e-01\n840  -2.933333e-02\n841  -1.700000e-01\n842   1.380000e-01\n843   9.066667e-02\n844  -6.133333e-02\n845  -1.626667e-01\n846   2.200000e-02\n847  -1.066667e-01\n848  -1.073333e-01\n849   6.600000e-02\n850  -3.933333e-02\n851  -7.933333e-02\n852   9.600000e-02\n853  -5.666667e-02\n854  -2.220000e-01\n855  -1.240000e-01\n856   6.400000e-02\n857  -3.866667e-02\n858   7.600000e-02\n859  -3.333333e-02\n860   6.466667e-02\n861  -2.666667e-03\n862  -1.220000e-01\n863   1.073333e-01\n864   1.126667e-01\n865   5.066667e-02\n866   2.173333e-01\n867  -4.933333e-02\n868   3.333333e-02\n869  -7.400000e-02\n870   2.533333e-02\n871  -8.400000e-02\n872   1.333333e-03\n873   1.300000e-01\n874  -1.446667e-01\n875   1.913333e-01\n876  -2.113333e-01\n877  -1.800000e-02\n878  -1.093333e-01\n879   7.066667e-02\n880  -6.133333e-02\n881  -1.120000e-01\n882  -1.566667e-01\n883   1.500000e-01\n884  -1.266667e-01\n885  -1.966667e-01\n886  -4.600000e-02\n887  -1.400000e-02\n888   6.666667e-03\n889  -1.233333e-01\n890  -1.293333e-01\n891   1.800000e-02\n892   9.133333e-02\n893  -6.733333e-02\n894  -6.400000e-02\n895  -1.333333e-01\n896   1.033333e-01\n897   1.406667e-01\n898   3.400000e-02\n899  -3.666667e-02\n900   8.466667e-02\n901  -5.333333e-02\n902  -1.613333e-01\n903  -7.666667e-02\n904   1.486667e-01\n905   2.113333e-01\n906   2.733333e-02\n907  -2.266667e-01\n908   9.533333e-02\n909  -1.426667e-01\n910  -1.840000e-01\n911  -3.400000e-02\n912   4.666667e-02\n913   2.206667e-01\n914   3.600000e-02\n915  -5.933333e-02\n916  -5.600000e-02\n917   1.286667e-01\n918   1.166667e-01\n919  -1.933333e-01\n920  -4.666667e-03\n921   2.333333e-02\n922  -8.866667e-02\n923  -9.533333e-02\n924  -4.266667e-02\n925  -1.600000e-02\n926   1.466667e-02\n927   6.333333e-02\n928  -6.000000e-03\n929   9.733333e-02\n930   1.866667e-01\n931   1.840000e-01\n932   1.673333e-01\n933   1.066667e-01\n934  -1.133333e-02\n935  -1.466667e-02\n936  -2.106667e-01\n937  -1.313333e-01\n938  -2.400000e-02\n939   8.266667e-02\n940  -1.273333e-01\n941  -1.293333e-01\n942   4.533333e-02\n943   7.333333e-03\n944  -2.466667e-02\n945  -2.666667e-03\n946  -5.800000e-02\n947   5.666667e-02\n948  -3.000000e-02\n949  -1.493333e-01\n950  -1.046667e-01\n951   7.000000e-02\n952  -1.506667e-01\n953   1.073333e-01\n954   6.866667e-02\n955  -6.400000e-02\n956  -1.680000e-01\n957   2.866667e-02\n958   2.933333e-02\n959  -5.933333e-02\n960   1.166667e-01\n961   4.933333e-02\n962   3.666667e-02\n963   9.600000e-02\n964   1.773333e-01\n965  -4.533333e-02\n966  -9.466667e-02\n967   2.366667e-01\n968   2.486667e-01\n969  -1.646667e-01\n970  -9.533333e-02\n971   2.193333e-01\n972   2.046667e-01\n973  -1.086667e-01\n974   1.193333e-01\n975   2.466667e-02\n976   9.000000e-02\n977   5.133333e-02\n978   7.666667e-02\n979  -9.466667e-02\n980   2.933333e-02\n981  -2.933333e-02\n982  -1.540000e-01\n983  -1.080000e-01\n984   9.866667e-02\n985   1.253333e-01\n986  -1.993333e-01\n987   9.333333e-02\n988   3.800000e-02\n989  -1.646667e-01\n990   1.860000e-01\n991  -1.420000e-01\n992   3.533333e-02\n993   1.193333e-01\n994   9.066667e-02\n995   1.166667e-01\n996   4.533333e-02\n997  -5.466667e-02\n998  -8.266667e-02\n999  -4.600000e-02\n1000 -1.893333e-01\n1001  7.066667e-02\n1002 -7.933333e-02\n1003 -2.866667e-02\n1004  1.460000e-01\n1005 -6.666667e-02\n1006  1.526667e-01\n1007 -1.946667e-01\n1008  2.313333e-01\n1009  3.200000e-02\n1010 -6.400000e-02\n1011 -6.266667e-02\n1012 -2.466667e-02\n1013 -6.666667e-02\n1014  1.340000e-01\n1015  2.466667e-02\n1016 -6.333333e-02\n1017  6.666667e-03\n1018 -1.566667e-01\n1019 -1.653333e-01\n1020 -1.740000e-01\n1021 -2.620000e-01\n1022 -7.866667e-02\n1023 -1.233333e-01\n1024  9.266667e-02\n1025 -5.466667e-02\n1026 -1.520000e-01\n1027 -5.800000e-02\n1028 -1.200000e-02\n1029  1.320000e-01\n1030  1.713333e-01\n1031  1.400000e-02\n1032 -1.500000e-01\n1033 -2.400000e-02\n1034 -9.266667e-02\n1035  3.933333e-02\n1036 -1.560000e-01\n1037 -1.146667e-01\n1038  8.400000e-02\n1039 -8.066667e-02\n1040 -1.433333e-01\n1041 -5.333333e-02\n1042  2.260000e-01\n1043  1.940000e-01\n1044  2.100000e-01\n1045  1.360000e-01\n1046 -1.880000e-01\n1047  1.026667e-01\n1048 -2.866667e-02\n1049 -1.060000e-01\n1050 -1.713333e-01\n1051 -1.580000e-01\n1052  4.466667e-02\n1053 -1.793333e-01\n1054 -1.473333e-01\n1055 -7.533333e-02\n1056  1.600000e-01\n1057 -1.626667e-01\n1058  1.986667e-01\n1059  1.233333e-01\n1060 -8.066667e-02\n1061  3.400000e-02\n1062 -4.133333e-02\n1063  1.126667e-01\n1064  1.260000e-01\n1065  9.666667e-02\n1066  1.333333e-01\n1067  1.286667e-01\n1068  6.400000e-02\n1069 -7.400000e-02\n1070 -3.333333e-02\n1071  1.953333e-01\n1072 -2.453333e-01\n1073 -9.200000e-02\n1074 -2.700000e-01\n1075  1.153333e-01\n1076 -1.333333e-01\n1077 -5.600000e-02\n1078  1.860000e-01\n1079  9.866667e-02\n1080 -5.333333e-02\n1081 -2.133333e-02\n1082  6.066667e-02\n1083 -1.073333e-01\n1084 -7.000000e-02\n1085 -4.066667e-02\n1086  1.920000e-01\n1087 -6.000000e-02\n1088  1.180000e-01\n1089 -9.600000e-02\n1090  2.800000e-02\n1091  3.533333e-02\n1092  1.433333e-01\n1093  1.340000e-01\n1094 -2.060000e-01\n1095  7.266667e-02\n1096  5.866667e-02\n1097 -7.200000e-02\n1098 -9.933333e-02\n1099 -6.133333e-02\n1100 -1.460000e-01\n1101  1.633333e-01\n1102  2.240000e-01\n1103 -9.000000e-02\n1104 -2.600000e-02\n1105  4.866667e-02\n1106  1.200000e-02\n1107  2.533333e-02\n1108  1.740000e-01\n1109 -1.526667e-01\n1110  6.733333e-02\n1111  2.733333e-02\n1112 -7.666667e-02\n1113 -2.200000e-02\n1114 -2.066667e-01\n1115 -3.600000e-02\n1116  2.266667e-01\n1117  2.333333e-02\n1118  1.933333e-02\n1119  4.066667e-02\n1120 -1.146667e-01\n1121 -1.180000e-01\n1122 -5.200000e-02\n1123  1.586667e-01\n1124  2.666667e-03\n1125  3.666667e-02\n1126 -2.226667e-01\n1127  4.933333e-02\n1128 -1.693333e-01\n1129 -1.666667e-01\n1130 -1.400000e-01\n1131  2.800000e-02\n1132 -2.040000e-01\n1133  4.400000e-02\n1134  9.933333e-02\n1135  1.413333e-01\n1136 -7.666667e-02\n1137  1.900000e-01\n1138 -1.206667e-01\n1139 -3.000000e-02\n1140  7.733333e-02\n1141  2.400000e-02\n1142 -1.960000e-01\n1143 -4.400000e-02\n1144 -1.480000e-01\n1145  2.006667e-01\n1146  2.386667e-01\n1147  2.113333e-01\n1148 -4.000000e-03\n1149  5.000000e-02\n1150  1.206667e-01\n1151 -9.800000e-02\n1152  6.933333e-02\n1153  8.533333e-02\n1154 -1.440000e-01\n1155 -1.753333e-01\n1156 -2.466667e-02\n1157 -1.386667e-01\n1158 -6.200000e-02\n1159 -7.066667e-02\n1160 -1.226667e-01\n1161 -1.326667e-01\n1162 -1.840000e-01\n1163  1.146667e-01\n1164  4.066667e-02\n1165 -5.333333e-03\n1166 -1.400000e-02\n1167 -1.166667e-01\n1168  8.600000e-02\n1169 -1.346667e-01\n1170 -1.260000e-01\n1171 -1.113333e-01\n1172 -1.200000e-01\n1173 -1.646667e-01\n1174  7.133333e-02\n1175 -1.666667e-01\n1176  1.473333e-01\n1177  1.533333e-02\n1178  9.800000e-02\n1179 -9.666667e-02\n1180  1.666667e-01\n1181 -1.693333e-01\n1182  1.153333e-01\n1183 -1.473333e-01\n1184 -1.753333e-01\n1185 -1.880000e-01\n1186  2.380000e-01\n1187 -1.733333e-02\n1188  9.733333e-02\n1189 -7.600000e-02\n1190  1.746667e-01\n1191 -1.340000e-01\n1192  2.086667e-01\n1193  1.000000e-01\n1194 -2.200000e-01\n1195  4.666667e-02\n1196  1.186667e-01\n1197 -1.546667e-01\n1198  6.200000e-02\n1199 -1.186667e-01\n1200  7.866667e-02\n1201 -2.800000e-02\n1202  9.000000e-02\n1203  2.333333e-02\n1204 -2.666667e-02\n1205  6.000000e-02\n1206  2.333333e-02\n1207  1.360000e-01\n1208  1.666667e-01\n1209  9.133333e-02\n1210 -2.440000e-01\n1211  1.480000e-01\n1212 -1.226667e-01\n1213  2.006667e-01\n1214  1.686667e-01\n1215  3.600000e-02\n1216 -1.653333e-01\n1217 -9.266667e-02\n1218 -2.800000e-02\n1219 -9.533333e-02\n1220  1.840000e-01\n1221  6.266667e-02\n1222  6.466667e-02\n1223 -1.426667e-01\n1224 -1.193333e-01\n1225 -2.000000e-02\n1226 -1.840000e-01\n1227  1.173333e-01\n1228  1.466667e-02\n1229 -1.026667e-01\n1230  6.600000e-02\n1231  8.066667e-02\n1232 -2.533333e-02\n1233  1.466667e-01\n1234 -9.400000e-02\n1235  8.266667e-02\n1236  1.433333e-01\n1237  2.800000e-02\n1238  4.866667e-02\n1239  6.933333e-02\n1240  1.420000e-01\n1241 -1.346667e-01\n1242 -5.800000e-02\n1243  1.300000e-01\n1244 -5.000000e-02\n1245  4.066667e-02\n1246 -1.000000e-02\n1247 -1.500000e-01\n1248  1.000000e-01\n1249 -4.600000e-02\n1250  3.000000e-02\n1251 -8.000000e-03\n1252  2.666667e-03\n1253  1.046667e-01\n1254  1.200000e-02\n1255  1.993333e-01\n1256  4.333333e-02\n1257  1.806667e-01\n1258  1.420000e-01\n1259  1.380000e-01\n1260 -3.400000e-02\n1261 -1.146667e-01\n1262  9.600000e-02\n1263 -1.500000e-01\n1264  1.566667e-01\n1265  2.300000e-01\n1266  1.286667e-01\n1267 -3.466667e-02\n1268 -7.933333e-02\n1269  1.653333e-01\n1270 -1.220000e-01\n1271  5.666667e-02\n1272  1.553333e-01\n1273  1.600000e-02\n1274 -2.466667e-02\n1275 -1.353333e-01\n1276 -2.260000e-01\n1277  7.533333e-02\n1278 -1.600000e-01\n1279 -1.360000e-01\n1280  1.406667e-01\n1281  7.200000e-02\n1282  1.113333e-01\n1283  6.666667e-03\n1284  5.400000e-02\n1285  1.000000e-01\n1286  5.266667e-02\n1287  7.066667e-02\n1288 -1.686667e-01\n1289  6.000000e-03\n1290 -9.333333e-02\n1291  5.800000e-02\n1292  5.266667e-02\n1293  8.400000e-02\n1294  1.013333e-01\n1295 -2.666667e-02\n1296 -1.706667e-01\n1297 -4.333333e-02\n1298  5.800000e-02\n1299  7.866667e-02\n1300  4.866667e-02\n1301  3.400000e-02\n1302  2.333333e-02\n1303 -3.066667e-02\n1304  1.100000e-01\n1305  9.400000e-02\n1306 -6.666667e-04\n1307  6.466667e-02\n1308 -1.993333e-01\n1309  2.226667e-01\n1310  1.593333e-01\n1311  2.106667e-01\n1312  1.760000e-01\n1313 -7.066667e-02\n1314 -6.066667e-02\n1315 -1.240000e-01\n1316  3.600000e-02\n1317 -1.253333e-01\n1318 -7.866667e-02\n1319  5.533333e-02\n1320  1.740000e-01\n1321  1.706667e-01\n1322  3.466667e-02\n1323  1.260000e-01\n1324 -6.400000e-02\n1325  7.600000e-02\n1326 -6.666667e-02\n1327  4.800000e-02\n1328  4.200000e-02\n1329 -1.633333e-01\n1330  1.200000e-01\n1331 -5.266667e-02\n1332  2.600000e-02\n1333 -7.400000e-02\n1334  1.340000e-01\n1335  1.760000e-01\n1336 -2.253333e-01\n1337  1.020000e-01\n1338  1.340000e-01\n1339 -6.733333e-02\n1340 -8.666667e-03\n1341  1.020000e-01\n1342 -1.040000e-01\n1343 -5.000000e-02\n1344  1.380000e-01\n1345  1.240000e-01\n1346 -1.106667e-01\n1347 -1.560000e-01\n1348  2.333333e-02\n1349 -7.000000e-02\n1350  1.346667e-01\n1351  1.880000e-01\n1352  1.546667e-01\n1353  6.533333e-02\n1354 -3.866667e-02\n1355 -1.420000e-01\n1356  1.466667e-01\n1357  2.266667e-02\n1358  2.466667e-01\n1359 -1.960000e-01\n1360  1.113333e-01\n1361  7.800000e-02\n1362 -1.146667e-01\n1363  4.466667e-02\n1364 -1.653333e-01\n1365 -8.866667e-02\n1366 -1.833333e-01\n1367 -4.800000e-02\n1368 -2.466667e-02\n1369 -1.920000e-01\n1370  1.653333e-01\n1371 -1.026667e-01\n1372 -2.120000e-01\n1373 -1.053333e-01\n1374  4.000000e-02\n1375 -1.780000e-01\n1376 -8.000000e-02\n1377 -1.973333e-01\n1378 -2.866667e-02\n1379  1.573333e-01\n1380  1.626667e-01\n1381 -1.506667e-01\n1382  3.733333e-02\n1383 -2.733333e-02\n1384  3.600000e-02\n1385 -8.866667e-02\n1386 -4.666667e-03\n1387 -7.733333e-02\n1388  1.640000e-01\n1389  1.140000e-01\n1390 -8.866667e-02\n1391  1.046667e-01\n1392 -6.466667e-02\n1393  6.666667e-02\n1394 -3.800000e-02\n1395  2.053333e-01\n1396  1.133333e-01\n1397  1.533333e-02\n1398 -4.533333e-02\n1399  8.200000e-02\n1400 -6.533333e-02\n1401  7.733333e-02\n1402  1.253333e-01\n1403 -5.933333e-02\n1404 -8.866667e-02\n1405 -1.446667e-01\n1406 -1.266667e-01\n1407 -4.866667e-02\n1408 -2.600000e-02\n1409 -2.333333e-02\n1410 -2.066667e-02\n1411  1.493333e-01\n1412 -1.066667e-01\n1413 -1.553333e-01\n1414 -8.000000e-03\n1415  9.533333e-02\n1416 -4.400000e-02\n1417  1.760000e-01\n1418 -6.666667e-04\n1419  8.666667e-03\n1420  2.106667e-01\n1421 -1.180000e-01\n1422 -9.533333e-02\n1423 -2.173333e-01\n1424  1.473333e-01\n1425 -2.333333e-02\n1426 -5.466667e-02\n1427  4.266667e-02\n1428 -7.066667e-02\n1429 -1.173333e-01\n1430 -1.780000e-01\n1431  4.266667e-02\n1432 -1.793333e-01\n1433 -3.800000e-02\n1434  2.733333e-02\n1435 -1.060000e-01\n1436  1.933333e-02\n1437 -2.253333e-01\n1438  3.600000e-02\n1439 -9.666667e-02\n1440 -1.546667e-01\n1441 -2.420000e-01\n1442 -9.200000e-02\n1443 -1.706667e-01\n1444  5.066667e-02\n1445 -8.066667e-02\n1446 -7.333333e-02\n1447 -1.666667e-01\n1448  8.200000e-02\n1449 -5.600000e-02\n1450 -4.133333e-02\n1451  9.666667e-02\n1452 -5.866667e-02\n1453  1.873333e-01\n1454 -1.746667e-01\n1455  9.066667e-02\n1456 -1.013333e-01\n1457 -7.866667e-02\n1458 -1.313333e-01\n1459  4.333333e-02\n1460 -2.113333e-01\n1461  1.280000e-01\n1462  1.060000e-01\n1463 -4.000000e-02\n1464 -1.226667e-01\n1465  4.133333e-02\n1466  6.666667e-04\n1467  4.666667e-02\n1468 -1.733333e-01\n1469  1.386667e-01\n1470 -1.960000e-01\n1471  1.980000e-01\n1472  1.333333e-01\n1473 -1.020000e-01\n1474  1.000000e-01\n1475 -8.400000e-02\n1476 -4.266667e-02\n1477  8.400000e-02\n1478 -1.506667e-01\n1479 -1.600000e-02\n1480  1.180000e-01\n1481  1.826667e-01\n1482 -4.800000e-02\n1483  1.233333e-01\n1484 -3.000000e-02\n1485  1.213333e-01\n1486  7.000000e-02\n1487  1.533333e-01\n1488 -6.666667e-04\n1489 -9.666667e-02\n1490  4.200000e-02\n1491 -1.166667e-01\n1492  9.800000e-02\n1493  8.000000e-02\n1494 -4.666667e-02\n1495 -2.200000e-02\n1496  4.000000e-03\n1497 -9.533333e-02\n1498  5.133333e-02\n1499  1.626667e-01\n1500 -1.200000e-02\n1501 -9.000000e-02\n1502 -1.693333e-01\n1503 -1.333333e-03\n1504 -1.466667e-01\n1505  2.253333e-01\n1506 -1.113333e-01\n1507 -5.266667e-02\n1508  8.733333e-02\n1509  8.533333e-02\n1510 -1.086667e-01\n1511 -1.313333e-01\n1512 -5.400000e-02\n1513 -3.333333e-02\n1514 -5.200000e-02\n1515 -1.020000e-01\n1516  1.933333e-02\n1517  1.900000e-01\n1518 -4.800000e-02\n1519  1.526667e-01\n1520  1.140000e-01\n1521  2.666667e-03\n1522  8.866667e-02\n1523  4.533333e-02\n1524  9.533333e-02\n1525  2.206667e-01\n1526  3.200000e-02\n1527 -6.666667e-03\n1528  1.733333e-02\n1529 -2.260000e-01\n1530  1.466667e-02\n1531  1.040000e-01\n1532  1.026667e-01\n1533 -8.600000e-02\n1534 -2.273333e-01\n1535 -1.326667e-01\n1536 -5.333333e-02\n1537  1.460000e-01\n1538 -3.133333e-02\n1539 -5.733333e-02\n1540 -1.100000e-01\n1541  8.533333e-02\n1542 -3.533333e-02\n1543 -1.153333e-01\n1544 -1.740000e-01\n1545  2.666667e-03\n1546 -1.513333e-01\n1547  1.426667e-01\n1548  2.006667e-01\n1549  6.000000e-02\n1550 -5.466667e-02\n1551  5.333333e-03\n1552  6.666667e-04\n1553  1.200000e-01\n1554  1.253333e-01\n1555  1.713333e-01\n1556  2.666667e-02\n1557 -9.400000e-02\n1558  9.133333e-02\n1559 -4.000000e-02\n1560 -4.200000e-02\n1561  1.200000e-02\n1562  3.800000e-02\n1563 -1.853333e-01\n1564 -2.066667e-02\n1565 -1.666667e-01\n1566 -1.686667e-01\n1567  1.333333e-02\n1568 -1.120000e-01\n1569 -2.266667e-02\n1570 -1.053333e-01\n1571  5.600000e-02\n1572 -6.466667e-02\n1573 -1.933333e-01\n1574 -4.800000e-02\n1575 -9.733333e-02\n1576  5.533333e-02\n1577 -2.380000e-01\n1578  8.800000e-02\n1579  1.000000e-02\n1580  1.106667e-01\n1581 -1.066667e-02\n1582 -1.266667e-02\n1583  7.933333e-02\n1584  3.200000e-02\n1585  3.733333e-02\n1586  1.426667e-01\n1587 -4.666667e-03\n1588 -1.000000e-01\n1589  2.133333e-02\n1590 -1.233333e-01\n1591  7.000000e-02\n1592 -1.466667e-02\n1593  1.800000e-02\n1594  1.933333e-02\n1595  8.000000e-03\n1596 -2.726667e-01\n1597 -2.106667e-01\n1598 -5.533333e-02\n1599  3.666667e-02\n1600 -3.933333e-02\n1601  8.200000e-02\n1602 -1.526667e-01\n1603  1.720000e-01\n1604 -1.600000e-02\n1605  1.706667e-01\n1606 -1.726667e-01\n1607 -1.233333e-01\n1608  5.533333e-02\n1609 -1.473333e-01\n1610 -3.466667e-02\n1611 -1.060000e-01\n1612  1.120000e-01\n1613 -6.533333e-02\n1614 -2.326667e-01\n1615  4.466667e-02\n1616 -2.313333e-01\n1617  8.600000e-02\n1618 -1.220000e-01\n1619 -1.186667e-01\n1620 -1.886667e-01\n1621 -1.933333e-02\n1622 -2.933333e-02\n1623 -1.920000e-01\n1624  1.566667e-01\n1625 -1.933333e-02\n1626 -1.633333e-01\n1627  8.333333e-02\n1628 -1.040000e-01\n1629 -7.600000e-02\n1630 -7.133333e-02\n1631  3.333333e-03\n1632  8.533333e-02\n1633 -8.866667e-02\n1634 -9.800000e-02\n1635  1.813333e-01\n1636 -1.293333e-01\n1637  2.733333e-02\n1638 -1.473333e-01\n1639 -3.533333e-02\n1640 -4.133333e-02\n1641  1.506667e-01\n1642  6.000000e-02\n1643  1.353333e-01\n1644 -1.920000e-01\n1645  8.933333e-02\n1646  1.306667e-01\n1647 -2.166667e-01\n1648  9.466667e-02\n1649 -2.533333e-02\n1650 -9.400000e-02\n1651  1.993333e-01\n1652 -3.600000e-02\n1653 -1.286667e-01\n1654 -1.800000e-02\n1655 -1.806667e-01\n1656 -1.046667e-01\n1657 -1.933333e-01\n1658  3.933333e-02\n1659 -6.666667e-04\n1660  2.000000e-03\n1661 -1.040000e-01\n1662 -1.153333e-01\n1663  4.200000e-02\n1664  1.580000e-01\n1665 -1.260000e-01\n1666  4.200000e-02\n1667  9.733333e-02\n1668 -8.666667e-02\n1669  1.573333e-01\n1670 -1.266667e-01\n1671 -1.486667e-01\n1672 -1.793333e-01\n1673  1.120000e-01\n1674 -1.333333e-02\n1675  2.553333e-01\n1676  1.346667e-01\n1677 -2.800000e-02\n1678 -6.866667e-02\n1679 -1.993333e-01\n1680  1.120000e-01\n1681  2.400000e-02\n1682  9.066667e-02\n1683 -1.466667e-01\n1684 -7.733333e-02\n1685 -1.666667e-02\n1686  6.933333e-02\n1687 -1.206667e-01\n1688 -1.260000e-01\n1689 -1.266667e-02\n1690 -1.626667e-01\n1691  1.200000e-01\n1692  1.966667e-01\n1693 -1.306667e-01\n1694 -8.800000e-02\n1695  1.633333e-01\n1696 -1.406667e-01\n1697  1.773333e-01\n1698 -1.066667e-02\n1699  1.086667e-01\n1700  1.660000e-01\n1701 -2.000000e-01\n1702 -1.000000e-01\n1703  4.800000e-02\n1704 -7.333333e-02\n1705 -2.466667e-02\n1706  3.600000e-02\n1707 -1.926667e-01\n1708 -2.280000e-01\n1709  2.546667e-01\n1710  1.326667e-01\n1711  1.426667e-01\n1712 -1.040000e-01\n1713  1.866667e-01\n1714  6.533333e-02\n1715  1.733333e-01\n1716  6.866667e-02\n1717  2.060000e-01\n1718 -6.666667e-03\n1719 -4.866667e-02\n1720  1.606667e-01\n1721 -1.053333e-01\n1722 -1.733333e-02\n1723 -1.866667e-02\n1724 -7.400000e-02\n1725 -1.520000e-01\n1726 -2.060000e-01\n1727 -8.000000e-02\n1728 -2.600000e-02\n1729 -6.200000e-02\n1730 -1.186667e-01\n1731  8.266667e-02\n1732  5.733333e-02\n1733 -1.413333e-01\n1734  5.933333e-02\n1735  1.400000e-02\n1736 -8.000000e-03\n1737  1.500000e-01\n1738  3.933333e-02\n1739  1.146667e-01\n1740 -1.480000e-01\n1741  1.606667e-01\n1742  9.866667e-02\n1743  4.666667e-03\n1744 -3.533333e-02\n1745  2.733333e-02\n1746  1.233333e-01\n1747  5.000000e-02\n1748  1.606667e-01\n1749  9.933333e-02\n1750 -1.920000e-01\n1751  1.613333e-01\n1752  6.666667e-04\n1753  1.106667e-01\n1754  8.066667e-02\n1755 -3.733333e-02\n1756  1.573333e-01\n1757 -1.193333e-01\n1758 -6.133333e-02\n1759 -1.040000e-01\n1760 -1.093333e-01\n1761 -1.200000e-02\n1762  1.666667e-01\n1763 -1.380000e-01\n1764  1.333333e-03\n1765  1.593333e-01\n1766  1.266667e-02\n1767 -2.666667e-02\n1768  8.600000e-02\n1769  2.266667e-02\n1770  1.680000e-01\n1771 -8.666667e-03\n1772  2.866667e-02\n1773 -6.533333e-02\n1774 -5.200000e-02\n1775  1.426667e-01\n1776  1.800000e-02\n1777  7.533333e-02\n1778 -2.133333e-02\n1779 -1.546667e-01\n1780  1.773333e-01\n1781 -1.413333e-01\n1782  7.200000e-02\n1783  8.666667e-03\n1784  4.866667e-02\n1785  5.400000e-02\n1786 -1.480000e-01\n1787 -1.413333e-01\n1788  3.466667e-02\n1789 -7.600000e-02\n1790  9.933333e-02\n1791  2.346667e-01\n1792 -1.420000e-01\n1793  1.320000e-01\n1794 -1.033333e-01\n1795 -1.153333e-01\n1796  1.533333e-02\n1797  6.800000e-02\n1798 -1.366667e-01\n1799 -1.240000e-01\n1800  1.066667e-01\n1801 -2.333333e-02\n1802 -6.066667e-02\n1803  1.833333e-01\n1804  1.613333e-01\n1805  9.600000e-02\n1806  6.000000e-03\n1807  5.333333e-03\n1808  1.893333e-01\n1809  2.000000e-01\n1810 -5.066667e-02\n1811 -2.400000e-02\n1812  1.100000e-01\n1813 -1.600000e-02\n1814  1.333333e-02\n1815 -8.866667e-02\n1816  4.666667e-03\n1817  3.133333e-02\n1818  2.700000e-01\n1819  1.466667e-02\n1820  1.586667e-01\n1821  1.113333e-01\n1822  1.066667e-01\n1823 -4.200000e-02\n1824  1.513333e-01\n1825 -1.453333e-01\n1826 -9.666667e-02\n1827 -1.653333e-01\n1828 -9.800000e-02\n1829  8.533333e-02\n1830  1.000000e-02\n1831 -5.066667e-02\n1832  1.326667e-01\n1833 -3.400000e-02\n1834  2.000000e-02\n1835 -2.220000e-01\n1836  4.266667e-02\n1837  1.700000e-01\n1838 -1.433333e-01\n1839  2.553333e-01\n1840 -2.666667e-03\n1841 -2.066667e-02\n1842  3.333333e-03\n1843 -2.046667e-01\n1844 -2.186667e-01\n1845 -4.000000e-03\n1846 -5.533333e-02\n1847 -4.266667e-02\n1848  1.866667e-02\n1849 -1.373333e-01\n1850 -1.153333e-01\n1851 -1.513333e-01\n1852 -1.540000e-01\n1853  1.066667e-02\n1854  1.586667e-01\n1855 -8.466667e-02\n1856 -1.486667e-01\n1857  1.700000e-01\n1858  6.733333e-02\n1859  1.953333e-01\n1860  1.193333e-01\n1861 -1.760000e-01\n1862  1.940000e-01\n1863  3.333333e-03\n1864  8.733333e-02\n1865  4.133333e-02\n1866  5.733333e-02\n1867 -1.880000e-01\n1868  2.800000e-02\n1869 -1.573333e-01\n1870 -5.266667e-02\n1871  2.533333e-02\n1872 -1.580000e-01\n1873  2.066667e-02\n1874  1.860000e-01\n1875  1.333333e-03\n1876 -8.466667e-02\n1877  1.060000e-01\n1878  8.333333e-02\n1879  7.666667e-02\n1880  1.453333e-01\n1881 -2.000000e-02\n1882  2.000000e-02\n1883 -9.866667e-02\n1884  1.533333e-02\n1885  5.400000e-02\n1886  9.866667e-02\n1887  2.686667e-01\n1888 -9.066667e-02\n1889  2.666667e-02\n1890 -8.200000e-02\n1891  8.600000e-02\n1892  1.153333e-01\n1893 -2.466667e-02\n1894  2.280000e-01\n1895 -1.580000e-01\n1896 -1.560000e-01\n1897  1.333333e-03\n1898  1.400000e-02\n1899 -1.266667e-01\n1900 -1.900000e-01\n1901  1.560000e-01\n1902 -7.200000e-02\n1903 -3.266667e-02\n1904  2.746667e-01\n1905  1.440000e-01\n1906 -7.666667e-02\n1907  1.540000e-01\n1908  5.866667e-02\n1909  2.266667e-02\n1910 -1.200000e-02\n1911  9.533333e-02\n1912  1.660000e-01\n1913  1.253333e-01\n1914  5.266667e-02\n1915 -1.646667e-01\n1916 -2.520000e-01\n1917  3.133333e-02\n1918  1.573333e-01\n1919  2.333333e-02\n1920 -2.200000e-02\n1921  1.780000e-01\n1922  6.466667e-02\n1923 -3.666667e-02\n1924 -2.666667e-03\n1925 -4.600000e-02\n1926 -8.066667e-02\n1927 -8.866667e-02\n1928  5.333333e-02\n1929 -5.666667e-02\n1930  1.493333e-01\n1931 -7.600000e-02\n1932  1.246667e-01\n1933  2.666667e-03\n1934  1.820000e-01\n1935 -1.313333e-01\n1936 -9.000000e-02\n1937  1.820000e-01\n1938 -4.400000e-02\n1939 -2.020000e-01\n1940 -3.400000e-02\n1941  5.066667e-02\n1942  9.733333e-02\n1943 -1.446667e-01\n1944  6.333333e-02\n1945  1.360000e-01\n1946  1.073333e-01\n1947  5.400000e-02\n1948 -1.880000e-01\n1949 -9.866667e-02\n1950  1.100000e-01\n1951  5.733333e-02\n1952  1.060000e-01\n1953 -1.486667e-01\n1954 -7.066667e-02\n1955  5.066667e-02\n1956  5.533333e-02\n1957 -2.200000e-02\n1958  1.546667e-01\n1959  1.900000e-01\n1960  5.666667e-02\n1961  1.080000e-01\n1962 -1.566667e-01\n1963  7.000000e-02\n1964  9.466667e-02\n1965 -3.133333e-02\n1966 -1.006667e-01\n1967  1.873333e-01\n1968 -8.933333e-02\n1969  8.133333e-02\n1970 -2.400000e-02\n1971 -1.526667e-01\n1972  9.533333e-02\n1973  1.333333e-01\n1974 -1.266667e-01\n1975 -1.780000e-01\n1976  1.306667e-01\n1977  1.413333e-01\n1978 -2.246667e-01\n1979 -9.000000e-02\n1980  1.160000e-01\n1981 -1.466667e-02\n1982 -1.466667e-02\n1983  9.533333e-02\n1984 -2.580000e-01\n1985  1.553333e-01\n1986  1.886667e-01\n1987 -6.133333e-02\n1988 -6.666667e-03\n1989  2.200000e-02\n1990 -1.340000e-01\n1991 -1.666667e-02\n1992 -2.160000e-01\n1993  1.213333e-01\n1994  2.266667e-02\n1995  1.640000e-01\n1996  1.120000e-01\n1997 -2.000000e-03\n1998 -3.333333e-03\n1999 -1.233333e-01\n2000 -7.200000e-02\n2001  1.066667e-01\n2002  1.266667e-01\n2003 -1.766667e-01\n2004 -3.200000e-02\n2005 -2.560000e-01\n2006  3.400000e-02\n2007  2.666667e-02\n2008  1.626667e-01\n2009  1.240000e-01\n2010 -2.800000e-02\n2011  2.066667e-02\n2012  2.666667e-03\n2013  1.060000e-01\n2014  1.593333e-01\n2015 -1.920000e-01\n2016  1.733333e-01\n2017  1.726667e-01\n2018 -3.466667e-02\n2019 -7.333333e-02\n2020 -1.020000e-01\n2021 -1.200000e-02\n2022 -1.080000e-01\n2023  1.266667e-02\n2024  4.333333e-02\n2025 -1.940000e-01\n2026 -1.673333e-01\n2027 -7.200000e-02\n2028 -6.533333e-02\n2029  3.200000e-02\n2030  2.220610e-17\n2031  1.473333e-01\n2032  1.666667e-01\n2033  2.666667e-02\n2034 -1.293333e-01\n2035  1.766667e-01\n2036  1.700000e-01\n2037  4.466667e-02\n2038 -8.000000e-02\n2039 -2.533333e-01\n2040  1.366667e-01\n2041 -2.420000e-01\n2042  2.066667e-01\n2043 -8.000000e-02\n2044 -1.173333e-01\n2045  1.446667e-01\n2046 -3.733333e-02\n2047  7.733333e-02\n2048  1.360000e-01\n2049 -2.580000e-01\n2050 -1.913333e-01\n2051 -8.200000e-02\n2052  2.020000e-01\n2053  1.880000e-01\n2054 -4.133333e-02\n2055 -2.266667e-02\n2056 -3.600000e-02\n2057 -8.333333e-02\n2058  4.266667e-02\n2059 -1.693333e-01\n2060 -1.266667e-02\n2061  1.006667e-01\n2062 -2.066667e-02\n2063 -3.666667e-02\n2064 -2.400000e-02\n2065 -1.866667e-01\n2066 -1.353333e-01\n2067 -2.420000e-01\n2068 -3.266667e-02\n2069  4.066667e-02\n2070  1.886667e-01\n2071 -9.333333e-02\n2072  1.326667e-01\n2073 -1.280000e-01\n2074  6.933333e-02\n2075 -2.053333e-01\n2076 -6.333333e-02\n2077  1.113333e-01\n2078 -4.000000e-02\n2079  8.066667e-02\n2080 -2.866667e-02\n2081 -2.593333e-01\n2082  2.193333e-01\n2083  2.426667e-01\n2084 -1.473333e-01\n2085  1.940000e-01\n2086  1.573333e-01\n2087  9.933333e-02\n2088 -1.273333e-01\n2089 -8.933333e-02\n2090 -9.600000e-02\n2091 -1.246667e-01\n2092 -9.866667e-02\n2093 -3.200000e-02\n2094  9.533333e-02\n2095  1.146667e-01\n2096 -9.133333e-02\n2097  2.393333e-01\n2098  1.213333e-01\n2099 -2.420000e-01\n2100 -3.266667e-02\n2101 -7.333333e-02\n2102 -7.266667e-02\n2103 -1.406667e-01\n2104 -8.000000e-03\n2105  7.800000e-02\n2106  1.406667e-01\n2107 -4.666667e-03\n2108  7.466667e-02\n2109  1.800000e-02\n2110 -1.333333e-01\n2111 -4.400000e-02\n2112  1.233333e-01\n2113  1.340000e-01\n2114 -1.006667e-01\n2115  8.733333e-02\n2116  1.766667e-01\n2117  6.533333e-02\n2118 -1.666667e-02\n2119  1.800000e-02\n2120  1.133333e-02\n2121  7.733333e-02\n2122  1.100000e-01\n2123  1.840000e-01\n2124 -7.933333e-02\n2125 -1.540000e-01\n2126 -2.006667e-01\n2127 -1.760000e-01\n2128  1.540000e-01\n2129  1.860000e-01\n2130  1.620000e-01\n2131  2.400000e-02\n2132 -2.406667e-01\n2133 -1.813333e-01\n2134  1.080000e-01\n2135 -1.133333e-02\n2136 -4.266667e-02\n2137 -1.026667e-01\n2138 -3.133333e-02\n2139  2.800000e-02\n2140 -1.933333e-02\n2141  4.133333e-02\n2142  5.933333e-02\n2143  2.773333e-01\n2144  8.000000e-03\n2145  6.933333e-02\n2146  2.333333e-02\n2147  7.466667e-02\n2148  5.333333e-03\n2149 -4.933333e-02\n2150 -7.400000e-02\n2151 -6.000000e-02\n2152  1.253333e-01\n2153 -8.133333e-02\n2154  2.666667e-03\n2155 -2.866667e-02\n2156  2.553333e-01\n2157  3.040000e-01\n2158  4.866667e-02\n2159  1.506667e-01\n2160  1.600000e-02\n2161  8.066667e-02\n2162  9.866667e-02\n2163  6.600000e-02\n2164  1.266667e-01\n2165 -1.513333e-01\n2166  9.600000e-02\n2167  1.866667e-02\n2168  5.933333e-02\n2169  4.800000e-02\n2170  8.533333e-02\n2171 -8.666667e-03\n2172  2.246667e-01\n2173  8.733333e-02\n2174 -7.333333e-03\n2175  1.500000e-01\n2176  1.120000e-01\n2177  9.400000e-02\n2178 -2.206667e-01\n2179 -1.160000e-01\n2180 -1.733333e-02\n2181 -1.746667e-01\n2182 -2.800000e-02\n2183  2.666667e-03\n2184 -1.126667e-01\n2185 -4.600000e-02\n2186 -9.733333e-02\n2187  2.333333e-01\n2188 -1.880000e-01\n2189 -5.400000e-02\n2190  1.233333e-01\n2191 -5.666667e-02\n2192 -2.653333e-01\n2193 -7.666667e-02\n2194  9.733333e-02\n2195  2.406667e-01\n2196  1.040000e-01\n2197  2.200000e-01\n2198  1.133333e-01\n2199  7.733333e-02\n2200  1.046667e-01\n2201 -8.266667e-02\n2202  3.866667e-02\n2203 -6.466667e-02\n2204  1.073333e-01\n2205  1.360000e-01\n2206 -4.666667e-02\n2207 -1.580000e-01\n2208 -7.533333e-02\n2209  1.120000e-01\n2210 -1.853333e-01\n2211 -8.400000e-02\n2212 -1.000000e-02\n2213  1.466667e-01\n2214 -8.933333e-02\n2215  5.466667e-02\n2216 -7.866667e-02\n2217  1.646667e-01\n2218 -5.066667e-02\n2219 -1.560000e-01\n2220 -2.133333e-02\n2221 -1.746667e-01\n2222 -1.606667e-01\n2223 -6.400000e-02\n2224 -3.733333e-02\n2225 -1.206667e-01\n2226  3.266667e-02\n2227  7.666667e-02\n2228  1.153333e-01\n2229  9.533333e-02\n2230  1.700000e-01\n2231  1.620000e-01\n2232  1.200000e-01\n2233  2.053333e-01\n2234  1.546667e-01\n2235  2.306667e-01\n2236  1.173333e-01\n2237 -1.273333e-01\n2238  2.533333e-02\n2239  1.220000e-01\n2240  1.280000e-01\n2241 -4.266667e-02\n2242 -2.666667e-03\n2243  1.733333e-01\n2244  9.800000e-02\n2245 -8.600000e-02\n2246  1.680000e-01\n2247  6.466667e-02\n2248  2.266667e-02\n2249 -7.533333e-02\n2250  2.000000e-02\n2251  1.933333e-02\n2252  1.833333e-01\n2253 -6.733333e-02\n2254 -1.833333e-01\n2255 -1.353333e-01\n2256 -4.933333e-02\n2257  4.533333e-02\n2258 -1.826667e-01\n2259 -9.333333e-03\n2260  1.046667e-01\n2261 -6.666667e-02\n2262  3.400000e-02\n2263 -1.226667e-01\n2264  1.006667e-01\n2265 -2.093333e-01\n2266 -6.866667e-02\n2267  4.400000e-02\n2268 -1.026667e-01\n2269  1.906667e-01\n2270  2.453333e-01\n2271 -7.733333e-02\n2272  1.453333e-01\n2273 -6.333333e-02\n2274 -6.666667e-04\n2275 -1.933333e-01\n2276  1.166667e-01\n2277  8.600000e-02\n2278  6.866667e-02\n2279  1.060000e-01\n2280  8.666667e-02\n2281  3.266667e-02\n2282  1.153333e-01\n2283 -1.860000e-01\n2284 -1.353333e-01\n2285  9.333333e-02\n2286  1.100000e-01\n2287 -1.866667e-01\n2288  1.373333e-01\n2289  1.973333e-01\n2290 -1.286667e-01\n2291 -7.266667e-02\n2292 -6.666667e-03\n2293  2.320000e-01\n2294 -8.866667e-02\n2295  9.200000e-02\n2296 -1.160000e-01\n2297 -9.866667e-02\n2298 -7.266667e-02\n2299 -1.413333e-01\n2300 -6.000000e-02\n2301  1.593333e-01\n2302  1.173333e-01\n2303 -1.200000e-02\n2304 -7.733333e-02\n2305 -2.666667e-02\n2306 -3.800000e-02\n2307  9.333333e-03\n2308  2.733333e-02\n2309  1.380000e-01\n2310 -1.493333e-01\n2311  1.693333e-01\n2312  1.640000e-01\n2313 -1.033333e-01\n2314  2.466667e-02\n2315  2.466667e-02\n2316  1.420000e-01\n2317 -9.333333e-03\n2318 -1.446667e-01\n2319 -2.520000e-01\n2320  2.166667e-01\n2321  2.460000e-01\n2322  2.286667e-01\n2323 -2.600000e-02\n2324 -7.000000e-02\n2325 -3.866667e-02\n2326 -8.333333e-02\n2327  2.000000e-02\n2328 -1.666667e-02\n2329 -7.466667e-02\n2330 -9.666667e-02\n2331  2.000000e-03\n2332  2.413333e-01\n2333  5.400000e-02\n2334  1.440000e-01\n2335 -1.826667e-01\n2336  1.780000e-01\n2337 -1.813333e-01\n2338  7.000000e-02\n2339 -1.353333e-01\n2340 -9.400000e-02\n2341 -1.346667e-01\n2342  6.400000e-02\n2343 -6.266667e-02\n2344  7.933333e-02\n2345 -1.180000e-01\n2346  2.140000e-01\n2347 -2.173333e-01\n2348  2.333333e-02\n2349 -1.060000e-01\n2350 -4.000000e-02\n2351 -7.600000e-02\n2352  8.800000e-02\n2353  1.266667e-02\n2354  1.460000e-01\n2355  7.533333e-02\n2356  1.966667e-01\n2357 -2.000000e-03\n2358 -1.106667e-01\n2359 -1.066667e-02\n2360  8.400000e-02\n2361 -2.293333e-01\n2362 -3.866667e-02\n2363 -8.600000e-02\n2364  2.133333e-02\n2365 -1.600000e-01\n2366  2.800000e-02\n2367  1.060000e-01\n2368  5.000000e-02\n2369  1.266667e-02\n2370 -1.000000e-01\n2371  4.866667e-02\n2372 -6.800000e-02\n2373 -1.060000e-01\n2374  1.886667e-01\n2375  3.333333e-02\n2376  1.280000e-01\n2377  1.873333e-01\n2378  7.866667e-02\n2379  1.180000e-01\n2380  1.300000e-01\n2381 -9.066667e-02\n2382 -1.600000e-01\n2383  1.566667e-01\n2384  2.800000e-02\n2385 -1.433333e-01\n2386 -9.800000e-02\n2387  9.733333e-02\n2388  3.933333e-02\n2389  1.153333e-01\n2390  6.666667e-02\n2391 -2.000000e-01\n2392  1.220000e-01\n2393 -2.933333e-02\n2394 -1.533333e-01\n2395 -3.466667e-02\n2396 -2.200000e-02\n2397  2.400000e-02\n2398 -1.006667e-01\n2399 -6.600000e-02\n2400 -1.813333e-01\n2401 -9.600000e-02\n2402  8.333333e-02\n2403 -7.066667e-02\n2404 -1.626667e-01\n2405  1.493333e-01\n2406  1.266667e-02\n2407  1.513333e-01\n2408 -9.333333e-03\n2409 -4.800000e-02\n2410  6.400000e-02\n2411  1.340000e-01\n2412  5.866667e-02\n2413 -1.440000e-01\n2414  7.533333e-02\n2415  1.486667e-01\n2416  1.766667e-01\n2417  2.253333e-01\n2418 -9.733333e-02\n2419  2.666667e-03\n2420 -1.353333e-01\n2421  6.933333e-02\n2422 -9.200000e-02\n2423 -9.066667e-02\n2424 -1.066667e-01\n2425  1.286667e-01\n2426  1.666667e-01\n2427 -1.626667e-01\n2428 -1.366667e-01\n2429 -1.086667e-01\n2430  6.133333e-02\n2431 -6.000000e-03\n2432  1.166667e-01\n2433 -1.833333e-01\n2434  1.133333e-02\n2435  1.506667e-01\n2436  5.533333e-02\n2437 -1.053333e-01\n2438 -8.400000e-02\n2439  1.366667e-01\n2440  5.133333e-02\n2441  5.933333e-02\n2442 -1.006667e-01\n2443 -5.666667e-02\n2444 -1.360000e-01\n2445  1.880000e-01\n2446  3.533333e-02\n2447 -4.666667e-02\n2448 -1.633333e-01\n2449  1.180000e-01\n2450 -3.266667e-02\n2451 -2.266667e-02\n2452  7.066667e-02\n2453 -9.333333e-02\n2454 -4.000000e-02\n2455  1.606667e-01\n2456 -3.600000e-02\n2457 -9.333333e-02\n2458  3.200000e-02\n2459  6.666667e-02\n2460  1.500000e-01\n2461  1.100000e-01\n2462 -5.266667e-02\n2463 -7.466667e-02\n2464 -2.333333e-02\n2465  1.880000e-01\n2466 -1.366667e-01\n2467  5.066667e-02\n2468  1.493333e-01\n2469 -1.326667e-01\n2470 -1.126667e-01\n2471 -9.466667e-02\n2472  1.306667e-01\n2473  3.000000e-02\n2474  1.453333e-01\n2475 -1.073333e-01\n2476  1.666667e-01\n2477 -6.066667e-02\n2478  7.600000e-02\n2479  9.466667e-02\n2480  3.800000e-02\n2481  6.533333e-02\n2482  2.400000e-02\n2483 -2.006667e-01\n2484  7.666667e-02\n2485  3.866667e-02\n2486  1.133333e-02\n2487  1.873333e-01\n2488  2.600000e-02\n2489 -5.933333e-02\n2490  1.740000e-01\n2491  1.173333e-01\n2492  2.346667e-01\n2493 -8.600000e-02\n2494 -1.033333e-01\n2495 -9.800000e-02\n2496  1.046667e-01\n2497 -1.126667e-01\n2498  3.400000e-02\n2499 -9.733333e-02\n2500 -1.600000e-02\n2501  3.600000e-02\n2502 -1.306667e-01\n2503  5.866667e-02\n2504 -6.200000e-02\n2505 -1.466667e-01\n2506 -1.946667e-01\n2507  3.266667e-02\n2508 -2.200000e-01\n2509  2.133333e-01\n2510 -6.333333e-02\n2511  9.866667e-02\n2512  1.573333e-01\n2513  2.800000e-02\n2514 -2.333333e-02\n2515 -8.466667e-02\n2516 -1.313333e-01\n2517  4.000000e-03\n2518 -5.733333e-02\n2519  7.266667e-02\n2520 -2.400000e-02\n2521 -1.333333e-02\n2522 -1.466667e-02\n2523  1.153333e-01\n2524  1.873333e-01\n2525 -8.533333e-02\n2526 -6.333333e-02\n2527 -1.040000e-01\n2528 -2.400000e-02\n2529 -9.866667e-02\n2530 -1.066667e-02\n2531 -1.033333e-01\n2532 -1.533333e-01\n2533  1.333333e-02\n2534  9.600000e-02\n2535  3.733333e-02\n2536 -7.200000e-02\n2537 -4.066667e-02\n2538  1.946667e-01\n2539 -1.840000e-01\n2540 -9.933333e-02\n2541 -6.400000e-02\n2542  1.566667e-01\n2543 -3.733333e-02\n2544  1.586667e-01\n2545  4.066667e-02\n2546  1.306667e-01\n2547  9.333333e-02\n2548 -3.733333e-02\n2549  1.740000e-01\n2550 -8.866667e-02\n2551 -1.200000e-01\n2552 -6.133333e-02\n2553 -2.260000e-01\n2554 -6.666667e-02\n2555  6.133333e-02\n2556 -1.753333e-01\n2557 -1.000000e-02\n2558 -1.600000e-02\n2559 -4.666667e-02\n2560 -6.133333e-02\n2561  1.200000e-02\n2562 -1.540000e-01\n2563 -1.233333e-01\n2564  2.733333e-02\n2565 -1.073333e-01\n2566 -1.546667e-01\n2567  6.666667e-04\n2568  6.466667e-02\n2569  2.026667e-01\n2570 -1.346667e-01\n2571  1.180000e-01\n2572 -3.466667e-02\n2573  8.533333e-02\n2574 -1.480000e-01\n2575 -1.426667e-01\n2576 -2.366667e-01\n2577  1.846667e-01\n2578  2.613333e-01\n2579 -2.200000e-02\n2580 -3.933333e-02\n2581 -2.313333e-01\n2582  1.093333e-01\n2583  7.200000e-02\n2584  4.600000e-02\n2585 -1.193333e-01\n2586  1.660000e-01\n2587  9.933333e-02\n2588  1.226667e-01\n2589 -1.953333e-01\n2590 -1.180000e-01\n2591  9.266667e-02\n2592  1.213333e-01\n2593  2.280000e-01\n2594 -4.800000e-02\n2595 -8.200000e-02\n2596  1.586667e-01\n2597  2.540000e-01\n2598  7.933333e-02\n2599  3.666667e-02\n2600  1.160000e-01\n2601 -1.940000e-01\n2602  1.953333e-01\n2603 -1.800000e-01\n2604  1.026667e-01\n2605  8.733333e-02\n2606 -1.420000e-01\n2607 -1.460000e-01\n2608  1.573333e-01\n2609 -1.580000e-01\n2610  3.200000e-02\n2611 -1.720000e-01\n2612  1.213333e-01\n2613  1.173333e-01\n2614 -5.733333e-02\n2615 -2.000000e-03\n2616 -6.866667e-02\n2617  9.200000e-02\n2618 -7.133333e-02\n2619  1.326667e-01\n2620  4.866667e-02\n2621  9.333333e-03\n2622 -3.000000e-02\n2623 -6.666667e-02\n2624 -1.846667e-01\n2625  1.993333e-01\n2626  3.200000e-02\n2627 -1.486667e-01\n2628  4.866667e-02\n2629 -1.913333e-01\n2630  1.133333e-01\n2631  2.413333e-01\n2632  1.333333e-03\n2633  5.133333e-02\n2634 -4.600000e-02\n2635 -1.700000e-01\n2636 -2.466667e-02\n2637  8.733333e-02\n2638 -6.333333e-02\n2639  1.353333e-01\n2640 -8.000000e-03\n2641 -2.153333e-01\n2642  1.046667e-01\n2643  1.033333e-01\n2644  1.400000e-02\n2645 -1.186667e-01\n2646 -1.806667e-01\n2647 -3.133333e-02\n2648 -1.380000e-01\n2649 -7.266667e-02\n2650  1.906667e-01\n2651 -3.333333e-03\n2652  8.666667e-03\n2653  2.186667e-01\n2654  2.400000e-02\n2655 -8.466667e-02\n2656 -1.200000e-01\n2657  5.600000e-02\n2658  8.666667e-03\n2659 -1.780000e-01\n2660  8.466667e-02\n2661 -1.160000e-01\n2662  6.400000e-02\n2663 -5.533333e-02\n2664  1.033333e-01\n2665  2.433333e-01\n2666  6.333333e-02\n2667 -1.600000e-02\n2668  1.266667e-02\n2669 -9.800000e-02\n2670 -1.146667e-01\n2671  1.266667e-01\n2672  3.333333e-02\n2673  3.066667e-02\n2674  3.466667e-02\n2675  4.200000e-02\n2676  8.000000e-03\n2677  8.333333e-02\n2678  1.606667e-01\n2679  2.080000e-01\n2680 -1.380000e-01\n2681  2.533333e-02\n2682 -2.266667e-02\n2683 -1.846667e-01\n2684 -6.466667e-02\n2685 -8.666667e-03\n2686  6.666667e-02\n2687  5.000000e-02\n2688  1.980000e-01\n2689  1.593333e-01\n2690  1.880000e-01\n2691 -1.646667e-01\n2692  1.213333e-01\n2693 -4.000000e-03\n2694  1.046667e-01\n2695  6.133333e-02\n2696  2.266667e-01\n2697 -1.086667e-01\n2698  1.373333e-01\n2699 -1.126667e-01\n2700  1.593333e-01\n2701  1.753333e-01\n2702  1.866667e-02\n2703  1.920000e-01\n2704 -1.200000e-02\n2705 -8.666667e-02\n2706  2.466667e-02\n2707 -2.120000e-01\n2708 -1.186667e-01\n2709  3.733333e-02\n2710 -9.666667e-02\n2711  1.040000e-01\n2712 -2.366667e-01\n2713 -1.120000e-01\n2714  9.666667e-02\n2715  1.373333e-01\n2716 -1.533333e-02\n2717  1.260000e-01\n2718 -5.466667e-02\n2719  1.120000e-01\n2720  1.893333e-01\n2721 -1.606667e-01\n2722 -9.666667e-02\n2723  8.400000e-02\n2724  2.666667e-02\n2725 -5.800000e-02\n2726  1.746667e-01\n2727  8.000000e-02\n2728  1.773333e-01\n2729  2.373333e-01\n2730  9.866667e-02\n2731 -4.000000e-02\n2732 -9.333333e-02\n2733 -1.113333e-01\n2734  3.866667e-02\n2735 -8.400000e-02\n2736 -5.666667e-02\n2737  2.466667e-02\n2738 -1.513333e-01\n2739 -1.660000e-01\n2740 -2.066667e-02\n2741 -3.400000e-02\n2742  9.333333e-03\n2743  1.246667e-01\n2744 -1.000000e-02\n2745  1.540000e-01\n2746  1.913333e-01\n2747 -1.080000e-01\n2748 -1.180000e-01\n2749  2.000000e-03\n2750 -8.066667e-02\n2751  1.786667e-01\n2752 -1.160000e-01\n2753  6.666667e-03\n2754 -1.526667e-01\n2755 -1.246667e-01\n2756 -1.080000e-01\n2757 -8.133333e-02\n2758 -2.320000e-01\n2759  2.093333e-01\n2760 -1.906667e-01\n2761 -1.060000e-01\n2762 -1.780000e-01\n2763 -6.666667e-03\n2764  4.200000e-02\n2765  1.806667e-01\n2766 -6.400000e-02\n2767  5.200000e-02\n2768 -1.793333e-01\n2769  2.600000e-02\n2770 -9.000000e-02\n2771 -1.146667e-01\n2772 -2.066667e-02\n2773 -6.666667e-02\n2774  8.266667e-02\n2775 -3.600000e-02\n2776 -8.200000e-02\n2777 -1.473333e-01\n2778  4.000000e-03\n2779  1.566667e-01\n2780 -1.933333e-01\n2781 -9.200000e-02\n2782 -9.200000e-02\n2783  1.093333e-01\n2784 -1.186667e-01\n2785  1.066667e-02\n2786  1.666667e-01\n2787 -8.133333e-02\n2788  1.593333e-01\n2789 -1.046667e-01\n2790  7.066667e-02\n2791 -7.733333e-02\n2792 -1.933333e-02\n2793  4.666667e-03\n2794  1.620000e-01\n2795  5.000000e-02\n2796  3.533333e-02\n2797 -1.486667e-01\n2798 -6.866667e-02\n2799 -4.266667e-02\n2800 -1.086667e-01\n2801  2.026667e-01\n2802 -1.473333e-01\n2803 -1.846667e-01\n2804  1.540000e-01\n2805 -1.140000e-01\n2806  1.733333e-02\n2807  1.460000e-01\n2808  1.566667e-01\n2809 -1.800000e-02\n2810 -1.293333e-01\n2811 -9.933333e-02\n2812 -1.173333e-01\n2813 -1.526667e-01\n2814 -6.000000e-03\n2815 -6.666667e-03\n2816  2.240000e-01\n2817 -3.066667e-02\n2818 -1.746667e-01\n2819 -8.733333e-02\n2820 -1.086667e-01\n2821 -1.140000e-01\n2822  1.780000e-01\n2823 -2.733333e-02\n2824 -2.140000e-01\n2825 -2.000000e-03\n2826  1.653333e-01\n2827  1.413333e-01\n2828 -8.733333e-02\n2829  1.093333e-01\n2830  7.533333e-02\n2831 -9.066667e-02\n2832 -1.140000e-01\n2833  7.133333e-02\n2834  4.800000e-02\n2835 -7.600000e-02\n2836  6.000000e-03\n2837  7.066667e-02\n2838  1.660000e-01\n2839 -4.600000e-02\n2840  1.320000e-01\n2841 -8.666667e-03\n2842  1.553333e-01\n2843  1.546667e-01\n2844 -1.066667e-02\n2845  7.333333e-02\n2846  5.333333e-02\n2847  1.486667e-01\n2848 -8.200000e-02\n2849 -3.333333e-03\n2850  1.460000e-01\n2851 -2.260000e-01\n2852 -3.133333e-02\n2853  1.973333e-01\n2854  3.266667e-02\n2855 -2.293333e-01\n2856  2.146667e-01\n2857 -1.453333e-01\n2858  9.133333e-02\n2859 -1.780000e-01\n2860 -9.066667e-02\n2861 -1.940000e-01\n2862  2.666667e-03\n2863 -1.473333e-01\n2864  1.186667e-01\n2865  5.333333e-02\n2866  2.733333e-02\n2867  5.066667e-02\n2868 -2.620000e-01\n2869  1.520000e-01\n2870  9.066667e-02\n2871  5.600000e-02\n2872 -3.466667e-02\n2873 -6.066667e-02\n2874 -5.200000e-02\n2875 -9.066667e-02\n2876 -7.400000e-02\n2877  9.800000e-02\n2878  1.513333e-01\n2879 -1.740000e-01\n2880  5.200000e-02\n2881  1.313333e-01\n2882  1.733333e-02\n2883  1.800000e-02\n2884 -4.000000e-03\n2885 -7.333333e-02\n2886  1.520000e-01\n2887 -2.466667e-02\n2888 -1.526667e-01\n2889 -4.266667e-02\n2890 -1.073333e-01\n2891  9.333333e-02\n2892  1.020000e-01\n2893  1.826667e-01\n2894 -5.000000e-02\n2895  8.066667e-02\n2896 -6.066667e-02\n2897  1.366667e-01\n2898 -2.066667e-01\n2899 -4.000000e-02\n2900  7.133333e-02\n2901 -3.533333e-02\n2902  9.666667e-02\n2903 -1.086667e-01\n2904 -7.000000e-02\n2905 -7.200000e-02\n2906  3.600000e-02\n2907  1.226667e-01\n2908  2.000000e-02\n2909  2.400000e-02\n2910 -1.100000e-01\n2911  1.520000e-01\n2912 -1.226667e-01\n2913 -2.173333e-01\n2914 -1.220000e-01\n2915 -1.573333e-01\n2916 -9.533333e-02\n2917  1.266667e-02\n2918  1.740000e-01\n2919 -8.200000e-02\n2920 -1.140000e-01\n2921 -2.200000e-02\n2922  9.066667e-02\n2923 -2.513333e-01\n2924 -3.800000e-02\n2925  2.600000e-02\n2926 -2.866667e-02\n2927  1.433333e-01\n2928  1.560000e-01\n2929  2.600000e-02\n2930 -1.006667e-01\n2931 -1.333333e-03\n2932  6.933333e-02\n2933  1.533333e-02\n2934 -4.666667e-02\n2935  2.266667e-02\n2936 -2.440000e-01\n2937 -1.300000e-01\n2938 -1.266667e-01\n2939 -8.066667e-02\n2940  1.053333e-01\n2941 -3.400000e-02\n2942  7.400000e-02\n2943  4.800000e-02\n2944 -5.933333e-02\n2945 -6.533333e-02\n2946 -8.666667e-02\n2947  6.000000e-02\n2948  5.200000e-02\n2949 -9.600000e-02\n2950 -5.466667e-02\n2951 -1.533333e-01\n2952 -5.000000e-02\n2953 -8.000000e-02\n2954  6.266667e-02\n2955 -8.866667e-02\n2956 -1.746667e-01\n2957  8.266667e-02\n2958  8.200000e-02\n2959 -1.273333e-01\n2960 -6.933333e-02\n2961  1.726667e-01\n2962 -3.200000e-02\n2963 -1.800000e-01\n2964  2.013333e-01\n2965  1.040000e-01\n2966 -5.333333e-02\n2967  4.666667e-02\n2968  1.653333e-01\n2969  3.066667e-02\n2970 -1.153333e-01\n2971 -1.420000e-01\n2972 -1.873333e-01\n2973 -4.200000e-02\n2974  1.546667e-01\n2975  9.200000e-02\n2976  5.933333e-02\n2977  1.526667e-01\n2978 -2.866667e-02\n2979  1.866667e-02\n2980  1.586667e-01\n2981  1.393333e-01\n2982 -7.000000e-02\n2983 -1.546667e-01\n2984  1.000000e-02\n2985 -6.666667e-03\n2986 -5.333333e-03\n2987  1.133333e-02\n2988 -1.120000e-01\n2989 -1.400000e-02\n2990  5.733333e-02\n2991  1.433333e-01\n2992  1.000000e-02\n2993 -3.866667e-02\n2994 -1.333333e-01\n2995 -1.466667e-01\n2996  1.800000e-02\n2997 -3.333333e-03\n2998 -1.506667e-01\n2999  4.200000e-02\n3000  4.733333e-02\n3001 -1.020000e-01\n3002  2.500000e-01\n3003 -6.200000e-02\n3004 -4.066667e-02\n3005 -8.600000e-02\n3006 -1.333333e-01\n3007 -7.666667e-02\n3008  5.733333e-02\n3009 -1.073333e-01\n3010  7.333333e-03\n3011 -1.526667e-01\n3012 -7.733333e-02\n3013  1.040000e-01\n3014  1.166667e-01\n3015  1.526667e-01\n3016  1.773333e-01\n3017  4.666667e-03\n3018  1.040000e-01\n3019  1.700000e-01\n3020 -1.546667e-01\n3021  1.680000e-01\n3022 -1.933333e-02\n3023 -7.800000e-02\n3024 -6.600000e-02\n3025  1.160000e-01\n3026 -3.866667e-02\n3027  3.066667e-02\n3028  9.266667e-02\n3029 -6.333333e-02\n3030 -1.166667e-01\n3031  2.466667e-02\n3032  7.066667e-02\n3033 -5.933333e-02\n3034 -1.613333e-01\n3035  1.673333e-01\n3036 -1.426667e-01\n3037  1.453333e-01\n3038  1.100000e-01\n3039 -1.820000e-01\n3040 -7.800000e-02\n3041 -1.466667e-01\n3042  1.346667e-01\n3043 -1.213333e-01\n3044  1.066667e-02\n3045 -1.800000e-02\n3046 -1.000000e-01\n3047 -1.740000e-01\n3048 -1.666667e-02\n3049 -1.200000e-02\n3050 -1.533333e-02\n3051  2.413333e-01\n3052  1.393333e-01\n3053  2.666667e-02\n3054  6.466667e-02\n3055  1.546667e-01\n3056 -8.466667e-02\n3057 -1.666667e-02\n3058  5.933333e-02\n3059  1.080000e-01\n3060 -6.066667e-02\n3061 -1.566667e-01\n3062 -3.000000e-02\n3063 -1.300000e-01\n3064  1.066667e-01\n3065 -2.606667e-01\n3066 -1.340000e-01\n3067 -4.466667e-02\n3068 -2.000000e-03\n3069  5.533333e-02\n3070 -1.840000e-01\n3071  1.733333e-01\n3072  3.733333e-02\n3073 -5.466667e-02\n3074 -1.526667e-01\n3075 -3.600000e-02\n3076 -1.720000e-01\n3077  2.666667e-02\n3078 -1.286667e-01\n3079 -1.500000e-01\n3080  1.733333e-02\n3081 -3.066667e-02\n3082 -3.333333e-02\n3083  1.320000e-01\n3084 -2.293333e-01\n3085 -1.426667e-01\n3086 -2.400000e-02\n3087 -1.466667e-02\n3088 -1.466667e-01\n3089 -7.466667e-02\n3090  1.900000e-01\n3091 -9.800000e-02\n3092  2.000000e-02\n3093  1.620000e-01\n3094  1.200000e-02\n3095  8.866667e-02\n3096 -1.106667e-01\n3097 -9.200000e-02\n3098 -9.466667e-02\n3099 -3.333333e-02\n3100  2.073333e-01\n3101  2.466667e-02\n3102 -1.913333e-01\n3103 -7.000000e-02\n3104  3.133333e-02\n3105  1.433333e-01\n3106  1.626667e-01\n3107  1.026667e-01\n3108 -1.153333e-01\n3109  9.933333e-02\n3110 -1.060000e-01\n3111  1.333333e-02\n3112  1.106667e-01\n3113  1.666667e-02\n3114  8.666667e-03\n3115 -2.000000e-01\n3116  1.566667e-01\n3117 -6.733333e-02\n3118  1.573333e-01\n3119 -1.793333e-01\n3120  2.113333e-01\n3121 -3.133333e-02\n3122  1.720000e-01\n3123 -2.013333e-01\n3124 -4.200000e-02\n3125 -2.266667e-02\n3126 -4.066667e-02\n3127 -1.893333e-01\n3128  1.093333e-01\n3129 -1.493333e-01\n3130 -2.360000e-01\n3131  2.800000e-02\n3132  1.333333e-02\n3133  1.613333e-01\n3134  2.200000e-01\n3135  3.066667e-02\n3136  4.400000e-02\n3137  1.333333e-03\n3138 -1.013333e-01\n3139 -5.733333e-02\n3140 -1.713333e-01\n3141 -1.520000e-01\n3142  1.066667e-02\n3143  2.160000e-01\n3144  3.733333e-02\n3145  1.126667e-01\n3146 -1.820000e-01\n3147  1.493333e-01\n3148 -9.666667e-02\n3149 -1.820000e-01\n3150  8.466667e-02\n3151  1.173333e-01\n3152  9.133333e-02\n3153  4.066667e-02\n3154  2.666667e-03\n3155  5.600000e-02\n3156 -1.853333e-01\n3157  1.020000e-01\n3158  1.200000e-02\n3159  1.666667e-02\n3160  1.886667e-01\n3161  1.493333e-01\n3162 -6.800000e-02\n3163  8.200000e-02\n3164 -1.033333e-01\n3165  5.333333e-03\n3166  7.200000e-02\n3167 -2.266667e-02\n3168  1.353333e-01\n3169 -8.666667e-03\n3170 -1.906667e-01\n3171  1.986667e-01\n3172 -7.933333e-02\n3173  8.866667e-02\n3174  2.600000e-02\n3175  4.333333e-02\n3176  5.666667e-02\n3177  2.093333e-01\n3178  2.293333e-01\n3179  2.666667e-03\n3180  8.400000e-02\n3181  4.133333e-02\n3182 -1.306667e-01\n3183 -1.553333e-01\n3184 -8.466667e-02\n3185  1.393333e-01\n3186  1.133333e-02\n3187 -1.860000e-01\n3188  1.800000e-01\n3189  2.240000e-01\n3190  1.666667e-01\n3191 -2.266667e-01\n3192 -1.253333e-01\n3193 -6.466667e-02\n3194  3.333333e-03\n3195  1.200000e-01\n3196 -2.313333e-01\n3197 -2.020000e-01\n3198 -8.266667e-02\n3199  1.553333e-01\n3200  2.400000e-02\n3201 -2.526667e-01\n3202  9.533333e-02\n3203  1.606667e-01\n3204 -1.433333e-01\n3205  3.133333e-02\n3206 -5.266667e-02\n3207 -6.866667e-02\n3208  2.066667e-02\n3209  9.866667e-02\n3210 -9.733333e-02\n3211  4.066667e-02\n3212  1.760000e-01\n3213  1.000000e-01\n3214 -3.533333e-02\n3215  9.000000e-02\n3216 -2.933333e-02\n3217 -1.126667e-01\n3218 -3.800000e-02\n3219 -1.406667e-01\n3220  4.666667e-03\n3221  1.060000e-01\n3222 -2.240000e-01\n3223 -1.753333e-01\n3224  4.333333e-02\n3225  1.353333e-01\n3226 -5.600000e-02\n3227 -1.520000e-01\n3228  2.273333e-01\n3229  4.000000e-02\n3230 -1.273333e-01\n3231  3.200000e-02\n3232  2.293333e-01\n3233 -1.013333e-01\n3234 -4.066667e-02\n3235 -1.933333e-02\n3236 -6.400000e-02\n3237 -1.613333e-01\n3238  1.086667e-01\n3239 -2.033333e-01\n3240 -3.333333e-03\n3241 -3.266667e-02\n3242 -3.533333e-02\n3243 -1.193333e-01\n3244  1.753333e-01\n3245  2.220000e-01\n3246  3.800000e-02\n3247  1.373333e-01\n3248  7.733333e-02\n3249 -1.333333e-01\n3250 -1.733333e-02\n3251 -4.933333e-02\n3252  1.220000e-01\n3253  2.133333e-02\n3254 -5.333333e-03\n3255  1.693333e-01\n3256  4.800000e-02\n3257  5.600000e-02\n3258 -1.793333e-01\n3259 -3.933333e-02\n3260  1.500000e-01\n3261  1.533333e-02\n3262  1.673333e-01\n3263  1.866667e-02\n3264  6.666667e-04\n3265  9.600000e-02\n3266  2.400000e-02\n3267 -3.333333e-03\n3268  1.086667e-01\n3269  7.066667e-02\n3270  2.933333e-02\n3271  7.666667e-02\n3272 -1.546667e-01\n3273 -2.240000e-01\n3274 -4.266667e-02\n3275  2.200000e-02\n3276 -6.866667e-02\n3277 -4.733333e-02\n3278 -2.466667e-02\n3279  1.733333e-02\n3280  7.400000e-02\n3281  1.546667e-01\n3282 -5.600000e-02\n3283 -9.466667e-02\n3284  1.600000e-02\n3285  1.066667e-01\n3286 -8.000000e-02\n3287 -1.500000e-01\n3288  6.800000e-02\n3289 -1.800000e-02\n3290 -6.266667e-02\n3291 -1.940000e-01\n3292  1.326667e-01\n3293 -5.400000e-02\n3294  9.266667e-02\n3295 -2.326667e-01\n3296 -1.180000e-01\n3297 -3.666667e-02\n3298 -7.133333e-02\n3299  1.253333e-01\n3300 -1.533333e-02\n3301 -2.800000e-02\n3302 -4.200000e-02\n3303  2.933333e-02\n3304 -7.400000e-02\n3305 -1.506667e-01\n3306 -1.540000e-01\n3307  3.400000e-02\n3308  1.713333e-01\n3309 -1.486667e-01\n3310  3.533333e-02\n3311 -2.133333e-02\n3312 -1.040000e-01\n3313  3.866667e-02\n3314 -1.466667e-01\n3315 -1.260000e-01\n3316 -4.200000e-02\n3317 -1.580000e-01\n3318  2.306667e-01\n3319  5.000000e-02\n3320 -3.866667e-02\n3321 -5.866667e-02\n3322 -1.240000e-01\n3323  2.600000e-02\n3324 -7.333333e-02\n3325 -1.753333e-01\n3326  5.400000e-02\n3327  3.133333e-02\n3328 -7.066667e-02\n3329  1.893333e-01\n3330 -2.866667e-02\n3331  1.360000e-01\n3332  8.200000e-02\n3333 -1.220000e-01\n3334  8.866667e-02\n3335 -2.026667e-01\n3336 -2.466667e-02\n3337 -1.313333e-01\n3338  1.313333e-01\n3339 -1.133333e-02\n3340 -9.933333e-02\n3341  8.066667e-02\n3342  6.333333e-02\n3343  1.333333e-03\n3344  2.220610e-17\n3345 -1.060000e-01\n3346  1.666667e-02\n3347 -8.466667e-02\n3348 -1.400000e-02\n3349 -1.866667e-02\n3350  5.466667e-02\n3351  7.066667e-02\n3352 -3.266667e-02\n3353 -1.146667e-01\n3354 -2.340000e-01\n3355  8.000000e-03\n3356 -3.600000e-02\n3357  1.193333e-01\n3358 -1.266667e-02\n3359 -6.000000e-02\n3360  1.133333e-02\n3361 -2.666667e-03\n3362 -8.000000e-02\n3363  5.733333e-02\n3364  2.233333e-01\n3365 -1.280000e-01\n3366  1.860000e-01\n3367  5.333333e-03\n3368  2.093333e-01\n3369  4.133333e-02\n3370  1.686667e-01\n3371  8.400000e-02\n3372 -1.386667e-01\n3373 -1.660000e-01\n3374 -4.533333e-02\n3375 -8.600000e-02\n3376 -1.306667e-01\n3377  1.906667e-01\n3378 -5.333333e-03\n3379 -5.933333e-02\n3380 -1.240000e-01\n3381 -3.000000e-02\n3382  2.033333e-01\n3383 -5.179691e-17\n3384 -1.520000e-01\n3385  7.800000e-02\n3386  1.033333e-01\n3387  4.533333e-02\n3388 -1.293333e-01\n3389 -3.733333e-02\n3390 -5.933333e-02\n3391  8.000000e-03\n3392 -1.353333e-01\n3393  2.133333e-02\n3394  1.426667e-01\n3395  9.066667e-02\n3396  2.866667e-02\n3397  1.166667e-01\n3398 -1.973333e-01\n3399  1.026667e-01\n3400  8.666667e-02\n3401  2.153333e-01\n3402  1.586667e-01\n3403  1.073333e-01\n3404 -4.600000e-02\n3405 -9.066667e-02\n3406  9.333333e-02\n3407  6.666667e-04\n3408 -9.000000e-02\n3409  1.066667e-02\n3410 -1.113333e-01\n3411 -1.300000e-01\n3412  5.200000e-02\n3413  2.333333e-02\n3414 -1.846667e-01\n3415  2.086667e-01\n3416 -1.506667e-01\n3417  2.600000e-02\n3418  1.146667e-01\n3419 -1.500000e-01\n3420  1.266667e-02\n3421  1.266667e-02\n3422 -5.733333e-02\n3423 -3.066667e-02\n3424  2.466667e-02\n3425 -3.200000e-02\n3426  1.266667e-02\n3427 -5.466667e-02\n3428  2.020000e-01\n3429  1.333333e-03\n3430 -1.440000e-01\n3431 -2.733333e-01\n3432  1.813333e-01\n3433 -8.133333e-02\n3434  1.366667e-01\n3435 -9.666667e-02\n3436 -9.200000e-02\n3437 -1.380000e-01\n3438 -1.213333e-01\n3439  1.086667e-01\n3440 -1.966667e-01\n3441 -1.760000e-01\n3442 -1.080000e-01\n3443 -2.340000e-01\n3444  1.500000e-01\n3445  7.333333e-02\n3446  7.866667e-02\n3447 -5.800000e-02\n3448 -1.800000e-02\n3449  3.466667e-02\n3450 -3.466667e-02\n3451  8.200000e-02\n3452  1.466667e-01\n3453  3.533333e-02\n3454  1.073333e-01\n3455 -9.600000e-02\n3456  1.466667e-01\n3457 -1.326667e-01\n3458 -6.666667e-02\n3459 -1.766667e-01\n3460  2.600000e-02\n3461  7.133333e-02\n3462 -2.506667e-01\n3463  2.140000e-01\n3464 -2.000000e-02\n3465  2.266667e-02\n3466  1.160000e-01\n3467  1.893333e-01\n3468 -8.133333e-02\n3469 -1.346667e-01\n3470  1.226667e-01\n3471  6.666667e-02\n3472 -2.400000e-02\n3473 -2.460000e-01\n3474 -2.333333e-02\n3475 -2.286667e-01\n3476  3.933333e-02\n3477  5.066667e-02\n3478 -2.666667e-03\n3479  3.800000e-02\n3480 -8.866667e-02\n3481 -2.220000e-01\n3482  1.540000e-01\n3483  7.466667e-02\n3484 -1.333333e-03\n3485  6.200000e-02\n3486 -4.533333e-02\n3487  7.333333e-02\n3488  9.733333e-02\n3489 -8.266667e-02\n3490  7.066667e-02\n3491 -6.066667e-02\n3492  1.066667e-02\n3493  1.813333e-01\n3494  7.333333e-03\n3495  1.400000e-02\n3496  1.253333e-01\n3497 -1.700000e-01\n3498 -6.200000e-02\n3499  1.273333e-01\n3500  1.706667e-01\n3501  1.133333e-01\n3502 -1.073333e-01\n3503 -2.400000e-02\n3504  1.940000e-01\n3505 -3.000000e-02\n3506  2.353333e-01\n3507  6.000000e-03\n3508 -1.473333e-01\n3509  2.333333e-02\n3510  7.533333e-02\n3511  1.066667e-02\n3512  5.600000e-02\n3513  9.466667e-02\n3514 -8.000000e-02\n3515 -7.533333e-02\n3516 -1.133333e-02\n3517  7.666667e-02\n3518 -1.533333e-02\n3519  1.213333e-01\n3520 -9.066667e-02\n3521  1.313333e-01\n3522 -7.400000e-02\n3523  1.200000e-01\n3524  1.106667e-01\n3525 -2.253333e-01\n3526 -1.473333e-01\n3527 -1.153333e-01\n3528 -6.933333e-02\n3529 -1.633333e-01\n3530  1.193333e-01\n3531  3.699405e-17\n3532  2.113333e-01\n3533 -1.553333e-01\n3534  1.466667e-02\n3535  9.933333e-02\n3536 -2.300000e-01\n3537  1.880000e-01\n3538 -2.173333e-01\n3539  8.333333e-02\n3540 -6.533333e-02\n3541  5.933333e-02\n3542  1.433333e-01\n3543  2.680000e-01\n3544 -6.533333e-02\n3545  8.533333e-02\n3546  1.466667e-02\n3547 -5.333333e-02\n3548 -2.266667e-01\n3549  2.866667e-02\n3550 -7.666667e-02\n3551  1.753333e-01\n3552 -3.400000e-02\n3553 -2.446667e-01\n3554 -6.466667e-02\n3555  1.266667e-02\n3556  4.000000e-03\n3557 -2.066667e-02\n3558  9.800000e-02\n3559  2.040000e-01\n3560 -7.600000e-02\n3561  5.733333e-02\n3562  1.400000e-02\n3563  6.733333e-02\n3564 -5.066667e-02\n3565 -5.400000e-02\n3566 -1.246667e-01\n3567 -4.866667e-02\n3568  1.693333e-01\n3569  4.866667e-02\n3570  1.040000e-01\n3571 -8.533333e-02\n3572 -1.160000e-01\n3573  1.386667e-01\n3574  2.313333e-01\n3575  1.300000e-01\n3576  1.140000e-01\n3577  7.866667e-02\n3578 -2.500000e-01\n3579  1.600000e-01\n3580  1.520000e-01\n3581  2.666667e-02\n3582  4.266667e-02\n3583 -4.533333e-02\n3584  2.613333e-01\n3585  8.400000e-02\n3586  4.800000e-02\n3587 -1.386667e-01\n3588 -9.866667e-02\n3589 -1.000000e-02\n3590 -2.186667e-01\n3591  4.533333e-02\n3592  1.326667e-01\n3593  1.526667e-01\n3594  1.226667e-01\n3595  1.673333e-01\n3596  1.393333e-01\n3597 -2.420000e-01\n3598 -1.233333e-01\n3599 -5.400000e-02\n3600 -1.833333e-01\n3601 -2.166667e-01\n3602 -1.806667e-01\n3603  1.153333e-01\n3604  1.906667e-01\n3605 -1.980000e-01\n3606  2.386667e-01\n3607 -1.333333e-03\n3608 -1.046667e-01\n3609 -4.466667e-02\n3610 -1.400000e-01\n3611  2.266667e-02\n3612  1.320000e-01\n3613 -1.693333e-01\n3614  1.440000e-01\n3615  3.866667e-02\n3616  3.933333e-02\n3617 -1.440000e-01\n3618  1.113333e-01\n3619 -2.000000e-02\n3620 -1.606667e-01\n3621  5.133333e-02\n3622 -1.320000e-01\n3623  1.613333e-01\n3624 -8.666667e-03\n3625  1.506667e-01\n3626 -1.460000e-01\n3627 -2.653333e-01\n3628 -1.273333e-01\n3629  1.533333e-02\n3630 -5.800000e-02\n3631  1.153333e-01\n3632  9.800000e-02\n3633  1.306667e-01\n3634 -1.133333e-01\n3635 -9.533333e-02\n3636 -5.866667e-02\n3637 -6.600000e-02\n3638 -2.466667e-02\n3639 -7.266667e-02\n3640  1.046667e-01\n3641 -7.133333e-02\n3642 -1.460000e-01\n3643  1.553333e-01\n3644  2.000000e-03\n3645 -7.666667e-02\n3646 -1.386667e-01\n3647  8.266667e-02\n3648 -1.246667e-01\n3649 -5.333333e-03\n3650 -1.160000e-01\n3651  4.000000e-02\n3652 -1.026667e-01\n3653  1.366667e-01\n3654  2.133333e-02\n3655 -1.020000e-01\n3656  1.633333e-01\n3657 -9.200000e-02\n3658  8.666667e-02\n3659 -7.133333e-02\n3660  9.933333e-02\n3661  1.773333e-01\n3662  7.466667e-02\n3663  5.600000e-02\n3664 -5.333333e-03\n3665 -2.040000e-01\n3666  1.820000e-01\n3667 -3.666667e-02\n3668  1.833333e-01\n3669  7.466667e-02\n3670  5.666667e-02\n3671 -1.806667e-01\n3672 -6.066667e-02\n3673 -2.140000e-01\n3674 -4.000000e-02\n3675 -1.220000e-01\n3676 -1.233333e-01\n3677  1.373333e-01\n3678 -7.800000e-02\n3679 -2.366667e-01\n3680  1.246667e-01\n3681 -9.333333e-02\n3682 -3.466667e-02\n3683 -8.000000e-02\n3684  2.640000e-01\n3685 -1.453333e-01\n3686  2.400000e-02\n3687  1.513333e-01\n3688 -4.666667e-02\n3689  8.000000e-02\n3690  5.133333e-02\n3691 -1.553333e-01\n3692  6.666667e-02\n3693  1.773333e-01\n3694  1.566667e-01\n3695  1.193333e-01\n3696 -8.866667e-02\n3697  1.560000e-01\n3698 -4.600000e-02\n3699  2.000000e-03\n3700 -6.266667e-02\n3701  2.466667e-01\n3702 -2.066667e-02\n3703  2.013333e-01\n3704  1.786667e-01\n3705 -2.666667e-03\n3706 -1.953333e-01\n3707  2.800000e-02\n3708  7.666667e-02\n3709  2.000000e-03\n3710 -1.133333e-01\n3711 -1.913333e-01\n3712 -1.533333e-01\n3713  8.333333e-02\n3714 -2.706667e-01\n3715 -6.800000e-02\n3716  2.366667e-01\n3717  1.940000e-01\n3718  8.866667e-02\n3719  1.526667e-01\n3720 -1.120000e-01\n3721  6.000000e-02\n3722  2.800000e-02\n3723 -1.320000e-01\n3724  1.053333e-01\n3725  1.020000e-01\n3726  2.066667e-02\n3727 -2.340000e-01\n3728 -1.786667e-01\n3729  1.166667e-01\n3730 -3.733333e-02\n3731 -1.033333e-01\n3732  2.033333e-01\n3733 -1.600000e-02\n3734  6.266667e-02\n3735 -7.200000e-02\n3736  7.533333e-02\n3737 -6.600000e-02\n3738  1.066667e-01\n3739 -1.320000e-01\n3740 -2.006667e-01\n3741 -1.286667e-01\n3742  3.133333e-02\n3743  1.160000e-01\n3744 -1.400000e-02\n3745 -1.866667e-02\n3746  1.733333e-02\n3747 -4.066667e-02\n3748  1.426667e-01\n3749 -2.166667e-01\n3750  4.133333e-02\n3751  4.733333e-02\n3752  9.600000e-02\n3753 -1.620000e-01\n3754  1.480000e-01\n3755 -1.186667e-01\n3756  3.200000e-02\n3757  1.746667e-01\n3758 -1.200000e-02\n3759 -1.740000e-01\n3760  1.266667e-01\n3761 -4.266667e-02\n3762  6.533333e-02\n3763 -5.466667e-02\n3764  2.026667e-01\n3765  6.800000e-02\n3766 -2.133333e-02\n3767 -2.333333e-02\n3768  4.666667e-02\n3769 -1.006667e-01\n3770  1.400000e-02\n3771  5.133333e-02\n3772 -1.833333e-01\n3773  6.666667e-04\n3774 -2.166667e-01\n3775  6.800000e-02\n3776  3.866667e-02\n3777 -1.433333e-01\n3778  1.920000e-01\n3779 -2.546667e-01\n3780  1.040000e-01\n3781  1.066667e-01\n3782 -1.066667e-01\n3783  3.333333e-02\n3784  1.800000e-02\n3785 -7.333333e-03\n3786 -1.520000e-01\n3787  1.800000e-01\n3788  1.200000e-02\n3789 -4.466667e-02\n3790 -1.800000e-02\n3791  1.400000e-01\n3792 -5.333333e-02\n3793  2.800000e-02\n3794  3.800000e-02\n3795 -7.266667e-02\n3796 -4.200000e-02\n3797  1.213333e-01\n3798 -4.666667e-03\n3799 -1.660000e-01\n3800 -2.286667e-01\n3801 -2.133333e-02\n3802 -1.460000e-01\n3803 -8.266667e-02\n3804 -8.733333e-02\n3805 -2.113333e-01\n3806 -1.493333e-01\n3807  8.000000e-03\n3808 -1.373333e-01\n3809  1.080000e-01\n3810  1.420000e-01\n3811 -9.266667e-02\n3812 -1.746667e-01\n3813  1.000000e-01\n3814 -1.706667e-01\n3815 -1.406667e-01\n3816 -1.646667e-01\n3817  2.400000e-02\n3818  9.066667e-02\n3819 -5.866667e-02\n3820 -1.880000e-01\n3821 -1.133333e-01\n3822  5.333333e-03\n3823 -1.133333e-01\n3824  8.400000e-02\n3825 -1.126667e-01\n3826  7.600000e-02\n3827 -6.333333e-02\n3828  3.600000e-02\n3829 -1.920000e-01\n3830 -1.173333e-01\n3831  2.746667e-01\n3832 -1.520000e-01\n3833  1.060000e-01\n3834  1.893333e-01\n3835  2.066667e-02\n3836  1.033333e-01\n3837  9.333333e-03\n3838 -8.133333e-02\n3839  5.333333e-02\n3840  1.506667e-01\n3841 -6.800000e-02\n3842  1.893333e-01\n3843 -9.200000e-02\n3844  1.853333e-01\n3845  8.533333e-02\n3846 -1.113333e-01\n3847 -6.466667e-02\n3848 -6.066667e-02\n3849 -1.553333e-01\n3850 -4.000000e-03\n3851 -1.260000e-01\n3852 -2.113333e-01\n3853 -4.933333e-02\n3854  3.000000e-02\n3855  7.133333e-02\n3856  1.533333e-01\n3857  1.600000e-02\n3858  2.066667e-02\n3859  3.866667e-02\n3860  8.933333e-02\n3861  9.133333e-02\n3862 -6.866667e-02\n3863 -7.266667e-02\n3864  1.793333e-01\n3865  5.933333e-02\n3866  5.333333e-03\n3867  1.960000e-01\n3868  2.666667e-02\n3869  6.666667e-03\n3870 -6.933333e-02\n3871 -1.913333e-01\n3872  3.800000e-02\n3873 -1.180000e-01\n3874  2.706667e-01\n3875 -3.666667e-02\n3876 -1.686667e-01\n3877 -1.053333e-01\n3878  7.000000e-02\n3879 -9.466667e-02\n3880  3.200000e-02\n3881  1.733333e-01\n3882  2.000000e-03\n3883 -1.333333e-01\n3884 -8.600000e-02\n3885  1.586667e-01\n3886 -4.266667e-02\n3887 -1.693333e-01\n3888 -2.800000e-02\n3889  1.460000e-01\n3890  8.200000e-02\n3891 -1.560000e-01\n3892  1.346667e-01\n3893  2.933333e-02\n3894  7.200000e-02\n3895  2.533333e-02\n3896 -1.246667e-01\n3897  5.533333e-02\n3898  4.933333e-02\n3899 -4.266667e-02\n3900 -2.326667e-01\n3901  5.466667e-02\n3902 -2.533333e-02\n3903  1.280000e-01\n3904 -1.466667e-01\n3905  7.066667e-02\n3906  1.766667e-01\n3907 -5.466667e-02\n3908  3.333333e-03\n3909  1.393333e-01\n3910  6.400000e-02\n3911 -2.573333e-01\n3912  1.733333e-02\n3913  1.240000e-01\n3914 -6.400000e-02\n3915 -1.160000e-01\n3916 -4.666667e-02\n3917  1.793333e-01\n3918 -1.266667e-02\n3919  2.060000e-01\n3920  1.246667e-01\n3921  1.200000e-01\n3922  3.266667e-02\n3923 -1.200000e-01\n3924 -4.266667e-02\n3925 -1.400000e-01\n3926  9.733333e-02\n3927  6.133333e-02\n3928  3.533333e-02\n3929  7.533333e-02\n3930 -1.193333e-01\n3931 -1.406667e-01\n3932  1.326667e-01\n3933 -9.866667e-02\n3934  2.933333e-02\n3935  5.600000e-02\n3936  6.000000e-02\n3937  3.333333e-02\n3938  9.266667e-02\n3939 -1.146667e-01\n3940  1.800000e-02\n3941  8.133333e-02\n3942  6.000000e-03\n3943 -1.620000e-01\n3944 -1.566667e-01\n3945 -2.233333e-01\n3946 -3.066667e-02\n3947  5.400000e-02\n3948  1.520000e-01\n3949  8.600000e-02\n3950  1.240000e-01\n3951 -6.400000e-02\n3952 -1.266667e-01\n3953 -2.466667e-02\n3954  1.733333e-02\n3955 -2.273333e-01\n3956 -4.000000e-02\n3957  4.000000e-02\n3958 -6.600000e-02\n3959  1.493333e-01\n3960  6.533333e-02\n3961 -6.666667e-02\n3962 -1.106667e-01\n3963  7.410465e-18\n3964 -6.666667e-03\n3965 -1.886667e-01\n3966 -6.866667e-02\n3967  2.533333e-01\n3968  1.940000e-01\n3969  1.306667e-01\n3970 -1.333333e-02\n3971 -2.666667e-03\n3972 -7.333333e-02\n3973  7.200000e-02\n3974 -2.480000e-01\n3975  5.866667e-02\n3976 -1.200000e-02\n3977 -1.166667e-01\n3978 -7.133333e-02\n3979 -1.333333e-03\n3980  6.866667e-02\n3981  2.506667e-01\n3982  4.933333e-02\n3983  2.173333e-01\n3984  1.286667e-01\n3985 -3.400000e-02\n3986 -9.066667e-02\n3987  3.866667e-02\n3988  2.866667e-02\n3989  1.340000e-01\n3990  2.300000e-01\n3991  2.000000e-01\n3992  3.600000e-02\n3993  1.560000e-01\n3994 -1.106667e-01\n3995 -9.866667e-02\n3996  1.400000e-02\n3997 -2.026667e-01\n3998  3.333333e-03\n3999 -3.400000e-02\n4000  5.200000e-02\n4001  3.466667e-02\n4002  7.000000e-02\n4003 -7.333333e-03\n4004 -3.200000e-02\n4005 -9.933333e-02\n4006  1.380000e-01\n4007 -9.466667e-02\n4008  1.453333e-01\n4009  5.400000e-02\n4010 -1.646667e-01\n4011  9.533333e-02\n4012  2.066667e-02\n4013  1.233333e-01\n4014  1.646667e-01\n4015 -1.146667e-01\n4016  3.333333e-02\n4017  9.466667e-02\n4018  1.220000e-01\n4019  1.013333e-01\n4020 -7.933333e-02\n4021 -7.466667e-02\n4022  1.673333e-01\n4023 -1.140000e-01\n4024  4.466667e-02\n4025  6.000000e-03\n4026 -7.933333e-02\n4027 -1.333333e-02\n4028  4.133333e-02\n4029  1.206667e-01\n4030 -5.933333e-02\n4031 -1.386667e-01\n4032 -7.333333e-03\n4033  1.353333e-01\n4034  7.533333e-02\n4035  2.393333e-01\n4036  1.220000e-01\n4037 -1.000000e-01\n4038 -6.133333e-02\n4039 -1.706667e-01\n4040  1.713333e-01\n4041  1.653333e-01\n4042 -1.653333e-01\n4043  6.666667e-04\n4044  1.280000e-01\n4045  5.333333e-02\n4046  2.533333e-02\n4047 -1.153333e-01\n4048  2.200000e-02\n4049  1.280000e-01\n4050 -1.733333e-01\n4051 -1.666667e-02\n4052  2.666667e-03\n4053  2.266667e-01\n4054  9.800000e-02\n4055 -4.133333e-02\n4056 -6.866667e-02\n4057  1.586667e-01\n4058 -1.306667e-01\n4059 -5.866667e-02\n4060  1.253333e-01\n4061 -1.333333e-03\n4062 -1.533333e-02\n4063  5.066667e-02\n4064  4.400000e-02\n4065  4.000000e-02\n4066  1.453333e-01\n4067 -1.266667e-02\n4068 -7.266667e-02\n4069  4.133333e-02\n4070  1.920000e-01\n4071 -8.600000e-02\n4072 -1.040000e-01\n4073 -1.226667e-01\n4074  8.466667e-02\n4075 -1.273333e-01\n4076 -6.666667e-02\n4077 -1.400000e-02\n4078 -1.720000e-01\n4079  9.333333e-02\n4080  4.000000e-02\n4081 -1.566667e-01\n4082  6.666667e-03\n4083 -1.586667e-01\n4084  6.800000e-02\n4085 -1.513333e-01\n4086 -1.713333e-01\n4087 -1.086667e-01\n4088 -7.200000e-02\n4089 -2.180000e-01\n4090 -1.573333e-01\n4091 -8.733333e-02\n4092 -7.333333e-02\n4093  1.213333e-01\n4094 -1.113333e-01\n4095  1.806667e-01\n4096  1.586667e-01\n4097  8.400000e-02\n4098 -9.200000e-02\n4099 -8.000000e-03\n4100  3.600000e-02\n4101 -7.266667e-02\n4102 -8.600000e-02\n4103  1.186667e-01\n4104  1.273333e-01\n4105 -2.000000e-02\n4106 -1.380000e-01\n4107  2.446667e-01\n4108  6.266667e-02\n4109  1.333333e-02\n4110 -2.433333e-01\n4111 -1.086667e-01\n4112 -1.533333e-01\n4113  9.466667e-02\n4114  8.000000e-03\n4115 -1.713333e-01\n4116  2.020000e-01\n4117  1.233333e-01\n4118 -8.800000e-02\n4119  3.133333e-02\n4120  8.000000e-03\n4121 -1.600000e-01\n4122  1.853333e-01\n4123  1.793333e-01\n4124  7.866667e-02\n4125 -1.800000e-01\n4126  1.986667e-01\n4127 -1.486667e-01\n4128  4.733333e-02\n4129  5.666667e-02\n4130  1.586667e-01\n4131 -2.260000e-01\n4132  1.153333e-01\n4133  6.800000e-02\n4134  7.066667e-02\n4135 -4.733333e-02\n4136 -6.266667e-02\n4137 -9.333333e-02\n4138  1.926667e-01\n4139  1.506667e-01\n4140 -4.800000e-02\n4141  2.566667e-01\n4142  6.400000e-02\n4143 -3.000000e-02\n4144  1.453333e-01\n4145  6.666667e-03\n4146  5.200000e-02\n4147 -1.673333e-01\n4148 -1.133333e-02\n4149 -1.886667e-01\n4150 -2.933333e-02\n4151 -2.000000e-03\n4152 -5.333333e-03\n4153  1.606667e-01\n4154 -2.106667e-01\n4155 -6.600000e-02\n4156 -2.220971e-17\n4157 -1.153333e-01\n4158  5.733333e-02\n4159  1.286667e-01\n4160  1.560000e-01\n4161  4.333333e-02\n4162  4.000000e-02\n4163  1.600000e-01\n4164  9.666667e-02\n4165  2.846667e-01\n4166  3.933333e-02\n4167  1.060000e-01\n4168 -1.606667e-01\n4169  1.213333e-01\n4170 -1.126667e-01\n4171 -2.086667e-01\n4172 -1.953333e-01\n4173  1.120000e-01\n4174 -2.333333e-02\n4175  1.293333e-01\n4176 -1.393333e-01\n4177 -2.146667e-01\n4178 -8.266667e-02\n4179 -8.666667e-02\n4180  3.733333e-02\n4181  2.466667e-02\n4182  1.280000e-01\n4183  8.066667e-02\n4184  9.533333e-02\n4185 -1.926667e-01\n4186 -1.120000e-01\n4187  2.046667e-01\n4188  1.286667e-01\n4189  2.686667e-01\n4190  8.800000e-02\n4191  1.153333e-01\n4192  2.666667e-01\n4193 -1.846667e-01\n4194 -5.133333e-02\n4195  6.933333e-02\n4196 -1.320000e-01\n4197  1.333333e-01\n4198 -8.866667e-02\n4199  8.066667e-02\n4200 -1.933333e-02\n4201  5.466667e-02\n4202  6.666667e-03\n4203  4.800000e-02\n4204 -5.000000e-02\n4205 -1.380000e-01\n4206  1.260000e-01\n4207 -6.000000e-02\n4208  8.266667e-02\n4209  1.333333e-03\n4210  1.560000e-01\n4211  2.120000e-01\n4212  6.000000e-02\n4213  2.606667e-01\n4214 -1.953333e-01\n4215 -8.933333e-02\n4216 -4.133333e-02\n4217  8.866667e-02\n4218  9.200000e-02\n4219 -4.000000e-03\n4220  1.440000e-01\n4221  9.400000e-02\n4222 -1.533333e-02\n4223 -3.533333e-02\n4224 -1.320000e-01\n4225 -6.400000e-02\n4226 -1.973333e-01\n4227 -1.720000e-01\n4228  4.200000e-02\n4229  7.533333e-02\n4230 -2.800000e-02\n4231 -5.800000e-02\n4232  1.286667e-01\n4233 -1.746667e-01\n4234 -7.200000e-02\n4235 -1.040000e-01\n4236  4.133333e-02\n4237  5.066667e-02\n4238 -1.486667e-01\n4239 -9.133333e-02\n4240 -5.600000e-02\n4241  1.353333e-01\n4242 -6.666667e-03\n4243 -4.933333e-02\n4244  1.633333e-01\n4245 -1.273333e-01\n4246 -5.400000e-02\n4247 -1.686667e-01\n4248 -1.613333e-01\n4249  1.286667e-01\n4250  9.200000e-02\n4251  4.000000e-03\n4252  2.073333e-01\n4253  1.186667e-01\n4254 -1.380000e-01\n4255 -2.146667e-01\n4256  8.066667e-02\n4257  9.400000e-02\n4258 -4.466667e-02\n4259 -7.000000e-02\n4260 -1.113333e-01\n4261  1.393333e-01\n4262 -2.533333e-02\n4263  2.133333e-02\n4264  8.133333e-02\n4265  1.653333e-01\n4266  2.200000e-02\n4267  1.240000e-01\n4268 -2.533333e-02\n4269  1.333333e-02\n4270 -2.093333e-01\n4271  1.540000e-01\n4272  6.000000e-03\n4273 -9.266667e-02\n4274  6.000000e-02\n4275 -1.060000e-01\n4276  1.653333e-01\n4277  4.066667e-02\n4278  2.320000e-01\n4279 -1.366667e-01\n4280 -1.486667e-01\n4281 -1.306667e-01\n4282 -2.400000e-01\n4283  2.666667e-02\n4284  1.473333e-01\n4285  5.666667e-02\n4286 -7.733333e-02\n4287 -7.666667e-02\n4288 -1.286667e-01\n4289 -1.433333e-01\n4290  1.000000e-02\n4291 -1.760000e-01\n4292 -2.166667e-01\n4293 -1.013333e-01\n4294 -4.466667e-02\n4295  7.933333e-02\n4296 -1.900000e-01\n4297  1.860000e-01\n4298 -9.333333e-02\n4299  2.386667e-01\n4300 -6.800000e-02\n4301 -1.966667e-01\n4302 -6.666667e-04\n4303 -3.333333e-02\n4304 -1.386667e-01\n4305 -1.626667e-01\n4306  1.406667e-01\n4307  1.000000e-02\n4308  1.280000e-01\n4309  2.113333e-01\n4310 -2.200000e-02\n4311  1.433333e-01\n4312 -2.033333e-01\n4313 -1.493333e-01\n4314  2.866667e-01\n4315  9.066667e-02\n4316 -5.333333e-02\n4317  4.666667e-03\n4318  3.800000e-02\n4319  6.266667e-02\n4320 -2.866667e-02\n4321 -1.493333e-01\n4322 -1.380000e-01\n4323  4.733333e-02\n4324  1.646667e-01\n4325  1.226667e-01\n4326  1.966667e-01\n4327  5.866667e-02\n4328  2.100000e-01\n4329  1.220000e-01\n4330 -5.066667e-02\n4331  1.666667e-01\n4332 -1.400000e-01\n4333  4.733333e-02\n4334  2.266667e-01\n4335 -4.000000e-03\n4336 -7.466667e-02\n4337 -7.333333e-02\n4338  9.866667e-02\n4339  5.266667e-02\n4340  1.473333e-01\n4341  1.113333e-01\n4342  1.286667e-01\n4343 -9.666667e-02\n4344  4.866667e-02\n4345 -8.600000e-02\n4346  1.580000e-01\n4347 -1.573333e-01\n4348  3.733333e-02\n4349  1.633333e-01\n4350  1.400000e-01\n4351 -9.200000e-02\n4352  6.200000e-02\n4353  1.820000e-01\n4354 -7.333333e-02\n4355 -1.060000e-01\n4356 -1.853333e-01\n4357 -1.686667e-01\n4358 -2.040000e-01\n4359  8.600000e-02\n4360 -2.733333e-02\n4361 -1.200000e-02\n4362  9.800000e-02\n4363  9.733333e-02\n4364  1.293333e-01\n4365 -1.666667e-02\n4366 -2.800000e-02\n4367 -1.393333e-01\n4368  1.360000e-01\n4369 -5.333333e-02\n4370 -1.600000e-01\n4371 -2.933333e-02\n4372 -2.133333e-02\n4373  3.266667e-02\n4374  2.600000e-02\n4375 -9.733333e-02\n4376  7.600000e-02\n4377  2.533333e-02\n4378  1.420000e-01\n4379  1.933333e-02\n4380  3.400000e-02\n4381 -1.140000e-01\n4382  3.400000e-02\n4383  1.033333e-01\n4384  2.733333e-02\n4385 -1.433333e-01\n4386 -1.173333e-01\n4387  2.433333e-01\n4388 -4.333333e-02\n4389 -2.620000e-01\n4390  5.200000e-02\n4391  1.140000e-01\n4392  4.600000e-02\n4393  4.400000e-02\n4394  1.933333e-02\n4395  8.866667e-02\n4396 -1.400000e-01\n4397  1.153333e-01\n4398  1.053333e-01\n4399  2.193333e-01\n4400 -1.026667e-01\n4401 -1.293333e-01\n4402  6.333333e-02\n4403 -8.333333e-02\n4404  4.666667e-02\n4405  1.933333e-01\n4406  2.733333e-02\n4407 -6.666667e-02\n4408  8.133333e-02\n4409 -2.066667e-02\n4410 -1.973333e-01\n4411 -2.033333e-01\n4412 -1.606667e-01\n4413  6.733333e-02\n4414 -9.533333e-02\n4415 -9.266667e-02\n4416  3.733333e-02\n4417 -2.186667e-01\n4418 -9.133333e-02\n4419 -1.700000e-01\n4420  1.113333e-01\n4421 -1.140000e-01\n4422  1.600000e-02\n4423  1.246667e-01\n4424 -1.133333e-01\n4425 -1.213333e-01\n4426  4.200000e-02\n4427  1.846667e-01\n4428 -1.026667e-01\n4429 -1.026667e-01\n4430  1.466667e-02\n4431  1.740000e-01\n4432  1.980000e-01\n4433  5.133333e-02\n4434 -1.313333e-01\n4435 -8.600000e-02\n4436  1.113333e-01\n4437 -1.180000e-01\n4438  1.280000e-01\n4439  1.300000e-01\n4440  2.100000e-01\n4441  2.266667e-02\n4442 -1.800000e-01\n4443 -2.066667e-01\n4444  4.466667e-02\n4445  4.666667e-02\n4446  1.340000e-01\n4447  3.600000e-02\n4448  3.200000e-02\n4449  1.580000e-01\n4450 -9.466667e-02\n4451 -2.240000e-01\n4452  1.940000e-01\n4453  1.326667e-01\n4454 -5.733333e-02\n4455  1.500000e-01\n4456 -5.266667e-02\n4457  4.066667e-02\n4458  1.840000e-01\n4459 -2.353333e-01\n4460 -1.533333e-01\n4461 -1.453333e-01\n4462 -9.800000e-02\n4463  1.200000e-02\n4464  5.000000e-02\n4465  3.933333e-02\n4466 -1.533333e-01\n4467 -1.306667e-01\n4468 -2.526667e-01\n4469 -1.800000e-02\n4470 -1.786667e-01\n4471 -2.046667e-01\n4472 -2.126667e-01\n4473  5.733333e-02\n4474 -1.513333e-01\n4475  9.200000e-02\n4476 -1.640000e-01\n4477 -9.666667e-02\n4478  6.466667e-02\n4479 -5.933333e-02\n4480 -4.000000e-03\n4481 -1.120000e-01\n4482 -6.866667e-02\n4483  3.933333e-02\n4484  4.066667e-02\n4485 -9.200000e-02\n4486 -2.326667e-01\n4487 -1.233333e-01\n4488 -1.040000e-01\n4489  9.866667e-02\n4490 -2.466667e-02\n4491 -1.866667e-02\n4492  1.226667e-01\n4493  4.200000e-02\n4494  1.446667e-01\n4495  1.440000e-01\n4496 -9.466667e-02\n4497  1.746667e-01\n4498  6.666667e-03\n4499 -2.866667e-02\n4500 -2.380000e-01\n4501  1.140000e-01\n4502  9.266667e-02\n4503 -1.013333e-01\n4504  8.066667e-02\n4505 -2.066667e-02\n4506  5.800000e-02\n4507  7.866667e-02\n4508  1.773333e-01\n4509  1.020000e-01\n4510 -3.200000e-02\n4511 -1.526667e-01\n4512 -1.306667e-01\n4513  1.306667e-01\n4514  1.706667e-01\n4515  8.400000e-02\n4516 -6.800000e-02\n4517  8.266667e-02\n4518 -8.866667e-02\n4519  5.266667e-02\n4520  1.100000e-01\n4521 -5.866667e-02\n4522  3.600000e-02\n4523  1.200000e-01\n4524 -2.280000e-01\n4525  1.166667e-01\n4526  1.193333e-01\n4527  2.040000e-01\n4528  8.733333e-02\n4529  5.600000e-02\n4530  4.000000e-02\n4531  9.533333e-02\n4532 -5.800000e-02\n4533  8.200000e-02\n4534  1.060000e-01\n4535 -1.113333e-01\n4536  9.800000e-02\n4537 -1.333333e-03\n4538  1.933333e-02\n4539  2.080000e-01\n4540 -2.400000e-01\n4541  6.333333e-02\n4542  2.933333e-02\n4543  6.066667e-02\n4544 -1.180000e-01\n4545 -1.413333e-01\n4546 -1.173333e-01\n4547 -1.293333e-01\n4548  8.000000e-03\n4549 -3.333333e-02\n4550  4.666667e-02\n4551  6.466667e-02\n4552 -4.400000e-02\n4553 -8.333333e-02\n4554 -1.033333e-01\n4555  1.740000e-01\n4556  1.460000e-01\n4557 -9.733333e-02\n4558  6.533333e-02\n4559  2.033333e-01\n4560 -1.866667e-02\n4561 -1.466667e-02\n4562 -8.066667e-02\n4563  1.066667e-01\n4564  2.000000e-01\n4565  1.966667e-01\n4566 -1.546667e-01\n4567  1.420000e-01\n4568 -6.666667e-04\n4569  1.946667e-01\n4570 -4.066667e-02\n4571 -5.800000e-02\n4572  6.666667e-02\n4573 -1.753333e-01\n4574 -1.540000e-01\n4575 -1.466667e-02\n4576  2.200000e-02\n4577 -1.106667e-01\n4578  6.400000e-02\n4579 -8.933333e-02\n4580 -1.846667e-01\n4581 -2.020000e-01\n4582 -1.960000e-01\n4583 -3.266667e-02\n4584 -1.533333e-01\n4585 -6.666667e-03\n4586  1.733333e-01\n4587  7.800000e-02\n4588  4.133333e-02\n4589 -1.953333e-01\n4590  9.800000e-02\n4591  2.800000e-02\n4592 -6.666667e-04\n4593  1.380000e-01\n4594 -6.933333e-02\n4595 -3.333333e-02\n4596  2.400000e-02\n4597 -3.133333e-02\n4598  1.760000e-01\n4599 -1.640000e-01\n4600  8.933333e-02\n4601 -8.666667e-02\n4602 -8.066667e-02\n4603 -7.066667e-02\n4604 -1.533333e-02\n4605  1.026667e-01\n4606 -1.800000e-01\n4607 -4.200000e-02\n4608 -7.066667e-02\n4609 -1.320000e-01\n4610  1.933333e-02\n4611  5.333333e-02\n4612 -7.866667e-02\n4613 -1.113333e-01\n4614  2.393333e-01\n4615  1.193333e-01\n4616  6.666667e-04\n4617 -7.666667e-02\n4618 -1.813333e-01\n4619 -1.340000e-01\n4620  1.133333e-02\n4621  1.706667e-01\n4622 -5.400000e-02\n4623 -9.666667e-02\n4624 -1.280000e-01\n4625  1.166667e-01\n4626  9.800000e-02\n4627  1.566667e-01\n4628 -1.033333e-01\n4629 -5.933333e-02\n4630 -9.000000e-02\n4631 -1.480000e-01\n4632 -2.033333e-01\n4633  1.266667e-01\n4634  1.453333e-01\n4635  7.733333e-02\n4636  6.666667e-03\n4637 -4.000000e-02\n4638  1.773333e-01\n4639  1.713333e-01\n4640 -4.733333e-02\n4641 -2.013333e-01\n4642 -2.600000e-02\n4643 -1.333333e-03\n4644 -1.066667e-02\n4645 -1.226667e-01\n4646  6.200000e-02\n4647  4.266667e-02\n4648 -2.666667e-03\n4649  7.066667e-02\n4650  1.933333e-02\n4651  1.433333e-01\n4652  6.200000e-02\n4653  1.266667e-02\n4654 -1.400000e-02\n4655 -1.553333e-01\n4656  4.266667e-02\n4657 -4.066667e-02\n4658  7.333333e-02\n4659  3.466667e-02\n4660 -5.066667e-02\n4661 -1.000000e-02\n4662  8.933333e-02\n4663 -2.666667e-02\n4664 -1.353333e-01\n4665 -6.933333e-02\n4666 -1.226667e-01\n4667  1.480000e-01\n4668  2.100000e-01\n4669 -2.340000e-01\n4670  5.733333e-02\n4671 -6.266667e-02\n4672 -2.726667e-01\n4673 -1.526667e-01\n4674 -1.820000e-01\n4675 -2.180000e-01\n4676 -4.000000e-02\n4677 -1.266667e-02\n4678  2.466667e-01\n4679  1.106667e-01\n4680  8.066667e-02\n4681 -2.666667e-02\n4682  1.540000e-01\n4683 -9.200000e-02\n4684 -2.000000e-03\n4685 -8.866667e-02\n4686 -1.493333e-01\n4687  2.466667e-02\n4688  9.466667e-02\n4689 -5.466667e-02\n4690  1.346667e-01\n4691 -3.333333e-03\n4692 -4.466667e-02\n4693  3.333333e-02\n4694 -8.133333e-02\n4695 -1.966667e-01\n4696  3.733333e-02\n4697  4.600000e-02\n4698 -8.533333e-02\n4699 -7.066667e-02\n4700  3.333333e-02\n4701 -2.226667e-01\n4702 -1.640000e-01\n4703  5.533333e-02\n4704  2.060000e-01\n4705  6.400000e-02\n4706  2.446667e-01\n4707 -2.293333e-01\n4708 -1.246667e-01\n4709 -1.480000e-01\n4710 -1.853333e-01\n4711  1.393333e-01\n4712  1.600000e-01\n4713  1.333333e-01\n4714  1.340000e-01\n4715 -1.346667e-01\n4716  2.133333e-02\n4717 -1.073333e-01\n4718 -1.400000e-01\n4719  8.733333e-02\n4720 -9.000000e-02\n4721  8.066667e-02\n4722 -2.666667e-03\n4723 -1.860000e-01\n4724  5.400000e-02\n4725  8.666667e-02\n4726 -5.533333e-02\n4727  1.266667e-01\n4728 -6.533333e-02\n4729  6.733333e-02\n4730 -9.400000e-02\n4731 -5.800000e-02\n4732  1.266667e-02\n4733 -4.666667e-03\n4734 -9.200000e-02\n4735  1.786667e-01\n4736 -2.200000e-02\n4737  2.146667e-01\n4738 -1.360000e-01\n4739 -8.000000e-03\n4740 -1.933333e-02\n4741  3.533333e-02\n4742  1.666667e-02\n4743  4.733333e-02\n4744 -7.333333e-02\n4745 -8.133333e-02\n4746 -1.313333e-01\n4747  2.126667e-01\n4748 -3.800000e-02\n4749 -1.406667e-01\n4750  1.266667e-02\n4751 -1.300000e-01\n4752  9.000000e-02\n4753  2.333333e-02\n4754 -2.673333e-01\n4755  4.066667e-02\n4756 -5.066667e-02\n4757  2.200000e-02\n4758 -2.246667e-01\n4759  1.646667e-01\n4760  1.693333e-01\n4761 -1.233333e-01\n4762 -1.053333e-01\n4763 -2.086667e-01\n4764 -2.800000e-02\n4765  2.733333e-02\n4766 -2.000000e-03\n4767 -1.433333e-01\n4768 -1.486667e-01\n4769  9.800000e-02\n4770 -1.720000e-01\n4771  5.466667e-02\n4772 -2.120000e-01\n4773 -9.533333e-02\n4774 -5.333333e-02\n4775 -2.466667e-02\n4776  8.466667e-02\n4777 -7.400000e-02\n4778 -3.133333e-02\n4779  1.566667e-01\n4780  2.800000e-02\n4781  6.666667e-02\n4782 -1.006667e-01\n4783  1.020000e-01\n4784 -1.313333e-01\n4785 -7.400000e-02\n4786 -4.133333e-02\n4787  1.633333e-01\n4788  1.700000e-01\n4789  3.666667e-02\n4790 -5.866667e-02\n4791 -1.706667e-01\n4792  9.933333e-02\n4793 -2.060000e-01\n4794  7.533333e-02\n4795 -9.533333e-02\n4796 -9.333333e-03\n4797 -2.293333e-01\n4798 -1.333333e-03\n4799 -1.406667e-01\n4800  5.000000e-02\n4801  1.900000e-01\n4802 -1.306667e-01\n4803 -1.626667e-01\n4804 -1.246667e-01\n4805 -1.060000e-01\n4806 -2.500000e-01\n4807  1.333333e-01\n4808  1.866667e-02\n4809 -3.066667e-02\n4810  1.660000e-01\n4811  1.313333e-01\n4812  1.120000e-01\n4813 -1.533333e-01\n4814 -1.353333e-01\n4815  2.600000e-02\n4816 -2.073333e-01\n4817 -2.666667e-02\n4818  4.266667e-02\n4819  2.073333e-01\n4820  1.626667e-01\n4821  2.666667e-03\n4822  1.880000e-01\n4823 -8.600000e-02\n4824  1.126667e-01\n4825  2.200000e-02\n4826 -1.966667e-01\n4827 -1.013333e-01\n4828 -1.746667e-01\n4829 -2.400000e-02\n4830 -9.133333e-02\n4831  9.266667e-02\n4832  1.866667e-01\n4833 -1.753333e-01\n4834 -1.640000e-01\n4835  1.386667e-01\n4836 -1.093333e-01\n4837 -1.153333e-01\n4838  1.706667e-01\n4839 -3.866667e-02\n4840  6.533333e-02\n4841  1.546667e-01\n4842 -1.700000e-01\n4843  1.266667e-01\n4844 -1.566667e-01\n4845 -2.180000e-01\n4846 -4.666667e-03\n4847 -4.933333e-02\n4848  2.053333e-01\n4849 -1.553333e-01\n4850 -1.586667e-01\n4851 -5.800000e-02\n4852  6.200000e-02\n4853  7.200000e-02\n4854 -7.466667e-02\n4855 -1.500000e-01\n4856 -1.400000e-02\n4857 -7.200000e-02\n4858 -1.806667e-01\n4859 -1.006667e-01\n4860  2.400000e-02\n4861 -5.600000e-02\n4862 -5.333333e-02\n4863 -7.533333e-02\n4864  1.386667e-01\n4865  8.066667e-02\n4866 -1.820000e-01\n4867  4.266667e-02\n4868  3.333333e-02\n4869 -4.133333e-02\n4870  1.573333e-01\n4871  3.333333e-03\n4872  1.573333e-01\n4873 -1.386667e-01\n4874  1.786667e-01\n4875 -2.333333e-02\n4876  5.466667e-02\n4877 -2.466667e-02\n4878  6.266667e-02\n4879 -4.666667e-03\n4880  1.200000e-02\n4881  6.666667e-03\n4882 -8.600000e-02\n4883  8.200000e-02\n4884  1.733333e-01\n4885  7.133333e-02\n4886 -4.666667e-03\n4887  1.346667e-01\n4888  1.340000e-01\n4889 -1.193333e-01\n4890  6.000000e-02\n4891  4.400000e-02\n4892  7.333333e-03\n4893  1.053333e-01\n4894 -7.333333e-02\n4895  4.733333e-02\n4896 -1.940000e-01\n4897  1.093333e-01\n4898 -1.826667e-01\n4899 -7.733333e-02\n4900  4.133333e-02\n4901  7.400000e-02\n4902 -2.593333e-01\n4903 -2.266667e-02\n4904 -1.546667e-01\n4905  1.640000e-01\n4906 -3.200000e-02\n4907 -6.800000e-02\n4908 -7.933333e-02\n4909 -9.466667e-02\n4910  2.133333e-02\n4911 -1.053333e-01\n4912  2.000000e-02\n4913  1.706667e-01\n4914 -2.866667e-02\n4915 -6.933333e-02\n4916  9.733333e-02\n4917 -1.000000e-02\n4918 -2.046667e-01\n4919  1.773333e-01\n4920 -2.706667e-01\n4921 -3.933333e-02\n4922  1.146667e-01\n4923  1.420000e-01\n4924 -1.780000e-01\n4925  1.240000e-01\n4926  1.140000e-01\n4927  7.266667e-02\n4928  5.866667e-02\n4929  1.013333e-01\n4930  7.666667e-02\n4931  9.000000e-02\n4932  1.140000e-01\n4933  1.153333e-01\n4934 -6.266667e-02\n4935  1.446667e-01\n4936 -1.200000e-01\n4937 -1.653333e-01\n4938  1.760000e-01\n4939  3.333333e-02\n4940 -1.213333e-01\n4941  2.666667e-03\n4942  1.406667e-01\n4943 -7.666667e-02\n4944 -4.066667e-02\n4945  2.020000e-01\n4946  1.666667e-01\n4947 -1.926667e-01\n4948 -2.340000e-01\n4949  1.300000e-01\n4950 -1.546667e-01\n4951 -2.020000e-01\n4952  1.026667e-01\n4953  8.000000e-03\n4954 -1.026667e-01\n4955  1.206667e-01\n4956  1.786667e-01\n4957 -7.000000e-02\n4958  9.400000e-02\n4959  1.560000e-01\n4960  4.133333e-02\n4961  3.800000e-02\n4962  7.533333e-02\n4963  7.933333e-02\n4964  1.020000e-01\n4965 -1.633333e-01\n4966  9.000000e-02\n4967  5.133333e-02\n4968 -3.133333e-02\n4969  1.866667e-02\n4970 -4.000000e-03\n4971 -9.266667e-02\n4972 -6.533333e-02\n4973  8.666667e-03\n4974 -1.386667e-01\n4975 -1.320000e-01\n4976  1.026667e-01\n4977 -1.253333e-01\n4978  9.200000e-02\n4979  1.780000e-01\n4980  1.313333e-01\n4981 -9.800000e-02\n4982  5.200000e-02\n4983  5.333333e-02\n4984 -9.533333e-02\n4985 -1.933333e-02\n4986  1.373333e-01\n4987  7.800000e-02\n4988 -2.666667e-03\n4989 -7.666667e-02\n4990 -1.466667e-02\n4991  8.600000e-02\n4992 -1.933333e-02\n4993  4.666667e-03\n4994 -4.400000e-02\n4995 -6.266667e-02\n4996  2.506667e-01\n4997  2.533333e-02\n4998 -7.000000e-02\n4999 -5.200000e-02\n5000  2.320000e-01\n5001 -8.666667e-03\n5002  9.600000e-02\n5003  1.133333e-01\n5004  6.400000e-02\n5005 -1.546667e-01\n5006 -1.386667e-01\n5007 -2.173333e-01\n5008 -1.566667e-01\n5009  1.313333e-01\n5010  8.866667e-02\n5011  2.060000e-01\n5012  1.353333e-01\n5013  2.221694e-17\n5014  1.466667e-02\n5015  1.286667e-01\n5016 -1.126667e-01\n5017 -1.573333e-01\n5018 -5.133333e-02\n5019 -8.133333e-02\n5020  1.000000e-01\n5021  8.000000e-03\n5022  2.533333e-02\n5023  7.333333e-02\n5024  1.353333e-01\n5025  1.266667e-02\n5026 -2.380000e-01\n5027 -2.200000e-02\n5028  1.493333e-01\n5029 -1.693333e-01\n5030  1.246667e-01\n5031  4.133333e-02\n5032 -6.466667e-02\n5033  1.566667e-01\n5034 -1.706667e-01\n5035 -7.400000e-02\n5036 -1.606667e-01\n5037  1.226667e-01\n5038 -8.000000e-02\n5039  5.600000e-02\n5040 -2.013333e-01\n5041 -2.220000e-01\n5042  1.726667e-01\n5043  1.313333e-01\n5044 -1.146667e-01\n5045  5.066667e-02\n5046  1.000000e-01\n5047  7.133333e-02\n5048  2.020000e-01\n5049 -6.400000e-02\n5050 -3.066667e-02\n5051 -1.133333e-01\n5052 -1.093333e-01\n5053  1.126667e-01\n5054 -1.946667e-01\n5055  1.766667e-01\n5056  2.400000e-02\n5057  5.600000e-02\n5058  6.666667e-02\n5059 -1.160000e-01\n5060  1.346667e-01\n5061 -3.666667e-02\n5062 -1.846667e-01\n5063 -1.746667e-01\n5064 -1.473333e-01\n5065 -7.933333e-02\n5066 -2.606667e-01\n5067  4.200000e-02\n5068 -1.226667e-01\n5069  1.853333e-01\n5070  3.200000e-02\n5071 -7.133333e-02\n5072  1.680000e-01\n5073  4.666667e-02\n5074  1.266667e-01\n5075 -1.633333e-01\n5076 -4.466667e-02\n5077 -1.253333e-01\n5078  1.913333e-01\n5079 -1.946667e-01\n5080  1.486667e-01\n5081  2.026667e-01\n5082  2.600000e-02\n5083  7.466667e-02\n5084 -7.866667e-02\n5085  9.200000e-02\n5086 -1.613333e-01\n5087  4.066667e-02\n5088  1.340000e-01\n5089 -7.600000e-02\n5090 -5.133333e-02\n5091  6.666667e-02\n5092 -1.566667e-01\n5093 -2.800000e-02\n5094 -9.733333e-02\n5095  1.766667e-01\n5096  4.800000e-02\n5097 -2.386667e-01\n5098 -3.133333e-02\n5099 -1.913333e-01\n5100  3.066667e-02\n5101  1.853333e-01\n5102 -1.066667e-02\n5103 -1.920000e-01\n5104 -2.040000e-01\n5105 -6.666667e-02\n5106  1.206667e-01\n5107 -9.466667e-02\n5108  1.346667e-01\n5109 -1.013333e-01\n5110 -5.800000e-02\n5111 -1.646667e-01\n5112  9.066667e-02\n5113  1.880000e-01\n5114  6.666667e-04\n5115  2.346667e-01\n5116  1.460000e-01\n5117 -1.666667e-02\n5118  3.933333e-02\n5119  1.666667e-02\n5120 -1.873333e-01\n5121 -1.286667e-01\n5122  5.266667e-02\n5123 -8.066667e-02\n5124  1.426667e-01\n5125  7.600000e-02\n5126  1.753333e-01\n5127 -5.466667e-02\n5128 -1.780000e-01\n5129  1.606667e-01\n5130 -2.666667e-03\n5131  1.253333e-01\n5132 -1.680000e-01\n5133  1.413333e-01\n5134 -1.400000e-01\n5135 -9.133333e-02\n5136  1.333333e-01\n5137  6.666667e-02\n5138 -2.066667e-02\n5139 -1.093333e-01\n5140  3.133333e-02\n5141  8.266667e-02\n5142  1.226667e-01\n5143 -1.066667e-01\n5144  1.200000e-01\n5145 -2.413333e-01\n5146 -1.140000e-01\n5147  2.466667e-02\n5148 -2.933333e-02\n5149 -1.986667e-01\n5150 -5.000000e-02\n5151  8.933333e-02\n5152 -1.820000e-01\n5153 -5.800000e-02\n5154 -2.466667e-02\n5155  1.446667e-01\n5156 -3.933333e-02\n5157  1.846667e-01\n5158 -1.320000e-01\n5159  1.733333e-01\n5160 -9.533333e-02\n5161 -1.740000e-01\n5162 -1.466667e-01\n5163  8.000000e-03\n5164  1.226667e-01\n5165  1.146667e-01\n5166 -7.200000e-02\n5167 -2.100000e-01\n5168  4.866667e-02\n5169 -1.153333e-01\n5170 -1.906667e-01\n5171 -2.213333e-01\n5172  1.333333e-03\n5173 -2.433333e-01\n5174  1.666667e-02\n5175  1.060000e-01\n5176  1.133333e-02\n5177 -1.226667e-01\n5178 -5.333333e-03\n5179  5.600000e-02\n5180  8.133333e-02\n5181  1.906667e-01\n5182  1.860000e-01\n5183 -2.040000e-01\n5184 -1.146667e-01\n5185 -5.933333e-02\n5186 -8.266667e-02\n5187  3.533333e-02\n5188 -1.940000e-01\n5189 -9.866667e-02\n5190  1.026667e-01\n5191 -1.800000e-01\n5192  1.493333e-01\n5193  1.226667e-01\n5194 -1.186667e-01\n5195 -3.466667e-02\n5196  1.273333e-01\n5197 -1.400000e-02\n5198  9.000000e-02\n5199  1.260000e-01\n5200 -1.600000e-02\n5201  1.133333e-01\n5202  3.066667e-02\n5203  1.660000e-01\n5204  1.360000e-01\n5205 -9.066667e-02\n5206 -7.466667e-02\n5207 -2.333333e-01\n5208  1.133333e-02\n5209  9.466667e-02\n5210  2.133333e-02\n5211  9.666667e-02\n5212 -7.466667e-02\n5213 -1.120000e-01\n5214  1.993333e-01\n5215  1.273333e-01\n5216  1.126667e-01\n5217 -2.733333e-02\n5218  1.000000e-01\n5219  1.240000e-01\n5220  1.333333e-01\n5221  9.333333e-02\n5222 -9.666667e-02\n5223 -2.320000e-01\n5224 -3.133333e-02\n5225 -1.673333e-01\n5226 -4.333333e-02\n5227 -9.266667e-02\n5228  1.713333e-01\n5229  1.566667e-01\n5230  2.086667e-01\n5231 -1.340000e-01\n5232  1.266667e-01\n5233 -1.226667e-01\n5234  5.666667e-02\n5235 -9.733333e-02\n5236 -1.113333e-01\n5237 -1.886667e-01\n5238  9.266667e-02\n5239  1.733333e-02\n5240  1.333333e-02\n5241 -1.566667e-01\n5242  2.100000e-01\n5243  1.426667e-01\n5244  1.726667e-01\n5245  2.013333e-01\n5246 -3.000000e-02\n5247  1.320000e-01\n5248 -4.666667e-02\n5249  9.400000e-02\n5250  6.600000e-02\n5251 -1.580000e-01\n5252 -6.266667e-02\n5253  5.333333e-03\n5254  9.533333e-02\n5255  8.000000e-03\n5256  5.933333e-02\n5257  3.266667e-02\n5258  2.140000e-01\n5259 -1.073333e-01\n5260 -2.226667e-01\n5261 -1.093333e-01\n5262  1.633333e-01\n5263 -1.946667e-01\n5264 -5.266667e-02\n5265 -9.333333e-03\n5266  3.133333e-02\n5267 -1.173333e-01\n5268  1.093333e-01\n5269 -1.240000e-01\n5270 -1.533333e-02\n5271  8.866667e-02\n5272  7.666667e-02\n5273  7.466667e-02\n5274 -1.086667e-01\n5275  6.733333e-02\n5276  7.933333e-02\n5277 -7.333333e-03\n5278  4.600000e-02\n5279  9.333333e-03\n5280  1.960000e-01\n5281 -5.133333e-02\n5282  4.800000e-02\n5283  1.553333e-01\n5284  1.666667e-02\n5285 -2.440000e-01\n5286  2.173333e-01\n5287  1.813333e-01\n5288 -2.933333e-02\n5289 -2.086667e-01\n5290  9.200000e-02\n5291  8.866667e-02\n5292  1.420000e-01\n5293 -2.133333e-02\n5294  1.680000e-01\n5295 -1.133333e-02\n5296  2.033333e-01\n5297  2.200000e-02\n5298 -3.133333e-02\n5299  1.493333e-01\n5300 -1.226667e-01\n5301 -1.440000e-01\n5302  1.366667e-01\n5303 -1.866667e-02\n5304  2.800000e-02\n5305 -3.600000e-02\n5306  1.133333e-01\n5307  9.400000e-02\n5308  1.600000e-01\n5309 -1.346667e-01\n5310 -4.266667e-02\n5311 -1.886667e-01\n5312 -1.066667e-02\n5313  1.473333e-01\n5314 -1.320000e-01\n5315  6.733333e-02\n5316 -1.000000e-01\n5317 -7.600000e-02\n5318 -1.113333e-01\n5319 -1.266667e-01\n5320  1.160000e-01\n5321 -6.000000e-03\n5322  2.180000e-01\n5323  1.213333e-01\n5324  1.006667e-01\n5325 -1.200000e-02\n5326 -1.253333e-01\n5327  1.320000e-01\n5328  1.260000e-01\n5329 -8.600000e-02\n5330  7.866667e-02\n5331 -5.800000e-02\n5332 -4.933333e-02\n5333 -2.066667e-01\n5334 -1.466667e-01\n5335  1.880000e-01\n5336  3.466667e-02\n5337  6.000000e-03\n5338  9.000000e-02\n5339 -4.533333e-02\n5340 -8.400000e-02\n5341 -3.600000e-02\n5342  4.666667e-02\n5343 -1.673333e-01\n5344  5.600000e-02\n5345 -1.400000e-01\n5346  2.333333e-02\n5347 -1.000000e-01\n5348 -4.800000e-02\n5349 -6.266667e-02\n5350  1.193333e-01\n5351  3.000000e-02\n5352  2.466667e-02\n5353 -1.266667e-01\n5354  7.066667e-02\n5355  9.933333e-02\n5356  1.900000e-01\n5357  8.800000e-02\n5358  1.446667e-01\n5359 -2.306667e-01\n5360  2.240000e-01\n5361 -1.886667e-01\n5362 -5.733333e-02\n5363  5.533333e-02\n5364  7.333333e-03\n5365  1.493333e-01\n5366 -1.173333e-01\n5367  1.826667e-01\n5368  1.726667e-01\n5369 -2.660000e-01\n5370 -3.733333e-02\n5371  8.600000e-02\n5372 -8.733333e-02\n5373 -3.200000e-02\n5374 -6.866667e-02\n5375 -4.666667e-03\n5376  1.046667e-01\n5377  7.266667e-02\n5378  4.066667e-02\n5379  4.400000e-02\n5380 -8.000000e-02\n5381  1.600000e-02\n5382  2.393333e-01\n5383  7.400000e-02\n5384 -6.666667e-04\n5385 -1.526667e-01\n5386  1.160000e-01\n5387  1.333333e-02\n5388  8.666667e-02\n5389 -4.133333e-02\n5390  8.933333e-02\n5391 -1.700000e-01\n5392 -7.866667e-02\n5393  5.933333e-02\n5394 -3.000000e-02\n5395 -1.020000e-01\n5396 -2.600000e-02\n5397  6.666667e-03\n5398  1.066667e-01\n5399 -1.600000e-01\n5400 -1.893333e-01\n5401  7.866667e-02\n5402  1.460000e-01\n5403  1.246667e-01\n5404 -1.833333e-01\n5405 -1.446667e-01\n5406 -1.293333e-01\n5407  1.213333e-01\n5408 -1.893333e-01\n5409 -4.133333e-02\n5410  1.000000e-02\n5411 -1.506667e-01\n5412 -1.893333e-01\n5413 -4.666667e-03\n5414 -6.400000e-02\n5415 -1.326667e-01\n5416 -5.533333e-02\n5417  7.406851e-18\n5418  1.860000e-01\n5419  2.866667e-02\n5420 -2.733333e-02\n5421  4.933333e-02\n5422 -1.060000e-01\n5423  3.133333e-02\n5424  1.126667e-01\n5425 -1.606667e-01\n5426 -4.466667e-02\n5427 -9.000000e-02\n5428  1.160000e-01\n5429  6.733333e-02\n5430  1.520000e-01\n5431  7.333333e-03\n5432  1.266667e-02\n5433  5.200000e-02\n5434 -1.980000e-01\n5435  1.540000e-01\n5436 -6.133333e-02\n5437 -2.866667e-02\n5438  3.333333e-03\n5439 -1.326667e-01\n5440 -7.066667e-02\n5441 -1.666667e-01\n5442  2.280000e-01\n5443  1.746667e-01\n5444 -1.593333e-01\n5445 -1.106667e-01\n5446 -2.133333e-02\n5447 -1.440000e-01\n5448  5.466667e-02\n5449 -2.640000e-01\n5450 -1.346667e-01\n5451 -1.200000e-02\n5452 -1.066667e-01\n5453  6.800000e-02\n5454  2.073333e-01\n5455  1.200000e-02\n5456  3.800000e-02\n5457  1.000000e-02\n5458  9.133333e-02\n5459 -2.733333e-02\n5460 -1.293333e-01\n5461 -1.466667e-01\n5462 -1.980000e-01\n5463  7.733333e-02\n5464  9.800000e-02\n5465  1.960000e-01\n5466 -1.500000e-01\n5467 -1.793333e-01\n5468  8.466667e-02\n5469  1.940000e-01\n5470 -2.600000e-02\n5471  2.386667e-01\n5472 -1.620000e-01\n5473 -1.200000e-02\n5474 -8.666667e-02\n5475  6.200000e-02\n5476 -1.526667e-01\n5477  1.213333e-01\n5478 -8.600000e-02\n5479 -1.066667e-02\n5480  1.600000e-02\n5481 -3.666667e-02\n5482 -6.933333e-02\n5483  1.633333e-01\n5484 -1.213333e-01\n5485 -1.013333e-01\n5486  1.053333e-01\n5487 -8.733333e-02\n5488 -3.000000e-02\n5489  1.000000e-01\n5490  1.113333e-01\n5491  9.066667e-02\n5492 -1.066667e-02\n5493 -1.233333e-01\n5494 -7.333333e-02\n5495 -2.266667e-02\n5496  7.333333e-02\n5497  1.546667e-01\n5498 -5.266667e-02\n5499  4.133333e-02\n5500 -1.753333e-01\n5501 -1.173333e-01\n5502 -5.133333e-02\n5503  3.933333e-02\n5504 -1.573333e-01\n5505 -8.600000e-02\n5506  4.400000e-02\n5507 -1.133333e-02\n5508 -1.053333e-01\n5509 -6.266667e-02\n5510 -1.586667e-01\n5511 -2.060000e-01\n5512  6.000000e-03\n5513  1.386667e-01\n5514  1.260000e-01\n5515  2.133333e-01\n5516 -1.233333e-01\n5517 -2.253333e-01\n5518 -1.773333e-01\n5519  8.000000e-03\n5520  2.600000e-02\n5521 -8.466667e-02\n5522 -8.666667e-03\n5523 -4.666667e-02\n5524  2.000000e-02\n5525  1.746667e-01\n5526 -1.560000e-01\n5527 -1.593333e-01\n5528 -3.266667e-02\n5529  6.200000e-02\n5530 -4.000000e-03\n5531  2.040000e-01\n5532  9.400000e-02\n5533  2.126667e-01\n5534 -1.506667e-01\n5535 -1.006667e-01\n5536  8.066667e-02\n5537  3.266667e-02\n5538 -5.933333e-02\n5539  6.800000e-02\n5540  1.553333e-01\n5541  4.000000e-03\n5542  1.533333e-01\n5543  8.400000e-02\n5544  1.340000e-01\n5545 -1.933333e-02\n5546  1.893333e-01\n5547  6.200000e-02\n5548  1.013333e-01\n5549  4.733333e-02\n5550  5.266667e-02\n5551  1.833333e-01\n5552  6.000000e-03\n5553 -1.040000e-01\n5554 -4.666667e-02\n5555  4.933333e-02\n5556 -2.060000e-01\n5557 -1.160000e-01\n5558  5.066667e-02\n5559 -1.820000e-01\n5560  1.866667e-02\n5561 -7.800000e-02\n5562  2.100000e-01\n5563 -9.533333e-02\n5564 -5.666667e-02\n5565 -1.600000e-02\n5566  1.373333e-01\n5567  9.533333e-02\n5568  5.800000e-02\n5569  6.733333e-02\n5570  2.000000e-02\n5571 -1.880000e-01\n5572  7.066667e-02\n5573  3.933333e-02\n5574  1.140000e-01\n5575 -2.000000e-03\n5576  2.166667e-01\n5577 -4.733333e-02\n5578  1.066667e-01\n5579 -2.320000e-01\n5580 -5.666667e-02\n5581  6.333333e-02\n5582 -1.280000e-01\n5583  3.733333e-02\n5584 -1.040000e-01\n5585 -9.800000e-02\n5586  1.480000e-01\n5587 -2.266667e-02\n5588 -4.733333e-02\n5589  1.066667e-01\n5590 -1.813333e-01\n5591  3.933333e-02\n5592  5.933333e-02\n5593 -1.426667e-01\n5594  8.066667e-02\n5595  1.933333e-02\n5596 -3.400000e-02\n5597  3.000000e-02\n5598 -5.466667e-02\n5599 -3.933333e-02\n5600 -5.066667e-02\n5601 -1.333333e-01\n5602  1.246667e-01\n5603  1.413333e-01\n5604 -1.380000e-01\n5605 -1.413333e-01\n5606  9.000000e-02\n5607  1.353333e-01\n5608  8.533333e-02\n5609  8.866667e-02\n5610 -2.133333e-02\n5611 -2.933333e-02\n5612 -3.466667e-02\n5613 -3.333333e-02\n5614 -1.033333e-01\n5615 -2.100000e-01\n5616  2.600000e-02\n5617 -2.386667e-01\n5618 -2.780000e-01\n5619  1.333333e-01\n5620  5.933333e-02\n5621  2.266667e-02\n5622 -2.933333e-02\n5623 -7.200000e-02\n5624 -5.066667e-02\n5625  5.133333e-02\n5626  3.200000e-02\n5627 -1.333333e-03\n5628 -8.600000e-02\n5629  1.233333e-01\n5630 -6.733333e-02\n5631 -2.353333e-01\n5632 -1.733333e-02\n5633  2.220000e-01\n5634 -2.360000e-01\n5635  1.546667e-01\n5636 -1.320000e-01\n5637  1.766667e-01\n5638 -2.000000e-03\n5639  1.153333e-01\n5640 -8.200000e-02\n5641  5.666667e-02\n5642 -6.666667e-04\n5643 -2.400000e-01\n5644 -8.133333e-02\n5645  5.066667e-02\n5646  6.000000e-02\n5647 -7.400000e-02\n5648  2.206667e-01\n5649  7.333333e-02\n5650  1.006667e-01\n5651 -8.733333e-02\n5652 -1.406667e-01\n5653 -1.113333e-01\n5654 -4.600000e-02\n5655  1.040000e-01\n5656 -9.333333e-03\n5657  6.133333e-02\n5658  8.000000e-02\n5659 -3.400000e-02\n5660 -2.166667e-01\n5661  2.466667e-02\n5662 -1.600000e-02\n5663 -2.413333e-01\n5664 -2.800000e-02\n5665 -4.866667e-02\n5666  1.900000e-01\n5667 -4.333333e-02\n5668  2.426667e-01\n5669  2.200000e-02\n5670 -5.466667e-02\n5671  5.466667e-02\n5672 -1.060000e-01\n5673  1.126667e-01\n5674 -2.533333e-02\n5675 -1.626667e-01\n5676 -3.800000e-02\n5677  1.400000e-02\n5678 -5.333333e-03\n5679 -2.326667e-01\n5680  9.333333e-02\n5681  1.573333e-01\n5682 -1.353333e-01\n5683 -7.428535e-18\n5684  2.000000e-03\n5685  2.200000e-02\n5686  3.866667e-02\n5687 -1.413333e-01\n5688  8.933333e-02\n5689  1.720000e-01\n5690  4.600000e-02\n5691 -5.066667e-02\n5692  1.200000e-01\n5693  1.320000e-01\n5694 -5.866667e-02\n5695 -4.133333e-02\n5696 -2.333333e-02\n5697  1.046667e-01\n5698  3.733333e-02\n5699 -9.933333e-02\n5700  6.866667e-02\n5701  1.840000e-01\n5702  9.866667e-02\n5703 -1.446667e-01\n5704  1.100000e-01\n5705  1.080000e-01\n5706  2.300000e-01\n5707  1.053333e-01\n5708 -1.666667e-01\n5709  1.953333e-01\n5710 -1.146667e-01\n5711 -1.360000e-01\n5712 -1.253333e-01\n5713  2.420000e-01\n5714 -5.800000e-02\n5715 -1.353333e-01\n5716  1.400000e-02\n5717  9.266667e-02\n5718 -1.986667e-01\n5719 -1.520000e-01\n5720 -4.933333e-02\n5721  1.700000e-01\n5722  3.800000e-02\n5723  9.933333e-02\n5724 -5.200000e-02\n5725  2.800000e-02\n5726 -8.600000e-02\n5727 -5.600000e-02\n5728 -1.340000e-01\n5729 -1.380000e-01\n5730  1.500000e-01\n5731 -4.133333e-02\n5732 -1.066667e-02\n5733  6.400000e-02\n5734  1.520000e-01\n5735  8.266667e-02\n5736  1.986667e-01\n5737 -1.853333e-01\n5738 -1.066667e-01\n5739  2.333333e-02\n5740 -1.393333e-01\n5741  9.933333e-02\n5742  1.133333e-02\n5743  3.000000e-02\n5744 -7.866667e-02\n5745  1.320000e-01\n5746 -5.466667e-02\n5747 -1.360000e-01\n5748 -1.266667e-01\n5749 -3.866667e-02\n5750 -8.866667e-02\n5751  1.026667e-01\n5752  1.526667e-01\n5753 -1.106667e-01\n5754  1.506667e-01\n5755 -6.666667e-04\n5756 -2.380000e-01\n5757 -7.066667e-02\n5758  2.860000e-01\n5759 -1.700000e-01\n5760  1.120000e-01\n5761 -1.220000e-01\n5762 -1.240000e-01\n5763  2.173333e-01\n5764  2.140000e-01\n5765  1.493333e-01\n5766 -1.993333e-01\n5767  1.400000e-01\n5768  5.933333e-02\n5769 -2.126667e-01\n5770  2.240000e-01\n5771  1.653333e-01\n5772 -1.653333e-01\n5773 -9.333333e-03\n5774 -2.253333e-01\n5775 -2.400000e-02\n5776  7.733333e-02\n5777  1.133333e-01\n5778 -2.400000e-02\n5779 -2.006667e-01\n5780  1.513333e-01\n5781  1.553333e-01\n5782  1.700000e-01\n5783 -4.133333e-02\n5784 -1.333333e-03\n5785  4.666667e-03\n5786 -3.400000e-02\n5787 -1.846667e-01\n5788 -5.400000e-02\n5789 -2.333333e-02\n5790  3.698682e-17\n5791 -5.533333e-02\n5792 -1.973333e-01\n5793 -1.533333e-01\n5794 -8.000000e-03\n5795 -8.000000e-02\n5796  9.666667e-02\n5797  3.333333e-03\n5798  1.026667e-01\n5799 -3.333333e-02\n5800 -1.993333e-01\n5801 -1.393333e-01\n5802  1.346667e-01\n5803  1.080000e-01\n5804  3.333333e-02\n5805 -1.086667e-01\n5806 -7.533333e-02\n5807 -5.866667e-02\n5808 -4.533333e-02\n5809  2.033333e-01\n5810  1.000000e-02\n5811 -7.800000e-02\n5812  8.333333e-02\n5813 -1.626667e-01\n5814  1.000000e-01\n5815  1.133333e-02\n5816  9.533333e-02\n5817  1.373333e-01\n5818 -9.933333e-02\n5819 -1.126667e-01\n5820  2.800000e-02\n5821 -1.646667e-01\n5822 -2.446667e-01\n5823  2.273333e-01\n5824  1.020000e-01\n5825  2.133333e-02\n5826  7.466667e-02\n5827 -1.600000e-01\n5828 -1.213333e-01\n5829  1.040000e-01\n5830 -1.200000e-02\n5831 -3.466667e-02\n5832  1.080000e-01\n5833 -1.966667e-01\n5834  2.006667e-01\n5835  3.400000e-02\n5836 -1.746667e-01\n5837  1.446667e-01\n5838  1.560000e-01\n5839  1.600000e-01\n5840  7.200000e-02\n5841 -9.333333e-02\n5842  9.200000e-02\n5843 -2.020000e-01\n5844  4.066667e-02\n5845  4.000000e-03\n5846  7.933333e-02\n5847  8.200000e-02\n5848 -6.000000e-02\n5849  7.866667e-02\n5850 -1.266667e-01\n5851 -8.066667e-02\n5852  1.506667e-01\n5853 -3.800000e-02\n5854 -2.266667e-01\n5855 -2.533333e-02\n5856  1.640000e-01\n5857 -1.206667e-01\n5858  8.000000e-03\n5859  1.700000e-01\n5860  4.000000e-03\n5861  8.933333e-02\n5862  1.933333e-02\n5863  2.080000e-01\n5864  3.866667e-02\n5865  2.466667e-02\n5866  1.740000e-01\n5867  1.146667e-01\n5868  2.066667e-01\n5869 -8.800000e-02\n5870 -1.113333e-01\n5871  1.820000e-01\n5872 -9.866667e-02\n5873 -9.133333e-02\n5874 -2.133333e-02\n5875  1.153333e-01\n5876 -1.380000e-01\n5877 -8.333333e-02\n5878  1.180000e-01\n5879 -1.140000e-01\n5880 -1.933333e-02\n5881  1.353333e-01\n5882  1.460000e-01\n5883  1.520000e-01\n5884  7.133333e-02\n5885 -1.640000e-01\n5886  1.320000e-01\n5887 -1.006667e-01\n5888 -2.133333e-02\n5889 -1.220000e-01\n5890  1.153333e-01\n5891 -7.066667e-02\n5892 -1.960000e-01\n5893 -1.513333e-01\n5894  1.866667e-01\n5895  2.260000e-01\n5896 -1.340000e-01\n5897  1.033333e-01\n5898 -1.300000e-01\n5899 -1.533333e-02\n5900  5.333333e-03\n5901 -4.066667e-02\n5902 -1.666667e-02\n5903 -2.080000e-01\n5904 -1.200000e-01\n5905  9.600000e-02\n5906 -1.406667e-01\n5907  8.666667e-03\n5908  1.493333e-01\n5909 -3.466667e-02\n5910 -4.466667e-02\n5911  2.400000e-02\n5912 -9.800000e-02\n5913 -1.346667e-01\n5914 -1.120000e-01\n5915 -1.073333e-01\n5916 -5.200000e-02\n5917  1.613333e-01\n5918 -3.533333e-02\n5919  6.933333e-02\n5920  1.266667e-02\n5921  6.800000e-02\n5922 -1.546667e-01\n5923 -1.933333e-01\n5924  8.666667e-02\n5925  6.266667e-02\n5926 -6.466667e-02\n5927 -4.466667e-02\n5928 -6.200000e-02\n5929  7.403237e-18\n5930  1.266667e-02\n5931 -1.880000e-01\n5932  2.666667e-03\n5933  7.333333e-03\n5934  1.160000e-01\n5935 -1.800000e-02\n5936  6.200000e-02\n5937  1.713333e-01\n5938  7.866667e-02\n5939  7.466667e-02\n5940  1.293333e-01\n5941 -1.800000e-02\n5942  1.393333e-01\n5943  7.066667e-02\n5944  3.466667e-02\n5945  1.213333e-01\n5946  2.413333e-01\n5947  1.353333e-01\n5948 -1.220000e-01\n5949 -9.066667e-02\n5950 -1.666667e-01\n5951  1.313333e-01\n5952  2.200000e-02\n5953  5.133333e-02\n5954 -8.200000e-02\n5955 -6.933333e-02\n5956  1.153333e-01\n5957 -2.000000e-02\n5958 -1.420000e-01\n5959 -1.080000e-01\n5960 -1.566667e-01\n5961 -8.600000e-02\n5962 -2.466667e-02\n5963 -1.280000e-01\n5964  5.333333e-03\n5965 -2.066667e-02\n5966  7.400000e-02\n5967  1.746667e-01\n5968 -2.013333e-01\n5969 -1.346667e-01\n5970 -1.860000e-01\n5971 -1.240000e-01\n5972  2.666667e-03\n5973  5.333333e-03\n5974  1.853333e-01\n5975 -2.173333e-01\n5976 -2.060000e-01\n5977 -4.666667e-02\n5978 -5.200000e-02\n5979 -6.266667e-02\n5980 -2.533333e-02\n5981  1.566667e-01\n5982 -1.253333e-01\n5983 -2.666667e-03\n5984 -1.753333e-01\n5985 -6.333333e-02\n5986  1.740000e-01\n5987 -1.386667e-01\n5988 -2.333333e-02\n5989 -1.246667e-01\n5990  2.500000e-01\n5991  8.200000e-02\n5992 -1.566667e-01\n5993 -4.666667e-03\n5994  2.533333e-02\n5995 -1.486667e-01\n5996 -1.486667e-01\n5997 -5.133333e-02\n5998 -5.133333e-02\n5999  1.100000e-01\n6000 -4.200000e-02\n6001  5.400000e-02\n6002  1.333333e-02\n6003  1.266667e-02\n6004 -6.666667e-04\n6005 -1.320000e-01\n6006  6.000000e-03\n6007 -1.373333e-01\n6008 -1.233333e-01\n6009 -1.453333e-01\n6010 -1.666667e-01\n6011  7.666667e-02\n6012 -1.000000e-02\n6013  4.800000e-02\n6014  1.220000e-01\n6015 -8.066667e-02\n6016 -8.000000e-03\n6017 -6.266667e-02\n6018  1.786667e-01\n6019 -7.000000e-02\n6020 -8.200000e-02\n6021  1.193333e-01\n6022 -2.013333e-01\n6023  1.546667e-01\n6024  4.733333e-02\n6025 -7.133333e-02\n6026 -1.746667e-01\n6027  1.986667e-01\n6028 -6.933333e-02\n6029  3.600000e-02\n6030 -1.153333e-01\n6031 -1.900000e-01\n6032 -1.780000e-01\n6033  2.193333e-01\n6034  1.760000e-01\n6035 -3.533333e-02\n6036  2.080000e-01\n6037 -1.220000e-01\n6038  1.180000e-01\n6039  1.533333e-01\n6040  8.600000e-02\n6041 -7.800000e-02\n6042 -6.466667e-02\n6043  4.400000e-02\n6044 -2.486667e-01\n6045 -1.613333e-01\n6046  1.893333e-01\n6047  2.126667e-01\n6048 -5.666667e-02\n6049  4.666667e-03\n6050 -1.446667e-01\n6051 -7.666667e-02\n6052 -1.846667e-01\n6053 -1.833333e-01\n6054  8.466667e-02\n6055  1.446667e-01\n6056 -2.266667e-02\n6057  1.193333e-01\n6058 -1.653333e-01\n6059  4.133333e-02\n6060  2.286667e-01\n6061 -1.813333e-01\n6062  6.333333e-02\n6063 -4.000000e-02\n6064  1.666667e-01\n6065  3.733333e-02\n6066 -1.593333e-01\n6067  6.800000e-02\n6068  1.920000e-01\n6069 -7.200000e-02\n6070 -8.666667e-03\n6071  8.066667e-02\n6072  2.106667e-01\n6073 -1.493333e-01\n6074 -1.380000e-01\n6075 -2.020000e-01\n6076  2.533333e-02\n6077 -6.000000e-03\n6078 -1.700000e-01\n6079 -1.093333e-01\n6080  8.133333e-02\n6081 -9.000000e-02\n6082  8.000000e-03\n6083 -5.666667e-02\n6084  1.600000e-01\n6085  1.586667e-01\n6086 -8.133333e-02\n6087  5.800000e-02\n6088 -2.460000e-01\n6089  8.066667e-02\n6090  1.386667e-01\n6091  7.733333e-02\n6092  3.466667e-02\n6093 -7.133333e-02\n6094 -2.866667e-02\n6095 -1.573333e-01\n6096  1.486667e-01\n6097  1.466667e-02\n6098 -1.193333e-01\n6099  3.733333e-02\n6100 -1.800000e-02\n6101 -1.826667e-01\n6102 -1.733333e-01\n6103  1.120000e-01\n6104 -1.740000e-01\n6105  8.933333e-02\n6106  8.533333e-02\n6107  7.200000e-02\n6108 -1.653333e-01\n6109 -4.800000e-02\n6110 -5.400000e-02\n6111  2.000000e-01\n6112  4.000000e-02\n6113  3.600000e-02\n6114 -7.133333e-02\n6115  7.200000e-02\n6116  5.333333e-03\n6117 -3.333333e-02\n6118 -1.800000e-02\n6119 -2.033333e-01\n6120 -1.313333e-01\n6121 -2.933333e-02\n6122  1.386667e-01\n6123  1.826667e-01\n6124  1.346667e-01\n6125  9.600000e-02\n6126  4.000000e-02\n6127  2.406667e-01\n6128 -5.933333e-02\n6129  1.400000e-01\n6130 -3.666667e-02\n6131 -2.066667e-02\n6132  6.400000e-02\n6133  1.413333e-01\n6134 -1.800000e-01\n6135  1.080000e-01\n6136  6.733333e-02\n6137  7.933333e-02\n6138 -1.046667e-01\n6139 -7.466667e-02\n6140 -4.866667e-02\n6141 -1.213333e-01\n6142 -2.386667e-01\n6143  1.260000e-01\n6144 -6.666667e-03\n6145  1.620000e-01\n6146  2.153333e-01\n6147 -5.800000e-02\n6148 -2.066667e-01\n6149  2.233333e-01\n6150  2.140000e-01\n6151 -5.333333e-03\n6152  5.179691e-17\n6153 -1.800000e-02\n6154 -1.200000e-02\n6155  1.206667e-01\n6156  1.646667e-01\n6157 -1.006667e-01\n6158  6.933333e-02\n6159  1.600000e-01\n6160 -1.040000e-01\n6161  2.360000e-01\n6162  1.833333e-01\n6163  1.133333e-01\n6164  1.773333e-01\n6165  2.100000e-01\n6166  9.200000e-02\n6167  1.633333e-01\n6168 -2.406667e-01\n6169 -1.426667e-01\n6170 -2.600000e-02\n6171  1.466667e-01\n6172  1.986667e-01\n6173  1.633333e-01\n6174  3.333333e-02\n6175  5.066667e-02\n6176  1.353333e-01\n6177 -3.133333e-02\n6178 -4.066667e-02\n6179  1.393333e-01\n6180 -3.333333e-02\n6181 -1.066667e-02\n6182 -1.413333e-01\n6183 -8.400000e-02\n6184  8.200000e-02\n6185 -7.000000e-02\n6186  2.766667e-01\n6187 -1.600000e-02\n6188 -2.240000e-01\n6189  4.533333e-02\n6190  6.066667e-02\n6191  1.813333e-01\n6192  1.093333e-01\n6193  1.260000e-01\n6194 -9.733333e-02\n6195  2.200000e-02\n6196  1.940000e-01\n6197 -1.286667e-01\n6198  2.266667e-02\n6199 -1.546667e-01\n6200 -8.666667e-03\n6201 -4.133333e-02\n6202  1.206667e-01\n6203  3.400000e-02\n6204  7.333333e-02\n6205 -5.800000e-02\n6206 -1.420000e-01\n6207  1.200000e-01\n6208 -4.000000e-03\n6209  2.800000e-02\n6210 -1.866667e-02\n6211 -2.466667e-02\n6212  2.026667e-01\n6213  1.493333e-01\n6214 -2.266667e-01\n6215  3.600000e-02\n6216 -3.400000e-02\n6217  2.080000e-01\n6218  2.533333e-02\n6219  9.333333e-02\n6220 -2.086667e-01\n6221 -5.600000e-02\n6222  1.653333e-01\n6223  2.333333e-01\n6224 -1.600000e-02\n6225  2.093333e-01\n6226  1.800000e-02\n6227 -2.526667e-01\n6228 -2.466667e-02\n6229  1.333333e-03\n6230 -6.133333e-02\n6231 -4.000000e-02\n6232  1.000000e-01\n6233  5.466667e-02\n6234 -7.866667e-02\n6235 -6.666667e-03\n6236  8.866667e-02\n6237  1.900000e-01\n6238 -1.293333e-01\n6239  1.680000e-01\n6240  3.066667e-02\n6241 -7.933333e-02\n6242  9.666667e-02\n6243  1.393333e-01\n6244 -2.353333e-01\n6245 -1.340000e-01\n6246  2.346667e-01\n6247  8.800000e-02\n6248  1.480000e-01\n6249 -9.200000e-02\n6250 -1.266667e-01\n6251  1.086667e-01\n6252 -1.586667e-01\n6253 -2.666667e-02\n6254 -3.733333e-02\n6255 -3.733333e-02\n6256 -2.733333e-02\n6257  6.733333e-02\n6258 -1.013333e-01\n6259  2.380000e-01\n6260 -1.146667e-01\n6261 -1.386667e-01\n6262  7.866667e-02\n6263  1.060000e-01\n6264  8.533333e-02\n6265 -2.593333e-01\n6266 -1.013333e-01\n6267  1.013333e-01\n6268  8.666667e-03\n6269 -7.333333e-03\n6270  7.666667e-02\n6271 -1.933333e-02\n6272  2.000000e-02\n6273  2.266667e-02\n6274 -1.466667e-01\n6275  1.940000e-01\n6276  4.933333e-02\n6277  1.553333e-01\n6278  2.286667e-01\n6279  5.333333e-02\n6280 -1.640000e-01\n6281  2.866667e-02\n6282  2.000000e-02\n6283  9.866667e-02\n6284 -2.280000e-01\n6285 -7.733333e-02\n6286 -1.386667e-01\n6287  9.400000e-02\n6288  8.466667e-02\n6289 -1.000000e-01\n6290 -9.666667e-02\n6291  1.200000e-01\n6292 -1.333333e-01\n6293  3.000000e-02\n6294  1.100000e-01\n6295  4.266667e-02\n6296 -1.306667e-01\n6297 -2.066667e-02\n6298  2.733333e-02\n6299 -1.566667e-01\n6300  5.666667e-02\n6301  5.200000e-02\n6302  6.066667e-02\n6303  1.346667e-01\n6304 -2.326667e-01\n6305  5.733333e-02\n6306 -2.060000e-01\n6307  1.120000e-01\n6308 -8.000000e-02\n6309  2.160000e-01\n6310 -9.933333e-02\n6311  5.600000e-02\n6312 -4.666667e-02\n6313 -2.433333e-01\n6314  1.506667e-01\n6315  1.853333e-01\n6316 -1.400000e-01\n6317 -1.593333e-01\n6318  1.533333e-01\n6319 -1.346667e-01\n6320 -9.066667e-02\n6321 -7.666667e-02\n6322 -1.733333e-01\n6323 -1.933333e-01\n6324  6.266667e-02\n6325 -1.353333e-01\n6326  1.306667e-01\n6327  9.066667e-02\n6328  2.200000e-02\n6329  2.326667e-01\n6330 -1.013333e-01\n6331  9.333333e-02\n6332 -1.946667e-01\n6333 -1.566667e-01\n6334 -2.933333e-02\n6335 -1.046667e-01\n6336  4.466667e-02\n6337  1.760000e-01\n6338 -2.480000e-01\n6339  2.066667e-01\n6340 -5.133333e-02\n6341 -2.020000e-01\n6342  3.400000e-02\n6343  1.266667e-01\n6344 -4.866667e-02\n6345  1.906667e-01\n6346 -7.800000e-02\n6347  1.013333e-01\n6348 -4.133333e-02\n6349  1.360000e-01\n6350 -8.066667e-02\n6351  2.433333e-01\n6352  2.113333e-01\n6353  1.320000e-01\n6354  4.333333e-02\n6355  1.086667e-01\n6356  1.240000e-01\n6357 -7.400000e-02\n6358 -6.066667e-02\n6359  1.420000e-01\n6360 -8.866667e-02\n6361  3.600000e-02\n6362 -6.000000e-03\n6363 -7.933333e-02\n6364  1.400000e-01\n6365 -3.000000e-02\n6366 -7.866667e-02\n6367 -1.906667e-01\n6368  1.946667e-01\n6369  2.053333e-01\n6370 -1.926667e-01\n6371  2.200000e-02\n6372 -2.666667e-02\n6373  1.266667e-01\n6374  3.666667e-02\n6375  1.586667e-01\n6376  9.733333e-02\n6377  2.180000e-01\n6378 -2.553333e-01\n6379  1.533333e-02\n6380 -2.000000e-02\n6381 -7.733333e-02\n6382  9.933333e-02\n6383  2.180000e-01\n6384 -2.533333e-02\n6385  2.373333e-01\n6386 -4.333333e-02\n6387 -1.806667e-01\n6388 -1.600000e-02\n6389 -9.333333e-03\n6390 -1.546667e-01\n6391  2.293333e-01\n6392  2.280000e-01\n6393  1.866667e-02\n6394  1.100000e-01\n6395 -7.800000e-02\n6396 -1.473333e-01\n6397  2.800000e-02\n6398 -3.266667e-02\n6399 -5.466667e-02\n6400 -3.000000e-02\n6401  1.393333e-01\n6402 -2.533333e-02\n6403  7.533333e-02\n6404  2.686667e-01\n6405  6.000000e-03\n6406  6.400000e-02\n6407  1.080000e-01\n6408  6.666667e-04\n6409  7.266667e-02\n6410  1.200000e-01\n6411  1.480000e-01\n6412 -2.200000e-01\n6413  3.000000e-02\n6414  6.666667e-02\n6415  1.386667e-01\n6416 -9.866667e-02\n6417 -1.366667e-01\n6418  1.066667e-02\n6419  7.733333e-02\n6420 -2.133333e-02\n6421 -1.193333e-01\n6422 -1.673333e-01\n6423 -5.933333e-02\n6424  1.546667e-01\n6425  1.060000e-01\n6426 -6.000000e-02\n6427 -1.966667e-01\n6428 -1.226667e-01\n6429  4.000000e-02\n6430  1.800000e-01\n6431 -2.560000e-01\n6432 -1.233333e-01\n6433 -1.213333e-01\n6434 -3.666667e-02\n6435  1.253333e-01\n6436 -6.666667e-04\n6437 -9.666667e-02\n6438  8.533333e-02\n6439  2.666667e-03\n6440 -1.400000e-01\n6441  1.453333e-01\n6442 -1.180000e-01\n6443  2.933333e-02\n6444 -7.266667e-02\n6445 -1.173333e-01\n6446 -1.146667e-01\n6447 -8.800000e-02\n6448  5.600000e-02\n6449 -2.580000e-01\n6450  1.200000e-02\n6451 -2.233333e-01\n6452  3.600000e-02\n6453 -2.226667e-01\n6454  6.600000e-02\n6455 -5.000000e-02\n6456  1.666667e-02\n6457  4.000000e-02\n6458 -9.466667e-02\n6459 -6.266667e-02\n6460 -7.400000e-02\n6461  1.353333e-01\n6462 -4.200000e-02\n6463 -1.026667e-01\n6464 -1.646667e-01\n6465 -5.266667e-02\n6466 -2.040000e-01\n6467 -1.433333e-01\n6468  2.140000e-01\n6469 -1.200000e-01\n6470 -6.133333e-02\n6471 -2.800000e-02\n6472  2.666667e-02\n6473 -4.733333e-02\n6474 -1.713333e-01\n6475 -5.933333e-02\n6476  1.246667e-01\n6477  4.666667e-02\n6478  1.740000e-01\n6479 -1.420000e-01\n6480  1.393333e-01\n6481  9.600000e-02\n6482 -3.800000e-02\n6483 -1.653333e-01\n6484  8.666667e-03\n6485 -1.333333e-02\n6486 -1.600000e-02\n6487  2.800000e-02\n6488  1.180000e-01\n6489 -3.133333e-02\n6490 -1.253333e-01\n6491 -1.220000e-01\n6492 -1.733333e-02\n6493  4.000000e-03\n6494 -7.733333e-02\n6495 -7.266667e-02\n6496  1.786667e-01\n6497  6.000000e-02\n6498 -1.326667e-01\n6499  1.700000e-01\n6500  1.200000e-02\n6501  1.426667e-01\n6502  2.533333e-02\n6503  1.533333e-01\n6504 -1.073333e-01\n6505  8.466667e-02\n6506  1.066667e-02\n6507 -1.486667e-01\n6508 -2.300000e-01\n6509 -6.666667e-02\n6510 -3.133333e-02\n6511 -3.333333e-02\n6512 -1.286667e-01\n6513 -4.666667e-02\n6514  9.866667e-02\n6515  1.973333e-01\n6516  1.420000e-01\n6517  2.133333e-02\n6518 -6.400000e-02\n6519  1.800000e-02\n6520  1.680000e-01\n6521 -1.320000e-01\n6522  5.400000e-02\n6523  1.666667e-01\n6524 -1.380000e-01\n6525  3.600000e-02\n6526  4.000000e-02\n6527 -5.133333e-02\n6528 -3.000000e-02\n6529  6.000000e-03\n6530  6.400000e-02\n6531 -7.066667e-02\n6532  1.406667e-01\n6533  5.333333e-02\n6534 -9.866667e-02\n6535  1.866667e-02\n6536  1.340000e-01\n6537  1.746667e-01\n6538  1.133333e-02\n6539 -1.366667e-01\n6540 -8.733333e-02\n6541  1.720000e-01\n6542 -9.933333e-02\n6543 -4.333333e-02\n6544 -1.653333e-01\n6545 -7.333333e-03\n6546  1.266667e-02\n6547  1.733333e-02\n6548  2.260000e-01\n6549 -1.440000e-01\n6550  2.186667e-01\n6551 -2.200000e-02\n6552  1.193333e-01\n6553 -9.333333e-03\n6554  1.666667e-02\n6555  1.426667e-01\n6556 -1.953333e-01\n6557 -8.000000e-03\n6558 -4.933333e-02\n6559  9.200000e-02\n6560  7.066667e-02\n6561  3.266667e-02\n6562  1.066667e-02\n6563  1.266667e-02\n6564 -2.213333e-01\n6565 -1.780000e-01\n6566  1.153333e-01\n6567 -1.133333e-01\n6568  1.540000e-01\n6569 -3.533333e-02\n6570 -1.306667e-01\n6571  6.733333e-02\n6572 -1.746667e-01\n6573  1.120000e-01\n6574 -6.733333e-02\n6575  2.153333e-01\n6576 -3.733333e-02\n6577 -9.066667e-02\n6578  3.866667e-02\n6579 -9.333333e-02\n6580  1.140000e-01\n6581 -1.086667e-01\n6582 -4.000000e-02\n6583 -2.333333e-02\n6584  1.200000e-01\n6585  1.080000e-01\n6586 -8.933333e-02\n6587 -6.000000e-03\n6588 -1.940000e-01\n6589 -2.000000e-02\n6590 -8.133333e-02\n6591  1.800000e-02\n6592 -7.600000e-02\n6593 -1.866667e-02\n6594 -5.866667e-02\n6595  6.000000e-02\n6596  8.133333e-02\n6597  9.266667e-02\n6598  8.133333e-02\n6599 -6.666667e-03\n6600  1.200000e-02\n6601  6.333333e-02\n6602 -2.320000e-01\n6603  1.973333e-01\n6604  7.333333e-03\n6605  1.300000e-01\n6606 -1.793333e-01\n6607 -1.980000e-01\n6608  8.666667e-02\n6609  1.380000e-01\n6610 -1.006667e-01\n6611  7.466667e-02\n6612 -9.666667e-02\n6613 -1.066667e-02\n6614 -8.266667e-02\n6615 -8.333333e-02\n6616 -9.133333e-02\n6617  4.466667e-02\n6618 -1.000000e-02\n6619 -1.466667e-01\n6620 -4.533333e-02\n6621 -2.000000e-01\n6622  1.793333e-01\n6623  1.973333e-01\n6624  1.093333e-01\n6625  1.446667e-01\n6626  4.333333e-02\n6627 -5.066667e-02\n6628 -1.326667e-01\n6629 -1.646667e-01\n6630 -1.540000e-01\n6631 -1.006667e-01\n6632  1.933333e-01\n6633 -1.033333e-01\n6634  6.266667e-02\n6635 -6.733333e-02\n6636 -2.233333e-01\n6637 -8.933333e-02\n6638  2.333333e-02\n6639 -4.333333e-02\n6640 -1.420000e-01\n6641 -2.533333e-02\n6642  1.000000e-01\n6643  1.813333e-01\n6644 -1.633333e-01\n6645  1.326667e-01\n6646  6.600000e-02\n6647  1.853333e-01\n6648  1.446667e-01\n6649  1.293333e-01\n6650  1.626667e-01\n6651  1.680000e-01\n6652 -1.453333e-01\n6653 -6.800000e-02\n6654  1.780000e-01\n6655  7.933333e-02\n6656  1.106667e-01\n6657  5.733333e-02\n6658  1.246667e-01\n6659  1.100000e-01\n6660  1.573333e-01\n6661 -1.680000e-01\n6662  8.533333e-02\n6663  1.053333e-01\n6664 -8.133333e-02\n6665  1.806667e-01\n6666  5.466667e-02\n6667  1.600000e-02\n6668  1.740000e-01\n6669  1.593333e-01\n6670  1.873333e-01\n6671  1.020000e-01\n6672 -1.173333e-01\n6673 -1.406667e-01\n6674 -7.933333e-02\n6675  7.333333e-02\n6676 -1.460000e-01\n6677 -2.600000e-02\n6678  2.353333e-01\n6679 -7.800000e-02\n6680 -1.260000e-01\n6681 -2.933333e-02\n6682  1.406667e-01\n6683 -1.806667e-01\n6684  1.020000e-01\n6685  2.866667e-02\n6686 -9.533333e-02\n6687  4.666667e-03\n6688 -2.600000e-02\n6689 -1.533333e-02\n6690  1.840000e-01\n6691 -1.306667e-01\n6692  8.466667e-02\n6693 -7.866667e-02\n6694 -4.000000e-02\n6695 -5.333333e-02\n6696  1.040000e-01\n6697  1.180000e-01\n6698 -1.740000e-01\n6699 -2.113333e-01\n6700  1.720000e-01\n6701  9.933333e-02\n6702 -1.780000e-01\n6703 -4.200000e-02\n6704 -3.000000e-02\n6705 -1.506667e-01\n6706 -2.446667e-01\n6707  1.980000e-01\n6708 -1.853333e-01\n6709 -3.533333e-02\n6710 -2.066667e-02\n6711  5.733333e-02\n6712  2.633333e-01\n6713 -2.466667e-02\n6714  4.666667e-03\n6715 -9.600000e-02\n6716 -1.913333e-01\n6717  7.333333e-03\n6718 -8.266667e-02\n6719 -1.426667e-01\n6720  2.206667e-01\n6721  3.666667e-02\n6722 -1.666667e-02\n6723 -8.466667e-02\n6724  1.000000e-02\n6725  2.080000e-01\n6726 -2.440000e-01\n6727  1.666667e-01\n6728 -1.626667e-01\n6729 -2.266667e-02\n6730 -6.200000e-02\n6731 -5.066667e-02\n6732  4.133333e-02\n6733 -1.820000e-01\n6734 -8.400000e-02\n6735  1.173333e-01\n6736  4.933333e-02\n6737 -1.620000e-01\n6738 -6.266667e-02\n6739  2.300000e-01\n6740  3.800000e-02\n6741 -1.133333e-01\n6742  1.600000e-01\n6743 -1.240000e-01\n6744 -1.373333e-01\n6745 -8.000000e-03\n6746  1.433333e-01\n6747 -1.073333e-01\n6748 -4.800000e-02\n6749 -6.533333e-02\n6750 -3.000000e-02\n6751 -7.866667e-02\n6752  1.366667e-01\n6753  1.206667e-01\n6754 -1.673333e-01\n6755 -4.066667e-02\n6756  1.493333e-01\n6757 -2.480000e-01\n6758  1.466667e-02\n6759 -8.800000e-02\n6760 -3.600000e-02\n6761 -2.000000e-02\n6762 -1.053333e-01\n6763  2.113333e-01\n6764 -4.533333e-02\n6765 -1.093333e-01\n6766  6.866667e-02\n6767  9.266667e-02\n6768 -2.800000e-02\n6769 -2.266667e-02\n6770  6.000000e-02\n6771 -3.200000e-02\n6772 -7.200000e-02\n6773 -2.440000e-01\n6774  8.800000e-02\n6775  1.146667e-01\n6776 -1.133333e-01\n6777 -1.733333e-01\n6778  1.780000e-01\n6779  2.200000e-02\n6780  2.080000e-01\n6781 -1.246667e-01\n6782  1.300000e-01\n6783  1.266667e-01\n6784  1.653333e-01\n6785 -4.666667e-03\n6786 -6.266667e-02\n6787 -2.053333e-01\n6788  1.440000e-01\n6789  1.513333e-01\n6790 -1.826667e-01\n6791 -1.166667e-01\n6792  1.546667e-01\n6793  1.613333e-01\n6794 -1.446667e-01\n6795 -1.340000e-01\n6796 -7.400000e-02\n6797 -5.866667e-02\n6798  6.466667e-02\n6799  1.600000e-01\n6800  1.966667e-01\n6801 -6.466667e-02\n6802 -2.400000e-02\n6803 -6.000000e-03\n6804 -5.800000e-02\n6805 -2.380000e-01\n6806  1.220000e-01\n6807  2.393333e-01\n6808  1.880000e-01\n6809  1.160000e-01\n6810 -4.800000e-02\n6811 -5.066667e-02\n6812  6.733333e-02\n6813 -2.100000e-01\n6814  5.533333e-02\n6815 -1.673333e-01\n6816 -3.333333e-03\n6817 -9.333333e-03\n6818  1.226667e-01\n6819  5.066667e-02\n6820 -1.953333e-01\n6821  6.666667e-04\n6822 -9.666667e-02\n6823 -2.133333e-02\n6824 -1.340000e-01\n6825  1.780000e-01\n6826 -1.213333e-01\n6827 -1.533333e-01\n6828  2.000000e-03\n6829  6.200000e-02\n6830  7.666667e-02\n6831  7.133333e-02\n6832  1.400000e-02\n6833  1.593333e-01\n6834  2.333333e-02\n6835  1.593333e-01\n6836 -2.020000e-01\n6837 -2.266667e-02\n6838 -1.933333e-01\n6839 -3.200000e-02\n6840  1.400000e-02\n6841  1.513333e-01\n6842  1.560000e-01\n6843 -2.133333e-02\n6844 -9.866667e-02\n6845 -4.733333e-02\n6846 -2.333333e-02\n6847 -2.133333e-02\n6848  1.466667e-01\n6849 -2.666667e-02\n6850  1.733333e-01\n6851  5.666667e-02\n6852  1.300000e-01\n6853  1.046667e-01\n6854 -1.580000e-01\n6855  5.533333e-02\n6856  1.960000e-01\n6857 -6.000000e-03\n6858 -1.960000e-01\n6859  4.333333e-02\n6860  1.206667e-01\n6861 -1.500000e-01\n6862  2.286667e-01\n6863 -1.273333e-01\n6864  2.446667e-01\n6865  1.533333e-02\n6866 -1.613333e-01\n6867 -1.620000e-01\n6868  9.666667e-02\n6869  1.273333e-01\n6870  2.100000e-01\n6871  1.700000e-01\n6872 -8.200000e-02\n6873  4.933333e-02\n6874  2.933333e-02\n6875  9.200000e-02\n6876 -7.000000e-02\n6877  3.000000e-02\n6878 -8.466667e-02\n6879  6.000000e-03\n6880 -2.200000e-02\n6881  9.666667e-02\n6882  8.066667e-02\n6883  9.066667e-02\n6884 -8.666667e-02\n6885 -3.200000e-02\n6886  1.326667e-01\n6887  9.333333e-02\n6888 -3.400000e-02\n6889 -1.346667e-01\n6890 -2.733333e-02\n6891  1.333333e-02\n6892 -1.093333e-01\n6893 -2.146667e-01\n6894  2.133333e-02\n6895 -4.000000e-02\n6896 -1.306667e-01\n6897  2.000000e-02\n6898 -8.600000e-02\n6899 -7.400000e-02\n6900 -6.800000e-02\n6901 -6.933333e-02\n6902  1.493333e-01\n6903 -9.333333e-03\n6904 -1.720000e-01\n6905  1.160000e-01\n6906 -9.800000e-02\n6907  5.133333e-02\n6908 -1.293333e-01\n6909 -2.666667e-02\n6910  6.066667e-02\n6911 -3.933333e-02\n6912  2.133333e-02\n6913 -1.673333e-01\n6914 -1.460000e-01\n6915  5.000000e-02\n6916  1.066667e-01\n6917  1.940000e-01\n6918  1.640000e-01\n6919 -7.733333e-02\n6920  1.206667e-01\n6921 -2.213333e-01\n6922  1.866667e-02\n6923  8.400000e-02\n6924  1.713333e-01\n6925 -7.333333e-03\n6926  1.793333e-01\n6927 -3.600000e-02\n6928  1.093333e-01\n6929  1.620000e-01\n6930 -2.933333e-02\n6931  5.333333e-03\n6932 -2.413333e-01\n6933  6.600000e-02\n6934 -5.179691e-17\n6935  9.666667e-02\n6936 -2.140000e-01\n6937 -5.666667e-02\n6938 -1.686667e-01\n6939 -1.620000e-01\n6940 -2.466667e-02\n6941 -4.133333e-02\n6942  7.600000e-02\n6943 -6.466667e-02\n6944  3.666667e-02\n6945 -1.620000e-01\n6946  1.266667e-01\n6947  2.733333e-02\n6948 -1.626667e-01\n6949 -1.093333e-01\n6950  1.873333e-01\n6951  1.046667e-01\n6952 -2.100000e-01\n6953  2.066667e-02\n6954  8.866667e-02\n6955 -2.260000e-01\n6956 -1.586667e-01\n6957 -1.793333e-01\n6958  1.500000e-01\n6959  6.200000e-02\n6960 -1.933333e-02\n6961 -1.786667e-01\n6962 -7.800000e-02\n6963  1.826667e-01\n6964 -9.400000e-02\n6965 -8.000000e-03\n6966 -2.853333e-01\n6967  3.733333e-02\n6968  1.206667e-01\n6969 -4.266667e-02\n6970  3.200000e-02\n6971  1.186667e-01\n6972  3.333333e-03\n6973 -1.180000e-01\n6974  1.506667e-01\n6975  4.733333e-02\n6976  1.066667e-02\n6977  6.466667e-02\n6978  9.200000e-02\n6979 -2.120000e-01\n6980 -2.000000e-02\n6981  2.600000e-01\n6982 -2.286667e-01\n6983 -1.000000e-02\n6984 -1.300000e-01\n6985 -2.666667e-02\n6986 -1.393333e-01\n6987 -2.300000e-01\n6988 -6.333333e-02\n6989 -6.466667e-02\n6990  2.373333e-01\n6991  4.866667e-02\n6992  2.600000e-02\n6993  4.200000e-02\n6994  1.013333e-01\n6995  1.406667e-01\n6996 -8.666667e-02\n6997  2.013333e-01\n6998 -2.600000e-02\n6999  1.380000e-01\n7000  1.080000e-01\n7001  6.666667e-02\n7002 -1.733333e-02\n7003  1.333333e-01\n7004  1.233333e-01\n7005 -1.073333e-01\n7006 -1.006667e-01\n7007 -1.726667e-01\n7008 -1.320000e-01\n7009 -1.420000e-01\n7010  1.466667e-02\n7011  9.933333e-02\n7012  1.160000e-01\n7013 -9.600000e-02\n7014  2.093333e-01\n7015 -6.533333e-02\n7016 -6.000000e-02\n7017  6.466667e-02\n7018  1.606667e-01\n7019  2.466667e-02\n7020  2.246667e-01\n7021 -8.666667e-02\n7022  1.346667e-01\n7023  3.666667e-02\n7024  1.000000e-02\n7025 -4.800000e-02\n7026  1.600000e-01\n7027 -1.493333e-01\n7028  3.533333e-02\n7029 -9.666667e-02\n7030  8.666667e-03\n7031  5.600000e-02\n7032  7.000000e-02\n7033  2.733333e-02\n7034 -3.266667e-02\n7035  2.046667e-01\n7036 -1.406667e-01\n7037 -2.400000e-02\n7038  1.033333e-01\n7039  1.466667e-02\n7040  1.333333e-01\n7041 -1.173333e-01\n7042 -5.066667e-02\n7043 -2.866667e-02\n7044  1.080000e-01\n7045 -1.046667e-01\n7046 -8.333333e-02\n7047 -8.000000e-03\n7048  1.166667e-01\n7049 -8.533333e-02\n7050  1.773333e-01\n7051  1.013333e-01\n7052 -1.106667e-01\n7053 -2.460000e-01\n7054  1.280000e-01\n7055 -3.333333e-03\n7056  2.933333e-02\n7057  1.106667e-01\n7058  4.866667e-02\n7059 -7.266667e-02\n7060 -1.293333e-01\n7061  2.213333e-01\n7062  2.240000e-01\n7063 -1.320000e-01\n7064 -1.333333e-01\n7065  7.600000e-02\n7066  7.133333e-02\n7067  2.066667e-01\n7068 -7.533333e-02\n7069 -7.600000e-02\n7070  2.593333e-01\n7071 -6.666667e-03\n7072 -5.333333e-02\n7073  6.600000e-02\n7074  9.800000e-02\n7075  6.733333e-02\n7076  8.800000e-02\n7077 -1.153333e-01\n7078  9.866667e-02\n7079  4.133333e-02\n7080 -1.666667e-01\n7081 -6.666667e-04\n7082  4.400000e-02\n7083 -7.000000e-02\n7084 -1.793333e-01\n7085  7.733333e-02\n7086  2.393333e-01\n7087 -9.866667e-02\n7088  1.740000e-01\n7089  6.733333e-02\n7090 -8.000000e-02\n7091 -1.066667e-01\n7092 -1.200000e-01\n7093 -1.800000e-02\n7094  2.733333e-02\n7095  1.773333e-01\n7096 -8.066667e-02\n7097  2.600000e-02\n7098  1.346667e-01\n7099 -8.000000e-02\n7100  5.733333e-02\n7101 -2.306667e-01\n7102  3.200000e-02\n7103 -1.353333e-01\n7104  1.780000e-01\n7105 -5.600000e-02\n7106  9.466667e-02\n7107  1.320000e-01\n7108 -7.133333e-02\n7109 -7.333333e-02\n7110 -7.533333e-02\n7111  1.066667e-01\n7112 -8.466667e-02\n7113 -1.440000e-01\n7114 -8.800000e-02\n7115 -9.866667e-02\n7116 -1.193333e-01\n7117 -1.213333e-01\n7118  2.226667e-01\n7119 -1.666667e-02\n7120 -1.553333e-01\n7121  8.933333e-02\n7122  1.166667e-01\n7123 -7.266667e-02\n7124  1.333333e-01\n7125 -3.266667e-02\n7126 -5.066667e-02\n7127  1.753333e-01\n7128  2.533333e-02\n7129 -2.220971e-17\n7130  6.000000e-02\n7131 -7.933333e-02\n7132 -9.533333e-02\n7133 -3.666667e-02\n7134  1.906667e-01\n7135  2.160000e-01\n7136 -5.666667e-02\n7137 -1.546667e-01\n7138 -4.266667e-02\n7139 -9.866667e-02\n7140 -9.533333e-02\n7141 -1.060000e-01\n7142  1.466667e-02\n7143  1.106667e-01\n7144  3.533333e-02\n7145 -8.400000e-02\n7146  1.080000e-01\n7147 -1.046667e-01\n7148  3.533333e-02\n7149  2.180000e-01\n7150 -3.866667e-02\n7151 -1.233333e-01\n7152  3.933333e-02\n7153  1.033333e-01\n7154 -1.066667e-02\n7155 -3.699405e-17\n7156 -1.220000e-01\n7157  1.426667e-01\n7158 -1.366667e-01\n7159 -7.933333e-02\n7160 -1.333333e-02\n7161  2.333333e-02\n7162  5.266667e-02\n7163 -1.646667e-01\n7164  2.933333e-02\n7165  2.300000e-01\n7166  1.546667e-01\n7167  1.726667e-01\n7168 -1.300000e-01\n7169  1.233333e-01\n7170  6.933333e-02\n7171 -9.600000e-02\n7172  2.460000e-01\n7173 -8.133333e-02\n7174  9.333333e-03\n7175  7.333333e-02\n7176  5.400000e-02\n7177 -2.800000e-02\n7178 -1.313333e-01\n7179  1.440000e-01\n7180  1.513333e-01\n7181 -1.086667e-01\n7182  1.700000e-01\n7183  2.266667e-02\n7184 -6.533333e-02\n7185  2.000000e-03\n7186 -9.000000e-02\n7187 -4.666667e-03\n7188  1.733333e-02\n7189  4.466667e-02\n7190 -2.533333e-02\n7191  7.466667e-02\n7192  9.000000e-02\n7193  1.293333e-01\n7194 -1.700000e-01\n7195  1.100000e-01\n7196  9.600000e-02\n7197  1.333333e-01\n7198 -1.613333e-01\n7199 -5.866667e-02\n7200  1.593333e-01\n7201  1.080000e-01\n7202 -3.933333e-02\n7203 -7.333333e-02\n7204 -1.113333e-01\n7205 -1.613333e-01\n7206  2.266667e-02\n7207 -6.533333e-02\n7208  3.800000e-02\n7209  1.820000e-01\n7210 -1.806667e-01\n7211 -6.266667e-02\n7212  1.980000e-01\n7213 -1.653333e-01\n7214 -1.173333e-01\n7215 -4.533333e-02\n7216  1.333333e-01\n7217 -7.133333e-02\n7218  4.200000e-02\n7219 -5.266667e-02\n7220 -4.600000e-02\n7221  3.400000e-02\n7222 -1.640000e-01\n7223 -2.186667e-01\n7224 -1.453333e-01\n7225  2.666667e-02\n7226  1.206667e-01\n7227 -9.666667e-02\n7228  1.813333e-01\n7229  6.466667e-02\n7230  1.140000e-01\n7231  8.800000e-02\n7232  2.013333e-01\n7233  5.800000e-02\n7234 -1.286667e-01\n7235 -1.153333e-01\n7236  1.746667e-01\n7237  2.266667e-01\n7238 -1.333333e-02\n7239  2.000000e-02\n7240  1.486667e-01\n7241  2.066667e-02\n7242 -1.073333e-01\n7243  1.300000e-01\n7244 -2.260000e-01\n7245 -1.333333e-03\n7246 -5.600000e-02\n7247 -1.066667e-02\n7248 -1.306667e-01\n7249  8.866667e-02\n7250 -8.866667e-02\n7251  1.446667e-01\n7252  1.060000e-01\n7253  2.206667e-01\n7254 -6.866667e-02\n7255  1.533333e-01\n7256 -1.166667e-01\n7257 -1.726667e-01\n7258 -1.166667e-01\n7259  1.646667e-01\n7260  8.933333e-02\n7261 -5.400000e-02\n7262  6.666667e-03\n7263 -1.040000e-01\n7264  1.333333e-03\n7265 -2.053333e-01\n7266 -1.326667e-01\n7267  2.000000e-02\n7268 -1.386667e-01\n7269  1.393333e-01\n7270  1.700000e-01\n7271 -4.133333e-02\n7272  1.386667e-01\n7273 -6.866667e-02\n7274  2.026667e-01\n7275  1.046667e-01\n7276  2.066667e-02\n7277  5.933333e-02\n7278 -8.400000e-02\n7279  1.413333e-01\n7280 -1.753333e-01\n7281  4.466667e-02\n7282  1.260000e-01\n7283  7.866667e-02\n7284 -8.400000e-02\n7285 -5.133333e-02\n7286  5.333333e-03\n7287 -9.866667e-02\n7288 -1.300000e-01\n7289  7.066667e-02\n7290  2.166667e-01\n7291 -4.400000e-02\n7292 -5.666667e-02\n7293 -5.266667e-02\n7294 -2.000000e-02\n7295 -1.846667e-01\n7296 -3.666667e-02\n7297  1.273333e-01\n7298 -8.933333e-02\n7299 -5.200000e-02\n7300  1.800000e-01\n7301 -1.600000e-01\n7302  1.153333e-01\n7303 -6.533333e-02\n7304 -1.333333e-02\n7305 -8.666667e-02\n7306  1.286667e-01\n7307  1.513333e-01\n7308 -1.133333e-02\n7309 -1.653333e-01\n7310 -4.066667e-02\n7311  7.333333e-02\n7312  6.466667e-02\n7313  6.200000e-02\n7314 -1.806667e-01\n7315 -2.153333e-01\n7316 -5.666667e-02\n7317  1.933333e-02\n7318 -1.873333e-01\n7319 -1.406667e-01\n7320 -1.493333e-01\n7321  1.586667e-01\n7322  4.800000e-02\n7323  3.699767e-17\n7324  8.733333e-02\n7325  1.800000e-02\n7326  3.466667e-02\n7327 -2.026667e-01\n7328  7.066667e-02\n7329  1.146667e-01\n7330  6.400000e-02\n7331  7.133333e-02\n7332 -6.400000e-02\n7333  1.700000e-01\n7334 -8.600000e-02\n7335  6.933333e-02\n7336  1.340000e-01\n7337  1.240000e-01\n7338 -1.713333e-01\n7339  1.153333e-01\n7340 -1.086667e-01\n7341  1.306667e-01\n7342  3.200000e-02\n7343 -7.133333e-02\n7344  4.000000e-03\n7345  5.933333e-02\n7346  2.626667e-01\n7347  1.180000e-01\n7348  1.166667e-01\n7349  1.426667e-01\n7350  1.546667e-01\n7351  5.133333e-02\n7352 -6.533333e-02\n7353  1.873333e-01\n7354  2.866667e-02\n7355 -1.480000e-01\n7356 -9.600000e-02\n7357  6.333333e-02\n7358  1.586667e-01\n7359 -8.266667e-02\n7360  1.100000e-01\n7361  1.693333e-01\n7362 -3.533333e-02\n7363 -1.640000e-01\n7364  1.560000e-01\n7365 -1.333333e-02\n7366  8.133333e-02\n7367  1.606667e-01\n7368  7.000000e-02\n7369  7.533333e-02\n7370 -8.000000e-03\n7371 -1.793333e-01\n7372 -1.413333e-01\n7373 -1.666667e-02\n7374 -3.133333e-02\n7375  1.926667e-01\n7376 -7.866667e-02\n7377 -2.466667e-02\n7378  1.666667e-02\n7379  4.466667e-02\n7380  1.266667e-02\n7381 -5.666667e-02\n7382  2.600000e-02\n7383 -5.533333e-02\n7384 -9.600000e-02\n7385  9.933333e-02\n7386  1.133333e-02\n7387  2.800000e-02\n7388  2.933333e-02\n7389 -5.333333e-02\n7390  1.000000e-02\n7391 -1.700000e-01\n7392  1.026667e-01\n7393 -7.533333e-02\n7394 -1.540000e-01\n7395  1.313333e-01\n7396 -1.773333e-01\n7397  1.626667e-01\n7398 -1.726667e-01\n7399  1.480000e-01\n7400  2.613333e-01\n7401  8.333333e-02\n7402  1.726667e-01\n7403  9.333333e-03\n7404 -1.706667e-01\n7405  7.333333e-03\n7406 -1.360000e-01\n7407 -1.266667e-02\n7408  7.866667e-02\n7409  1.360000e-01\n7410  5.333333e-02\n7411 -4.666667e-02\n7412  3.666667e-02\n7413  5.133333e-02\n7414 -1.840000e-01\n7415 -1.206667e-01\n7416 -9.000000e-02\n7417 -7.866667e-02\n7418 -6.000000e-03\n7419 -3.699767e-17\n7420 -1.153333e-01\n7421 -1.733333e-01\n7422 -3.333333e-02\n7423 -1.100000e-01\n7424  6.733333e-02\n7425  6.333333e-02\n7426 -2.140000e-01\n7427  5.600000e-02\n7428  1.420000e-01\n7429 -5.066667e-02\n7430 -8.200000e-02\n7431  5.866667e-02\n7432  6.333333e-02\n7433  2.753333e-01\n7434  2.000000e-03\n7435 -7.266667e-02\n7436  1.213333e-01\n7437  8.000000e-03\n7438  3.800000e-02\n7439 -1.273333e-01\n7440  1.213333e-01\n7441 -1.313333e-01\n7442 -9.266667e-02\n7443 -2.400000e-02\n7444 -3.200000e-02\n7445 -3.066667e-02\n7446 -1.166667e-01\n7447 -1.453333e-01\n7448 -6.933333e-02\n7449  1.426667e-01\n7450  1.506667e-01\n7451  9.933333e-02\n7452 -1.746667e-01\n7453  1.060000e-01\n7454  1.446667e-01\n7455 -8.666667e-03\n7456  2.866667e-02\n7457 -1.086667e-01\n7458  2.333333e-02\n7459  5.600000e-02\n7460 -9.333333e-03\n7461  3.933333e-02\n7462  8.000000e-02\n7463  1.280000e-01\n7464 -7.933333e-02\n7465  1.580000e-01\n7466  8.600000e-02\n7467  1.673333e-01\n7468  2.173333e-01\n7469 -1.466667e-01\n7470  1.466667e-02\n7471  1.886667e-01\n7472  1.413333e-01\n7473  1.720000e-01\n7474 -2.066667e-02\n7475 -1.626667e-01\n7476 -2.053333e-01\n7477 -1.593333e-01\n7478  1.866667e-01\n7479 -5.266667e-02\n7480 -7.733333e-02\n7481  1.673333e-01\n7482 -1.093333e-01\n7483 -1.486667e-01\n7484 -1.446667e-01\n7485 -1.246667e-01\n7486  6.466667e-02\n7487  4.000000e-02\n7488 -1.660000e-01\n7489  1.040000e-01\n7490  1.666667e-02\n7491  1.273333e-01\n7492  7.417693e-18\n7493  1.153333e-01\n7494  2.013333e-01\n7495 -1.420000e-01\n7496 -1.533333e-01\n7497 -1.740000e-01\n7498 -1.633333e-01\n7499  9.666667e-02\n7500  1.640000e-01\n7501 -1.200000e-02\n7502 -4.733333e-02\n7503  1.186667e-01\n7504  1.160000e-01\n7505  6.066667e-02\n7506 -1.220000e-01\n7507 -1.406667e-01\n7508  2.733333e-02\n7509  1.833333e-01\n7510  1.000000e-02\n7511  6.333333e-02\n7512  4.400000e-02\n7513  1.406667e-01\n7514 -1.826667e-01\n7515  1.020000e-01\n7516  3.666667e-02\n7517  2.493333e-01\n7518  1.226667e-01\n7519 -5.733333e-02\n7520  3.933333e-02\n7521 -8.800000e-02\n7522 -2.180000e-01\n7523  3.466667e-02\n7524 -5.133333e-02\n7525 -2.040000e-01\n7526  1.260000e-01\n7527  1.533333e-02\n7528  1.713333e-01\n7529 -2.293333e-01\n7530 -9.733333e-02\n7531  1.453333e-01\n7532 -1.066667e-01\n7533 -2.426667e-01\n7534 -1.600000e-02\n7535  1.386667e-01\n7536  1.320000e-01\n7537 -1.186667e-01\n7538 -6.733333e-02\n7539 -7.406851e-18\n7540  1.640000e-01\n7541  3.933333e-02\n7542 -2.666667e-02\n7543 -8.000000e-02\n7544 -1.186667e-01\n7545 -8.000000e-03\n7546  8.666667e-03\n7547 -6.800000e-02\n7548 -5.333333e-03\n7549  2.400000e-02\n7550  1.753333e-01\n7551  2.600000e-02\n7552  1.333333e-02\n7553 -9.333333e-02\n7554 -8.400000e-02\n7555  4.066667e-02\n7556  1.580000e-01\n7557  1.500000e-01\n7558  5.466667e-02\n7559 -7.933333e-02\n7560 -1.806667e-01\n7561 -1.940000e-01\n7562  4.666667e-03\n7563  8.133333e-02\n7564 -1.920000e-01\n7565  1.126667e-01\n7566 -1.733333e-02\n7567  4.266667e-02\n7568  1.226667e-01\n7569  6.466667e-02\n7570 -1.533333e-02\n7571 -2.000000e-02\n7572  1.913333e-01\n7573 -1.633333e-01\n7574  4.666667e-03\n7575  1.200000e-01\n7576 -1.066667e-02\n7577  4.200000e-02\n7578 -1.893333e-01\n7579 -2.666667e-03\n7580  1.246667e-01\n7581 -4.400000e-02\n7582  1.200000e-01\n7583  4.466667e-02\n7584  6.733333e-02\n7585 -2.733333e-02\n7586 -1.306667e-01\n7587 -2.933333e-02\n7588  1.133333e-02\n7589  1.173333e-01\n7590 -4.000000e-02\n7591 -9.600000e-02\n7592 -5.800000e-02\n7593  2.733333e-02\n7594 -1.000000e-02\n7595  3.200000e-02\n7596  7.333333e-03\n7597 -1.573333e-01\n7598 -5.333333e-02\n7599  5.333333e-02\n7600 -9.266667e-02\n7601  2.060000e-01\n7602 -1.753333e-01\n7603  1.200000e-02\n7604  1.206667e-01\n7605  8.066667e-02\n7606 -1.226667e-01\n7607  1.180000e-01\n7608  1.440000e-01\n7609  2.446667e-01\n7610 -2.666667e-03\n7611 -1.606667e-01\n7612 -1.800000e-02\n7613 -1.266667e-01\n7614  6.200000e-02\n7615  1.120000e-01\n7616  2.193333e-01\n7617 -8.000000e-03\n7618  1.393333e-01\n7619 -7.666667e-02\n7620 -9.200000e-02\n7621 -1.340000e-01\n7622  1.906667e-01\n7623  4.066667e-02\n7624 -9.266667e-02\n7625  7.333333e-02\n7626  6.400000e-02\n7627 -4.666667e-02\n7628  6.800000e-02\n7629 -1.933333e-02\n7630 -1.640000e-01\n7631  8.266667e-02\n7632  1.913333e-01\n7633  1.066667e-02\n7634  1.573333e-01\n7635 -5.666667e-02\n7636 -4.133333e-02\n7637 -1.506667e-01\n7638 -6.066667e-02\n7639 -1.573333e-01\n7640  1.993333e-01\n7641  1.946667e-01\n7642  4.400000e-02\n7643  9.533333e-02\n7644  6.133333e-02\n7645  1.393333e-01\n7646  1.126667e-01\n7647  1.800000e-01\n7648  1.853333e-01\n7649  1.180000e-01\n7650  1.360000e-01\n7651  2.186667e-01\n7652  4.466667e-02\n7653 -1.633333e-01\n7654 -1.626667e-01\n7655  7.200000e-02\n7656  1.340000e-01\n7657 -1.846667e-01\n7658  1.820000e-01\n7659 -2.406667e-01\n7660  1.753333e-01\n7661 -6.933333e-02\n7662 -4.733333e-02\n7663 -8.200000e-02\n7664  1.586667e-01\n7665  7.800000e-02\n7666 -5.866667e-02\n7667 -3.333333e-03\n7668 -1.520000e-01\n7669  1.133333e-02\n7670  9.800000e-02\n7671 -1.280000e-01\n7672  7.266667e-02\n7673  9.733333e-02\n7674  1.146667e-01\n7675 -7.866667e-02\n7676  2.213333e-01\n7677 -5.800000e-02\n7678 -1.033333e-01\n7679  7.466667e-02\n7680 -1.880000e-01\n7681  2.253333e-01\n7682 -1.320000e-01\n7683 -6.000000e-03\n7684  1.480000e-01\n7685  1.006667e-01\n7686 -1.800000e-02\n7687 -6.800000e-02\n7688  1.293333e-01\n7689 -2.000000e-03\n7690 -2.006667e-01\n7691 -1.226667e-01\n7692  2.026667e-01\n7693 -6.866667e-02\n7694  9.000000e-02\n7695  2.666667e-03\n7696  1.986667e-01\n7697 -1.746667e-01\n7698  5.666667e-02\n7699  1.506667e-01\n7700  2.373333e-01\n7701 -1.320000e-01\n7702  1.040000e-01\n7703 -1.080000e-01\n7704  7.333333e-02\n7705  1.780000e-01\n7706 -1.420000e-01\n7707 -1.980000e-01\n7708  3.533333e-02\n7709 -1.393333e-01\n7710  1.933333e-01\n7711  1.853333e-01\n7712 -1.066667e-01\n7713 -6.000000e-02\n7714 -6.400000e-02\n7715 -2.400000e-02\n7716  1.873333e-01\n7717 -1.566667e-01\n7718 -9.066667e-02\n7719  8.533333e-02\n7720 -1.133333e-02\n7721 -1.586667e-01\n7722 -1.720000e-01\n7723 -1.366667e-01\n7724  1.693333e-01\n7725 -3.533333e-02\n7726 -6.533333e-02\n7727  1.966667e-01\n7728  2.026667e-01\n7729 -9.400000e-02\n7730 -1.460000e-01\n7731 -1.380000e-01\n7732 -1.086667e-01\n7733  2.246667e-01\n7734 -4.133333e-02\n7735 -1.013333e-01\n7736  1.006667e-01\n7737  1.900000e-01\n7738  1.273333e-01\n7739  1.860000e-01\n7740  8.066667e-02\n7741 -1.740000e-01\n7742  9.466667e-02\n7743 -6.200000e-02\n7744 -5.600000e-02\n7745  1.640000e-01\n7746 -1.246667e-01\n7747  1.773333e-01\n7748 -8.066667e-02\n7749 -2.333333e-02\n7750 -1.533333e-02\n7751 -1.566667e-01\n7752  1.500000e-01\n7753 -7.866667e-02\n7754 -1.460000e-01\n7755  2.400000e-02\n7756 -8.533333e-02\n7757  7.800000e-02\n7758  1.300000e-01\n7759 -9.666667e-02\n7760 -7.466667e-02\n7761 -1.380000e-01\n7762 -2.280000e-01\n7763  1.266667e-02\n7764  7.600000e-02\n7765 -2.266667e-01\n7766  1.933333e-01\n7767  2.666667e-02\n7768  1.606667e-01\n7769 -1.353333e-01\n7770  6.333333e-02\n7771  2.380000e-01\n7772  3.600000e-02\n7773  3.933333e-02\n7774  3.466667e-02\n7775  3.866667e-02\n7776 -8.466667e-02\n7777  1.600000e-02\n7778  1.946667e-01\n7779 -8.000000e-02\n7780 -6.333333e-02\n7781  4.066667e-02\n7782  6.933333e-02\n7783  1.980000e-01\n7784  1.526667e-01\n7785  1.400000e-01\n7786 -6.533333e-02\n7787  8.133333e-02\n7788  1.320000e-01\n7789 -1.433333e-01\n7790 -1.333333e-03\n7791 -6.666667e-02\n7792  3.000000e-02\n7793  8.533333e-02\n7794 -3.400000e-02\n7795 -1.480000e-01\n7796  1.546667e-01\n7797 -4.800000e-02\n7798  1.066667e-02\n7799 -9.333333e-02\n7800  1.980000e-01\n7801 -5.200000e-02\n7802  8.533333e-02\n7803  1.413333e-01\n7804  7.800000e-02\n7805 -1.733333e-02\n7806 -6.533333e-02\n7807 -1.313333e-01\n7808 -4.800000e-02\n7809  2.106667e-01\n7810 -4.666667e-02\n7811  7.866667e-02\n7812 -1.373333e-01\n7813  2.306667e-01\n7814 -1.513333e-01\n7815 -5.333333e-02\n7816  4.466667e-02\n7817  6.666667e-04\n7818 -1.466667e-01\n7819  1.300000e-01\n7820 -7.266667e-02\n7821 -1.093333e-01\n7822 -5.466667e-02\n7823 -2.220000e-01\n7824 -1.000000e-01\n7825  9.533333e-02\n7826 -1.833333e-01\n7827  1.086667e-01\n7828  7.000000e-02\n7829  4.000000e-03\n7830  1.940000e-01\n7831  1.780000e-01\n7832 -5.066667e-02\n7833  4.000000e-03\n7834 -4.866667e-02\n7835 -4.666667e-02\n7836 -7.421307e-18\n7837 -1.713333e-01\n7838  7.200000e-02\n7839 -1.793333e-01\n7840  1.673333e-01\n7841 -1.173333e-01\n7842 -1.840000e-01\n7843 -1.666667e-02\n7844  9.000000e-02\n7845  9.066667e-02\n7846 -6.666667e-02\n7847  2.306667e-01\n7848 -8.466667e-02\n7849 -8.666667e-02\n7850 -1.153333e-01\n7851 -2.266667e-02\n7852  2.420000e-01\n7853  2.800000e-02\n7854 -2.073333e-01\n7855  1.700000e-01\n7856  7.466667e-02\n7857  4.266667e-02\n7858 -1.726667e-01\n7859  2.866667e-02\n7860  1.620000e-01\n7861  1.800000e-02\n7862  1.013333e-01\n7863  3.133333e-02\n7864 -9.333333e-02\n7865  6.000000e-03\n7866 -1.740000e-01\n7867 -9.400000e-02\n7868 -1.586667e-01\n7869  3.333333e-02\n7870  9.200000e-02\n7871 -1.440000e-01\n7872  8.266667e-02\n7873  1.000000e-02\n7874 -1.193333e-01\n7875 -1.606667e-01\n7876  9.866667e-02\n7877 -9.733333e-02\n7878 -3.533333e-02\n7879  1.446667e-01\n7880  8.466667e-02\n7881 -1.886667e-01\n7882 -4.133333e-02\n7883 -3.000000e-02\n7884  1.573333e-01\n7885 -7.266667e-02\n7886 -9.066667e-02\n7887  1.093333e-01\n7888 -2.393333e-01\n7889  2.000000e-02\n7890  1.086667e-01\n7891 -1.580000e-01\n7892  1.186667e-01\n7893 -8.400000e-02\n7894  1.526667e-01\n7895 -8.600000e-02\n7896 -4.466667e-02\n7897 -1.413333e-01\n7898 -6.933333e-02\n7899 -1.266667e-01\n7900 -5.933333e-02\n7901  1.486667e-01\n7902  4.133333e-02\n7903  8.066667e-02\n7904  9.400000e-02\n7905  4.266667e-02\n7906 -2.000000e-01\n7907  3.800000e-02\n7908 -2.206667e-01\n7909 -1.046667e-01\n7910 -1.086667e-01\n7911  1.133333e-02\n7912  1.493333e-01\n7913  6.666667e-02\n7914  1.060000e-01\n7915  1.046667e-01\n7916 -1.666667e-02\n7917 -7.333333e-03\n7918 -1.833333e-01\n7919  4.066667e-02\n7920  1.240000e-01\n7921 -6.000000e-03\n7922  5.333333e-03\n7923  8.800000e-02\n7924 -1.620000e-01\n7925 -4.866667e-02\n7926  3.400000e-02\n7927  7.333333e-03\n7928 -1.273333e-01\n7929 -2.126667e-01\n7930 -1.280000e-01\n7931 -3.800000e-02\n7932  5.533333e-02\n7933 -1.240000e-01\n7934  1.426667e-01\n7935 -4.066667e-02\n7936  5.200000e-02\n7937  1.293333e-01\n7938  1.773333e-01\n7939  7.266667e-02\n7940  1.220000e-01\n7941  1.366667e-01\n7942  2.546667e-01\n7943  1.000000e-01\n7944  1.386667e-01\n7945 -5.200000e-02\n7946  1.400000e-02\n7947  2.006667e-01\n7948  5.266667e-02\n7949  6.666667e-02\n7950 -9.333333e-02\n7951 -1.353333e-01\n7952 -1.460000e-01\n7953  9.866667e-02\n7954  1.666667e-01\n7955 -8.066667e-02\n7956 -7.933333e-02\n7957 -6.400000e-02\n7958  2.133333e-01\n7959 -9.400000e-02\n7960  5.133333e-02\n7961 -1.280000e-01\n7962  2.066667e-01\n7963  1.226667e-01\n7964  1.200000e-01\n7965  8.533333e-02\n7966 -1.480000e-01\n7967 -1.846667e-01\n7968  1.806667e-01\n7969  1.800000e-01\n7970 -7.421307e-18\n7971 -1.213333e-01\n7972 -1.293333e-01\n7973  9.600000e-02\n7974  1.040000e-01\n7975  1.933333e-02\n7976 -3.733333e-02\n7977  1.046667e-01\n7978  1.493333e-01\n7979  1.426667e-01\n7980 -4.666667e-03\n7981 -1.306667e-01\n7982  9.466667e-02\n7983 -4.000000e-03\n7984  3.800000e-02\n7985  9.133333e-02\n7986  6.866667e-02\n7987  1.000000e-02\n7988  1.113333e-01\n7989  1.726667e-01\n7990 -1.266667e-01\n7991  6.466667e-02\n7992 -7.533333e-02\n7993 -1.866667e-02\n7994  1.433333e-01\n7995 -1.506667e-01\n7996 -2.000000e-02\n7997  2.333333e-02\n7998  4.000000e-02\n7999  8.000000e-02\n8000 -2.100000e-01\n8001 -1.640000e-01\n8002 -5.600000e-02\n8003 -7.333333e-03\n8004  1.320000e-01\n8005  1.600000e-02\n8006 -1.340000e-01\n8007  1.940000e-01\n8008  3.333333e-02\n8009 -1.266667e-01\n8010  1.873333e-01\n8011 -2.220000e-01\n8012  2.600000e-02\n8013  7.800000e-02\n8014 -1.920000e-01\n8015  1.953333e-01\n8016  5.333333e-02\n8017 -1.840000e-01\n8018 -2.206667e-01\n8019  1.420000e-01\n8020 -1.186667e-01\n8021 -4.800000e-02\n8022  1.586667e-01\n8023 -4.000000e-02\n8024 -6.866667e-02\n8025  1.033333e-01\n8026 -2.333333e-01\n8027  2.400000e-02\n8028 -8.400000e-02\n8029 -1.600000e-01\n8030 -2.100000e-01\n8031  1.073333e-01\n8032 -1.800000e-02\n8033  1.820000e-01\n8034 -1.653333e-01\n8035 -1.186667e-01\n8036 -2.333333e-02\n8037 -1.000000e-02\n8038  2.146667e-01\n8039  1.700000e-01\n8040 -2.566667e-01\n8041 -1.280000e-01\n8042 -1.133333e-01\n8043  1.726667e-01\n8044 -1.333333e-03\n8045  1.593333e-01\n8046  1.820000e-01\n8047  1.200000e-01\n8048 -8.533333e-02\n8049  1.066667e-01\n8050  1.393333e-01\n8051  1.473333e-01\n8052  2.466667e-02\n8053  2.333333e-02\n8054 -3.200000e-02\n8055 -1.473333e-01\n8056  1.593333e-01\n8057  7.333333e-02\n8058  6.933333e-02\n8059 -1.846667e-01\n8060 -2.666667e-03\n8061 -9.800000e-02\n8062  1.533333e-01\n8063 -1.380000e-01\n8064 -1.360000e-01\n8065 -1.173333e-01\n8066 -1.186667e-01\n8067  5.333333e-02\n8068  1.013333e-01\n8069 -5.266667e-02\n8070 -1.300000e-01\n8071  7.933333e-02\n8072 -2.600000e-02\n8073 -1.733333e-02\n8074 -7.333333e-02\n8075 -3.266667e-02\n8076 -5.533333e-02\n8077  1.806667e-01\n8078  1.980000e-01\n8079  5.333333e-02\n8080 -9.866667e-02\n8081  4.000000e-03\n8082  7.666667e-02\n8083  7.333333e-03\n8084 -1.353333e-01\n8085 -7.533333e-02\n8086  6.400000e-02\n8087  5.800000e-02\n8088  1.933333e-02\n8089 -8.133333e-02\n8090  3.733333e-02\n8091  1.160000e-01\n8092 -1.040000e-01\n8093  1.273333e-01\n8094  7.333333e-02\n8095  7.000000e-02\n8096  5.800000e-02\n8097 -8.933333e-02\n8098  1.140000e-01\n8099  1.200000e-02\n8100  1.680000e-01\n8101 -8.533333e-02\n8102 -2.013333e-01\n8103 -8.933333e-02\n8104  9.066667e-02\n8105  1.186667e-01\n8106  1.260000e-01\n8107 -4.400000e-02\n8108 -1.173333e-01\n8109  1.220000e-01\n8110  3.466667e-02\n8111 -9.933333e-02\n8112 -2.866667e-02\n8113 -3.133333e-02\n8114 -1.046667e-01\n8115  2.333333e-01\n8116  8.933333e-02\n8117 -5.133333e-02\n8118  1.666667e-02\n8119  6.200000e-02\n8120 -1.466667e-01\n8121 -3.000000e-02\n8122 -3.133333e-02\n8123 -1.320000e-01\n8124  6.666667e-02\n8125  7.333333e-03\n8126 -2.133333e-02\n8127 -8.666667e-03\n8128  1.100000e-01\n8129 -3.333333e-02\n8130 -9.333333e-03\n8131 -1.093333e-01\n8132 -1.813333e-01\n8133  1.986667e-01\n8134  1.333333e-03\n8135  1.100000e-01\n8136 -1.586667e-01\n8137 -1.333333e-03\n8138 -1.206667e-01\n8139 -2.066667e-01\n8140  1.013333e-01\n8141 -8.800000e-02\n8142 -1.706667e-01\n8143  5.533333e-02\n8144 -6.933333e-02\n8145  1.466667e-02\n8146  1.246667e-01\n8147  1.040000e-01\n8148 -2.466667e-02\n8149  1.666667e-01\n8150  1.466667e-02\n8151 -1.326667e-01\n8152  1.146667e-01\n8153 -1.306667e-01\n8154 -1.700000e-01\n8155 -1.940000e-01\n8156  5.666667e-02\n8157  9.000000e-02\n8158 -7.333333e-02\n8159  1.986667e-01\n8160  1.126667e-01\n8161  9.266667e-02\n8162 -1.793333e-01\n8163  2.213333e-01\n8164 -1.466667e-02\n8165  1.926667e-01\n8166 -4.400000e-02\n8167 -2.133333e-02\n8168  5.600000e-02\n8169 -6.800000e-02\n8170  5.466667e-02\n8171  6.666667e-03\n8172 -1.593333e-01\n8173 -6.266667e-02\n8174 -9.600000e-02\n8175  1.306667e-01\n8176 -1.820000e-01\n8177 -1.213333e-01\n8178 -1.186667e-01\n8179  2.460000e-01\n8180 -6.733333e-02\n8181  1.680000e-01\n8182 -6.466667e-02\n8183 -1.766667e-01\n8184  8.466667e-02\n8185 -6.000000e-02\n8186  8.466667e-02\n8187  1.266667e-01\n8188  8.666667e-03\n8189  2.133333e-02\n8190  1.733333e-02\n8191  1.466667e-02\n8192 -7.533333e-02\n8193  1.686667e-01\n8194 -6.666667e-03\n8195 -6.666667e-02\n8196  4.866667e-02\n8197 -3.000000e-02\n8198  2.193333e-01\n8199 -2.060000e-01\n8200  7.400000e-02\n8201  1.540000e-01\n8202  2.400000e-01\n8203 -1.520000e-01\n8204 -5.933333e-02\n8205 -2.040000e-01\n8206  2.086667e-01\n8207  8.066667e-02\n8208 -2.666667e-03\n8209 -1.693333e-01\n8210  7.933333e-02\n8211  4.666667e-03\n8212  7.866667e-02\n8213 -9.733333e-02\n8214  1.533333e-01\n8215 -5.800000e-02\n8216  1.406667e-01\n8217  1.033333e-01\n8218  1.900000e-01\n8219 -1.540000e-01\n8220  8.200000e-02\n8221 -6.666667e-04\n8222 -1.866667e-02\n8223 -9.266667e-02\n8224  1.480000e-01\n8225  1.806667e-01\n8226 -5.866667e-02\n8227  2.000000e-02\n8228 -1.906667e-01\n8229 -1.420000e-01\n8230  2.933333e-02\n8231  5.000000e-02\n8232 -8.666667e-03\n8233  1.006667e-01\n8234 -6.666667e-04\n8235  3.266667e-02\n8236 -6.800000e-02\n8237  1.733333e-01\n8238 -8.466667e-02\n8239 -1.153333e-01\n8240  5.933333e-02\n8241 -2.800000e-02\n8242  8.266667e-02\n8243  9.000000e-02\n8244  2.666667e-03\n8245 -1.460000e-01\n8246  1.393333e-01\n8247  2.720000e-01\n8248 -1.853333e-01\n8249  3.333333e-02\n8250  1.760000e-01\n8251  1.466667e-01\n8252 -2.586667e-01\n8253 -1.466667e-02\n8254 -1.720000e-01\n8255 -5.733333e-02\n8256  6.066667e-02\n8257  2.340000e-01\n8258  1.646667e-01\n8259  9.000000e-02\n8260  1.260000e-01\n8261 -2.266667e-02\n8262  8.333333e-02\n8263  1.073333e-01\n8264  7.333333e-02\n8265  1.280000e-01\n8266 -1.646667e-01\n8267  7.866667e-02\n8268  7.866667e-02\n8269  2.133333e-02\n8270  1.846667e-01\n8271  1.806667e-01\n8272 -1.333333e-01\n8273  1.226667e-01\n8274 -4.800000e-02\n8275 -1.386667e-01\n8276  3.600000e-02\n8277  1.280000e-01\n8278  1.400000e-02\n8279 -1.473333e-01\n8280  4.600000e-02\n8281 -2.033333e-01\n8282  6.666667e-03\n8283 -2.286667e-01\n8284  1.493333e-01\n8285  1.146667e-01\n8286 -1.806667e-01\n8287 -1.206667e-01\n8288 -1.666667e-02\n8289 -1.053333e-01\n8290 -1.166667e-01\n8291 -9.666667e-02\n8292  2.086667e-01\n8293 -5.866667e-02\n8294  1.593333e-01\n8295 -4.600000e-02\n8296 -2.273333e-01\n8297 -1.353333e-01\n8298 -8.600000e-02\n8299 -9.333333e-03\n8300 -6.000000e-03\n8301  1.133333e-02\n8302  1.373333e-01\n8303  2.466667e-02\n8304  2.000000e-02\n8305  1.273333e-01\n8306 -1.666667e-02\n8307  1.006667e-01\n8308  3.933333e-02\n8309  1.180000e-01\n8310  2.666667e-02\n8311  1.500000e-01\n8312  6.200000e-02\n8313 -9.466667e-02\n8314 -1.333333e-01\n8315  1.886667e-01\n8316  1.040000e-01\n8317  4.200000e-02\n8318  1.113333e-01\n8319  7.600000e-02\n8320 -1.666667e-01\n8321  8.466667e-02\n8322  8.000000e-03\n8323 -7.403237e-18\n8324  1.013333e-01\n8325 -1.553333e-01\n8326 -2.053333e-01\n8327  4.466667e-02\n8328 -4.066667e-02\n8329 -2.380000e-01\n8330 -1.293333e-01\n8331 -5.200000e-02\n8332 -1.960000e-01\n8333  3.600000e-02\n8334  1.380000e-01\n8335  5.533333e-02\n8336 -9.333333e-02\n8337 -1.646667e-01\n8338 -2.906667e-01\n8339  2.566667e-01\n8340 -9.866667e-02\n8341  1.600000e-02\n8342  1.273333e-01\n8343 -9.733333e-02\n8344  4.066667e-02\n8345  1.260000e-01\n8346 -1.180000e-01\n8347 -4.800000e-02\n8348  1.893333e-01\n8349 -1.086667e-01\n8350 -6.666667e-03\n8351  6.400000e-02\n8352  1.206667e-01\n8353  5.266667e-02\n8354  9.333333e-03\n8355  1.740000e-01\n8356 -1.446667e-01\n8357 -1.486667e-01\n8358 -6.933333e-02\n8359 -4.000000e-02\n8360 -2.166667e-01\n8361 -8.933333e-02\n8362  5.933333e-02\n8363  1.206667e-01\n8364 -1.826667e-01\n8365  2.266667e-01\n8366 -1.260000e-01\n8367 -1.906667e-01\n8368  8.066667e-02\n8369 -1.080000e-01\n8370 -7.933333e-02\n8371  1.073333e-01\n8372 -1.060000e-01\n8373 -4.800000e-02\n8374  4.933333e-02\n8375  2.133333e-02\n8376  1.593333e-01\n8377 -3.333333e-02\n8378  4.400000e-02\n8379  9.266667e-02\n8380  2.120000e-01\n8381  4.533333e-02\n8382  1.220000e-01\n8383  8.800000e-02\n8384 -1.893333e-01\n8385  1.600000e-01\n8386  1.933333e-02\n8387 -1.740000e-01\n8388 -1.333333e-01\n8389  4.933333e-02\n8390 -1.000000e-02\n8391  4.600000e-02\n8392 -1.733333e-01\n8393  2.533333e-02\n8394 -1.986667e-01\n8395  5.333333e-03\n8396  7.133333e-02\n8397 -2.060000e-01\n8398 -1.686667e-01\n8399 -1.840000e-01\n8400  3.933333e-02\n8401  1.066667e-01\n8402 -1.666667e-02\n8403  7.533333e-02\n8404  6.200000e-02\n8405  1.466667e-02\n8406  6.866667e-02\n8407  2.406667e-01\n8408 -7.666667e-02\n8409  2.720000e-01\n8410  6.200000e-02\n8411 -2.126667e-01\n8412  1.733333e-02\n8413  1.333333e-01\n8414  6.333333e-02\n8415  1.246667e-01\n8416 -1.060000e-01\n8417  1.513333e-01\n8418  6.666667e-04\n8419  2.120000e-01\n8420  2.666667e-02\n8421  1.213333e-01\n8422  1.653333e-01\n8423 -4.666667e-02\n8424 -1.720000e-01\n8425  2.026667e-01\n8426 -1.333333e-02\n8427 -7.600000e-02\n8428 -1.186667e-01\n8429  2.000000e-02\n8430  2.173333e-01\n8431 -1.786667e-01\n8432 -2.733333e-02\n8433 -7.666667e-02\n8434 -1.286667e-01\n8435 -6.533333e-02\n8436 -3.866667e-02\n8437 -8.600000e-02\n8438 -2.306667e-01\n8439 -7.400000e-02\n8440  1.620000e-01\n8441 -1.833333e-01\n8442  2.233333e-01\n8443  8.333333e-02\n8444 -1.633333e-01\n8445  1.713333e-01\n8446 -1.733333e-01\n8447  1.500000e-01\n8448  1.693333e-01\n8449  9.733333e-02\n8450  1.386667e-01\n8451 -7.200000e-02\n8452 -1.573333e-01\n8453  1.453333e-01\n8454  1.326667e-01\n8455  7.066667e-02\n8456  1.733333e-02\n8457 -3.333333e-02\n8458  6.933333e-02\n8459 -4.933333e-02\n8460 -2.380000e-01\n8461  1.186667e-01\n8462  6.933333e-02\n8463 -2.093333e-01\n8464  3.466667e-02\n8465  9.333333e-03\n8466  4.600000e-02\n8467  8.933333e-02\n8468 -9.666667e-02\n8469  2.013333e-01\n8470 -2.666667e-02\n8471  1.753333e-01\n8472 -1.600000e-02\n8473  1.846667e-01\n8474  1.666667e-01\n8475  9.266667e-02\n8476 -4.333333e-02\n8477 -1.733333e-02\n8478  1.946667e-01\n8479  1.173333e-01\n8480  4.200000e-02\n8481 -1.600000e-01\n8482  1.780000e-01\n8483 -2.193333e-01\n8484 -3.066667e-02\n8485  1.100000e-01\n8486  1.533333e-02\n8487 -9.533333e-02\n8488  2.406667e-01\n8489  7.066667e-02\n8490 -1.640000e-01\n8491  1.600000e-01\n8492  1.773333e-01\n8493  1.846667e-01\n8494 -5.933333e-02\n8495 -2.126667e-01\n8496 -9.333333e-02\n8497 -2.393333e-01\n8498 -6.200000e-02\n8499 -1.680000e-01\n8500 -2.666667e-03\n8501  7.400000e-02\n8502  4.400000e-02\n8503 -1.513333e-01\n8504 -6.866667e-02\n8505  1.920000e-01\n8506  1.466667e-01\n8507  8.133333e-02\n8508 -2.433333e-01\n8509 -1.926667e-01\n8510 -2.666667e-03\n8511  1.726667e-01\n8512 -3.533333e-02\n8513 -5.666667e-02\n8514  1.546667e-01\n8515  2.586667e-01\n8516  1.520000e-01\n8517 -1.413333e-01\n8518 -1.246667e-01\n8519 -7.533333e-02\n8520  7.533333e-02\n8521  1.653333e-01\n8522  1.040000e-01\n8523 -1.093333e-01\n8524 -4.600000e-02\n8525  1.000000e-01\n8526 -4.666667e-02\n8527 -1.900000e-01\n8528  2.933333e-02\n8529 -1.600000e-02\n8530 -1.793333e-01\n8531 -6.666667e-02\n8532  1.133333e-01\n8533  1.260000e-01\n8534 -1.180000e-01\n8535 -3.533333e-02\n8536  1.126667e-01\n8537 -1.226667e-01\n8538 -9.066667e-02\n8539  7.200000e-02\n8540  6.266667e-02\n8541 -6.133333e-02\n8542  1.573333e-01\n8543 -1.633333e-01\n8544  2.000000e-02\n8545  1.973333e-01\n8546 -8.000000e-03\n8547  1.366667e-01\n8548  1.580000e-01\n8549  1.500000e-01\n8550 -1.093333e-01\n8551  4.266667e-02\n8552 -1.146667e-01\n8553 -1.540000e-01\n8554 -6.866667e-02\n8555  7.933333e-02\n8556  8.066667e-02\n8557 -1.786667e-01\n8558 -2.386667e-01\n8559 -9.400000e-02\n8560  2.600000e-02\n8561 -1.840000e-01\n8562 -3.533333e-02\n8563 -3.533333e-02\n8564 -1.206667e-01\n8565  4.266667e-02\n8566 -1.953333e-01\n8567 -1.860000e-01\n8568 -2.033333e-01\n8569  6.000000e-02\n8570  2.000000e-03\n8571  5.800000e-02\n8572 -1.840000e-01\n8573  1.740000e-01\n8574 -6.733333e-02\n8575  2.313333e-01\n8576 -5.400000e-02\n8577 -1.313333e-01\n8578  7.466667e-02\n8579 -6.666667e-03\n8580 -7.666667e-02\n8581 -4.333333e-02\n8582 -3.600000e-02\n8583  9.866667e-02\n8584  3.333333e-02\n8585 -5.200000e-02\n8586  1.726667e-01\n8587 -4.266667e-02\n8588 -1.426667e-01\n8589 -1.840000e-01\n8590  2.126667e-01\n8591 -8.266667e-02\n8592 -1.713333e-01\n8593 -1.500000e-01\n8594 -1.400000e-02\n8595 -1.833333e-01\n8596 -2.533333e-02\n8597  1.020000e-01\n8598  3.133333e-02\n8599 -1.613333e-01\n8600  8.666667e-02\n8601 -1.266667e-01\n8602 -2.013333e-01\n8603 -7.066667e-02\n8604 -2.466667e-02\n8605  1.760000e-01\n8606 -4.266667e-02\n8607 -1.613333e-01\n8608 -1.366667e-01\n8609  1.080000e-01\n8610  2.000000e-03\n8611 -1.866667e-01\n8612  1.613333e-01\n8613  9.733333e-02\n8614  2.286667e-01\n8615 -3.800000e-02\n8616  2.600000e-02\n8617  2.120000e-01\n8618  7.266667e-02\n8619  3.866667e-02\n8620 -6.933333e-02\n8621  1.680000e-01\n8622  2.113333e-01\n8623  2.620000e-01\n8624  1.633333e-01\n8625  5.866667e-02\n8626  1.053333e-01\n8627 -8.333333e-02\n8628 -1.066667e-01\n8629 -1.306667e-01\n8630  1.033333e-01\n8631 -1.406667e-01\n8632 -4.666667e-02\n8633  6.066667e-02\n8634 -1.606667e-01\n8635 -1.606667e-01\n8636  4.800000e-02\n8637 -9.466667e-02\n8638 -8.866667e-02\n8639 -2.400000e-02\n8640  2.933333e-02\n8641  9.333333e-02\n8642  1.120000e-01\n8643  7.266667e-02\n8644 -1.140000e-01\n8645 -1.693333e-01\n8646  9.933333e-02\n8647  1.500000e-01\n8648 -2.513333e-01\n8649 -8.733333e-02\n8650  1.453333e-01\n8651  1.866667e-01\n8652  4.933333e-02\n8653 -1.933333e-01\n8654 -6.266667e-02\n8655  1.720000e-01\n8656  3.200000e-02\n8657  5.733333e-02\n8658  1.380000e-01\n8659  7.800000e-02\n8660 -9.400000e-02\n8661 -6.066667e-02\n8662 -9.533333e-02\n8663 -1.700000e-01\n8664  1.200000e-01\n8665 -1.173333e-01\n8666 -6.533333e-02\n8667  1.306667e-01\n8668  4.666667e-02\n8669  5.533333e-02\n8670 -1.000000e-01\n8671  1.540000e-01\n8672 -7.200000e-02\n8673  1.400000e-02\n8674 -9.333333e-02\n8675 -2.600000e-02\n8676 -1.740000e-01\n8677 -1.366667e-01\n8678 -9.733333e-02\n8679 -4.600000e-02\n8680  8.000000e-03\n8681 -7.466667e-02\n8682 -9.733333e-02\n8683 -1.753333e-01\n8684  9.666667e-02\n8685  1.286667e-01\n8686 -7.933333e-02\n8687 -1.053333e-01\n8688 -5.266667e-02\n8689 -2.200000e-02\n8690  2.666667e-03\n8691  2.400000e-02\n8692  9.866667e-02\n8693 -3.733333e-02\n8694  2.720000e-01\n8695  1.673333e-01\n8696  1.220000e-01\n8697 -3.133333e-02\n8698  1.120000e-01\n8699  1.653333e-01\n8700  1.880000e-01\n8701  1.106667e-01\n8702 -6.600000e-02\n8703  1.946667e-01\n8704 -4.333333e-02\n8705 -2.126667e-01\n8706  2.066667e-01\n8707  5.333333e-03\n8708  1.946667e-01\n8709  1.713333e-01\n8710 -1.886667e-01\n8711 -1.293333e-01\n8712  5.000000e-02\n8713  1.206667e-01\n8714 -1.260000e-01\n8715  8.600000e-02\n8716  8.533333e-02\n8717 -1.653333e-01\n8718 -5.800000e-02\n8719 -3.600000e-02\n8720 -2.133333e-02\n8721  1.400000e-01\n8722  5.866667e-02\n8723 -1.433333e-01\n8724 -7.600000e-02\n8725 -1.533333e-02\n8726 -1.253333e-01\n8727  1.966667e-01\n8728 -5.533333e-02\n8729  1.420000e-01\n8730 -2.180000e-01\n8731 -1.833333e-01\n8732  1.706667e-01\n8733 -1.353333e-01\n8734 -7.533333e-02\n8735 -1.473333e-01\n8736  1.433333e-01\n8737 -2.073333e-01\n8738  2.533333e-02\n8739 -1.000000e-01\n8740 -6.733333e-02\n8741  1.320000e-01\n8742  1.666667e-02\n8743  1.293333e-01\n8744 -1.386667e-01\n8745  2.053333e-01\n8746 -1.233333e-01\n8747 -1.353333e-01\n8748 -1.366667e-01\n8749 -6.200000e-02\n8750 -1.626667e-01\n8751  1.333333e-03\n8752  7.733333e-02\n8753  1.500000e-01\n8754 -1.926667e-01\n8755  3.666667e-02\n8756 -6.666667e-03\n8757 -2.733333e-02\n8758  6.000000e-03\n8759  4.533333e-02\n8760 -2.126667e-01\n8761 -1.313333e-01\n8762  1.286667e-01\n8763  6.533333e-02\n8764  2.733333e-02\n8765 -1.666667e-02\n8766 -1.613333e-01\n8767  2.933333e-02\n8768 -1.333333e-03\n8769  1.833333e-01\n8770  1.000000e-01\n8771 -1.253333e-01\n8772 -1.086667e-01\n8773  1.586667e-01\n8774  1.320000e-01\n8775  1.926667e-01\n8776 -8.200000e-02\n8777 -1.073333e-01\n8778  4.000000e-02\n8779 -1.553333e-01\n8780  1.440000e-01\n8781  2.026667e-01\n8782  9.600000e-02\n8783  1.620000e-01\n8784  2.666667e-03\n8785  2.133333e-02\n8786  1.533333e-02\n8787  6.000000e-02\n8788 -1.240000e-01\n8789 -6.000000e-03\n8790  9.866667e-02\n8791  4.800000e-02\n8792 -6.133333e-02\n8793 -3.600000e-02\n8794 -1.786667e-01\n8795  1.400000e-01\n8796  2.600000e-02\n8797 -5.333333e-03\n8798 -1.660000e-01\n8799 -1.066667e-01\n8800 -5.866667e-02\n8801  2.080000e-01\n8802  7.466667e-02\n8803  2.353333e-01\n8804 -1.033333e-01\n8805 -3.133333e-02\n8806  9.933333e-02\n8807  3.466667e-02\n8808 -2.033333e-01\n8809  2.186667e-01\n8810  1.626667e-01\n8811  7.666667e-02\n8812 -6.733333e-02\n8813 -1.506667e-01\n8814  1.026667e-01\n8815 -1.600000e-02\n8816  1.033333e-01\n8817  1.226667e-01\n8818  2.013333e-01\n8819  2.266667e-02\n8820 -5.200000e-02\n8821  7.800000e-02\n8822 -7.133333e-02\n8823  1.726667e-01\n8824 -5.200000e-02\n8825  1.940000e-01\n8826 -1.220000e-01\n8827  4.733333e-02\n8828  7.333333e-02\n8829  9.066667e-02\n8830  1.140000e-01\n8831  1.813333e-01\n8832 -8.666667e-02\n8833  1.333333e-03\n8834  1.100000e-01\n8835 -1.933333e-01\n8836  3.000000e-02\n8837 -4.666667e-03\n8838 -8.400000e-02\n8839 -2.086667e-01\n8840 -1.080000e-01\n8841 -8.733333e-02\n8842  1.246667e-01\n8843  2.120000e-01\n8844 -1.673333e-01\n8845 -3.200000e-02\n8846  2.026667e-01\n8847 -8.933333e-02\n8848 -7.066667e-02\n8849  1.900000e-01\n8850  1.733333e-01\n8851 -1.106667e-01\n8852 -1.066667e-02\n8853 -2.866667e-02\n8854  2.000000e-03\n8855  8.466667e-02\n8856  2.400000e-02\n8857  4.000000e-02\n8858  9.866667e-02\n8859 -1.466667e-01\n8860 -6.133333e-02\n8861  1.000000e-01\n8862  1.853333e-01\n8863  5.466667e-02\n8864  5.600000e-02\n8865 -1.346667e-01\n8866 -4.066667e-02\n8867  8.933333e-02\n8868 -1.133333e-02\n8869 -1.633333e-01\n8870  1.273333e-01\n8871 -7.066667e-02\n8872 -6.266667e-02\n8873 -1.946667e-01\n8874 -6.666667e-02\n8875  1.673333e-01\n8876  7.866667e-02\n8877  9.400000e-02\n8878 -1.400000e-02\n8879  6.666667e-02\n8880 -1.860000e-01\n8881 -1.200000e-02\n8882 -1.833333e-01\n8883 -1.080000e-01\n8884  8.800000e-02\n8885  1.166667e-01\n8886 -2.626667e-01\n8887 -2.666667e-02\n8888 -9.400000e-02\n8889 -2.060000e-01\n8890  6.666667e-04\n8891  1.773333e-01\n8892  2.080000e-01\n8893 -1.086667e-01\n8894 -1.133333e-01\n8895 -1.073333e-01\n8896  2.400000e-02\n8897  1.466667e-01\n8898 -1.333333e-01\n8899 -1.600000e-02\n8900  5.866667e-02\n8901 -1.013333e-01\n8902 -7.733333e-02\n8903  6.400000e-02\n8904 -6.933333e-02\n8905  1.406667e-01\n8906 -7.533333e-02\n8907  4.400000e-02\n8908  1.553333e-01\n8909  7.733333e-02\n8910 -2.213333e-01\n8911 -4.866667e-02\n8912  8.466667e-02\n8913  4.066667e-02\n8914 -1.866667e-02\n8915 -1.866667e-02\n8916 -1.493333e-01\n8917 -7.666667e-02\n8918  3.133333e-02\n8919 -9.266667e-02\n8920  1.060000e-01\n8921 -1.360000e-01\n8922  7.666667e-02\n8923 -2.800000e-02\n8924 -8.600000e-02\n8925 -3.533333e-02\n8926 -5.733333e-02\n8927  1.813333e-01\n8928  6.800000e-02\n8929  1.720000e-01\n8930 -1.400000e-02\n8931  9.933333e-02\n8932  8.800000e-02\n8933 -3.866667e-02\n8934  4.333333e-02\n8935  1.400000e-01\n8936 -2.260000e-01\n8937 -7.800000e-02\n8938  1.160000e-01\n8939  7.000000e-02\n8940 -1.600000e-02\n8941  1.100000e-01\n8942  1.013333e-01\n8943 -1.460000e-01\n8944 -7.600000e-02\n8945  1.013333e-01\n8946 -1.606667e-01\n8947 -1.706667e-01\n8948  1.726667e-01\n8949  1.320000e-01\n8950  2.220000e-01\n8951  2.006667e-01\n8952  1.180000e-01\n8953  1.160000e-01\n8954 -8.000000e-03\n8955 -1.913333e-01\n8956 -6.600000e-02\n8957  8.200000e-02\n8958  1.453333e-01\n8959 -2.066667e-02\n8960 -6.000000e-03\n8961 -1.240000e-01\n8962  5.600000e-02\n8963  1.666667e-02\n8964 -6.666667e-03\n8965 -7.666667e-02\n8966  1.053333e-01\n8967 -1.513333e-01\n8968 -1.500000e-01\n8969 -8.066667e-02\n8970 -2.666667e-03\n8971 -3.466667e-02\n8972 -1.080000e-01\n8973  6.600000e-02\n8974 -1.106667e-01\n8975 -1.920000e-01\n8976 -2.293333e-01\n8977  9.733333e-02\n8978  2.000000e-02\n8979  1.746667e-01\n8980  1.700000e-01\n8981 -8.600000e-02\n8982 -1.060000e-01\n8983 -9.066667e-02\n8984 -1.533333e-02\n8985  9.533333e-02\n8986  6.666667e-03\n8987  1.466667e-01\n8988 -2.466667e-02\n8989 -4.466667e-02\n8990  7.600000e-02\n8991  1.066667e-01\n8992 -1.493333e-01\n8993 -3.400000e-02\n8994  1.493333e-01\n8995  1.020000e-01\n8996 -7.066667e-02\n8997  4.933333e-02\n8998  8.533333e-02\n8999  8.866667e-02\n9000 -4.533333e-02\n9001 -1.033333e-01\n9002  1.300000e-01\n9003  1.486667e-01\n9004  1.200000e-02\n9005 -1.200000e-02\n9006 -1.440000e-01\n9007 -1.653333e-01\n9008 -3.000000e-02\n9009 -1.060000e-01\n9010 -1.446667e-01\n9011  6.466667e-02\n9012  1.606667e-01\n9013 -7.333333e-02\n9014 -7.600000e-02\n9015  6.733333e-02\n9016 -1.933333e-02\n9017 -3.733333e-02\n9018 -1.106667e-01\n9019  1.800000e-01\n9020  1.500000e-01\n9021  3.333333e-02\n9022  1.080000e-01\n9023 -3.466667e-02\n9024  8.466667e-02\n9025  1.153333e-01\n9026 -1.893333e-01\n9027  5.666667e-02\n9028  6.000000e-03\n9029 -1.086667e-01\n9030 -4.066667e-02\n9031  1.300000e-01\n9032 -1.533333e-01\n9033  1.460000e-01\n9034 -1.026667e-01\n9035 -5.000000e-02\n9036 -9.600000e-02\n9037 -1.486667e-01\n9038 -7.400000e-02\n9039  9.200000e-02\n9040  1.066667e-01\n9041  1.573333e-01\n9042 -9.733333e-02\n9043 -1.206667e-01\n9044  4.466667e-02\n9045 -1.000000e-02\n9046  1.933333e-02\n9047  1.446667e-01\n9048  1.140000e-01\n9049 -3.866667e-02\n9050  3.200000e-02\n9051 -1.320000e-01\n9052 -7.200000e-02\n9053 -1.806667e-01\n9054  2.666667e-03\n9055  1.613333e-01\n9056 -7.533333e-02\n9057 -1.540000e-01\n9058  2.506667e-01\n9059 -8.200000e-02\n9060  1.400000e-02\n9061  1.353333e-01\n9062 -9.333333e-02\n9063 -5.333333e-02\n9064  5.200000e-02\n9065 -7.200000e-02\n9066 -4.666667e-02\n9067  1.406667e-01\n9068 -1.826667e-01\n9069  1.073333e-01\n9070  3.466667e-02\n9071 -2.060000e-01\n9072 -9.200000e-02\n9073  1.853333e-01\n9074  1.100000e-01\n9075  1.693333e-01\n9076  7.333333e-02\n9077  1.200000e-02\n9078  8.266667e-02\n9079  8.666667e-02\n9080  4.866667e-02\n9081 -1.233333e-01\n9082  1.333333e-02\n9083 -1.520000e-01\n9084  6.333333e-02\n9085  2.153333e-01\n9086 -2.126667e-01\n9087  3.333333e-02\n9088  1.766667e-01\n9089 -1.860000e-01\n9090 -2.800000e-02\n9091  1.153333e-01\n9092 -1.346667e-01\n9093  1.173333e-01\n9094 -1.646667e-01\n9095  5.000000e-02\n9096 -8.133333e-02\n9097 -1.126667e-01\n9098 -1.800000e-01\n9099  1.046667e-01\n9100  2.206667e-01\n9101  1.193333e-01\n9102 -8.266667e-02\n9103  9.666667e-02\n9104  9.600000e-02\n9105 -1.740000e-01\n9106  5.133333e-02\n9107 -1.406667e-01\n9108  4.000000e-03\n9109 -3.400000e-02\n9110 -8.333333e-02\n9111  3.733333e-02\n9112  4.333333e-02\n9113  1.246667e-01\n9114 -2.720000e-01\n9115 -1.066667e-01\n9116 -6.800000e-02\n9117 -3.200000e-02\n9118  4.066667e-02\n9119 -2.060000e-01\n9120  1.593333e-01\n9121  1.066667e-02\n9122  1.226667e-01\n9123 -8.266667e-02\n9124 -1.380000e-01\n9125 -1.200000e-02\n9126  1.093333e-01\n9127  4.533333e-02\n9128  8.400000e-02\n9129  1.993333e-01\n9130 -9.266667e-02\n9131 -4.133333e-02\n9132  1.080000e-01\n9133  6.533333e-02\n9134 -8.733333e-02\n9135 -1.840000e-01\n9136  2.000000e-03\n9137 -4.000000e-03\n9138  9.066667e-02\n9139  1.113333e-01\n9140 -1.033333e-01\n9141  3.800000e-02\n9142 -1.613333e-01\n9143 -9.266667e-02\n9144  1.600000e-01\n9145 -1.346667e-01\n9146 -1.820000e-01\n9147 -5.000000e-02\n9148  1.046667e-01\n9149  3.533333e-02\n9150 -1.253333e-01\n9151  4.666667e-03\n9152 -1.100000e-01\n9153  7.533333e-02\n9154 -2.160000e-01\n9155 -7.000000e-02\n9156 -3.533333e-02\n9157  2.693333e-01\n9158  2.000000e-03\n9159 -4.800000e-02\n9160 -2.600000e-02\n9161  4.466667e-02\n9162 -1.533333e-02\n9163  2.333333e-02\n9164 -7.333333e-02\n9165 -4.800000e-02\n9166  2.373333e-01\n9167  3.733333e-02\n9168  1.220000e-01\n9169 -9.400000e-02\n9170  7.066667e-02\n9171 -1.333333e-03\n9172  1.893333e-01\n9173 -7.333333e-02\n9174 -9.400000e-02\n9175 -2.006667e-01\n9176 -1.866667e-02\n9177 -1.600000e-02\n9178  5.266667e-02\n9179 -4.866667e-02\n9180  6.466667e-02\n9181 -7.666667e-02\n9182 -2.220000e-01\n9183 -1.400000e-01\n9184  6.866667e-02\n9185 -1.680000e-01\n9186 -1.733333e-02\n9187 -3.600000e-02\n9188  1.086667e-01\n9189  4.533333e-02\n9190  2.280000e-01\n9191 -1.166667e-01\n9192  2.053333e-01\n9193 -1.760000e-01\n9194  2.140000e-01\n9195 -3.200000e-02\n9196  1.900000e-01\n9197 -5.333333e-03\n9198  1.446667e-01\n9199  1.560000e-01\n9200 -1.786667e-01\n9201  2.066667e-01\n9202 -5.333333e-02\n9203 -2.220000e-01\n9204 -1.666667e-02\n9205 -4.866667e-02\n9206  2.000000e-02\n9207 -1.473333e-01\n9208  5.000000e-02\n9209 -6.733333e-02\n9210 -1.186667e-01\n9211  8.666667e-02\n9212  1.333333e-01\n9213  1.533333e-01\n9214  1.600000e-02\n9215 -1.933333e-02\n9216  2.400000e-02\n9217 -2.266667e-02\n9218 -6.466667e-02\n9219 -1.013333e-01\n9220  1.193333e-01\n9221 -1.553333e-01\n9222  6.000000e-03\n9223 -4.800000e-02\n9224 -1.813333e-01\n9225  1.246667e-01\n9226 -1.440000e-01\n9227 -7.133333e-02\n9228  7.333333e-03\n9229 -2.400000e-02\n9230  4.533333e-02\n9231 -1.800000e-02\n9232 -1.480000e-01\n9233  6.800000e-02\n9234 -1.200000e-02\n9235 -1.500000e-01\n9236 -1.613333e-01\n9237  2.180000e-01\n9238  4.466667e-02\n9239 -9.733333e-02\n9240 -1.493333e-01\n9241  9.933333e-02\n9242  1.420000e-01\n9243 -4.133333e-02\n9244  4.000000e-02\n9245 -2.933333e-02\n9246  1.786667e-01\n9247 -2.000000e-02\n9248  9.933333e-02\n9249 -1.020000e-01\n9250 -2.113333e-01\n9251 -8.466667e-02\n9252 -9.866667e-02\n9253 -2.466667e-02\n9254 -1.346667e-01\n9255  5.266667e-02\n9256 -5.866667e-02\n9257 -1.906667e-01\n9258 -6.466667e-02\n9259  2.933333e-02\n9260 -1.613333e-01\n9261  8.666667e-03\n9262  1.493333e-01\n9263  1.580000e-01\n9264  1.266667e-02\n9265  1.153333e-01\n9266 -1.460000e-01\n9267  4.333333e-02\n9268  8.733333e-02\n9269 -3.066667e-02\n9270  1.766667e-01\n9271 -1.733333e-02\n9272 -8.266667e-02\n9273 -1.686667e-01\n9274  1.233333e-01\n9275  7.266667e-02\n9276 -1.993333e-01\n9277  1.613333e-01\n9278  5.333333e-02\n9279 -7.933333e-02\n9280 -8.466667e-02\n9281  1.566667e-01\n9282 -7.600000e-02\n9283 -9.733333e-02\n9284 -4.666667e-03\n9285  9.800000e-02\n9286 -7.466667e-02\n9287 -8.866667e-02\n9288 -1.600000e-01\n9289  1.573333e-01\n9290  1.440000e-01\n9291  1.100000e-01\n9292  1.880000e-01\n9293  1.926667e-01\n9294 -1.033333e-01\n9295 -5.266667e-02\n9296 -2.180000e-01\n9297  1.086667e-01\n9298  1.933333e-02\n9299  6.666667e-03\n9300 -1.473333e-01\n9301 -5.466667e-02\n9302 -5.533333e-02\n9303 -1.680000e-01\n9304  4.266667e-02\n9305 -1.933333e-01\n9306  8.733333e-02\n9307 -1.306667e-01\n9308 -1.733333e-02\n9309  6.533333e-02\n9310 -1.646667e-01\n9311 -1.033333e-01\n9312 -1.353333e-01\n9313 -1.906667e-01\n9314 -5.000000e-02\n9315  8.466667e-02\n9316 -4.733333e-02\n9317  1.313333e-01\n9318 -1.680000e-01\n9319  1.060000e-01\n9320  7.133333e-02\n9321  5.933333e-02\n9322  4.066667e-02\n9323  7.000000e-02\n9324 -8.933333e-02\n9325 -1.120000e-01\n9326  5.466667e-02\n9327  3.200000e-02\n9328  9.600000e-02\n9329  1.333333e-03\n9330  2.466667e-02\n9331 -7.421307e-18\n9332  7.266667e-02\n9333  1.040000e-01\n9334 -9.533333e-02\n9335  8.333333e-02\n9336  1.333333e-01\n9337 -1.586667e-01\n9338 -8.466667e-02\n9339 -1.460000e-01\n9340 -8.466667e-02\n9341  2.180000e-01\n9342  1.560000e-01\n9343  2.133333e-02\n9344  1.553333e-01\n9345  2.053333e-01\n9346 -6.133333e-02\n9347  1.526667e-01\n9348 -2.200000e-02\n9349  3.333333e-02\n9350 -1.866667e-02\n9351 -2.020000e-01\n9352 -4.666667e-02\n9353 -6.800000e-02\n9354  1.326667e-01\n9355 -2.086667e-01\n9356 -8.666667e-03\n9357 -3.800000e-02\n9358 -1.873333e-01\n9359 -2.613333e-01\n9360 -1.093333e-01\n9361  8.200000e-02\n9362 -8.600000e-02\n9363  7.266667e-02\n9364 -4.466667e-02\n9365 -1.326667e-01\n9366 -2.626667e-01\n9367  2.206667e-01\n9368 -1.126667e-01\n9369  1.266667e-01\n9370  6.666667e-03\n9371  9.333333e-03\n9372 -1.073333e-01\n9373 -3.333333e-03\n9374  5.466667e-02\n9375 -1.886667e-01\n9376  1.913333e-01\n9377  1.646667e-01\n9378  8.000000e-03\n9379 -4.333333e-02\n9380  6.666667e-02\n9381  7.333333e-02\n9382 -1.053333e-01\n9383  3.133333e-02\n9384 -1.946667e-01\n9385  8.800000e-02\n9386  1.273333e-01\n9387 -5.533333e-02\n9388 -1.353333e-01\n9389  5.000000e-02\n9390 -4.400000e-02\n9391  2.386667e-01\n9392  6.466667e-02\n9393 -2.426667e-01\n9394  4.666667e-03\n9395 -8.800000e-02\n9396 -1.400000e-01\n9397  4.200000e-02\n9398 -8.333333e-02\n9399  4.533333e-02\n9400  1.406667e-01\n9401 -1.966667e-01\n9402  2.186667e-01\n9403  1.160000e-01\n9404  1.780000e-01\n9405  1.020000e-01\n9406 -6.200000e-02\n9407  1.133333e-01\n9408 -1.293333e-01\n9409  1.520000e-01\n9410  1.800000e-02\n9411  2.113333e-01\n9412  1.173333e-01\n9413 -1.413333e-01\n9414 -5.933333e-02\n9415  1.826667e-01\n9416 -1.520000e-01\n9417  6.466667e-02\n9418 -1.486667e-01\n9419  2.433333e-01\n9420  1.600000e-02\n9421 -4.600000e-02\n9422  1.106667e-01\n9423  2.006667e-01\n9424  1.560000e-01\n9425 -3.866667e-02\n9426  4.133333e-02\n9427  5.933333e-02\n9428  5.400000e-02\n9429 -1.193333e-01\n9430 -3.466667e-02\n9431 -2.060000e-01\n9432  2.106667e-01\n9433 -4.800000e-02\n9434 -2.026667e-01\n9435  1.566667e-01\n9436 -5.200000e-02\n9437  1.000000e-02\n9438  8.533333e-02\n9439 -9.266667e-02\n9440 -1.520000e-01\n9441  8.333333e-02\n9442 -6.600000e-02\n9443  1.346667e-01\n9444  1.066667e-02\n9445  8.133333e-02\n9446  1.853333e-01\n9447  2.133333e-02\n9448 -1.920000e-01\n9449  1.133333e-02\n9450 -8.066667e-02\n9451  1.906667e-01\n9452  1.113333e-01\n9453  1.120000e-01\n9454  2.100000e-01\n9455 -2.466667e-02\n9456  1.013333e-01\n9457 -6.266667e-02\n9458 -5.800000e-02\n9459  1.200000e-01\n9460  6.933333e-02\n9461 -1.520000e-01\n9462  9.066667e-02\n9463  1.453333e-01\n9464  1.940000e-01\n9465  1.720000e-01\n9466  7.466667e-02\n9467 -6.000000e-02\n9468 -1.600000e-02\n9469 -1.026667e-01\n9470  1.506667e-01\n9471 -1.833333e-01\n9472 -7.466667e-02\n9473 -7.733333e-02\n9474 -9.200000e-02\n9475 -6.400000e-02\n9476  5.933333e-02\n9477 -1.206667e-01\n9478 -1.233333e-01\n9479 -1.066667e-01\n9480 -1.653333e-01\n9481  2.093333e-01\n9482  1.493333e-01\n9483  1.180000e-01\n9484  2.046667e-01\n9485  1.446667e-01\n9486  1.026667e-01\n9487 -4.466667e-02\n9488 -1.873333e-01\n9489  8.400000e-02\n9490  1.540000e-01\n9491  1.340000e-01\n9492 -1.273333e-01\n9493  5.466667e-02\n9494 -5.400000e-02\n9495  1.340000e-01\n9496  1.973333e-01\n9497  1.333333e-01\n9498 -9.600000e-02\n9499 -2.866667e-02\n9500 -1.380000e-01\n9501 -1.440000e-01\n9502 -1.873333e-01\n9503  1.080000e-01\n9504  9.333333e-02\n9505 -2.666667e-02\n9506  6.333333e-02\n9507  1.566667e-01\n9508 -5.400000e-02\n9509 -1.506667e-01\n9510  1.060000e-01\n9511  1.280000e-01\n9512 -1.460000e-01\n9513  1.913333e-01\n9514  1.126667e-01\n9515  8.733333e-02\n9516 -1.886667e-01\n9517  6.533333e-02\n9518  4.133333e-02\n9519  2.020000e-01\n9520  1.346667e-01\n9521 -1.333333e-03\n9522  1.333333e-02\n9523 -1.606667e-01\n9524 -1.646667e-01\n9525  1.053333e-01\n9526  1.593333e-01\n9527  8.466667e-02\n9528 -6.666667e-03\n9529  4.666667e-02\n9530  1.493333e-01\n9531 -2.000000e-02\n9532 -1.940000e-01\n9533  2.000000e-03\n9534 -2.733333e-02\n9535 -9.200000e-02\n9536 -1.546667e-01\n9537 -6.200000e-02\n9538 -1.833333e-01\n9539  1.026667e-01\n9540  7.600000e-02\n9541  1.453333e-01\n9542  1.613333e-01\n9543  8.200000e-02\n9544 -7.133333e-02\n9545 -1.666667e-01\n9546 -1.606667e-01\n9547  7.533333e-02\n9548 -1.113333e-01\n9549 -1.266667e-02\n9550 -9.600000e-02\n9551 -2.233333e-01\n9552  1.546667e-01\n9553  1.320000e-01\n9554 -7.933333e-02\n9555 -7.266667e-02\n9556  1.200000e-01\n9557  2.466667e-02\n9558  1.700000e-01\n9559  2.006667e-01\n9560  1.353333e-01\n9561  1.266667e-02\n9562  1.760000e-01\n9563  7.133333e-02\n9564  2.693333e-01\n9565  1.486667e-01\n9566 -6.000000e-03\n9567  1.800000e-02\n9568 -2.006667e-01\n9569  1.480000e-01\n9570 -1.053333e-01\n9571 -4.200000e-02\n9572 -1.113333e-01\n9573  1.133333e-02\n9574  9.666667e-02\n9575 -1.260000e-01\n9576 -5.000000e-02\n9577  1.240000e-01\n9578 -1.386667e-01\n9579  1.253333e-01\n9580  3.400000e-02\n9581 -1.126667e-01\n9582  5.266667e-02\n9583 -1.200000e-01\n9584 -2.266667e-02\n9585 -1.233333e-01\n9586 -1.006667e-01\n9587  1.580000e-01\n9588  7.414079e-18\n9589  8.000000e-03\n9590 -9.266667e-02\n9591 -9.266667e-02\n9592  3.933333e-02\n9593  1.466667e-02\n9594 -1.306667e-01\n9595 -1.660000e-01\n9596  1.793333e-01\n9597  2.133333e-02\n9598  1.486667e-01\n9599 -1.026667e-01\n9600  5.333333e-03\n9601  3.133333e-02\n9602  1.386667e-01\n9603  1.653333e-01\n9604 -1.053333e-01\n9605  1.526667e-01\n9606  9.733333e-02\n9607  1.520000e-01\n9608  9.466667e-02\n9609  1.400000e-02\n9610 -1.266667e-02\n9611 -1.333333e-02\n9612 -1.926667e-01\n9613  1.046667e-01\n9614  8.200000e-02\n9615 -1.333333e-02\n9616 -1.486667e-01\n9617  9.600000e-02\n9618  1.460000e-01\n9619  5.133333e-02\n9620 -9.800000e-02\n9621  4.733333e-02\n9622 -1.586667e-01\n9623  2.253333e-01\n9624  4.733333e-02\n9625 -7.866667e-02\n9626 -2.040000e-01\n9627  8.000000e-02\n9628 -1.880000e-01\n9629 -5.000000e-02\n9630  1.160000e-01\n9631 -2.220610e-17\n9632 -2.053333e-01\n9633  1.580000e-01\n9634  1.000000e-02\n9635  7.466667e-02\n9636 -4.333333e-02\n9637  1.233333e-01\n9638 -1.260000e-01\n9639  1.026667e-01\n9640 -2.280000e-01\n9641 -1.220000e-01\n9642  9.600000e-02\n9643  8.133333e-02\n9644  8.733333e-02\n9645  1.300000e-01\n9646 -6.133333e-02\n9647 -1.346667e-01\n9648  1.506667e-01\n9649  6.133333e-02\n9650  2.160000e-01\n9651  2.533333e-02\n9652 -1.753333e-01\n9653 -6.000000e-03\n9654  1.553333e-01\n9655  2.286667e-01\n9656 -1.933333e-02\n9657  1.566667e-01\n9658 -1.780000e-01\n9659  9.733333e-02\n9660  6.200000e-02\n9661  9.066667e-02\n9662  8.333333e-02\n9663 -6.666667e-04\n9664  1.186667e-01\n9665  1.106667e-01\n9666  8.000000e-03\n9667  1.066667e-02\n9668  8.866667e-02\n9669 -1.200000e-02\n9670 -2.200000e-02\n9671  1.020000e-01\n9672  1.260000e-01\n9673  8.800000e-02\n9674  2.533333e-02\n9675  9.800000e-02\n9676  2.000000e-02\n9677  1.253333e-01\n9678 -1.533333e-02\n9679 -1.206667e-01\n9680 -1.333333e-03\n9681  6.066667e-02\n9682 -2.293333e-01\n9683  1.266667e-01\n9684 -1.126667e-01\n9685 -1.733333e-01\n9686  1.986667e-01\n9687  5.333333e-02\n9688 -2.120000e-01\n9689  1.946667e-01\n9690  7.000000e-02\n9691 -5.666667e-02\n9692  7.000000e-02\n9693 -1.133333e-02\n9694  1.966667e-01\n9695 -1.620000e-01\n9696  1.526667e-01\n9697  1.266667e-01\n9698  2.666667e-02\n9699  1.226667e-01\n9700  1.713333e-01\n9701 -1.520000e-01\n9702 -3.866667e-02\n9703 -7.333333e-02\n9704  1.046667e-01\n9705 -6.266667e-02\n9706 -3.666667e-02\n9707  3.333333e-02\n9708  7.866667e-02\n9709  7.066667e-02\n9710  2.200000e-01\n9711 -2.866667e-02\n9712 -1.933333e-02\n9713 -4.533333e-02\n9714 -4.733333e-02\n9715  2.206667e-01\n9716 -6.666667e-03\n9717  8.000000e-02\n9718  1.126667e-01\n9719  1.666667e-02\n9720 -3.533333e-02\n9721 -7.066667e-02\n9722  1.126667e-01\n9723  1.233333e-01\n9724  7.066667e-02\n9725 -1.066667e-01\n9726 -2.120000e-01\n9727 -3.733333e-02\n9728  1.266667e-02\n9729  8.000000e-03\n9730 -2.326667e-01\n9731  7.466667e-02\n9732 -1.033333e-01\n9733  2.466667e-02\n9734 -8.533333e-02\n9735 -2.733333e-02\n9736  1.640000e-01\n9737  1.500000e-01\n9738 -1.440000e-01\n9739  1.153333e-01\n9740 -1.940000e-01\n9741  2.400000e-01\n9742  5.666667e-02\n9743  1.246667e-01\n9744 -3.666667e-02\n9745 -5.800000e-02\n9746  1.566667e-01\n9747  1.400000e-01\n9748  1.933333e-02\n9749 -2.000000e-03\n9750 -3.133333e-02\n9751  2.766667e-01\n9752 -1.433333e-01\n9753 -2.000000e-01\n9754 -4.933333e-02\n9755 -2.393333e-01\n9756  1.280000e-01\n9757 -1.693333e-01\n9758 -1.046667e-01\n9759  2.933333e-02\n9760 -4.200000e-02\n9761 -1.346667e-01\n9762  1.793333e-01\n9763  1.826667e-01\n9764  1.346667e-01\n9765  9.066667e-02\n9766 -2.406667e-01\n9767 -8.800000e-02\n9768  3.800000e-02\n9769  7.333333e-02\n9770  9.600000e-02\n9771  1.533333e-02\n9772 -1.613333e-01\n9773  2.013333e-01\n9774  2.733333e-02\n9775  1.386667e-01\n9776 -4.533333e-02\n9777  1.053333e-01\n9778  2.133333e-02\n9779 -1.886667e-01\n9780 -2.400000e-02\n9781  6.933333e-02\n9782  3.800000e-02\n9783  7.733333e-02\n9784  3.133333e-02\n9785  8.800000e-02\n9786  2.800000e-02\n9787 -2.386667e-01\n9788 -1.000000e-02\n9789  1.126667e-01\n9790 -1.786667e-01\n9791  1.466667e-01\n9792 -1.373333e-01\n9793 -2.026667e-01\n9794  5.000000e-02\n9795 -1.866667e-02\n9796 -1.300000e-01\n9797 -1.920000e-01\n9798 -1.400000e-02\n9799 -9.333333e-03\n9800 -5.600000e-02\n9801  2.413333e-01\n9802  1.740000e-01\n9803  8.800000e-02\n9804  1.793333e-01\n9805  1.780000e-01\n9806 -1.240000e-01\n9807  1.606667e-01\n9808  3.333333e-03\n9809 -3.200000e-02\n9810 -4.333333e-02\n9811  1.106667e-01\n9812  3.733333e-02\n9813  4.533333e-02\n9814 -9.333333e-03\n9815  1.060000e-01\n9816 -2.600000e-02\n9817  3.600000e-02\n9818 -1.626667e-01\n9819 -2.666667e-03\n9820 -1.066667e-01\n9821 -3.533333e-02\n9822 -1.680000e-01\n9823 -1.126667e-01\n9824  3.933333e-02\n9825 -1.373333e-01\n9826 -3.200000e-02\n9827 -4.200000e-02\n9828 -1.506667e-01\n9829 -1.813333e-01\n9830  1.333333e-01\n9831  1.360000e-01\n9832 -8.400000e-02\n9833  3.666667e-02\n9834 -1.193333e-01\n9835  6.133333e-02\n9836  1.493333e-01\n9837  2.066667e-02\n9838 -1.720000e-01\n9839 -7.933333e-02\n9840 -1.466667e-02\n9841 -1.546667e-01\n9842  1.713333e-01\n9843  6.333333e-02\n9844 -3.200000e-02\n9845  2.073333e-01\n9846  1.126667e-01\n9847  2.466667e-02\n9848 -6.133333e-02\n9849 -5.400000e-02\n9850  1.106667e-01\n9851 -8.533333e-02\n9852 -1.626667e-01\n9853 -1.086667e-01\n9854 -9.133333e-02\n9855 -8.266667e-02\n9856 -1.753333e-01\n9857  3.200000e-02\n9858  2.313333e-01\n9859 -7.000000e-02\n9860  4.000000e-02\n9861 -3.266667e-02\n9862  9.333333e-03\n9863 -1.313333e-01\n9864  9.000000e-02\n9865 -8.866667e-02\n9866 -6.666667e-02\n9867  8.866667e-02\n9868 -1.426667e-01\n9869  1.946667e-01\n9870 -3.000000e-02\n9871 -2.386667e-01\n9872  1.273333e-01\n9873 -8.333333e-02\n9874 -6.000000e-03\n9875 -5.000000e-02\n9876  7.066667e-02\n9877 -8.400000e-02\n9878  1.880000e-01\n9879 -2.800000e-02\n9880  5.600000e-02\n9881  3.266667e-02\n9882  2.146667e-01\n9883  1.546667e-01\n9884  1.626667e-01\n9885  6.133333e-02\n9886 -1.806667e-01\n9887 -1.493333e-01\n9888  9.666667e-02\n9889 -1.266667e-02\n9890 -1.226667e-01\n9891 -1.206667e-01\n9892 -2.173333e-01\n9893  2.613333e-01\n9894  1.553333e-01\n9895  1.573333e-01\n9896 -3.133333e-02\n9897  9.266667e-02\n9898 -8.066667e-02\n9899 -6.933333e-02\n9900 -8.000000e-03\n9901  4.333333e-02\n9902  6.733333e-02\n9903 -1.140000e-01\n9904 -8.666667e-03\n9905 -1.133333e-02\n9906 -8.133333e-02\n9907 -1.520000e-01\n9908 -8.666667e-02\n9909  2.733333e-02\n9910  1.080000e-01\n9911 -1.186667e-01\n9912  4.466667e-02\n9913 -6.466667e-02\n9914  3.666667e-02\n9915  6.666667e-04\n9916  1.420000e-01\n9917 -2.013333e-01\n9918 -9.000000e-02\n9919  4.666667e-03\n9920  2.066667e-01\n9921  8.600000e-02\n9922 -1.480000e-01\n9923  6.400000e-02\n9924 -1.160000e-01\n9925  2.266667e-02\n9926 -2.800000e-02\n9927 -1.600000e-02\n9928 -1.320000e-01\n9929  4.800000e-02\n9930 -1.526667e-01\n9931 -7.000000e-02\n9932 -2.420000e-01\n9933  5.466667e-02\n9934 -7.600000e-02\n9935  1.340000e-01\n9936  3.666667e-02\n9937 -8.533333e-02\n9938 -1.066667e-02\n9939 -1.280000e-01\n9940  1.466667e-01\n9941  1.380000e-01\n9942  2.246667e-01\n9943  9.800000e-02\n9944 -1.133333e-01\n9945  1.566667e-01\n9946 -7.933333e-02\n9947  8.866667e-02\n9948  8.200000e-02\n9949 -4.666667e-03\n9950  9.066667e-02\n9951 -7.733333e-02\n9952 -3.800000e-02\n9953  1.580000e-01\n9954  1.160000e-01\n9955  1.620000e-01\n9956 -1.400000e-02\n9957 -7.533333e-02\n9958 -1.473333e-01\n9959 -7.266667e-02\n9960  1.060000e-01\n9961  2.606667e-01\n9962 -1.780000e-01\n9963 -3.066667e-02\n9964  1.393333e-01\n9965 -7.333333e-02\n9966 -3.266667e-02\n9967  1.186667e-01\n9968 -1.740000e-01\n9969 -2.206667e-01\n9970 -1.000000e-02\n9971  2.733333e-02\n9972 -2.100000e-01\n9973 -9.533333e-02\n9974 -3.533333e-02\n9975  2.313333e-01\n9976 -4.600000e-02\n9977  5.666667e-02\n9978 -1.526667e-01\n9979  8.333333e-02\n9980 -1.246667e-01\n9981  2.066667e-01\n9982 -1.680000e-01\n9983  1.133333e-02\n9984 -1.066667e-01\n9985  2.186667e-01\n9986  1.440000e-01\n9987 -4.733333e-02\n9988  1.553333e-01\n9989 -1.113333e-01\n9990  1.533333e-02\n9991  1.560000e-01\n9992  1.400000e-01\n9993 -7.733333e-02\n9994 -1.280000e-01\n9995  6.133333e-02\n9996  1.373333e-01\n9997 -3.400000e-02\n9998 -4.800000e-02\n9999 -9.000000e-02\n\n\nThis code performs a permutation test to analyze the difference in grocery prices between Walmart and Target. The polarity vector is used to randomly shuffle the data between the two stores (Target and Walmart) to simulate the null distribution, where no real difference between the stores exists. The do(9999) function is used to generate 9,999 resamples, and the mean difference between the two stores is calculated for each resample. The output shows the distribution of these simulated mean differences, with values both positive and negative, suggesting random variations around the null hypothesis of no difference between the two stores.\n\n\n\n\ngf_histogram(data = null_dist_price, ~mean) %&gt;%\n  gf_vline(xintercept = obs_diff_price, colour = \"red\")\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThis plot shows the null distribution of the mean differences in grocery prices between Target and Walmart from the permutation test. The histogram represents the distribution of the simulated mean differences when the null hypothesis is assumed (no real price difference between the stores). The red vertical line indicates the observed mean price difference (approximately 0.0567) between Walmart and Target. This line’s position relative to the null distribution helps visualize whether the observed difference is extreme or typical under the null hypothesis, aiding in the determination of statistical significance.\n\n\n\n\nprop1(~mean, data = null_dist_price)\n\nprop_-0.292 \n      2e-04 \n\n\nThis calculates the proportion of values in the null distribution that are less than or equal to the observed mean difference. The result shows that approximately 0.0292% (2e-04) of the simulated null distribution values are less than the observed difference. This small proportion suggests that the observed difference is quite extreme under the null hypothesis, potentially indicating statistical significance depending on the context of the test.\n\n\n\n\nmosaic::t_test(Groceries$Walmart, Groceries$Target, paired = TRUE) %&gt;%\n  broom::tidy() %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"cyan\"),\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"t.test\")\n\n\n\n\n\n\n\nt.test\n\n\nestimate\nstatistic\np.value\nparameter\nconf.low\nconf.high\nmethod\nalternative\n\n\n\n\n-0.05666667\n-0.4704556\n0.6415488\n29\n-0.3030159\n0.1896825\nPaired t-test\ntwo.sided\n\n\n\n\n\n\nlm(Target - Walmart ~ 1, data = Groceries) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95) %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"cyan\"),\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"Linear Model\")\n\n\n\n\n\n\n\nLinear Model\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\nconf.low\nconf.high\n\n\n\n\n(Intercept)\n0.05666667\n0.1204506\n0.4704556\n0.6415488\n-0.1896825\n0.3030159\n\n\n\n\n\n\nwilcox.test(Groceries$Walmart, Groceries$Target,\n  digits.rank = 7,\n  paired = TRUE,\n  conf.int = TRUE,\n  conf.level = 0.95\n) %&gt;%\n  broom::tidy() %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"palegreen\"),\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"Wilcoxon Test\")\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, digits.rank\n= 7, : cannot compute exact p-value with ties\n\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, digits.rank\n= 7, : cannot compute exact confidence interval with ties\n\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, digits.rank\n= 7, : cannot compute exact p-value with zeroes\n\n\nWarning in wilcox.test.default(Groceries$Walmart, Groceries$Target, digits.rank\n= 7, : cannot compute exact confidence interval with zeroes\n\n\n\n\n\n\n\n\nWilcoxon Test\n\n\nestimate\nstatistic\np.value\nconf.low\nconf.high\nmethod\nalternative\n\n\n\n\n-0.104966\n95\n0.01431746\n-0.1750051\n-0.03005987\nWilcoxon signed rank test with continuity correction\ntwo.sided\n\n\n\n\n\n\nlm(signed_rank(Target - Walmart) ~ 1,\n  data = Groceries\n) %&gt;%\n  broom::tidy(conf.int = TRUE, conf.level = 0.95) %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"palegreen\"),\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_body(columns = p.value)\n  ) %&gt;%\n  tab_header(title = \"Linear Model with Sign.Ranks\")\n\n\n\n\n\n\n\nLinear Model with Sign.Ranks\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\nconf.low\nconf.high\n\n\n\n\n(Intercept)\n8.533333\n2.888834\n2.953902\n0.006167464\n2.625004\n14.44166\n\n\n\n\n\n\n\nThe analysis includes different statistical methods comparing grocery prices at Walmart and Target. The paired t-test and linear model both returned high p-values (0.6415), indicating no significant difference between the prices at the two stores. However, the non-parametric Wilcoxon test (p-value = 0.0143) and the linear model with signed ranks (p-value = 0.0062) both show significant differences, suggesting that there is indeed a notable price difference between Walmart and Target. The contrast in results implies that the t-test and standard linear model may not be suitable due to possible violations of assumptions like normality, which the Wilcoxon and signed rank models effectively account for, leading to more reliable results in this case.\n\n\n\n\ntheme_set(new = theme_custom())\n\nset.seed(12345)\nGroceries_less &lt;- Groceries %&gt;%\n  filter(Product != \"Quaker Oats Life Cereal Original\")\n\nGroceries_less_long &lt;- Groceries_less %&gt;%\n  pivot_longer(\n    cols = c(Target, Walmart),\n    names_to = \"store\",\n    values_to = \"prices\"\n  )\n\nwilcox.test(Groceries_less$Walmart,\n  Groceries_less$Target,\n  paired = TRUE, digits.rank = 7,\n  conf.int = TRUE,\n  conf.level = 0.95\n) %&gt;%\n  broom::tidy()\n\nWarning in wilcox.test.default(Groceries_less$Walmart, Groceries_less$Target, :\ncannot compute exact p-value with ties\n\n\nWarning in wilcox.test.default(Groceries_less$Walmart, Groceries_less$Target, :\ncannot compute exact confidence interval with ties\n\n\nWarning in wilcox.test.default(Groceries_less$Walmart, Groceries_less$Target, :\ncannot compute exact p-value with zeroes\n\n\nWarning in wilcox.test.default(Groceries_less$Walmart, Groceries_less$Target, :\ncannot compute exact confidence interval with zeroes\n\n\n# A tibble: 1 × 7\n  estimate statistic p.value conf.low conf.high method               alternative\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;      \n1   -0.110        67 0.00349   -0.190   -0.0450 Wilcoxon signed ran… two.sided  \n\nobs_diff_price_less &lt;-\n  mean(~ (Target - Walmart), data = Groceries_less)\nobs_diff_price_less\n\n[1] 0.1558621\n\npolarity_less &lt;- c(rep(1, 15), rep(-1, 14))\n\nnull_dist_price_less &lt;-\n  do(9999) * mean(\n    data = Groceries_less,\n    ~ (Target - Walmart) * resample(polarity_less, replace = TRUE)\n  )\n\ngf_histogram(data = null_dist_price_less, ~mean) %&gt;%\n  gf_vline(\n    xintercept = obs_diff_price_less,\n    colour = \"red\"\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nmean(null_dist_price_less &gt;= obs_diff_price_less)\n\n[1] 0.01390139\n\n\nThe code focuses on analysing the price difference between Target and Walmart after removing “Quaker Oats Life Cereal Original” using a Wilcoxon signed rank test. The data is reshaped into a long format for comparison between the two stores. The Wilcoxon signed rank test shows a statistically significant result with an estimate of -0.1102, a p-value of 0.00349, and confidence intervals ranging from -0.1899 to -0.0450. A permutation test is also conducted, generating a null distribution of the mean differences between the two stores. The observed difference (marked by a red line) is plotted on a histogram of the null distribution, suggesting the observed difference is greater than expected under the null hypothesis. Overall, the analysis indicates that Target prices are significantly lower than Walmart prices for this specific product.\n\n\n\n\nlibrary(tidyverse) \nlibrary(ggformula) \nlibrary(mosaic) \nlibrary(broom) \nlibrary(infer) \n\n\nAttaching package: 'infer'\n\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\nlibrary(patchwork) \nlibrary(ggprism) \nlibrary(supernova) \n\n\n\n\n\nfrogs_orig &lt;- read_csv(\"../../data/frogs.csv\")\n\nRows: 60 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (4): Frogspawn sample id, Temperature13, Temperature18, Temperature25\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nfrogs_orig\n\n# A tibble: 60 × 4\n   `Frogspawn sample id` Temperature13 Temperature18 Temperature25\n                   &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n 1                     1            24            NA            NA\n 2                     2            NA            21            NA\n 3                     3            NA            NA            18\n 4                     4            26            NA            NA\n 5                     5            NA            22            NA\n 6                     6            NA            NA            14\n 7                     7            27            NA            NA\n 8                     8            NA            22            NA\n 9                     9            NA            NA            15\n10                    10            27            NA            NA\n# ℹ 50 more rows\n\n\nThe dataset displayed in the image titled “Frogs” contains frogspawn sample data with three different temperature measurements (13°C, 18°C, and 25°C). The dataset comprises 60 rows and 4 columns, with the columns labeled “Frogspawn sample,” “Temperature13,” “Temperature18,” and “Temperature25.” The “Frogspawn sample” column represents the sample IDs, while the temperature columns show frogspawn counts or measurements recorded at each respective temperature. The dataset includes missing values, represented by “NA,” across the temperature columns, indicating incomplete data for certain samples at specific temperatures.\n\n\n\n\nfrogs_orig %&gt;%\n  pivot_longer(\n    .,\n    cols = starts_with(\"Temperature\"),\n    cols_vary = \"fastest\",\n    \n    names_to = \"Temp\",\n    values_to = \"Time\"\n  ) %&gt;%\n  drop_na() %&gt;%\n  \n  separate_wider_regex(\n    cols = Temp,\n    patterns = c(\"Temperature\", TempFac = \"\\\\d+\"),\n    cols_remove = TRUE\n  ) %&gt;%\n## Convert Temp into TempFac, a 3-level factor\n  mutate(TempFac = factor(\n    x = TempFac,\n    levels = c(13, 18, 25),\n    labels = c(\"13\", \"18\", \"25\")\n  )) %&gt;%\n  rename(\"Id\" = `Frogspawn sample id`) -&gt; frogs_long\nfrogs_long\n\n# A tibble: 60 × 3\n      Id TempFac  Time\n   &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;\n 1     1 13         24\n 2     2 18         21\n 3     3 25         18\n 4     4 13         26\n 5     5 18         22\n 6     6 25         14\n 7     7 13         27\n 8     8 18         22\n 9     9 25         15\n10    10 13         27\n# ℹ 50 more rows\n\nfrogs_long %&gt;% count(TempFac)\n\n# A tibble: 3 × 2\n  TempFac     n\n  &lt;fct&gt;   &lt;int&gt;\n1 13         20\n2 18         20\n3 25         20\n\n\nThe dataset on frogs consists of observations of frogspawn samples at various temperatures (13°C, 18°C, and 25°C). The data cleaning process involves restructuring the dataset into a long format, renaming and separating columns to create a temperature factor variable (TempFac) with three levels representing the different temperatures. Missing values are dropped, and the cleaned dataset contains 60 observations, 20 for each temperature level. The table shows frogspawn sample IDs, the corresponding temperature factors, and the time recorded at each temperature. Finally, a count confirms that each temperature factor has exactly 20 observations.\n\n\n\n\ntheme_set(new = theme_custom())\n\ngf_histogram(~Time,\n  fill = ~TempFac,\n  data = frogs_long, alpha = 0.5\n) %&gt;%\n  gf_vline(xintercept = ~ mean(Time)) %&gt;%\n  gf_labs(\n    title = \"Histograms of Hatching Time Distributions vs Temperature\",\n    x = \"Hatching Time\", y = \"Count\"\n  ) %&gt;%\n  gf_text(7 ~ (mean(Time) + 2),\n    label = \"Overall Mean\"\n  ) %&gt;%\n  gf_refine(guides(fill = guide_legend(title = \"Temperature level (°C)\")))\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe plot presented shows histograms of hatching times across these temperature levels, with a vertical line representing the overall mean hatching time. The plot highlights the distribution of hatching times for each temperature level, revealing different patterns in hatching time depending on the temperature. The overall mean is marked for comparison.\n\n\n\n\ntheme_set(new = theme_custom())\n\ngf_boxplot(\n  data = frogs_long,\n  Time ~ TempFac,\n  fill = ~TempFac,\n  alpha = 0.5\n) %&gt;%\n  gf_vline(xintercept = ~ mean(Time)) %&gt;%\n  gf_labs(\n    title = \"Boxplots of Hatching Time Distributions vs Temperature\",\n    x = \"Temperature\", y = \"Hatching Time\",\n    caption = \"Using ggprism\"\n  ) %&gt;%\n  gf_refine(\n    scale_x_discrete(guide = \"prism_bracket\"),\n    guides(fill = guide_legend(title = \"Temperature level (°C)\"))\n  )\n\nWarning: The S3 guide system was deprecated in ggplot2 3.5.0.\nℹ It has been replaced by a ggproto system that can be extended.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe boxplot visualisation compares the distribution of hatching times across the different temperature levels. At 13°C, the median hatching time is higher, around 27–28 days, with a slight outlier. At 18°C, the hatching time decreases with a median around 21 days. At 25°C, the hatching time is the shortest, with the median around 17 days. The variation in hatching time reduces as the temperature increases, reflecting a clearer distinction in the relationship between temperature and hatching time. This trend demonstrates that higher temperatures result in shorter hatching periods.\n\n\n\n\nfrogs_anova &lt;- aov(Time ~ TempFac, data = frogs_long)\n\nThis creates an ANOVA model object, called frogs_anova.\n\n\n\n\ntheme_set(new = theme_custom())\n\nsupernova::pairwise(frogs_anova,\n  correction = \"Bonferroni\", \n  alpha = 0.05, \n  var_equal = TRUE, \n  plot = TRUE\n)\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\n\n\n\n── Pairwise t-tests with Bonferroni correction ─────────────────────────────────\n\n\nModel: Time ~ TempFac\n\n\nTempFac\n\n\nLevels: 3\n\n\nFamily-wise error-rate: 0.049\n\n\n\n  group_1 group_2    diff pooled_se       t    df   lower  upper p_adj\n  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 18      13       -5.300     0.257 -20.608    57  -5.861 -4.739 .0000\n2 25      13      -10.100     0.257 -39.272    57 -10.661 -9.539 .0000\n3 25      18       -4.800     0.257 -18.664    57  -5.361 -4.239 .0000\n\n\nThe error bar plot provides a comparison of the differences in hatching times between three temperature groups (13°C, 18°C, and 25°C), with confidence intervals based on Bonferroni correction. The differences between these groups are statistically significant (all p-values are less than 0.05), as shown by the pairwise comparisons of the group means. The intervals for each comparison do not overlap the zero line, indicating clear distinctions between the temperature groups’ effects on hatching time. For example, the difference between 25°C and 13°C is about -10.1 with a confidence interval from -10.66 to -9.54. These findings suggest that temperature significantly affects the hatching time, with higher temperatures generally leading to faster hatching.\n\n\n\n\nsupernova::supernova(frogs_anova)\n\n Analysis of Variance Table (Type III SS)\n Model: Time ~ TempFac\n\n                               SS df      MS       F   PRE     p\n ----- --------------- | -------- -- ------- ------- ----- -----\n Model (error reduced) | 1020.933  2 510.467 385.897 .9312 .0000\n Error (from model)    |   75.400 57   1.323                    \n ----- --------------- | -------- -- ------- ------- ----- -----\n Total (empty model)   | 1096.333 59  18.582                    \n\n\nThe analysis of variance (ANOVA) table provides insight into the model’s effectiveness in explaining the variation in hatching time as a function of temperature levels (TempFac). The table shows the following:\n\nModel (error reduced): The sum of squares (SS) for the model is 1020.933, with 2 degrees of freedom (df). The mean square (MS) is 510.467. The F-statistic is 385.897, with a p-value of 0.0000, indicating strong statistical significance. This suggests that the temperature factor explains a significant portion of the variance in hatching time.\nError (from model): The error SS is 75.400 with 57 degrees of freedom, giving an MS of 1.323. This reflects the variance not explained by the temperature levels.\nTotal (empty model): The total sum of squares is 1096.333, which is the sum of explained and unexplained variation in the model.\n\nOverall, the model is highly significant, with a p-value close to zero, confirming that temperature has a strong impact on the frogs’ hatching time.\n\n\n\n\nfrogs_overall &lt;- frogs_long %&gt;%\n  summarise(\n    overall_mean_time = mean(Time),\n\n    SST = sum((Time - overall_mean_time)^2),\n    n = n()\n  ) \nfrogs_overall\n\n# A tibble: 1 × 3\n  overall_mean_time   SST     n\n              &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1              21.2 1096.    60\n\n\nThis table calculates the overall sum of squares for the frogs’ hatching time data. The overall mean hatching time is 21.17 units, and the sum of squares total (SST) is 1096.333. This SST represents the total variation in hatching time that the model will attempt to explain. The sample size (n) consists of 60 frogspawn samples. This value of SST matches the total variation from the previous ANOVA table, which confirms the accuracy of the sum of squares calculation in the dataset.\n\n\n\n\nSST &lt;- frogs_overall$SST\nSST\n\n[1] 1096.333\n\n\nThis output displays the Sum of Squares Total (SST) value, which is calculated as 1096.333. This value represents the total variability in the dataset for the frogs’ hatching time. The SST reflects the overall variation that the model will partition into components explained by the temperature factors and those left unexplained by the model (residuals). This calculation is consistent with the overall SST value observed in the ANOVA table earlier.\n\n\n\n\nfrogs_within_groups &lt;- frogs_long %&gt;%\n  group_by(TempFac) %&gt;%\n  summarise(\n    grouped_mean_time = mean(Time),\n    grouped_variance_time = var(Time),\n    group_error_squares = sum((Time - grouped_mean_time)^2),\n    n = n()\n  )\nfrogs_within_groups\n\n# A tibble: 3 × 5\n  TempFac grouped_mean_time grouped_variance_time group_error_squares     n\n  &lt;fct&gt;               &lt;dbl&gt;                 &lt;dbl&gt;               &lt;dbl&gt; &lt;int&gt;\n1 13                   26.3                  1.27                24.2    20\n2 18                   21                    1.26                24      20\n3 25                   16.2                  1.43                27.2    20\n\nfrogs_SSE &lt;- frogs_within_groups %&gt;%\n  summarise(SSE = sum(group_error_squares))\n\nSSE &lt;- frogs_SSE$SSE\nSSE\n\n[1] 75.4\n\n\nThe analysis shows the calculation of sums of square errors (SSE) within each group of frogspawn samples across three different temperature levels (13°C, 18°C, and 25°C). The grouped mean time (average hatching time) for each temperature level was calculated: 26.3 for 13°C, 21.0 for 18°C, and 16.2 for 25°C. Each group’s variance and sum of square errors (the total variation within each group from the group mean) were also calculated. The total SSE was found to be 75.4, which quantifies the variation within the groups.\n\n\n\n\nSST\n\n[1] 1096.333\n\nSSE\n\n[1] 75.4\n\nSSA &lt;- SST - SSE\nSSA\n\n[1] 1020.933\n\n\nThis computes the sum of squares between groups (SSA) for the frog hatching time analysis. The total sum of squares (SST) is 1096.333, which represents the overall variation in the hatching times. The sum of square errors (SSE), which measures the variation within the temperature groups, was calculated to be 75.4. Finally, the sum of squares among groups (SSA), representing the variation between the different temperature levels, was found to be 1020.933 by subtracting SSE from SST. This indicates that most of the variation in hatching time is due to differences in the temperature levels.\n\n\n\n\ndf_SSE &lt;- frogs_long %&gt;%\n  \n  group_by(TempFac) %&gt;%\n  summarise(per_group_df_SSE = n() - 1) %&gt;%\n  summarise(df_SSE = sum(per_group_df_SSE)) %&gt;%\n  as.numeric()\n\ndf_SST &lt;- frogs_long %&gt;%\n  summarise(df_SST = n() - 1) %&gt;%\n  as.integer()\n\nk &lt;- length(unique(frogs_long$TempFac))\ndf_SSA &lt;- k - 1\n\n\ndf_SST\n\n[1] 59\n\ndf_SSE\n\n[1] 57\n\ndf_SSA\n\n[1] 2\n\n\nThe degrees of freedom (df) for the sum of squares are calculated as follows: for the total sum of squares (SST), the degrees of freedom are 59. For the sum of square errors (SSE), the degrees of freedom are 57, which represents the number of data points minus the number of groups. Finally, for the sum of squares among groups (SSA), the degrees of freedom are 2, reflecting the number of temperature groups minus 1.\n\n\n\n\nMSE &lt;- frogs_within_groups %&gt;%\n  summarise(mean_square_error = sum(group_error_squares / df_SSE)) %&gt;%\n  as.numeric()\nMSE\n\n[1] 1.322807\n\n\nThe code calculates the Mean Square Error (MSE) from the frog dataset. It first takes the group_error_squares (which are the sum of squared differences from the group means) and divides them by the degrees of freedom for the error term (df_SSE). The result, 1.322807, represents the average variation within the groups. MSE is a key component in an ANOVA analysis, as it quantifies the variance within each group and is used in hypothesis testing to compare the means across different groups.\n\n\n\n\nMSA &lt;- SSA / df_SSA \nMSA\n\n[1] 510.4667\n\n\nThis computes the Mean Square for the Factor (MSA) by dividing the sum of squares for the factor (SSA) by its degrees of freedom (df_SSA). The resulting value, 510.4667, represents the average variation between the group means. This MSA value is essential in the ANOVA calculation as it is used to determine the F-statistic, comparing the variation between the groups (due to the factor) to the variation within the groups (from the MSE) to assess if the differences between group means are statistically significant.\n\n\n\n\nF_stat &lt;- MSA / MSE\nF_stat\n\n[1] 385.8966\n\n\nThe code calculates the F-statistic for the ANOVA test by dividing the Mean Square for the Factor (MSA) by the Mean Square for Error (MSE). The resulting F-statistic value is 385.8966. This value helps determine whether there is a statistically significant difference between the group means. A higher F-statistic generally indicates that the variation between the groups is more significant than the variation within the groups, leading to stronger evidence against the null hypothesis that all group means are equal.\n\n\n\n\nF_crit &lt;-\n  qf(\n    p = (1 - 0.05 / 3), \n    df1 = df_SSA, \n    df2 = df_SSE \n  )\nF_crit\n\n[1] 4.403048\n\nF_stat\n\n[1] 385.8966\n\n\nThe code calculates the critical F-value (F_crit) for an ANOVA test, given a significance level adjusted for multiple comparisons (0.05/3) and the degrees of freedom for both the factor (df_SSA) and error (df_SSE). The F_crit value is 4.403048. The F_stat, calculated earlier, is 385.8966. Since the F_stat is much larger than the F_crit, this suggests a significant difference between the groups, providing strong evidence to reject the null hypothesis.\n\n\n\n\ntheme_set(new = theme_custom())\n\nmosaic::xpf(\n  q = F_crit,\n  df1 = df_SSA, df2 = df_SSE, method = \"gg\",\n  log.p = FALSE, lower.tail = TRUE,\n  return = \"plot\"\n) %&gt;%\n  gf_vline(xintercept = F_crit) %&gt;%\n  gf_label(0.75 ~ 5,\n    label = \"F_critical\",\n    inherit = F, show.legend = F\n  ) %&gt;%\n  gf_labs(\n    title = \"F distribution for Frogs Data\",\n    subtitle = \"F_critical = 4.403\"\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThe F distribution plot for the frog data, with the calculated critical F value of 4.403, visually illustrates the density distribution of F values under the null hypothesis. The plot shows a steep decrease in probability density as F values increase, with most of the probability mass concentrated near zero. The shaded area in purple (A: 0.983) represents the region where the observed F-statistic is less than the critical F value, while the small green area (B: 0.017) represents the region beyond the critical value. Since the calculated F-statistic (385.897) is far beyond the critical value, we reject the null hypothesis, suggesting that temperature levels significantly impact hatching time. This conclusion is based on the comparison of the observed F-statistic with the critical threshold in the F distribution.\n\n\n\n\nsupernova::equation(frogs_anova)\n\nFitted equation:\nTime = 26.3 + -5.3*TempFac18 + -10.1*TempFac25 + e\n\n\nThe linear equation suggests that at a baseline temperature (13°C), the average hatching time is 26.3 days. When the temperature increases to 18°C (TempFac18), the hatching time decreases by 5.3 days, and when the temperature reaches 25°C (TempFac25), the hatching time decreases further by 10.1 days. The residual error is represented by eee, accounting for any variation not explained by the temperature levels. This equation illustrates a clear negative relationship between temperature and hatching time: as temperature increases, hatching time decreases.\n\n\n\n\nshapiro.test(x = frogs_long$Time)\n\n\n    Shapiro-Wilk normality test\n\ndata:  frogs_long$Time\nW = 0.92752, p-value = 0.001561\n\n\nThe Shapiro-Wilk normality test was conducted on the variable “Time” from the “frogs_long” dataset to check whether the data follows a normal distribution. The test result produced a W statistic of 0.92752 and a p-value of 0.001561. Since the p-value is below the typical significance threshold of 0.05, we reject the null hypothesis that the data is normally distributed. Therefore, the “Time” data does not follow a normal distribution, indicating potential skewness or deviation from normality.\n\n\n\n\nfrogs_long %&gt;%\n  group_by(TempFac) %&gt;%\n  group_modify(~ .x %&gt;%\n    select(Time) %&gt;%\n    as_vector() %&gt;%\n    shapiro.test() %&gt;%\n    broom::tidy())\n\n# A tibble: 3 × 4\n# Groups:   TempFac [3]\n  TempFac statistic p.value method                     \n  &lt;fct&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                      \n1 13          0.890  0.0264 Shapiro-Wilk normality test\n2 18          0.925  0.126  Shapiro-Wilk normality test\n3 25          0.898  0.0377 Shapiro-Wilk normality test\n\n\nThe Shapiro-Wilk normality test was conducted on the “Time” data across different temperature levels (TempFac) of 13°C, 18°C, and 25°C. The results show that for TempFac 13°C, the W statistic is 0.8895 with a p-value of 0.0264, suggesting a deviation from normality as the p-value is less than 0.05. For TempFac 18°C, the W statistic is 0.9254 with a p-value of 0.1261, which indicates no significant departure from normality at the 0.05 level. Similarly, for TempFac 25°C, the W statistic is 0.8979 with a p-value of 0.0377, also showing a marginal deviation from normality. Overall, while TempFac 18°C appears to be normally distributed, the other two temperature levels show some departure from normality.\n\ntheme_set(new = theme_custom())\n\nfrogs_anova$residuals %&gt;%\n  as_tibble() %&gt;%\n  gf_dhistogram(~value, data = .) %&gt;%\n  gf_fitdistr()\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nfrogs_anova$residuals %&gt;%\n  as_tibble() %&gt;%\n  gf_qq(~value, data = .) %&gt;%\n  gf_qqstep() %&gt;%\n  gf_qqline()\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\nshapiro.test(frogs_anova$residuals)\n\n\n    Shapiro-Wilk normality test\n\ndata:  frogs_anova$residuals\nW = 0.94814, p-value = 0.01275\n\n\nThis checks the normality of residuals from an ANOVA model (frogs_anova$residuals) by using both graphical and statistical methods. First, a histogram with a fitted distribution is created, which visualizes the residuals to check if they approximately follow a normal distribution. Next, a QQ plot (Quantile-Quantile plot) is generated with the gf_qq function to further assess the normality of the residuals by comparing the observed quantiles of the residuals with the expected quantiles from a standard normal distribution. Finally, a Shapiro-Wilk test is conducted on the residuals to provide a formal test of normality, where the null hypothesis is that the data is normally distributed. The results of the Shapiro-Wilk test and the plots together help determine whether the residuals meet the assumption of normality, which is important for validating the ANOVA model.\n\n\n\n\nfrogs_long %&gt;%\n  group_by(TempFac) %&gt;%\n  summarise(variance = var(Time))\n\n# A tibble: 3 × 2\n  TempFac variance\n  &lt;fct&gt;      &lt;dbl&gt;\n1 13          1.27\n2 18          1.26\n3 25          1.43\n\nDescTools::LeveneTest(Time ~ TempFac, data = frogs_long)\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  2  0.3931 0.6768\n      57               \n\nfligner.test(Time ~ TempFac, data = frogs_long)\n\n\n    Fligner-Killeen test of homogeneity of variances\n\ndata:  Time by TempFac\nFligner-Killeen:med chi-squared = 0.53898, df = 2, p-value = 0.7638\n\n\nThe data being analysed involves three temperature levels (13°C, 18°C, and 25°C) and their impact on hatching times of frogspawn samples. A variance test was conducted to check for homogeneity across the temperature groups. The variance values for the groups were approximately 1.27, 1.26, and 1.43, respectively. Two statistical tests, Levene’s test and the Fligner-Killeen test, were performed to check if variances between the groups are statistically equal. The Levene’s test returned a p-value of 0.6768, and the Fligner-Killeen test gave a p-value of 0.7638, both of which are greater than 0.05, indicating that the assumption of equal variances holds across the temperature groups. This justifies the use of ANOVA or similar tests under the assumption of homogeneity of variance.\n\n\n\n\ntheme_set(new = theme_custom())\n\nfrogs_supernova &lt;-\n  supernova::pairwise(frogs_anova,\n    plot = TRUE,\n    alpha = 0.05,\n    correction = \"Bonferroni\"\n  )\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThis applies the Bonferroni correction in a pairwise comparison of the ANOVA model for frog data, using the supernova::pairwise function. The output plot represents 95.1% confidence intervals (CI) for pairwise comparisons between the temperature levels (13°C, 18°C, and 25°C). The error bars indicate the confidence intervals for the differences in hatching times between these temperatures. The confidence intervals help to determine whether the differences between groups are statistically significant; intervals that do not overlap zero indicate significant differences.\n\n\n\n\nfrogs_supernova\n\n\n\n\n── Pairwise t-tests with Bonferroni correction ─────────────────────────────────\n\n\nModel: Time ~ TempFac\n\n\nTempFac\n\n\nLevels: 3\n\n\nFamily-wise error-rate: 0.049\n\n\n\n  group_1 group_2    diff pooled_se       t    df   lower  upper p_adj\n  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 18      13       -5.300     0.257 -20.608    57  -5.861 -4.739 .0000\n2 25      13      -10.100     0.257 -39.272    57 -10.661 -9.539 .0000\n3 25      18       -4.800     0.257 -18.664    57  -5.361 -4.239 .0000\n\n\nThe results from the pairwise t-tests with Bonferroni correction provide insights into the comparison of hatching times across three temperature levels (13°C, 18°C, and 25°C). The family-wise error rate is set at 0.049 to account for multiple comparisons. The table displays differences between groups, their pooled standard errors, t-values, degrees of freedom (df), and adjusted p-values. All comparisons between the temperature groups are significant (p_adj = 0.000), suggesting that the hatching times significantly differ between the temperature levels, with higher t-values indicating stronger evidence against the null hypothesis.\n\n\n\n\nobserved_infer &lt;-\n  frogs_long %&gt;%\n  specify(Time ~ TempFac) %&gt;%\n  hypothesise(null = \"independence\") %&gt;%\n  calculate(stat = \"F\")\nobserved_infer\n\nResponse: Time (numeric)\nExplanatory: TempFac (factor)\nNull Hypothesis: independence\n# A tibble: 1 × 1\n   stat\n  &lt;dbl&gt;\n1  386.\n\n\nThe output shows the result of calculating the observed F-statistic for testing the independence between the variables Time and TempFac (temperature factor). The F-statistic calculated is approximately 385.8966, indicating a strong deviation from the null hypothesis of independence. This value suggests that there is a significant difference between the means of the hatching times across the different temperature levels. This high F-statistic provides further evidence that temperature has a substantial effect on the hatching time.\n\n\n\n\nnull_dist_infer &lt;- frogs_long %&gt;%\n  specify(Time ~ TempFac) %&gt;%\n  hypothesise(null = \"independence\") %&gt;%\n  generate(reps = 4999, type = \"permute\") %&gt;%\n  calculate(stat = \"F\")\n\nnull_dist_infer\n\nResponse: Time (numeric)\nExplanatory: TempFac (factor)\nNull Hypothesis: independence\n# A tibble: 4,999 × 2\n   replicate   stat\n       &lt;int&gt;  &lt;dbl&gt;\n 1         1 1.08  \n 2         2 3.30  \n 3         3 5.51  \n 4         4 3.85  \n 5         5 0.189 \n 6         6 0.412 \n 7         7 2.75  \n 8         8 1.54  \n 9         9 0.0974\n10        10 2.92  \n# ℹ 4,989 more rows\n\n\nThe output represents a permutation test to generate a null distribution of F-statistics. The hypothesis test involves shuffling the data 4,999 times to simulate what the F-statistics would be if the null hypothesis of independence between hatching time and temperature levels (TempFac) were true. The results show a wide range of F-statistic values, starting with values such as 2.40, 3.47, and 4.28. These values serve as a basis to compare the observed F-statistic (385.8966). If the observed F-statistic significantly exceeds these values, it provides strong evidence against the null hypothesis.\n\n\n\n\nnull_dist_infer %&gt;%\n  visualise(method = \"simulation\") +\n  shade_p_value(obs_stat = observed_infer$stat, direction = \"right\") +\n  scale_x_continuous(trans = \"log10\", expand = c(0, 0)) +\n  coord_cartesian(xlim = c(0.2, 500), clip = \"off\") +\n  annotation_logticks(outside = FALSE) +\n  theme_custom()\n\nWarning in transformation$transform(x): NaNs produced\n\n\nWarning in scale_x_continuous(trans = \"log10\", expand = c(0, 0)): log-10\ntransformation introduced infinite values.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\n\n\nThis visualizes the null distribution of the F-statistic generated through simulation. The plot shows the frequency distribution of F-statistics under the null hypothesis of independence between hatching time and temperature levels. The x-axis is displayed on a logarithmic scale, and the observed F-statistic (indicated by the red line) is far to the right, well beyond the range of most simulated F-values. This suggests that the observed F-statistic is highly significant and unlikely to occur under the null hypothesis, providing strong evidence against it."
  }
]